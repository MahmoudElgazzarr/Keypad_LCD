
BCDSevegments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002db2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00002e06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00002e06  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002e38  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00002e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001746  00000000  00000000  00002f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000084b  00000000  00000000  000046ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001504  00000000  00000000  00004f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  0000640c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000503  00000000  00000000  0000669c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ac  00000000  00000000  00006b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  0000704b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61
      60:	0e 94 66 06 	call	0xccc	; 0xccc <main>
      64:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <_exit>

00000068 <__bad_interrupt>:
      68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <BCDSevegments_Init>:
	}
	if(segment_Number == 4)
	{
		DIO_WritePin(BCDSEVSEGMENTS4_Enable_PIN,LOW);
	}
}
      6c:	cf 93       	push	r28
      6e:	df 93       	push	r29
      70:	cd b7       	in	r28, 0x3d	; 61
      72:	de b7       	in	r29, 0x3e	; 62
      74:	61 e0       	ldi	r22, 0x01	; 1
      76:	8a e1       	ldi	r24, 0x1A	; 26
      78:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      7c:	61 e0       	ldi	r22, 0x01	; 1
      7e:	8b e1       	ldi	r24, 0x1B	; 27
      80:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      84:	61 e0       	ldi	r22, 0x01	; 1
      86:	8e e1       	ldi	r24, 0x1E	; 30
      88:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      8c:	61 e0       	ldi	r22, 0x01	; 1
      8e:	8f e1       	ldi	r24, 0x1F	; 31
      90:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      94:	61 e0       	ldi	r22, 0x01	; 1
      96:	88 e0       	ldi	r24, 0x08	; 8
      98:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      9c:	61 e0       	ldi	r22, 0x01	; 1
      9e:	89 e0       	ldi	r24, 0x09	; 9
      a0:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      a4:	61 e0       	ldi	r22, 0x01	; 1
      a6:	8a e0       	ldi	r24, 0x0A	; 10
      a8:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      ac:	61 e0       	ldi	r22, 0x01	; 1
      ae:	8b e0       	ldi	r24, 0x0B	; 11
      b0:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      b4:	60 e0       	ldi	r22, 0x00	; 0
      b6:	8a e1       	ldi	r24, 0x1A	; 26
      b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      bc:	60 e0       	ldi	r22, 0x00	; 0
      be:	8b e1       	ldi	r24, 0x1B	; 27
      c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      c4:	60 e0       	ldi	r22, 0x00	; 0
      c6:	8e e1       	ldi	r24, 0x1E	; 30
      c8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	8f e1       	ldi	r24, 0x1F	; 31
      d0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      d4:	00 00       	nop
      d6:	df 91       	pop	r29
      d8:	cf 91       	pop	r28
      da:	08 95       	ret

000000dc <BCDSevegments_enable>:
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	1f 92       	push	r1
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
      e6:	89 83       	std	Y+1, r24	; 0x01
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	81 30       	cpi	r24, 0x01	; 1
      ec:	21 f4       	brne	.+8      	; 0xf6 <BCDSevegments_enable+0x1a>
      ee:	61 e0       	ldi	r22, 0x01	; 1
      f0:	8a e1       	ldi	r24, 0x1A	; 26
      f2:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      f6:	89 81       	ldd	r24, Y+1	; 0x01
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	21 f4       	brne	.+8      	; 0x104 <BCDSevegments_enable+0x28>
      fc:	61 e0       	ldi	r22, 0x01	; 1
      fe:	8b e1       	ldi	r24, 0x1B	; 27
     100:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	83 30       	cpi	r24, 0x03	; 3
     108:	21 f4       	brne	.+8      	; 0x112 <BCDSevegments_enable+0x36>
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	8e e1       	ldi	r24, 0x1E	; 30
     10e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	84 30       	cpi	r24, 0x04	; 4
     116:	21 f4       	brne	.+8      	; 0x120 <BCDSevegments_enable+0x44>
     118:	61 e0       	ldi	r22, 0x01	; 1
     11a:	8f e1       	ldi	r24, 0x1F	; 31
     11c:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     120:	00 00       	nop
     122:	0f 90       	pop	r0
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <BCDSevegments_displayNo>:
void BCDSevegments_displayNo(uint8 number)
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	1f 92       	push	r1
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	89 83       	std	Y+1, r24	; 0x01
	if (number == 0)
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	88 23       	and	r24, r24
     13a:	89 f4       	brne	.+34     	; 0x15e <BCDSevegments_displayNo+0x34>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	88 e0       	ldi	r24, 0x08	; 8
     140:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	89 e0       	ldi	r24, 0x09	; 9
     148:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	8a e0       	ldi	r24, 0x0A	; 10
     150:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	8b e0       	ldi	r24, 0x0B	; 11
     158:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     15c:	b3 c0       	rjmp	.+358    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 1)
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	89 f4       	brne	.+34     	; 0x186 <BCDSevegments_displayNo+0x5c>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	88 e0       	ldi	r24, 0x08	; 8
     168:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	89 e0       	ldi	r24, 0x09	; 9
     170:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	8a e0       	ldi	r24, 0x0A	; 10
     178:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	8b e0       	ldi	r24, 0x0B	; 11
     180:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     184:	9f c0       	rjmp	.+318    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 2)
     186:	89 81       	ldd	r24, Y+1	; 0x01
     188:	82 30       	cpi	r24, 0x02	; 2
     18a:	89 f4       	brne	.+34     	; 0x1ae <BCDSevegments_displayNo+0x84>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	88 e0       	ldi	r24, 0x08	; 8
     190:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	89 e0       	ldi	r24, 0x09	; 9
     198:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	8a e0       	ldi	r24, 0x0A	; 10
     1a0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1a4:	60 e0       	ldi	r22, 0x00	; 0
     1a6:	8b e0       	ldi	r24, 0x0B	; 11
     1a8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1ac:	8b c0       	rjmp	.+278    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 3)
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	83 30       	cpi	r24, 0x03	; 3
     1b2:	89 f4       	brne	.+34     	; 0x1d6 <BCDSevegments_displayNo+0xac>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     1b4:	61 e0       	ldi	r22, 0x01	; 1
     1b6:	88 e0       	ldi	r24, 0x08	; 8
     1b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     1bc:	61 e0       	ldi	r22, 0x01	; 1
     1be:	89 e0       	ldi	r24, 0x09	; 9
     1c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	8a e0       	ldi	r24, 0x0A	; 10
     1c8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1cc:	60 e0       	ldi	r22, 0x00	; 0
     1ce:	8b e0       	ldi	r24, 0x0B	; 11
     1d0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1d4:	77 c0       	rjmp	.+238    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if (number == 4)
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	84 30       	cpi	r24, 0x04	; 4
     1da:	89 f4       	brne	.+34     	; 0x1fe <BCDSevegments_displayNo+0xd4>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	88 e0       	ldi	r24, 0x08	; 8
     1e0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	89 e0       	ldi	r24, 0x09	; 9
     1e8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     1ec:	61 e0       	ldi	r22, 0x01	; 1
     1ee:	8a e0       	ldi	r24, 0x0A	; 10
     1f0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	8b e0       	ldi	r24, 0x0B	; 11
     1f8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1fc:	63 c0       	rjmp	.+198    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 5)
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	85 30       	cpi	r24, 0x05	; 5
     202:	89 f4       	brne	.+34     	; 0x226 <BCDSevegments_displayNo+0xfc>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     204:	61 e0       	ldi	r22, 0x01	; 1
     206:	88 e0       	ldi	r24, 0x08	; 8
     208:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	89 e0       	ldi	r24, 0x09	; 9
     210:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     214:	61 e0       	ldi	r22, 0x01	; 1
     216:	8a e0       	ldi	r24, 0x0A	; 10
     218:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	8b e0       	ldi	r24, 0x0B	; 11
     220:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     224:	4f c0       	rjmp	.+158    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 6)
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	86 30       	cpi	r24, 0x06	; 6
     22a:	89 f4       	brne	.+34     	; 0x24e <BCDSevegments_displayNo+0x124>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	88 e0       	ldi	r24, 0x08	; 8
     230:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	89 e0       	ldi	r24, 0x09	; 9
     238:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	8a e0       	ldi	r24, 0x0A	; 10
     240:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	8b e0       	ldi	r24, 0x0B	; 11
     248:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     24c:	3b c0       	rjmp	.+118    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 7)
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	87 30       	cpi	r24, 0x07	; 7
     252:	89 f4       	brne	.+34     	; 0x276 <BCDSevegments_displayNo+0x14c>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	88 e0       	ldi	r24, 0x08	; 8
     258:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	89 e0       	ldi	r24, 0x09	; 9
     260:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     264:	61 e0       	ldi	r22, 0x01	; 1
     266:	8a e0       	ldi	r24, 0x0A	; 10
     268:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	8b e0       	ldi	r24, 0x0B	; 11
     270:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     274:	27 c0       	rjmp	.+78     	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 8)
     276:	89 81       	ldd	r24, Y+1	; 0x01
     278:	88 30       	cpi	r24, 0x08	; 8
     27a:	89 f4       	brne	.+34     	; 0x29e <BCDSevegments_displayNo+0x174>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	88 e0       	ldi	r24, 0x08	; 8
     280:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	89 e0       	ldi	r24, 0x09	; 9
     288:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	8a e0       	ldi	r24, 0x0A	; 10
     290:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	8b e0       	ldi	r24, 0x0B	; 11
     298:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     29c:	13 c0       	rjmp	.+38     	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
	else if(number == 9)
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	89 30       	cpi	r24, 0x09	; 9
     2a2:	81 f4       	brne	.+32     	; 0x2c4 <BCDSevegments_displayNo+0x19a>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     2a4:	61 e0       	ldi	r22, 0x01	; 1
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	89 e0       	ldi	r24, 0x09	; 9
     2b0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	8a e0       	ldi	r24, 0x0A	; 10
     2b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	8b e0       	ldi	r24, 0x0B	; 11
     2c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	}
     2c4:	00 00       	nop
     2c6:	0f 90       	pop	r0
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <DIO_WritePin>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "BitwiseOperation.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <DIO_WritePin+0x6>
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	89 83       	std	Y+1, r24	; 0x01
     2da:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNum >= 0 && PinNum < 8 )
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	88 30       	cpi	r24, 0x08	; 8
     2e0:	78 f5       	brcc	.+94     	; 0x340 <DIO_WritePin+0x72>
	{
			if(PinValue == 1)
     2e2:	8a 81       	ldd	r24, Y+2	; 0x02
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	a1 f4       	brne	.+40     	; 0x310 <DIO_WritePin+0x42>
			{
				Set_Bit( PORTA , PinNum);
     2e8:	8b e3       	ldi	r24, 0x3B	; 59
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	2b e3       	ldi	r18, 0x3B	; 59
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	f9 01       	movw	r30, r18
     2f2:	20 81       	ld	r18, Z
     2f4:	62 2f       	mov	r22, r18
     2f6:	29 81       	ldd	r18, Y+1	; 0x01
     2f8:	42 2f       	mov	r20, r18
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	21 e0       	ldi	r18, 0x01	; 1
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_WritePin+0x38>
     302:	22 0f       	add	r18, r18
     304:	33 1f       	adc	r19, r19
     306:	4a 95       	dec	r20
     308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_WritePin+0x34>
     30a:	26 2b       	or	r18, r22
     30c:	fc 01       	movw	r30, r24
     30e:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	88 23       	and	r24, r24
     314:	a9 f4       	brne	.+42     	; 0x340 <DIO_WritePin+0x72>
			{
				Clear_Bit( PORTA , PinNum);
     316:	8b e3       	ldi	r24, 0x3B	; 59
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	2b e3       	ldi	r18, 0x3B	; 59
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	f9 01       	movw	r30, r18
     320:	20 81       	ld	r18, Z
     322:	62 2f       	mov	r22, r18
     324:	29 81       	ldd	r18, Y+1	; 0x01
     326:	42 2f       	mov	r20, r18
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	21 e0       	ldi	r18, 0x01	; 1
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_WritePin+0x66>
     330:	22 0f       	add	r18, r18
     332:	33 1f       	adc	r19, r19
     334:	4a 95       	dec	r20
     336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_WritePin+0x62>
     338:	20 95       	com	r18
     33a:	26 23       	and	r18, r22
     33c:	fc 01       	movw	r30, r24
     33e:	20 83       	st	Z, r18
			}
	}
	if(PinNum > 7 && PinNum < 16)
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	88 30       	cpi	r24, 0x08	; 8
     344:	c0 f1       	brcs	.+112    	; 0x3b6 <DIO_WritePin+0xe8>
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	80 31       	cpi	r24, 0x10	; 16
     34a:	a8 f5       	brcc	.+106    	; 0x3b6 <DIO_WritePin+0xe8>
	{
		if(PinValue == 1)
     34c:	8a 81       	ldd	r24, Y+2	; 0x02
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	b9 f4       	brne	.+46     	; 0x380 <DIO_WritePin+0xb2>
		{
			Set_Bit( PORTB , (PinNum-8));
     352:	88 e3       	ldi	r24, 0x38	; 56
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	28 e3       	ldi	r18, 0x38	; 56
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	f9 01       	movw	r30, r18
     35c:	20 81       	ld	r18, Z
     35e:	62 2f       	mov	r22, r18
     360:	29 81       	ldd	r18, Y+1	; 0x01
     362:	22 2f       	mov	r18, r18
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	a9 01       	movw	r20, r18
     368:	48 50       	subi	r20, 0x08	; 8
     36a:	51 09       	sbc	r21, r1
     36c:	21 e0       	ldi	r18, 0x01	; 1
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_WritePin+0xa8>
     372:	22 0f       	add	r18, r18
     374:	33 1f       	adc	r19, r19
     376:	4a 95       	dec	r20
     378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_WritePin+0xa4>
     37a:	26 2b       	or	r18, r22
     37c:	fc 01       	movw	r30, r24
     37e:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
     380:	8a 81       	ldd	r24, Y+2	; 0x02
     382:	88 23       	and	r24, r24
     384:	c1 f4       	brne	.+48     	; 0x3b6 <DIO_WritePin+0xe8>
		{
			Clear_Bit( PORTB , (PinNum-8));
     386:	88 e3       	ldi	r24, 0x38	; 56
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	28 e3       	ldi	r18, 0x38	; 56
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	f9 01       	movw	r30, r18
     390:	20 81       	ld	r18, Z
     392:	62 2f       	mov	r22, r18
     394:	29 81       	ldd	r18, Y+1	; 0x01
     396:	22 2f       	mov	r18, r18
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	a9 01       	movw	r20, r18
     39c:	48 50       	subi	r20, 0x08	; 8
     39e:	51 09       	sbc	r21, r1
     3a0:	21 e0       	ldi	r18, 0x01	; 1
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_WritePin+0xdc>
     3a6:	22 0f       	add	r18, r18
     3a8:	33 1f       	adc	r19, r19
     3aa:	4a 95       	dec	r20
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_WritePin+0xd8>
     3ae:	20 95       	com	r18
     3b0:	26 23       	and	r18, r22
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18
		}
	}
	if(PinNum > 15 && PinNum < 24)
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	80 31       	cpi	r24, 0x10	; 16
     3ba:	c0 f1       	brcs	.+112    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	88 31       	cpi	r24, 0x18	; 24
     3c0:	a8 f5       	brcc	.+106    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	{
		if(PinValue == 1)
     3c2:	8a 81       	ldd	r24, Y+2	; 0x02
     3c4:	81 30       	cpi	r24, 0x01	; 1
     3c6:	b9 f4       	brne	.+46     	; 0x3f6 <DIO_WritePin+0x128>
		{
			Set_Bit( PORTC , (PinNum-16));
     3c8:	85 e3       	ldi	r24, 0x35	; 53
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	25 e3       	ldi	r18, 0x35	; 53
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	f9 01       	movw	r30, r18
     3d2:	20 81       	ld	r18, Z
     3d4:	62 2f       	mov	r22, r18
     3d6:	29 81       	ldd	r18, Y+1	; 0x01
     3d8:	22 2f       	mov	r18, r18
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	a9 01       	movw	r20, r18
     3de:	40 51       	subi	r20, 0x10	; 16
     3e0:	51 09       	sbc	r21, r1
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_WritePin+0x11e>
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
     3ec:	4a 95       	dec	r20
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_WritePin+0x11a>
     3f0:	26 2b       	or	r18, r22
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
     3f6:	8a 81       	ldd	r24, Y+2	; 0x02
     3f8:	88 23       	and	r24, r24
     3fa:	c1 f4       	brne	.+48     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		{
			Clear_Bit( PORTC , (PinNum-16));
     3fc:	85 e3       	ldi	r24, 0x35	; 53
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	25 e3       	ldi	r18, 0x35	; 53
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	f9 01       	movw	r30, r18
     406:	20 81       	ld	r18, Z
     408:	62 2f       	mov	r22, r18
     40a:	29 81       	ldd	r18, Y+1	; 0x01
     40c:	22 2f       	mov	r18, r18
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	a9 01       	movw	r20, r18
     412:	40 51       	subi	r20, 0x10	; 16
     414:	51 09       	sbc	r21, r1
     416:	21 e0       	ldi	r18, 0x01	; 1
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41c:	22 0f       	add	r18, r18
     41e:	33 1f       	adc	r19, r19
     420:	4a 95       	dec	r20
     422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     424:	20 95       	com	r18
     426:	26 23       	and	r18, r22
     428:	fc 01       	movw	r30, r24
     42a:	20 83       	st	Z, r18
		}
	}
	
	if(PinNum > 24 && PinNum < 32)
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	89 31       	cpi	r24, 0x19	; 25
     430:	c0 f1       	brcs	.+112    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	80 32       	cpi	r24, 0x20	; 32
     436:	a8 f5       	brcc	.+106    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
	{
			if(PinValue == 1)
     438:	8a 81       	ldd	r24, Y+2	; 0x02
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	b9 f4       	brne	.+46     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			{
				Set_Bit( PORTD , (PinNum-24));
     43e:	82 e3       	ldi	r24, 0x32	; 50
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	22 e3       	ldi	r18, 0x32	; 50
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	f9 01       	movw	r30, r18
     448:	20 81       	ld	r18, Z
     44a:	62 2f       	mov	r22, r18
     44c:	29 81       	ldd	r18, Y+1	; 0x01
     44e:	22 2f       	mov	r18, r18
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	a9 01       	movw	r20, r18
     454:	48 51       	subi	r20, 0x18	; 24
     456:	51 09       	sbc	r21, r1
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45e:	22 0f       	add	r18, r18
     460:	33 1f       	adc	r19, r19
     462:	4a 95       	dec	r20
     464:	e2 f7       	brpl	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     466:	26 2b       	or	r18, r22
     468:	fc 01       	movw	r30, r24
     46a:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
     46c:	8a 81       	ldd	r24, Y+2	; 0x02
     46e:	88 23       	and	r24, r24
     470:	c1 f4       	brne	.+48     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			{
				Clear_Bit( PORTD , (PinNum-24));
     472:	82 e3       	ldi	r24, 0x32	; 50
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	22 e3       	ldi	r18, 0x32	; 50
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	f9 01       	movw	r30, r18
     47c:	20 81       	ld	r18, Z
     47e:	62 2f       	mov	r22, r18
     480:	29 81       	ldd	r18, Y+1	; 0x01
     482:	22 2f       	mov	r18, r18
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	a9 01       	movw	r20, r18
     488:	48 51       	subi	r20, 0x18	; 24
     48a:	51 09       	sbc	r21, r1
     48c:	21 e0       	ldi	r18, 0x01	; 1
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	02 c0       	rjmp	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     492:	22 0f       	add	r18, r18
     494:	33 1f       	adc	r19, r19
     496:	4a 95       	dec	r20
     498:	e2 f7       	brpl	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     49a:	20 95       	com	r18
     49c:	26 23       	and	r18, r22
     49e:	fc 01       	movw	r30, r24
     4a0:	20 83       	st	Z, r18
			}
	}
}
     4a2:	00 00       	nop
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <DIO_SetPinDirection>:
/*
pindirection = 1 output
pindirection = 0 input
*/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <DIO_SetPinDirection+0x6>
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	89 83       	std	Y+1, r24	; 0x01
     4ba:	6a 83       	std	Y+2, r22	; 0x02
		if(PinNum >= 0 && PinNum < 8 )
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	88 30       	cpi	r24, 0x08	; 8
     4c0:	78 f5       	brcc	.+94     	; 0x520 <DIO_SetPinDirection+0x72>
		{
			if(PinDirection== 1)
     4c2:	8a 81       	ldd	r24, Y+2	; 0x02
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	a1 f4       	brne	.+40     	; 0x4f0 <DIO_SetPinDirection+0x42>
			{
				Set_Bit( DDRA , PinNum);
     4c8:	8a e3       	ldi	r24, 0x3A	; 58
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	2a e3       	ldi	r18, 0x3A	; 58
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	f9 01       	movw	r30, r18
     4d2:	20 81       	ld	r18, Z
     4d4:	62 2f       	mov	r22, r18
     4d6:	29 81       	ldd	r18, Y+1	; 0x01
     4d8:	42 2f       	mov	r20, r18
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	21 e0       	ldi	r18, 0x01	; 1
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_SetPinDirection+0x38>
     4e2:	22 0f       	add	r18, r18
     4e4:	33 1f       	adc	r19, r19
     4e6:	4a 95       	dec	r20
     4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_SetPinDirection+0x34>
     4ea:	26 2b       	or	r18, r22
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     4f0:	8a 81       	ldd	r24, Y+2	; 0x02
     4f2:	88 23       	and	r24, r24
     4f4:	a9 f4       	brne	.+42     	; 0x520 <DIO_SetPinDirection+0x72>
			{
				Clear_Bit( DDRA , PinNum);
     4f6:	8a e3       	ldi	r24, 0x3A	; 58
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	2a e3       	ldi	r18, 0x3A	; 58
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	f9 01       	movw	r30, r18
     500:	20 81       	ld	r18, Z
     502:	62 2f       	mov	r22, r18
     504:	29 81       	ldd	r18, Y+1	; 0x01
     506:	42 2f       	mov	r20, r18
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	21 e0       	ldi	r18, 0x01	; 1
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_SetPinDirection+0x66>
     510:	22 0f       	add	r18, r18
     512:	33 1f       	adc	r19, r19
     514:	4a 95       	dec	r20
     516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_SetPinDirection+0x62>
     518:	20 95       	com	r18
     51a:	26 23       	and	r18, r22
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 7 && PinNum < 16)
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	88 30       	cpi	r24, 0x08	; 8
     524:	c0 f1       	brcs	.+112    	; 0x596 <DIO_SetPinDirection+0xe8>
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	80 31       	cpi	r24, 0x10	; 16
     52a:	a8 f5       	brcc	.+106    	; 0x596 <DIO_SetPinDirection+0xe8>
		{
			if(PinDirection== 1)
     52c:	8a 81       	ldd	r24, Y+2	; 0x02
     52e:	81 30       	cpi	r24, 0x01	; 1
     530:	b9 f4       	brne	.+46     	; 0x560 <DIO_SetPinDirection+0xb2>
			{
				Set_Bit( DDRB , (PinNum-8));
     532:	87 e3       	ldi	r24, 0x37	; 55
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	27 e3       	ldi	r18, 0x37	; 55
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	f9 01       	movw	r30, r18
     53c:	20 81       	ld	r18, Z
     53e:	62 2f       	mov	r22, r18
     540:	29 81       	ldd	r18, Y+1	; 0x01
     542:	22 2f       	mov	r18, r18
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	a9 01       	movw	r20, r18
     548:	48 50       	subi	r20, 0x08	; 8
     54a:	51 09       	sbc	r21, r1
     54c:	21 e0       	ldi	r18, 0x01	; 1
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_SetPinDirection+0xa8>
     552:	22 0f       	add	r18, r18
     554:	33 1f       	adc	r19, r19
     556:	4a 95       	dec	r20
     558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_SetPinDirection+0xa4>
     55a:	26 2b       	or	r18, r22
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	88 23       	and	r24, r24
     564:	c1 f4       	brne	.+48     	; 0x596 <DIO_SetPinDirection+0xe8>
			{
				Clear_Bit( DDRB , (PinNum-8));
     566:	87 e3       	ldi	r24, 0x37	; 55
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	27 e3       	ldi	r18, 0x37	; 55
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	62 2f       	mov	r22, r18
     574:	29 81       	ldd	r18, Y+1	; 0x01
     576:	22 2f       	mov	r18, r18
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	a9 01       	movw	r20, r18
     57c:	48 50       	subi	r20, 0x08	; 8
     57e:	51 09       	sbc	r21, r1
     580:	21 e0       	ldi	r18, 0x01	; 1
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_SetPinDirection+0xdc>
     586:	22 0f       	add	r18, r18
     588:	33 1f       	adc	r19, r19
     58a:	4a 95       	dec	r20
     58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_SetPinDirection+0xd8>
     58e:	20 95       	com	r18
     590:	26 23       	and	r18, r22
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 15 && PinNum < 24)
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	80 31       	cpi	r24, 0x10	; 16
     59a:	c0 f1       	brcs	.+112    	; 0x60c <DIO_SetPinDirection+0x15e>
     59c:	89 81       	ldd	r24, Y+1	; 0x01
     59e:	88 31       	cpi	r24, 0x18	; 24
     5a0:	a8 f5       	brcc	.+106    	; 0x60c <DIO_SetPinDirection+0x15e>
		{
			if(PinDirection== 1)
     5a2:	8a 81       	ldd	r24, Y+2	; 0x02
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	b9 f4       	brne	.+46     	; 0x5d6 <DIO_SetPinDirection+0x128>
			{
				Set_Bit( DDRC , (PinNum-16));
     5a8:	84 e3       	ldi	r24, 0x34	; 52
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	24 e3       	ldi	r18, 0x34	; 52
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	f9 01       	movw	r30, r18
     5b2:	20 81       	ld	r18, Z
     5b4:	62 2f       	mov	r22, r18
     5b6:	29 81       	ldd	r18, Y+1	; 0x01
     5b8:	22 2f       	mov	r18, r18
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	a9 01       	movw	r20, r18
     5be:	40 51       	subi	r20, 0x10	; 16
     5c0:	51 09       	sbc	r21, r1
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_SetPinDirection+0x11e>
     5c8:	22 0f       	add	r18, r18
     5ca:	33 1f       	adc	r19, r19
     5cc:	4a 95       	dec	r20
     5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_SetPinDirection+0x11a>
     5d0:	26 2b       	or	r18, r22
     5d2:	fc 01       	movw	r30, r24
     5d4:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     5d6:	8a 81       	ldd	r24, Y+2	; 0x02
     5d8:	88 23       	and	r24, r24
     5da:	c1 f4       	brne	.+48     	; 0x60c <DIO_SetPinDirection+0x15e>
			{
				Clear_Bit( DDRC , (PinNum-16));
     5dc:	84 e3       	ldi	r24, 0x34	; 52
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	24 e3       	ldi	r18, 0x34	; 52
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	f9 01       	movw	r30, r18
     5e6:	20 81       	ld	r18, Z
     5e8:	62 2f       	mov	r22, r18
     5ea:	29 81       	ldd	r18, Y+1	; 0x01
     5ec:	22 2f       	mov	r18, r18
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	a9 01       	movw	r20, r18
     5f2:	40 51       	subi	r20, 0x10	; 16
     5f4:	51 09       	sbc	r21, r1
     5f6:	21 e0       	ldi	r18, 0x01	; 1
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_SetPinDirection+0x152>
     5fc:	22 0f       	add	r18, r18
     5fe:	33 1f       	adc	r19, r19
     600:	4a 95       	dec	r20
     602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_SetPinDirection+0x14e>
     604:	20 95       	com	r18
     606:	26 23       	and	r18, r22
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
			}
		}
		
		if(PinNum > 24 && PinNum < 32)
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	89 31       	cpi	r24, 0x19	; 25
     610:	c0 f1       	brcs	.+112    	; 0x682 <DIO_SetPinDirection+0x1d4>
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	80 32       	cpi	r24, 0x20	; 32
     616:	a8 f5       	brcc	.+106    	; 0x682 <DIO_SetPinDirection+0x1d4>
		{
			if(PinDirection== 1)
     618:	8a 81       	ldd	r24, Y+2	; 0x02
     61a:	81 30       	cpi	r24, 0x01	; 1
     61c:	b9 f4       	brne	.+46     	; 0x64c <DIO_SetPinDirection+0x19e>
			{
				Set_Bit( DDRD , (PinNum-24));
     61e:	81 e3       	ldi	r24, 0x31	; 49
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	21 e3       	ldi	r18, 0x31	; 49
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	20 81       	ld	r18, Z
     62a:	62 2f       	mov	r22, r18
     62c:	29 81       	ldd	r18, Y+1	; 0x01
     62e:	22 2f       	mov	r18, r18
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	a9 01       	movw	r20, r18
     634:	48 51       	subi	r20, 0x18	; 24
     636:	51 09       	sbc	r21, r1
     638:	21 e0       	ldi	r18, 0x01	; 1
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_SetPinDirection+0x194>
     63e:	22 0f       	add	r18, r18
     640:	33 1f       	adc	r19, r19
     642:	4a 95       	dec	r20
     644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_SetPinDirection+0x190>
     646:	26 2b       	or	r18, r22
     648:	fc 01       	movw	r30, r24
     64a:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	88 23       	and	r24, r24
     650:	c1 f4       	brne	.+48     	; 0x682 <DIO_SetPinDirection+0x1d4>
			{
				Clear_Bit( DDRD , (PinNum-24));
     652:	81 e3       	ldi	r24, 0x31	; 49
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	21 e3       	ldi	r18, 0x31	; 49
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	f9 01       	movw	r30, r18
     65c:	20 81       	ld	r18, Z
     65e:	62 2f       	mov	r22, r18
     660:	29 81       	ldd	r18, Y+1	; 0x01
     662:	22 2f       	mov	r18, r18
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	a9 01       	movw	r20, r18
     668:	48 51       	subi	r20, 0x18	; 24
     66a:	51 09       	sbc	r21, r1
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_SetPinDirection+0x1c8>
     672:	22 0f       	add	r18, r18
     674:	33 1f       	adc	r19, r19
     676:	4a 95       	dec	r20
     678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_SetPinDirection+0x1c4>
     67a:	20 95       	com	r18
     67c:	26 23       	and	r18, r22
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
			}
		}
}
     682:	00 00       	nop
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	00 d0       	rcall	.+0      	; 0x694 <DIO_ReadPin+0x6>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	8a 83       	std	Y+2, r24	; 0x02
		uint8 return_value=0;
     69a:	19 82       	std	Y+1, r1	; 0x01
		if(PinNum >= 0 && PinNum < 8 )
     69c:	8a 81       	ldd	r24, Y+2	; 0x02
     69e:	88 30       	cpi	r24, 0x08	; 8
     6a0:	d8 f4       	brcc	.+54     	; 0x6d8 <DIO_ReadPin+0x4a>
		{
			return_value = Get_Bit(PINA , PinNum);
     6a2:	89 e3       	ldi	r24, 0x39	; 57
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	fc 01       	movw	r30, r24
     6a8:	80 81       	ld	r24, Z
     6aa:	28 2f       	mov	r18, r24
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	8a 81       	ldd	r24, Y+2	; 0x02
     6b0:	48 2f       	mov	r20, r24
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_ReadPin+0x30>
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	4a 95       	dec	r20
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_ReadPin+0x2c>
     6c2:	82 23       	and	r24, r18
     6c4:	93 23       	and	r25, r19
     6c6:	2a 81       	ldd	r18, Y+2	; 0x02
     6c8:	22 2f       	mov	r18, r18
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_ReadPin+0x44>
     6ce:	95 95       	asr	r25
     6d0:	87 95       	ror	r24
     6d2:	2a 95       	dec	r18
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_ReadPin+0x40>
     6d6:	89 83       	std	Y+1, r24	; 0x01
		}
		if(PinNum > 7 && PinNum < 16)
     6d8:	8a 81       	ldd	r24, Y+2	; 0x02
     6da:	88 30       	cpi	r24, 0x08	; 8
     6dc:	18 f1       	brcs	.+70     	; 0x724 <DIO_ReadPin+0x96>
     6de:	8a 81       	ldd	r24, Y+2	; 0x02
     6e0:	80 31       	cpi	r24, 0x10	; 16
     6e2:	00 f5       	brcc	.+64     	; 0x724 <DIO_ReadPin+0x96>
		{
			return_value = Get_Bit(PINB , (PinNum-8));
     6e4:	86 e3       	ldi	r24, 0x36	; 54
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	fc 01       	movw	r30, r24
     6ea:	80 81       	ld	r24, Z
     6ec:	28 2f       	mov	r18, r24
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	8a 81       	ldd	r24, Y+2	; 0x02
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	ac 01       	movw	r20, r24
     6f8:	48 50       	subi	r20, 0x08	; 8
     6fa:	51 09       	sbc	r21, r1
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_ReadPin+0x78>
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	4a 95       	dec	r20
     708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_ReadPin+0x74>
     70a:	82 23       	and	r24, r18
     70c:	93 23       	and	r25, r19
     70e:	2a 81       	ldd	r18, Y+2	; 0x02
     710:	22 2f       	mov	r18, r18
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	28 50       	subi	r18, 0x08	; 8
     716:	31 09       	sbc	r19, r1
     718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_ReadPin+0x90>
     71a:	95 95       	asr	r25
     71c:	87 95       	ror	r24
     71e:	2a 95       	dec	r18
     720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_ReadPin+0x8c>
     722:	89 83       	std	Y+1, r24	; 0x01
		}
		if(PinNum > 15 && PinNum < 24)
     724:	8a 81       	ldd	r24, Y+2	; 0x02
     726:	80 31       	cpi	r24, 0x10	; 16
     728:	18 f1       	brcs	.+70     	; 0x770 <DIO_ReadPin+0xe2>
     72a:	8a 81       	ldd	r24, Y+2	; 0x02
     72c:	88 31       	cpi	r24, 0x18	; 24
     72e:	00 f5       	brcc	.+64     	; 0x770 <DIO_ReadPin+0xe2>
		{
			return_value = Get_Bit(PINC , (PinNum-16));
     730:	83 e3       	ldi	r24, 0x33	; 51
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	fc 01       	movw	r30, r24
     736:	80 81       	ld	r24, Z
     738:	28 2f       	mov	r18, r24
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	8a 81       	ldd	r24, Y+2	; 0x02
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	ac 01       	movw	r20, r24
     744:	40 51       	subi	r20, 0x10	; 16
     746:	51 09       	sbc	r21, r1
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_ReadPin+0xc4>
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	4a 95       	dec	r20
     754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_ReadPin+0xc0>
     756:	82 23       	and	r24, r18
     758:	93 23       	and	r25, r19
     75a:	2a 81       	ldd	r18, Y+2	; 0x02
     75c:	22 2f       	mov	r18, r18
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	20 51       	subi	r18, 0x10	; 16
     762:	31 09       	sbc	r19, r1
     764:	02 c0       	rjmp	.+4      	; 0x76a <DIO_ReadPin+0xdc>
     766:	95 95       	asr	r25
     768:	87 95       	ror	r24
     76a:	2a 95       	dec	r18
     76c:	e2 f7       	brpl	.-8      	; 0x766 <DIO_ReadPin+0xd8>
     76e:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if(PinNum > 24 && PinNum < 32)
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	89 31       	cpi	r24, 0x19	; 25
     774:	18 f1       	brcs	.+70     	; 0x7bc <DIO_ReadPin+0x12e>
     776:	8a 81       	ldd	r24, Y+2	; 0x02
     778:	80 32       	cpi	r24, 0x20	; 32
     77a:	00 f5       	brcc	.+64     	; 0x7bc <DIO_ReadPin+0x12e>
		{
			return_value = Get_Bit(PIND , (PinNum-24));
     77c:	80 e3       	ldi	r24, 0x30	; 48
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	fc 01       	movw	r30, r24
     782:	80 81       	ld	r24, Z
     784:	28 2f       	mov	r18, r24
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	88 2f       	mov	r24, r24
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	ac 01       	movw	r20, r24
     790:	48 51       	subi	r20, 0x18	; 24
     792:	51 09       	sbc	r21, r1
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_ReadPin+0x110>
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	4a 95       	dec	r20
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <DIO_ReadPin+0x10c>
     7a2:	82 23       	and	r24, r18
     7a4:	93 23       	and	r25, r19
     7a6:	2a 81       	ldd	r18, Y+2	; 0x02
     7a8:	22 2f       	mov	r18, r18
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	28 51       	subi	r18, 0x18	; 24
     7ae:	31 09       	sbc	r19, r1
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_ReadPin+0x128>
     7b2:	95 95       	asr	r25
     7b4:	87 95       	ror	r24
     7b6:	2a 95       	dec	r18
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_ReadPin+0x124>
     7ba:	89 83       	std	Y+1, r24	; 0x01
		}
		return return_value;
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <Keypad_init>:

#include "Keypad.h"
#include "Keypad_cfg.h"

void Keypad_init()
{
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
	//Coloumns INPUT
	DIO_SetPinDirection(Keypad_Coloumn1_PIN,INPUT);
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	85 e1       	ldi	r24, 0x15	; 21
     7d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_Coloumn2_PIN,INPUT);
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	86 e1       	ldi	r24, 0x16	; 22
     7dc:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_Coloumn3_PIN,INPUT);
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	87 e1       	ldi	r24, 0x17	; 23
     7e4:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	
	//PUll UP Column
	DIO_WritePin(Keypad_Coloumn1_PIN,HIGH);
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	85 e1       	ldi	r24, 0x15	; 21
     7ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_Coloumn2_PIN,HIGH);
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	86 e1       	ldi	r24, 0x16	; 22
     7f4:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_Coloumn3_PIN,HIGH);
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	87 e1       	ldi	r24, 0x17	; 23
     7fc:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	
	//ROWS OUTPUT
	DIO_SetPinDirection(Keypad_ROW1_PIN,OUTPUT);
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	82 e1       	ldi	r24, 0x12	; 18
     804:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_ROW2_PIN,OUTPUT);
     808:	61 e0       	ldi	r22, 0x01	; 1
     80a:	83 e1       	ldi	r24, 0x13	; 19
     80c:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_ROW3_PIN,OUTPUT);
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	84 e1       	ldi	r24, 0x14	; 20
     814:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>

}
     818:	00 00       	nop
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <Keypad_getPressedKey>:

uint8 Keypad_getPressedKey()
{
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	1f 92       	push	r1
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
	uint8 Pushed_Button = 0 ;
     82a:	19 82       	std	Y+1, r1	; 0x01
	DIO_WritePin(Keypad_ROW1_PIN,LOW);
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	82 e1       	ldi	r24, 0x12	; 18
     830:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW2_PIN,HIGH);
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	83 e1       	ldi	r24, 0x13	; 19
     838:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW3_PIN,HIGH);
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	84 e1       	ldi	r24, 0x14	; 20
     840:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     844:	85 e1       	ldi	r24, 0x15	; 21
     846:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     84a:	88 23       	and	r24, r24
     84c:	19 f4       	brne	.+6      	; 0x854 <Keypad_getPressedKey+0x34>
	{
		Pushed_Button = 1;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	0f c0       	rjmp	.+30     	; 0x872 <__stack+0x13>
	}
	else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     854:	86 e1       	ldi	r24, 0x16	; 22
     856:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     85a:	88 23       	and	r24, r24
     85c:	19 f4       	brne	.+6      	; 0x864 <__stack+0x5>
	{
		Pushed_Button = 2;
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	89 83       	std	Y+1, r24	; 0x01
     862:	07 c0       	rjmp	.+14     	; 0x872 <__stack+0x13>
	}
	else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     864:	87 e1       	ldi	r24, 0x17	; 23
     866:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     86a:	88 23       	and	r24, r24
     86c:	11 f4       	brne	.+4      	; 0x872 <__stack+0x13>
	{
		Pushed_Button = 3;
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_WritePin(Keypad_ROW1_PIN,HIGH);
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	82 e1       	ldi	r24, 0x12	; 18
     876:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW2_PIN,LOW);
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	83 e1       	ldi	r24, 0x13	; 19
     87e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW3_PIN,HIGH);
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	84 e1       	ldi	r24, 0x14	; 20
     886:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     88a:	85 e1       	ldi	r24, 0x15	; 21
     88c:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     890:	88 23       	and	r24, r24
     892:	19 f4       	brne	.+6      	; 0x89a <__stack+0x3b>
	{
			Pushed_Button = 4;
     894:	84 e0       	ldi	r24, 0x04	; 4
     896:	89 83       	std	Y+1, r24	; 0x01
     898:	0f c0       	rjmp	.+30     	; 0x8b8 <__stack+0x59>
	}
	else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     89a:	86 e1       	ldi	r24, 0x16	; 22
     89c:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8a0:	88 23       	and	r24, r24
     8a2:	19 f4       	brne	.+6      	; 0x8aa <__stack+0x4b>
	{
			Pushed_Button = 5;
     8a4:	85 e0       	ldi	r24, 0x05	; 5
     8a6:	89 83       	std	Y+1, r24	; 0x01
     8a8:	07 c0       	rjmp	.+14     	; 0x8b8 <__stack+0x59>
	}
	else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     8aa:	87 e1       	ldi	r24, 0x17	; 23
     8ac:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8b0:	88 23       	and	r24, r24
     8b2:	11 f4       	brne	.+4      	; 0x8b8 <__stack+0x59>
	{
			Pushed_Button = 6;
     8b4:	86 e0       	ldi	r24, 0x06	; 6
     8b6:	89 83       	std	Y+1, r24	; 0x01
	}
		DIO_WritePin(Keypad_ROW1_PIN,HIGH);
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	82 e1       	ldi	r24, 0x12	; 18
     8bc:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(Keypad_ROW2_PIN,HIGH);
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	83 e1       	ldi	r24, 0x13	; 19
     8c4:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(Keypad_ROW3_PIN,LOW);
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	84 e1       	ldi	r24, 0x14	; 20
     8cc:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     8d0:	85 e1       	ldi	r24, 0x15	; 21
     8d2:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8d6:	88 23       	and	r24, r24
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__stack+0x81>
		{
			Pushed_Button = 7;
     8da:	87 e0       	ldi	r24, 0x07	; 7
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	0f c0       	rjmp	.+30     	; 0x8fe <__stack+0x9f>
		}
		else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     8e0:	86 e1       	ldi	r24, 0x16	; 22
     8e2:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8e6:	88 23       	and	r24, r24
     8e8:	19 f4       	brne	.+6      	; 0x8f0 <__stack+0x91>
		{
			Pushed_Button = 8;
     8ea:	88 e0       	ldi	r24, 0x08	; 8
     8ec:	89 83       	std	Y+1, r24	; 0x01
     8ee:	07 c0       	rjmp	.+14     	; 0x8fe <__stack+0x9f>
		}
		else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     8f0:	87 e1       	ldi	r24, 0x17	; 23
     8f2:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8f6:	88 23       	and	r24, r24
     8f8:	11 f4       	brne	.+4      	; 0x8fe <__stack+0x9f>
		{
			Pushed_Button = 9;
     8fa:	89 e0       	ldi	r24, 0x09	; 9
     8fc:	89 83       	std	Y+1, r24	; 0x01
		}
		return Pushed_Button;
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
	
     900:	0f 90       	pop	r0
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <LCD_init>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "avr/delay.h"

void LCD_init()
{
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
	//#ifdef Bit_Mode4
	
	/*Data PINS*/
	DIO_SetPinDirection(LCD_D4 , OUTPUT);
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	84 e0       	ldi	r24, 0x04	; 4
     914:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D5 , OUTPUT);
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	85 e0       	ldi	r24, 0x05	; 5
     91c:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D6 , OUTPUT);
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	86 e0       	ldi	r24, 0x06	; 6
     924:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D7 , OUTPUT);
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	87 e0       	ldi	r24, 0x07	; 7
     92c:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	/*Command Pins*/
	DIO_SetPinDirection(LCD_RS , OUTPUT);
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW , OUTPUT);
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_ENABLE , OUTPUT);
     940:	61 e0       	ldi	r22, 0x01	; 1
     942:	83 e0       	ldi	r24, 0x03	; 3
     944:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	
	LCD_sendCommand(0x33);
     948:	83 e3       	ldi	r24, 0x33	; 51
     94a:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendCommand>
	LCD_sendCommand(0x32);
     94e:	82 e3       	ldi	r24, 0x32	; 50
     950:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendCommand>
	/*Send Command To Set 4-Bit Mode*/
	LCD_sendCommand(Function_Set_4Bit);
     954:	88 e2       	ldi	r24, 0x28	; 40
     956:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendCommand>
	/*Turn On Cyrser */
	LCD_sendCommand(Cyrser_On);
     95a:	8e e0       	ldi	r24, 0x0E	; 14
     95c:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendCommand>
	/*Clear Display*/
	LCD_sendCommand(Clear_Command);
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendCommand>
	/**/
	LCD_sendCommand(0x06);
     966:	86 e0       	ldi	r24, 0x06	; 6
     968:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendCommand>
	
	
	#endif
	*/
	
}
     96c:	00 00       	nop
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <LCD_sendCommand>:
void LCD_sendCommand(uint8 Cmd)
{
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	ab 97       	sbiw	r28, 0x2b	; 43
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
     988:	8b a7       	std	Y+43, r24	; 0x2b
	/*RS == 0 For Command Register*/
	DIO_WritePin(LCD_RS,LOW);
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	/*R/W == 0 For Writing */
	DIO_WritePin(LCD_RW , LOW);
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	
	/*LCD Enable Pin LOW For Latching*/
	DIO_WritePin(LCD_ENABLE,LOW);
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	83 e0       	ldi	r24, 0x03	; 3
     99e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	
	/* Send Command Sequance */
	LCD_PORT = ( LCD_PORT & Mask_First_4Bits ) | ( Cmd & Mask_Last_4Bits );
     9a2:	8b e3       	ldi	r24, 0x3B	; 59
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	2b e3       	ldi	r18, 0x3B	; 59
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	f9 01       	movw	r30, r18
     9ac:	20 81       	ld	r18, Z
     9ae:	32 2f       	mov	r19, r18
     9b0:	3f 70       	andi	r19, 0x0F	; 15
     9b2:	2b a5       	ldd	r18, Y+43	; 0x2b
     9b4:	20 7f       	andi	r18, 0xF0	; 240
     9b6:	23 2b       	or	r18, r19
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
	 
	/*Latching Sequance*/
	DIO_WritePin(LCD_ENABLE,HIGH);
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	83 e0       	ldi	r24, 0x03	; 3
     9c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	a0 e0       	ldi	r26, 0x00	; 0
     9ca:	b0 e4       	ldi	r27, 0x40	; 64
     9cc:	89 83       	std	Y+1, r24	; 0x01
     9ce:	9a 83       	std	Y+2, r25	; 0x02
     9d0:	ab 83       	std	Y+3, r26	; 0x03
     9d2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	4a e7       	ldi	r20, 0x7A	; 122
     9da:	53 e4       	ldi	r21, 0x43	; 67
     9dc:	69 81       	ldd	r22, Y+1	; 0x01
     9de:	7a 81       	ldd	r23, Y+2	; 0x02
     9e0:	8b 81       	ldd	r24, Y+3	; 0x03
     9e2:	9c 81       	ldd	r25, Y+4	; 0x04
     9e4:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
     9e8:	dc 01       	movw	r26, r24
     9ea:	cb 01       	movw	r24, r22
     9ec:	89 a3       	std	Y+33, r24	; 0x21
     9ee:	9a a3       	std	Y+34, r25	; 0x22
     9f0:	ab a3       	std	Y+35, r26	; 0x23
     9f2:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	40 e8       	ldi	r20, 0x80	; 128
     9fa:	5f e3       	ldi	r21, 0x3F	; 63
     9fc:	69 a1       	ldd	r22, Y+33	; 0x21
     9fe:	7a a1       	ldd	r23, Y+34	; 0x22
     a00:	8b a1       	ldd	r24, Y+35	; 0x23
     a02:	9c a1       	ldd	r25, Y+36	; 0x24
     a04:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
     a08:	88 23       	and	r24, r24
     a0a:	2c f4       	brge	.+10     	; 0xa16 <LCD_sendCommand+0xa2>
		__ticks = 1;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	9e a3       	std	Y+38, r25	; 0x26
     a12:	8d a3       	std	Y+37, r24	; 0x25
     a14:	3f c0       	rjmp	.+126    	; 0xa94 <LCD_sendCommand+0x120>
	else if (__tmp > 65535)
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	3f ef       	ldi	r19, 0xFF	; 255
     a1a:	4f e7       	ldi	r20, 0x7F	; 127
     a1c:	57 e4       	ldi	r21, 0x47	; 71
     a1e:	69 a1       	ldd	r22, Y+33	; 0x21
     a20:	7a a1       	ldd	r23, Y+34	; 0x22
     a22:	8b a1       	ldd	r24, Y+35	; 0x23
     a24:	9c a1       	ldd	r25, Y+36	; 0x24
     a26:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
     a2a:	18 16       	cp	r1, r24
     a2c:	4c f5       	brge	.+82     	; 0xa80 <LCD_sendCommand+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e2       	ldi	r20, 0x20	; 32
     a34:	51 e4       	ldi	r21, 0x41	; 65
     a36:	69 81       	ldd	r22, Y+1	; 0x01
     a38:	7a 81       	ldd	r23, Y+2	; 0x02
     a3a:	8b 81       	ldd	r24, Y+3	; 0x03
     a3c:	9c 81       	ldd	r25, Y+4	; 0x04
     a3e:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	bc 01       	movw	r22, r24
     a48:	cd 01       	movw	r24, r26
     a4a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
     a4e:	dc 01       	movw	r26, r24
     a50:	cb 01       	movw	r24, r22
     a52:	9e a3       	std	Y+38, r25	; 0x26
     a54:	8d a3       	std	Y+37, r24	; 0x25
     a56:	0f c0       	rjmp	.+30     	; 0xa76 <LCD_sendCommand+0x102>
     a58:	89 e1       	ldi	r24, 0x19	; 25
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	98 a7       	std	Y+40, r25	; 0x28
     a5e:	8f a3       	std	Y+39, r24	; 0x27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a60:	8f a1       	ldd	r24, Y+39	; 0x27
     a62:	98 a5       	ldd	r25, Y+40	; 0x28
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <LCD_sendCommand+0xf0>
     a68:	98 a7       	std	Y+40, r25	; 0x28
     a6a:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a6c:	8d a1       	ldd	r24, Y+37	; 0x25
     a6e:	9e a1       	ldd	r25, Y+38	; 0x26
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	9e a3       	std	Y+38, r25	; 0x26
     a74:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a76:	8d a1       	ldd	r24, Y+37	; 0x25
     a78:	9e a1       	ldd	r25, Y+38	; 0x26
     a7a:	89 2b       	or	r24, r25
     a7c:	69 f7       	brne	.-38     	; 0xa58 <LCD_sendCommand+0xe4>
     a7e:	14 c0       	rjmp	.+40     	; 0xaa8 <LCD_sendCommand+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a80:	69 a1       	ldd	r22, Y+33	; 0x21
     a82:	7a a1       	ldd	r23, Y+34	; 0x22
     a84:	8b a1       	ldd	r24, Y+35	; 0x23
     a86:	9c a1       	ldd	r25, Y+36	; 0x24
     a88:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
     a8c:	dc 01       	movw	r26, r24
     a8e:	cb 01       	movw	r24, r22
     a90:	9e a3       	std	Y+38, r25	; 0x26
     a92:	8d a3       	std	Y+37, r24	; 0x25
     a94:	8d a1       	ldd	r24, Y+37	; 0x25
     a96:	9e a1       	ldd	r25, Y+38	; 0x26
     a98:	9a a7       	std	Y+42, r25	; 0x2a
     a9a:	89 a7       	std	Y+41, r24	; 0x29
     a9c:	89 a5       	ldd	r24, Y+41	; 0x29
     a9e:	9a a5       	ldd	r25, Y+42	; 0x2a
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <LCD_sendCommand+0x12c>
     aa4:	9a a7       	std	Y+42, r25	; 0x2a
     aa6:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(2);
	/*LOW For Enable to Latch*/
	DIO_WritePin(LCD_ENABLE,LOW);
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	83 e0       	ldi	r24, 0x03	; 3
     aac:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	
	
	/*LCD Enable Pin LOW For Latching*/
	DIO_WritePin(LCD_ENABLE,LOW);
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	/*Send Command*/
	LCD_PORT = ( LCD_PORT & Mask_First_4Bits ) | ( Cmd << Number_Four ); 
     ab8:	8b e3       	ldi	r24, 0x3B	; 59
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	2b e3       	ldi	r18, 0x3B	; 59
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	f9 01       	movw	r30, r18
     ac2:	20 81       	ld	r18, Z
     ac4:	42 2f       	mov	r20, r18
     ac6:	4f 70       	andi	r20, 0x0F	; 15
     ac8:	2b a5       	ldd	r18, Y+43	; 0x2b
     aca:	22 2f       	mov	r18, r18
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	22 95       	swap	r18
     ad0:	32 95       	swap	r19
     ad2:	30 7f       	andi	r19, 0xF0	; 240
     ad4:	32 27       	eor	r19, r18
     ad6:	20 7f       	andi	r18, 0xF0	; 240
     ad8:	32 27       	eor	r19, r18
     ada:	24 2b       	or	r18, r20
     adc:	fc 01       	movw	r30, r24
     ade:	20 83       	st	Z, r18
	
	/*Latching Sequance*/
	DIO_WritePin(LCD_ENABLE,HIGH);
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	83 e0       	ldi	r24, 0x03	; 3
     ae4:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	b0 e4       	ldi	r27, 0x40	; 64
     af0:	8d 83       	std	Y+5, r24	; 0x05
     af2:	9e 83       	std	Y+6, r25	; 0x06
     af4:	af 83       	std	Y+7, r26	; 0x07
     af6:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	4a e7       	ldi	r20, 0x7A	; 122
     afe:	53 e4       	ldi	r21, 0x43	; 67
     b00:	6d 81       	ldd	r22, Y+5	; 0x05
     b02:	7e 81       	ldd	r23, Y+6	; 0x06
     b04:	8f 81       	ldd	r24, Y+7	; 0x07
     b06:	98 85       	ldd	r25, Y+8	; 0x08
     b08:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
     b0c:	dc 01       	movw	r26, r24
     b0e:	cb 01       	movw	r24, r22
     b10:	8f 8b       	std	Y+23, r24	; 0x17
     b12:	98 8f       	std	Y+24, r25	; 0x18
     b14:	a9 8f       	std	Y+25, r26	; 0x19
     b16:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e8       	ldi	r20, 0x80	; 128
     b1e:	5f e3       	ldi	r21, 0x3F	; 63
     b20:	6f 89       	ldd	r22, Y+23	; 0x17
     b22:	78 8d       	ldd	r23, Y+24	; 0x18
     b24:	89 8d       	ldd	r24, Y+25	; 0x19
     b26:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b28:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
     b2c:	88 23       	and	r24, r24
     b2e:	2c f4       	brge	.+10     	; 0xb3a <LCD_sendCommand+0x1c6>
		__ticks = 1;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	9c 8f       	std	Y+28, r25	; 0x1c
     b36:	8b 8f       	std	Y+27, r24	; 0x1b
     b38:	3f c0       	rjmp	.+126    	; 0xbb8 <LCD_sendCommand+0x244>
	else if (__tmp > 65535)
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	3f ef       	ldi	r19, 0xFF	; 255
     b3e:	4f e7       	ldi	r20, 0x7F	; 127
     b40:	57 e4       	ldi	r21, 0x47	; 71
     b42:	6f 89       	ldd	r22, Y+23	; 0x17
     b44:	78 8d       	ldd	r23, Y+24	; 0x18
     b46:	89 8d       	ldd	r24, Y+25	; 0x19
     b48:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b4a:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
     b4e:	18 16       	cp	r1, r24
     b50:	4c f5       	brge	.+82     	; 0xba4 <LCD_sendCommand+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	40 e2       	ldi	r20, 0x20	; 32
     b58:	51 e4       	ldi	r21, 0x41	; 65
     b5a:	6d 81       	ldd	r22, Y+5	; 0x05
     b5c:	7e 81       	ldd	r23, Y+6	; 0x06
     b5e:	8f 81       	ldd	r24, Y+7	; 0x07
     b60:	98 85       	ldd	r25, Y+8	; 0x08
     b62:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
     b66:	dc 01       	movw	r26, r24
     b68:	cb 01       	movw	r24, r22
     b6a:	bc 01       	movw	r22, r24
     b6c:	cd 01       	movw	r24, r26
     b6e:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
     b72:	dc 01       	movw	r26, r24
     b74:	cb 01       	movw	r24, r22
     b76:	9c 8f       	std	Y+28, r25	; 0x1c
     b78:	8b 8f       	std	Y+27, r24	; 0x1b
     b7a:	0f c0       	rjmp	.+30     	; 0xb9a <LCD_sendCommand+0x226>
     b7c:	89 e1       	ldi	r24, 0x19	; 25
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	9e 8f       	std	Y+30, r25	; 0x1e
     b82:	8d 8f       	std	Y+29, r24	; 0x1d
     b84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b86:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <LCD_sendCommand+0x214>
     b8c:	9e 8f       	std	Y+30, r25	; 0x1e
     b8e:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b90:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b92:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	9c 8f       	std	Y+28, r25	; 0x1c
     b98:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b9e:	89 2b       	or	r24, r25
     ba0:	69 f7       	brne	.-38     	; 0xb7c <LCD_sendCommand+0x208>
     ba2:	14 c0       	rjmp	.+40     	; 0xbcc <LCD_sendCommand+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ba4:	6f 89       	ldd	r22, Y+23	; 0x17
     ba6:	78 8d       	ldd	r23, Y+24	; 0x18
     ba8:	89 8d       	ldd	r24, Y+25	; 0x19
     baa:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bac:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
     bb0:	dc 01       	movw	r26, r24
     bb2:	cb 01       	movw	r24, r22
     bb4:	9c 8f       	std	Y+28, r25	; 0x1c
     bb6:	8b 8f       	std	Y+27, r24	; 0x1b
     bb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bba:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bbc:	98 a3       	std	Y+32, r25	; 0x20
     bbe:	8f 8f       	std	Y+31, r24	; 0x1f
     bc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bc2:	98 a1       	ldd	r25, Y+32	; 0x20
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	f1 f7       	brne	.-4      	; 0xbc4 <LCD_sendCommand+0x250>
     bc8:	98 a3       	std	Y+32, r25	; 0x20
     bca:	8f 8f       	std	Y+31, r24	; 0x1f
	_delay_ms(2);
	/*LOW For Enable to Latch*/
	DIO_WritePin(LCD_ENABLE,LOW);
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	a0 e0       	ldi	r26, 0x00	; 0
     bda:	b0 e4       	ldi	r27, 0x40	; 64
     bdc:	89 87       	std	Y+9, r24	; 0x09
     bde:	9a 87       	std	Y+10, r25	; 0x0a
     be0:	ab 87       	std	Y+11, r26	; 0x0b
     be2:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	4a e7       	ldi	r20, 0x7A	; 122
     bea:	53 e4       	ldi	r21, 0x43	; 67
     bec:	69 85       	ldd	r22, Y+9	; 0x09
     bee:	7a 85       	ldd	r23, Y+10	; 0x0a
     bf0:	8b 85       	ldd	r24, Y+11	; 0x0b
     bf2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bf4:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	8d 87       	std	Y+13, r24	; 0x0d
     bfe:	9e 87       	std	Y+14, r25	; 0x0e
     c00:	af 87       	std	Y+15, r26	; 0x0f
     c02:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e8       	ldi	r20, 0x80	; 128
     c0a:	5f e3       	ldi	r21, 0x3F	; 63
     c0c:	6d 85       	ldd	r22, Y+13	; 0x0d
     c0e:	7e 85       	ldd	r23, Y+14	; 0x0e
     c10:	8f 85       	ldd	r24, Y+15	; 0x0f
     c12:	98 89       	ldd	r25, Y+16	; 0x10
     c14:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
     c18:	88 23       	and	r24, r24
     c1a:	2c f4       	brge	.+10     	; 0xc26 <LCD_sendCommand+0x2b2>
		__ticks = 1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	9a 8b       	std	Y+18, r25	; 0x12
     c22:	89 8b       	std	Y+17, r24	; 0x11
     c24:	3f c0       	rjmp	.+126    	; 0xca4 <LCD_sendCommand+0x330>
	else if (__tmp > 65535)
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	3f ef       	ldi	r19, 0xFF	; 255
     c2a:	4f e7       	ldi	r20, 0x7F	; 127
     c2c:	57 e4       	ldi	r21, 0x47	; 71
     c2e:	6d 85       	ldd	r22, Y+13	; 0x0d
     c30:	7e 85       	ldd	r23, Y+14	; 0x0e
     c32:	8f 85       	ldd	r24, Y+15	; 0x0f
     c34:	98 89       	ldd	r25, Y+16	; 0x10
     c36:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
     c3a:	18 16       	cp	r1, r24
     c3c:	4c f5       	brge	.+82     	; 0xc90 <LCD_sendCommand+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	40 e2       	ldi	r20, 0x20	; 32
     c44:	51 e4       	ldi	r21, 0x41	; 65
     c46:	69 85       	ldd	r22, Y+9	; 0x09
     c48:	7a 85       	ldd	r23, Y+10	; 0x0a
     c4a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c4c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c4e:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	bc 01       	movw	r22, r24
     c58:	cd 01       	movw	r24, r26
     c5a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9a 8b       	std	Y+18, r25	; 0x12
     c64:	89 8b       	std	Y+17, r24	; 0x11
     c66:	0f c0       	rjmp	.+30     	; 0xc86 <LCD_sendCommand+0x312>
     c68:	89 e1       	ldi	r24, 0x19	; 25
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	9c 8b       	std	Y+20, r25	; 0x14
     c6e:	8b 8b       	std	Y+19, r24	; 0x13
     c70:	8b 89       	ldd	r24, Y+19	; 0x13
     c72:	9c 89       	ldd	r25, Y+20	; 0x14
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <LCD_sendCommand+0x300>
     c78:	9c 8b       	std	Y+20, r25	; 0x14
     c7a:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7c:	89 89       	ldd	r24, Y+17	; 0x11
     c7e:	9a 89       	ldd	r25, Y+18	; 0x12
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	9a 8b       	std	Y+18, r25	; 0x12
     c84:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c86:	89 89       	ldd	r24, Y+17	; 0x11
     c88:	9a 89       	ldd	r25, Y+18	; 0x12
     c8a:	89 2b       	or	r24, r25
     c8c:	69 f7       	brne	.-38     	; 0xc68 <LCD_sendCommand+0x2f4>
	_delay_ms(2);
}
     c8e:	14 c0       	rjmp	.+40     	; 0xcb8 <LCD_sendCommand+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c90:	6d 85       	ldd	r22, Y+13	; 0x0d
     c92:	7e 85       	ldd	r23, Y+14	; 0x0e
     c94:	8f 85       	ldd	r24, Y+15	; 0x0f
     c96:	98 89       	ldd	r25, Y+16	; 0x10
     c98:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	9a 8b       	std	Y+18, r25	; 0x12
     ca2:	89 8b       	std	Y+17, r24	; 0x11
     ca4:	89 89       	ldd	r24, Y+17	; 0x11
     ca6:	9a 89       	ldd	r25, Y+18	; 0x12
     ca8:	9e 8b       	std	Y+22, r25	; 0x16
     caa:	8d 8b       	std	Y+21, r24	; 0x15
     cac:	8d 89       	ldd	r24, Y+21	; 0x15
     cae:	9e 89       	ldd	r25, Y+22	; 0x16
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <LCD_sendCommand+0x33c>
     cb4:	9e 8b       	std	Y+22, r25	; 0x16
     cb6:	8d 8b       	std	Y+21, r24	; 0x15
     cb8:	00 00       	nop
     cba:	ab 96       	adiw	r28, 0x2b	; 43
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <main>:
#include "avr/delay.h"
#include "LCD.h"
#include "LCD_Cfg.h"

int main(void)
{
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	c9 51       	subi	r28, 0x19	; 25
     cda:	d1 40       	sbci	r29, 0x01	; 1
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	BCDSevegments_Init();
     ce6:	0e 94 36 00 	call	0x6c	; 0x6c <BCDSevegments_Init>
	Keypad_init();
     cea:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <Keypad_init>
	LCD_init();
     cee:	0e 94 84 04 	call	0x908	; 0x908 <LCD_init>
     cf2:	9e 01       	movw	r18, r28
     cf4:	22 5b       	subi	r18, 0xB2	; 178
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	a0 ea       	ldi	r26, 0xA0	; 160
     cfe:	b0 e4       	ldi	r27, 0x40	; 64
     d00:	f9 01       	movw	r30, r18
     d02:	80 83       	st	Z, r24
     d04:	91 83       	std	Z+1, r25	; 0x01
     d06:	a2 83       	std	Z+2, r26	; 0x02
     d08:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d0a:	8e 01       	movw	r16, r28
     d0c:	0e 5a       	subi	r16, 0xAE	; 174
     d0e:	1f 4f       	sbci	r17, 0xFF	; 255
     d10:	ce 01       	movw	r24, r28
     d12:	82 5b       	subi	r24, 0xB2	; 178
     d14:	9f 4f       	sbci	r25, 0xFF	; 255
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	4a e7       	ldi	r20, 0x7A	; 122
     d1c:	53 e4       	ldi	r21, 0x43	; 67
     d1e:	fc 01       	movw	r30, r24
     d20:	60 81       	ld	r22, Z
     d22:	71 81       	ldd	r23, Z+1	; 0x01
     d24:	82 81       	ldd	r24, Z+2	; 0x02
     d26:	93 81       	ldd	r25, Z+3	; 0x03
     d28:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	f8 01       	movw	r30, r16
     d32:	80 83       	st	Z, r24
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	a2 83       	std	Z+2, r26	; 0x02
     d38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d3a:	ce 01       	movw	r24, r28
     d3c:	8e 5a       	subi	r24, 0xAE	; 174
     d3e:	9f 4f       	sbci	r25, 0xFF	; 255
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e8       	ldi	r20, 0x80	; 128
     d46:	5f e3       	ldi	r21, 0x3F	; 63
     d48:	fc 01       	movw	r30, r24
     d4a:	60 81       	ld	r22, Z
     d4c:	71 81       	ldd	r23, Z+1	; 0x01
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	93 81       	ldd	r25, Z+3	; 0x03
     d52:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
     d56:	88 23       	and	r24, r24
     d58:	4c f4       	brge	.+18     	; 0xd6c <main+0xa0>
		__ticks = 1;
     d5a:	ce 01       	movw	r24, r28
     d5c:	8a 5a       	subi	r24, 0xAA	; 170
     d5e:	9f 4f       	sbci	r25, 0xFF	; 255
     d60:	21 e0       	ldi	r18, 0x01	; 1
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	fc 01       	movw	r30, r24
     d66:	31 83       	std	Z+1, r19	; 0x01
     d68:	20 83       	st	Z, r18
     d6a:	6d c0       	rjmp	.+218    	; 0xe46 <main+0x17a>
	else if (__tmp > 65535)
     d6c:	ce 01       	movw	r24, r28
     d6e:	8e 5a       	subi	r24, 0xAE	; 174
     d70:	9f 4f       	sbci	r25, 0xFF	; 255
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	3f ef       	ldi	r19, 0xFF	; 255
     d76:	4f e7       	ldi	r20, 0x7F	; 127
     d78:	57 e4       	ldi	r21, 0x47	; 71
     d7a:	fc 01       	movw	r30, r24
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	93 81       	ldd	r25, Z+3	; 0x03
     d84:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
     d88:	18 16       	cp	r1, r24
     d8a:	0c f0       	brlt	.+2      	; 0xd8e <main+0xc2>
     d8c:	4a c0       	rjmp	.+148    	; 0xe22 <main+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d8e:	ce 01       	movw	r24, r28
     d90:	82 5b       	subi	r24, 0xB2	; 178
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	40 e2       	ldi	r20, 0x20	; 32
     d9a:	51 e4       	ldi	r21, 0x41	; 65
     d9c:	fc 01       	movw	r30, r24
     d9e:	60 81       	ld	r22, Z
     da0:	71 81       	ldd	r23, Z+1	; 0x01
     da2:	82 81       	ldd	r24, Z+2	; 0x02
     da4:	93 81       	ldd	r25, Z+3	; 0x03
     da6:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	8e 01       	movw	r16, r28
     db0:	0a 5a       	subi	r16, 0xAA	; 170
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
     db4:	bc 01       	movw	r22, r24
     db6:	cd 01       	movw	r24, r26
     db8:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	f8 01       	movw	r30, r16
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	80 83       	st	Z, r24
     dc6:	24 c0       	rjmp	.+72     	; 0xe10 <main+0x144>
     dc8:	ce 01       	movw	r24, r28
     dca:	88 5a       	subi	r24, 0xA8	; 168
     dcc:	9f 4f       	sbci	r25, 0xFF	; 255
     dce:	29 e1       	ldi	r18, 0x19	; 25
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	fc 01       	movw	r30, r24
     dd4:	31 83       	std	Z+1, r19	; 0x01
     dd6:	20 83       	st	Z, r18
     dd8:	ce 01       	movw	r24, r28
     dda:	88 5a       	subi	r24, 0xA8	; 168
     ddc:	9f 4f       	sbci	r25, 0xFF	; 255
     dde:	fc 01       	movw	r30, r24
     de0:	80 81       	ld	r24, Z
     de2:	91 81       	ldd	r25, Z+1	; 0x01
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <main+0x118>
     de8:	9e 01       	movw	r18, r28
     dea:	28 5a       	subi	r18, 0xA8	; 168
     dec:	3f 4f       	sbci	r19, 0xFF	; 255
     dee:	f9 01       	movw	r30, r18
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df4:	ce 01       	movw	r24, r28
     df6:	8a 5a       	subi	r24, 0xAA	; 170
     df8:	9f 4f       	sbci	r25, 0xFF	; 255
     dfa:	9e 01       	movw	r18, r28
     dfc:	2a 5a       	subi	r18, 0xAA	; 170
     dfe:	3f 4f       	sbci	r19, 0xFF	; 255
     e00:	f9 01       	movw	r30, r18
     e02:	20 81       	ld	r18, Z
     e04:	31 81       	ldd	r19, Z+1	; 0x01
     e06:	21 50       	subi	r18, 0x01	; 1
     e08:	31 09       	sbc	r19, r1
     e0a:	fc 01       	movw	r30, r24
     e0c:	31 83       	std	Z+1, r19	; 0x01
     e0e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e10:	ce 01       	movw	r24, r28
     e12:	8a 5a       	subi	r24, 0xAA	; 170
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	fc 01       	movw	r30, r24
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	89 2b       	or	r24, r25
     e1e:	a1 f6       	brne	.-88     	; 0xdc8 <main+0xfc>
     e20:	2c c0       	rjmp	.+88     	; 0xe7a <main+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e22:	8e 01       	movw	r16, r28
     e24:	0a 5a       	subi	r16, 0xAA	; 170
     e26:	1f 4f       	sbci	r17, 0xFF	; 255
     e28:	ce 01       	movw	r24, r28
     e2a:	8e 5a       	subi	r24, 0xAE	; 174
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	fc 01       	movw	r30, r24
     e30:	60 81       	ld	r22, Z
     e32:	71 81       	ldd	r23, Z+1	; 0x01
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	93 81       	ldd	r25, Z+3	; 0x03
     e38:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	f8 01       	movw	r30, r16
     e42:	91 83       	std	Z+1, r25	; 0x01
     e44:	80 83       	st	Z, r24
     e46:	ce 01       	movw	r24, r28
     e48:	86 5a       	subi	r24, 0xA6	; 166
     e4a:	9f 4f       	sbci	r25, 0xFF	; 255
     e4c:	9e 01       	movw	r18, r28
     e4e:	2a 5a       	subi	r18, 0xAA	; 170
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
     e52:	f9 01       	movw	r30, r18
     e54:	20 81       	ld	r18, Z
     e56:	31 81       	ldd	r19, Z+1	; 0x01
     e58:	fc 01       	movw	r30, r24
     e5a:	31 83       	std	Z+1, r19	; 0x01
     e5c:	20 83       	st	Z, r18
     e5e:	ce 01       	movw	r24, r28
     e60:	86 5a       	subi	r24, 0xA6	; 166
     e62:	9f 4f       	sbci	r25, 0xFF	; 255
     e64:	fc 01       	movw	r30, r24
     e66:	80 81       	ld	r24, Z
     e68:	91 81       	ldd	r25, Z+1	; 0x01
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <main+0x19e>
     e6e:	9e 01       	movw	r18, r28
     e70:	26 5a       	subi	r18, 0xA6	; 166
     e72:	3f 4f       	sbci	r19, 0xFF	; 255
     e74:	f9 01       	movw	r30, r18
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	80 83       	st	Z, r24
	_delay_ms(5);
    while (1) 
    {
		uint8 key = Keypad_getPressedKey();
     e7a:	0e 94 10 04 	call	0x820	; 0x820 <Keypad_getPressedKey>
     e7e:	8d 83       	std	Y+5, r24	; 0x05
		if (key == 1)
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	09 f0       	breq	.+2      	; 0xe88 <main+0x1bc>
     e86:	7f c1       	rjmp	.+766    	; 0x1186 <main+0x4ba>
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a8 e4       	ldi	r26, 0x48	; 72
     e8e:	b2 e4       	ldi	r27, 0x42	; 66
     e90:	8a 87       	std	Y+10, r24	; 0x0a
     e92:	9b 87       	std	Y+11, r25	; 0x0b
     e94:	ac 87       	std	Y+12, r26	; 0x0c
     e96:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e98:	8e 01       	movw	r16, r28
     e9a:	0a 59       	subi	r16, 0x9A	; 154
     e9c:	1f 4f       	sbci	r17, 0xFF	; 255
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	4a e7       	ldi	r20, 0x7A	; 122
     ea4:	53 e4       	ldi	r21, 0x43	; 67
     ea6:	6a 85       	ldd	r22, Y+10	; 0x0a
     ea8:	7b 85       	ldd	r23, Y+11	; 0x0b
     eaa:	8c 85       	ldd	r24, Y+12	; 0x0c
     eac:	9d 85       	ldd	r25, Y+13	; 0x0d
     eae:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	f8 01       	movw	r30, r16
     eb8:	80 83       	st	Z, r24
     eba:	91 83       	std	Z+1, r25	; 0x01
     ebc:	a2 83       	std	Z+2, r26	; 0x02
     ebe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ec0:	ce 01       	movw	r24, r28
     ec2:	8a 59       	subi	r24, 0x9A	; 154
     ec4:	9f 4f       	sbci	r25, 0xFF	; 255
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e8       	ldi	r20, 0x80	; 128
     ecc:	5f e3       	ldi	r21, 0x3F	; 63
     ece:	fc 01       	movw	r30, r24
     ed0:	60 81       	ld	r22, Z
     ed2:	71 81       	ldd	r23, Z+1	; 0x01
     ed4:	82 81       	ldd	r24, Z+2	; 0x02
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
     ed8:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
     edc:	88 23       	and	r24, r24
     ede:	4c f4       	brge	.+18     	; 0xef2 <main+0x226>
		__ticks = 1;
     ee0:	ce 01       	movw	r24, r28
     ee2:	86 59       	subi	r24, 0x96	; 150
     ee4:	9f 4f       	sbci	r25, 0xFF	; 255
     ee6:	21 e0       	ldi	r18, 0x01	; 1
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	fc 01       	movw	r30, r24
     eec:	31 83       	std	Z+1, r19	; 0x01
     eee:	20 83       	st	Z, r18
     ef0:	69 c0       	rjmp	.+210    	; 0xfc4 <main+0x2f8>
	else if (__tmp > 65535)
     ef2:	ce 01       	movw	r24, r28
     ef4:	8a 59       	subi	r24, 0x9A	; 154
     ef6:	9f 4f       	sbci	r25, 0xFF	; 255
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	3f ef       	ldi	r19, 0xFF	; 255
     efc:	4f e7       	ldi	r20, 0x7F	; 127
     efe:	57 e4       	ldi	r21, 0x47	; 71
     f00:	fc 01       	movw	r30, r24
     f02:	60 81       	ld	r22, Z
     f04:	71 81       	ldd	r23, Z+1	; 0x01
     f06:	82 81       	ldd	r24, Z+2	; 0x02
     f08:	93 81       	ldd	r25, Z+3	; 0x03
     f0a:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
     f0e:	18 16       	cp	r1, r24
     f10:	0c f0       	brlt	.+2      	; 0xf14 <main+0x248>
     f12:	46 c0       	rjmp	.+140    	; 0xfa0 <main+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e2       	ldi	r20, 0x20	; 32
     f1a:	51 e4       	ldi	r21, 0x41	; 65
     f1c:	6a 85       	ldd	r22, Y+10	; 0x0a
     f1e:	7b 85       	ldd	r23, Y+11	; 0x0b
     f20:	8c 85       	ldd	r24, Y+12	; 0x0c
     f22:	9d 85       	ldd	r25, Y+13	; 0x0d
     f24:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	8e 01       	movw	r16, r28
     f2e:	06 59       	subi	r16, 0x96	; 150
     f30:	1f 4f       	sbci	r17, 0xFF	; 255
     f32:	bc 01       	movw	r22, r24
     f34:	cd 01       	movw	r24, r26
     f36:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	f8 01       	movw	r30, r16
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	80 83       	st	Z, r24
     f44:	24 c0       	rjmp	.+72     	; 0xf8e <main+0x2c2>
     f46:	ce 01       	movw	r24, r28
     f48:	84 59       	subi	r24, 0x94	; 148
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
     f4c:	29 e1       	ldi	r18, 0x19	; 25
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	fc 01       	movw	r30, r24
     f52:	31 83       	std	Z+1, r19	; 0x01
     f54:	20 83       	st	Z, r18
     f56:	ce 01       	movw	r24, r28
     f58:	84 59       	subi	r24, 0x94	; 148
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	fc 01       	movw	r30, r24
     f5e:	80 81       	ld	r24, Z
     f60:	91 81       	ldd	r25, Z+1	; 0x01
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <main+0x296>
     f66:	9e 01       	movw	r18, r28
     f68:	24 59       	subi	r18, 0x94	; 148
     f6a:	3f 4f       	sbci	r19, 0xFF	; 255
     f6c:	f9 01       	movw	r30, r18
     f6e:	91 83       	std	Z+1, r25	; 0x01
     f70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f72:	ce 01       	movw	r24, r28
     f74:	86 59       	subi	r24, 0x96	; 150
     f76:	9f 4f       	sbci	r25, 0xFF	; 255
     f78:	9e 01       	movw	r18, r28
     f7a:	26 59       	subi	r18, 0x96	; 150
     f7c:	3f 4f       	sbci	r19, 0xFF	; 255
     f7e:	f9 01       	movw	r30, r18
     f80:	20 81       	ld	r18, Z
     f82:	31 81       	ldd	r19, Z+1	; 0x01
     f84:	21 50       	subi	r18, 0x01	; 1
     f86:	31 09       	sbc	r19, r1
     f88:	fc 01       	movw	r30, r24
     f8a:	31 83       	std	Z+1, r19	; 0x01
     f8c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8e:	ce 01       	movw	r24, r28
     f90:	86 59       	subi	r24, 0x96	; 150
     f92:	9f 4f       	sbci	r25, 0xFF	; 255
     f94:	fc 01       	movw	r30, r24
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	89 2b       	or	r24, r25
     f9c:	a1 f6       	brne	.-88     	; 0xf46 <main+0x27a>
     f9e:	2c c0       	rjmp	.+88     	; 0xff8 <main+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa0:	8e 01       	movw	r16, r28
     fa2:	06 59       	subi	r16, 0x96	; 150
     fa4:	1f 4f       	sbci	r17, 0xFF	; 255
     fa6:	ce 01       	movw	r24, r28
     fa8:	8a 59       	subi	r24, 0x9A	; 154
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	fc 01       	movw	r30, r24
     fae:	60 81       	ld	r22, Z
     fb0:	71 81       	ldd	r23, Z+1	; 0x01
     fb2:	82 81       	ldd	r24, Z+2	; 0x02
     fb4:	93 81       	ldd	r25, Z+3	; 0x03
     fb6:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	f8 01       	movw	r30, r16
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	80 83       	st	Z, r24
     fc4:	ce 01       	movw	r24, r28
     fc6:	82 59       	subi	r24, 0x92	; 146
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	9e 01       	movw	r18, r28
     fcc:	26 59       	subi	r18, 0x96	; 150
     fce:	3f 4f       	sbci	r19, 0xFF	; 255
     fd0:	f9 01       	movw	r30, r18
     fd2:	20 81       	ld	r18, Z
     fd4:	31 81       	ldd	r19, Z+1	; 0x01
     fd6:	fc 01       	movw	r30, r24
     fd8:	31 83       	std	Z+1, r19	; 0x01
     fda:	20 83       	st	Z, r18
     fdc:	ce 01       	movw	r24, r28
     fde:	82 59       	subi	r24, 0x92	; 146
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	fc 01       	movw	r30, r24
     fe4:	80 81       	ld	r24, Z
     fe6:	91 81       	ldd	r25, Z+1	; 0x01
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <main+0x31c>
     fec:	9e 01       	movw	r18, r28
     fee:	22 59       	subi	r18, 0x92	; 146
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255
     ff2:	f9 01       	movw	r30, r18
     ff4:	91 83       	std	Z+1, r25	; 0x01
     ff6:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(ONE);
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(TWO);
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(THREE);
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(FOUR);
    100a:	84 e0       	ldi	r24, 0x04	; 4
    100c:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			/*display one*/
			BCDSevegments_displayNo(ONE);
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a8 e4       	ldi	r26, 0x48	; 72
    101c:	b2 e4       	ldi	r27, 0x42	; 66
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	9a 83       	std	Y+2, r25	; 0x02
    1022:	ab 83       	std	Y+3, r26	; 0x03
    1024:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1026:	8e 01       	movw	r16, r28
    1028:	04 5a       	subi	r16, 0xA4	; 164
    102a:	1f 4f       	sbci	r17, 0xFF	; 255
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	4a e7       	ldi	r20, 0x7A	; 122
    1032:	53 e4       	ldi	r21, 0x43	; 67
    1034:	69 81       	ldd	r22, Y+1	; 0x01
    1036:	7a 81       	ldd	r23, Y+2	; 0x02
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	f8 01       	movw	r30, r16
    1046:	80 83       	st	Z, r24
    1048:	91 83       	std	Z+1, r25	; 0x01
    104a:	a2 83       	std	Z+2, r26	; 0x02
    104c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    104e:	ce 01       	movw	r24, r28
    1050:	84 5a       	subi	r24, 0xA4	; 164
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e8       	ldi	r20, 0x80	; 128
    105a:	5f e3       	ldi	r21, 0x3F	; 63
    105c:	fc 01       	movw	r30, r24
    105e:	60 81       	ld	r22, Z
    1060:	71 81       	ldd	r23, Z+1	; 0x01
    1062:	82 81       	ldd	r24, Z+2	; 0x02
    1064:	93 81       	ldd	r25, Z+3	; 0x03
    1066:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    106a:	88 23       	and	r24, r24
    106c:	4c f4       	brge	.+18     	; 0x1080 <main+0x3b4>
		__ticks = 1;
    106e:	ce 01       	movw	r24, r28
    1070:	80 5a       	subi	r24, 0xA0	; 160
    1072:	9f 4f       	sbci	r25, 0xFF	; 255
    1074:	21 e0       	ldi	r18, 0x01	; 1
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	fc 01       	movw	r30, r24
    107a:	31 83       	std	Z+1, r19	; 0x01
    107c:	20 83       	st	Z, r18
    107e:	69 c0       	rjmp	.+210    	; 0x1152 <main+0x486>
	else if (__tmp > 65535)
    1080:	ce 01       	movw	r24, r28
    1082:	84 5a       	subi	r24, 0xA4	; 164
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	3f ef       	ldi	r19, 0xFF	; 255
    108a:	4f e7       	ldi	r20, 0x7F	; 127
    108c:	57 e4       	ldi	r21, 0x47	; 71
    108e:	fc 01       	movw	r30, r24
    1090:	60 81       	ld	r22, Z
    1092:	71 81       	ldd	r23, Z+1	; 0x01
    1094:	82 81       	ldd	r24, Z+2	; 0x02
    1096:	93 81       	ldd	r25, Z+3	; 0x03
    1098:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    109c:	18 16       	cp	r1, r24
    109e:	0c f0       	brlt	.+2      	; 0x10a2 <main+0x3d6>
    10a0:	46 c0       	rjmp	.+140    	; 0x112e <main+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e2       	ldi	r20, 0x20	; 32
    10a8:	51 e4       	ldi	r21, 0x41	; 65
    10aa:	69 81       	ldd	r22, Y+1	; 0x01
    10ac:	7a 81       	ldd	r23, Y+2	; 0x02
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	8e 01       	movw	r16, r28
    10bc:	00 5a       	subi	r16, 0xA0	; 160
    10be:	1f 4f       	sbci	r17, 0xFF	; 255
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	f8 01       	movw	r30, r16
    10ce:	91 83       	std	Z+1, r25	; 0x01
    10d0:	80 83       	st	Z, r24
    10d2:	24 c0       	rjmp	.+72     	; 0x111c <main+0x450>
    10d4:	ce 01       	movw	r24, r28
    10d6:	8e 59       	subi	r24, 0x9E	; 158
    10d8:	9f 4f       	sbci	r25, 0xFF	; 255
    10da:	29 e1       	ldi	r18, 0x19	; 25
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	fc 01       	movw	r30, r24
    10e0:	31 83       	std	Z+1, r19	; 0x01
    10e2:	20 83       	st	Z, r18
    10e4:	ce 01       	movw	r24, r28
    10e6:	8e 59       	subi	r24, 0x9E	; 158
    10e8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ea:	fc 01       	movw	r30, r24
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <main+0x424>
    10f4:	9e 01       	movw	r18, r28
    10f6:	2e 59       	subi	r18, 0x9E	; 158
    10f8:	3f 4f       	sbci	r19, 0xFF	; 255
    10fa:	f9 01       	movw	r30, r18
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1100:	ce 01       	movw	r24, r28
    1102:	80 5a       	subi	r24, 0xA0	; 160
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	9e 01       	movw	r18, r28
    1108:	20 5a       	subi	r18, 0xA0	; 160
    110a:	3f 4f       	sbci	r19, 0xFF	; 255
    110c:	f9 01       	movw	r30, r18
    110e:	20 81       	ld	r18, Z
    1110:	31 81       	ldd	r19, Z+1	; 0x01
    1112:	21 50       	subi	r18, 0x01	; 1
    1114:	31 09       	sbc	r19, r1
    1116:	fc 01       	movw	r30, r24
    1118:	31 83       	std	Z+1, r19	; 0x01
    111a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111c:	ce 01       	movw	r24, r28
    111e:	80 5a       	subi	r24, 0xA0	; 160
    1120:	9f 4f       	sbci	r25, 0xFF	; 255
    1122:	fc 01       	movw	r30, r24
    1124:	80 81       	ld	r24, Z
    1126:	91 81       	ldd	r25, Z+1	; 0x01
    1128:	89 2b       	or	r24, r25
    112a:	a1 f6       	brne	.-88     	; 0x10d4 <main+0x408>
    112c:	2c c0       	rjmp	.+88     	; 0x1186 <main+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    112e:	8e 01       	movw	r16, r28
    1130:	00 5a       	subi	r16, 0xA0	; 160
    1132:	1f 4f       	sbci	r17, 0xFF	; 255
    1134:	ce 01       	movw	r24, r28
    1136:	84 5a       	subi	r24, 0xA4	; 164
    1138:	9f 4f       	sbci	r25, 0xFF	; 255
    113a:	fc 01       	movw	r30, r24
    113c:	60 81       	ld	r22, Z
    113e:	71 81       	ldd	r23, Z+1	; 0x01
    1140:	82 81       	ldd	r24, Z+2	; 0x02
    1142:	93 81       	ldd	r25, Z+3	; 0x03
    1144:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	f8 01       	movw	r30, r16
    114e:	91 83       	std	Z+1, r25	; 0x01
    1150:	80 83       	st	Z, r24
    1152:	ce 01       	movw	r24, r28
    1154:	8c 59       	subi	r24, 0x9C	; 156
    1156:	9f 4f       	sbci	r25, 0xFF	; 255
    1158:	9e 01       	movw	r18, r28
    115a:	20 5a       	subi	r18, 0xA0	; 160
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	f9 01       	movw	r30, r18
    1160:	20 81       	ld	r18, Z
    1162:	31 81       	ldd	r19, Z+1	; 0x01
    1164:	fc 01       	movw	r30, r24
    1166:	31 83       	std	Z+1, r19	; 0x01
    1168:	20 83       	st	Z, r18
    116a:	ce 01       	movw	r24, r28
    116c:	8c 59       	subi	r24, 0x9C	; 156
    116e:	9f 4f       	sbci	r25, 0xFF	; 255
    1170:	fc 01       	movw	r30, r24
    1172:	80 81       	ld	r24, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <main+0x4aa>
    117a:	9e 01       	movw	r18, r28
    117c:	2c 59       	subi	r18, 0x9C	; 156
    117e:	3f 4f       	sbci	r19, 0xFF	; 255
    1180:	f9 01       	movw	r30, r18
    1182:	91 83       	std	Z+1, r25	; 0x01
    1184:	80 83       	st	Z, r24
			_delay_ms(50);
		}
		if(key == 2)
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	82 30       	cpi	r24, 0x02	; 2
    118a:	09 f0       	breq	.+2      	; 0x118e <main+0x4c2>
    118c:	7f c1       	rjmp	.+766    	; 0x148c <main+0x7c0>
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	a8 e4       	ldi	r26, 0x48	; 72
    1194:	b2 e4       	ldi	r27, 0x42	; 66
    1196:	8a 8b       	std	Y+18, r24	; 0x12
    1198:	9b 8b       	std	Y+19, r25	; 0x13
    119a:	ac 8b       	std	Y+20, r26	; 0x14
    119c:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    119e:	8e 01       	movw	r16, r28
    11a0:	06 58       	subi	r16, 0x86	; 134
    11a2:	1f 4f       	sbci	r17, 0xFF	; 255
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	4a e7       	ldi	r20, 0x7A	; 122
    11aa:	53 e4       	ldi	r21, 0x43	; 67
    11ac:	6a 89       	ldd	r22, Y+18	; 0x12
    11ae:	7b 89       	ldd	r23, Y+19	; 0x13
    11b0:	8c 89       	ldd	r24, Y+20	; 0x14
    11b2:	9d 89       	ldd	r25, Y+21	; 0x15
    11b4:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	f8 01       	movw	r30, r16
    11be:	80 83       	st	Z, r24
    11c0:	91 83       	std	Z+1, r25	; 0x01
    11c2:	a2 83       	std	Z+2, r26	; 0x02
    11c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11c6:	ce 01       	movw	r24, r28
    11c8:	86 58       	subi	r24, 0x86	; 134
    11ca:	9f 4f       	sbci	r25, 0xFF	; 255
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e8       	ldi	r20, 0x80	; 128
    11d2:	5f e3       	ldi	r21, 0x3F	; 63
    11d4:	fc 01       	movw	r30, r24
    11d6:	60 81       	ld	r22, Z
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	93 81       	ldd	r25, Z+3	; 0x03
    11de:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    11e2:	88 23       	and	r24, r24
    11e4:	4c f4       	brge	.+18     	; 0x11f8 <main+0x52c>
		__ticks = 1;
    11e6:	ce 01       	movw	r24, r28
    11e8:	82 58       	subi	r24, 0x82	; 130
    11ea:	9f 4f       	sbci	r25, 0xFF	; 255
    11ec:	21 e0       	ldi	r18, 0x01	; 1
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	fc 01       	movw	r30, r24
    11f2:	31 83       	std	Z+1, r19	; 0x01
    11f4:	20 83       	st	Z, r18
    11f6:	69 c0       	rjmp	.+210    	; 0x12ca <main+0x5fe>
	else if (__tmp > 65535)
    11f8:	ce 01       	movw	r24, r28
    11fa:	86 58       	subi	r24, 0x86	; 134
    11fc:	9f 4f       	sbci	r25, 0xFF	; 255
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	3f ef       	ldi	r19, 0xFF	; 255
    1202:	4f e7       	ldi	r20, 0x7F	; 127
    1204:	57 e4       	ldi	r21, 0x47	; 71
    1206:	fc 01       	movw	r30, r24
    1208:	60 81       	ld	r22, Z
    120a:	71 81       	ldd	r23, Z+1	; 0x01
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	93 81       	ldd	r25, Z+3	; 0x03
    1210:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    1214:	18 16       	cp	r1, r24
    1216:	0c f0       	brlt	.+2      	; 0x121a <main+0x54e>
    1218:	46 c0       	rjmp	.+140    	; 0x12a6 <main+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e2       	ldi	r20, 0x20	; 32
    1220:	51 e4       	ldi	r21, 0x41	; 65
    1222:	6a 89       	ldd	r22, Y+18	; 0x12
    1224:	7b 89       	ldd	r23, Y+19	; 0x13
    1226:	8c 89       	ldd	r24, Y+20	; 0x14
    1228:	9d 89       	ldd	r25, Y+21	; 0x15
    122a:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8e 01       	movw	r16, r28
    1234:	02 58       	subi	r16, 0x82	; 130
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	f8 01       	movw	r30, r16
    1246:	91 83       	std	Z+1, r25	; 0x01
    1248:	80 83       	st	Z, r24
    124a:	24 c0       	rjmp	.+72     	; 0x1294 <main+0x5c8>
    124c:	ce 01       	movw	r24, r28
    124e:	80 58       	subi	r24, 0x80	; 128
    1250:	9f 4f       	sbci	r25, 0xFF	; 255
    1252:	29 e1       	ldi	r18, 0x19	; 25
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	fc 01       	movw	r30, r24
    1258:	31 83       	std	Z+1, r19	; 0x01
    125a:	20 83       	st	Z, r18
    125c:	ce 01       	movw	r24, r28
    125e:	80 58       	subi	r24, 0x80	; 128
    1260:	9f 4f       	sbci	r25, 0xFF	; 255
    1262:	fc 01       	movw	r30, r24
    1264:	80 81       	ld	r24, Z
    1266:	91 81       	ldd	r25, Z+1	; 0x01
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <main+0x59c>
    126c:	9e 01       	movw	r18, r28
    126e:	20 58       	subi	r18, 0x80	; 128
    1270:	3f 4f       	sbci	r19, 0xFF	; 255
    1272:	f9 01       	movw	r30, r18
    1274:	91 83       	std	Z+1, r25	; 0x01
    1276:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1278:	ce 01       	movw	r24, r28
    127a:	82 58       	subi	r24, 0x82	; 130
    127c:	9f 4f       	sbci	r25, 0xFF	; 255
    127e:	9e 01       	movw	r18, r28
    1280:	22 58       	subi	r18, 0x82	; 130
    1282:	3f 4f       	sbci	r19, 0xFF	; 255
    1284:	f9 01       	movw	r30, r18
    1286:	20 81       	ld	r18, Z
    1288:	31 81       	ldd	r19, Z+1	; 0x01
    128a:	21 50       	subi	r18, 0x01	; 1
    128c:	31 09       	sbc	r19, r1
    128e:	fc 01       	movw	r30, r24
    1290:	31 83       	std	Z+1, r19	; 0x01
    1292:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1294:	ce 01       	movw	r24, r28
    1296:	82 58       	subi	r24, 0x82	; 130
    1298:	9f 4f       	sbci	r25, 0xFF	; 255
    129a:	fc 01       	movw	r30, r24
    129c:	80 81       	ld	r24, Z
    129e:	91 81       	ldd	r25, Z+1	; 0x01
    12a0:	89 2b       	or	r24, r25
    12a2:	a1 f6       	brne	.-88     	; 0x124c <main+0x580>
    12a4:	2c c0       	rjmp	.+88     	; 0x12fe <main+0x632>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a6:	8e 01       	movw	r16, r28
    12a8:	02 58       	subi	r16, 0x82	; 130
    12aa:	1f 4f       	sbci	r17, 0xFF	; 255
    12ac:	ce 01       	movw	r24, r28
    12ae:	86 58       	subi	r24, 0x86	; 134
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	fc 01       	movw	r30, r24
    12b4:	60 81       	ld	r22, Z
    12b6:	71 81       	ldd	r23, Z+1	; 0x01
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	f8 01       	movw	r30, r16
    12c6:	91 83       	std	Z+1, r25	; 0x01
    12c8:	80 83       	st	Z, r24
    12ca:	ce 01       	movw	r24, r28
    12cc:	8e 57       	subi	r24, 0x7E	; 126
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	9e 01       	movw	r18, r28
    12d2:	22 58       	subi	r18, 0x82	; 130
    12d4:	3f 4f       	sbci	r19, 0xFF	; 255
    12d6:	f9 01       	movw	r30, r18
    12d8:	20 81       	ld	r18, Z
    12da:	31 81       	ldd	r19, Z+1	; 0x01
    12dc:	fc 01       	movw	r30, r24
    12de:	31 83       	std	Z+1, r19	; 0x01
    12e0:	20 83       	st	Z, r18
    12e2:	ce 01       	movw	r24, r28
    12e4:	8e 57       	subi	r24, 0x7E	; 126
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	fc 01       	movw	r30, r24
    12ea:	80 81       	ld	r24, Z
    12ec:	91 81       	ldd	r25, Z+1	; 0x01
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <main+0x622>
    12f2:	9e 01       	movw	r18, r28
    12f4:	2e 57       	subi	r18, 0x7E	; 126
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255
    12f8:	f9 01       	movw	r30, r18
    12fa:	91 83       	std	Z+1, r25	; 0x01
    12fc:	80 83       	st	Z, r24
		{
		_delay_ms(50);
		BCDSevegments_enable(ONE);
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(TWO);
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(THREE);
    130a:	83 e0       	ldi	r24, 0x03	; 3
    130c:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(FOUR);
    1310:	84 e0       	ldi	r24, 0x04	; 4
    1312:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_displayNo(TWO);
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	a8 e4       	ldi	r26, 0x48	; 72
    1322:	b2 e4       	ldi	r27, 0x42	; 66
    1324:	8e 83       	std	Y+6, r24	; 0x06
    1326:	9f 83       	std	Y+7, r25	; 0x07
    1328:	a8 87       	std	Y+8, r26	; 0x08
    132a:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    132c:	8e 01       	movw	r16, r28
    132e:	00 59       	subi	r16, 0x90	; 144
    1330:	1f 4f       	sbci	r17, 0xFF	; 255
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	4a e7       	ldi	r20, 0x7A	; 122
    1338:	53 e4       	ldi	r21, 0x43	; 67
    133a:	6e 81       	ldd	r22, Y+6	; 0x06
    133c:	7f 81       	ldd	r23, Y+7	; 0x07
    133e:	88 85       	ldd	r24, Y+8	; 0x08
    1340:	99 85       	ldd	r25, Y+9	; 0x09
    1342:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	f8 01       	movw	r30, r16
    134c:	80 83       	st	Z, r24
    134e:	91 83       	std	Z+1, r25	; 0x01
    1350:	a2 83       	std	Z+2, r26	; 0x02
    1352:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1354:	ce 01       	movw	r24, r28
    1356:	80 59       	subi	r24, 0x90	; 144
    1358:	9f 4f       	sbci	r25, 0xFF	; 255
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e8       	ldi	r20, 0x80	; 128
    1360:	5f e3       	ldi	r21, 0x3F	; 63
    1362:	fc 01       	movw	r30, r24
    1364:	60 81       	ld	r22, Z
    1366:	71 81       	ldd	r23, Z+1	; 0x01
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	93 81       	ldd	r25, Z+3	; 0x03
    136c:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    1370:	88 23       	and	r24, r24
    1372:	4c f4       	brge	.+18     	; 0x1386 <main+0x6ba>
		__ticks = 1;
    1374:	ce 01       	movw	r24, r28
    1376:	8c 58       	subi	r24, 0x8C	; 140
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	21 e0       	ldi	r18, 0x01	; 1
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	fc 01       	movw	r30, r24
    1380:	31 83       	std	Z+1, r19	; 0x01
    1382:	20 83       	st	Z, r18
    1384:	69 c0       	rjmp	.+210    	; 0x1458 <main+0x78c>
	else if (__tmp > 65535)
    1386:	ce 01       	movw	r24, r28
    1388:	80 59       	subi	r24, 0x90	; 144
    138a:	9f 4f       	sbci	r25, 0xFF	; 255
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	3f ef       	ldi	r19, 0xFF	; 255
    1390:	4f e7       	ldi	r20, 0x7F	; 127
    1392:	57 e4       	ldi	r21, 0x47	; 71
    1394:	fc 01       	movw	r30, r24
    1396:	60 81       	ld	r22, Z
    1398:	71 81       	ldd	r23, Z+1	; 0x01
    139a:	82 81       	ldd	r24, Z+2	; 0x02
    139c:	93 81       	ldd	r25, Z+3	; 0x03
    139e:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    13a2:	18 16       	cp	r1, r24
    13a4:	0c f0       	brlt	.+2      	; 0x13a8 <main+0x6dc>
    13a6:	46 c0       	rjmp	.+140    	; 0x1434 <main+0x768>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e2       	ldi	r20, 0x20	; 32
    13ae:	51 e4       	ldi	r21, 0x41	; 65
    13b0:	6e 81       	ldd	r22, Y+6	; 0x06
    13b2:	7f 81       	ldd	r23, Y+7	; 0x07
    13b4:	88 85       	ldd	r24, Y+8	; 0x08
    13b6:	99 85       	ldd	r25, Y+9	; 0x09
    13b8:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	8e 01       	movw	r16, r28
    13c2:	0c 58       	subi	r16, 0x8C	; 140
    13c4:	1f 4f       	sbci	r17, 0xFF	; 255
    13c6:	bc 01       	movw	r22, r24
    13c8:	cd 01       	movw	r24, r26
    13ca:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	f8 01       	movw	r30, r16
    13d4:	91 83       	std	Z+1, r25	; 0x01
    13d6:	80 83       	st	Z, r24
    13d8:	24 c0       	rjmp	.+72     	; 0x1422 <main+0x756>
    13da:	ce 01       	movw	r24, r28
    13dc:	8a 58       	subi	r24, 0x8A	; 138
    13de:	9f 4f       	sbci	r25, 0xFF	; 255
    13e0:	29 e1       	ldi	r18, 0x19	; 25
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	fc 01       	movw	r30, r24
    13e6:	31 83       	std	Z+1, r19	; 0x01
    13e8:	20 83       	st	Z, r18
    13ea:	ce 01       	movw	r24, r28
    13ec:	8a 58       	subi	r24, 0x8A	; 138
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	fc 01       	movw	r30, r24
    13f2:	80 81       	ld	r24, Z
    13f4:	91 81       	ldd	r25, Z+1	; 0x01
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <main+0x72a>
    13fa:	9e 01       	movw	r18, r28
    13fc:	2a 58       	subi	r18, 0x8A	; 138
    13fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1400:	f9 01       	movw	r30, r18
    1402:	91 83       	std	Z+1, r25	; 0x01
    1404:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1406:	ce 01       	movw	r24, r28
    1408:	8c 58       	subi	r24, 0x8C	; 140
    140a:	9f 4f       	sbci	r25, 0xFF	; 255
    140c:	9e 01       	movw	r18, r28
    140e:	2c 58       	subi	r18, 0x8C	; 140
    1410:	3f 4f       	sbci	r19, 0xFF	; 255
    1412:	f9 01       	movw	r30, r18
    1414:	20 81       	ld	r18, Z
    1416:	31 81       	ldd	r19, Z+1	; 0x01
    1418:	21 50       	subi	r18, 0x01	; 1
    141a:	31 09       	sbc	r19, r1
    141c:	fc 01       	movw	r30, r24
    141e:	31 83       	std	Z+1, r19	; 0x01
    1420:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1422:	ce 01       	movw	r24, r28
    1424:	8c 58       	subi	r24, 0x8C	; 140
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	fc 01       	movw	r30, r24
    142a:	80 81       	ld	r24, Z
    142c:	91 81       	ldd	r25, Z+1	; 0x01
    142e:	89 2b       	or	r24, r25
    1430:	a1 f6       	brne	.-88     	; 0x13da <main+0x70e>
    1432:	2c c0       	rjmp	.+88     	; 0x148c <main+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1434:	8e 01       	movw	r16, r28
    1436:	0c 58       	subi	r16, 0x8C	; 140
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	ce 01       	movw	r24, r28
    143c:	80 59       	subi	r24, 0x90	; 144
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	fc 01       	movw	r30, r24
    1442:	60 81       	ld	r22, Z
    1444:	71 81       	ldd	r23, Z+1	; 0x01
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	f8 01       	movw	r30, r16
    1454:	91 83       	std	Z+1, r25	; 0x01
    1456:	80 83       	st	Z, r24
    1458:	ce 01       	movw	r24, r28
    145a:	88 58       	subi	r24, 0x88	; 136
    145c:	9f 4f       	sbci	r25, 0xFF	; 255
    145e:	9e 01       	movw	r18, r28
    1460:	2c 58       	subi	r18, 0x8C	; 140
    1462:	3f 4f       	sbci	r19, 0xFF	; 255
    1464:	f9 01       	movw	r30, r18
    1466:	20 81       	ld	r18, Z
    1468:	31 81       	ldd	r19, Z+1	; 0x01
    146a:	fc 01       	movw	r30, r24
    146c:	31 83       	std	Z+1, r19	; 0x01
    146e:	20 83       	st	Z, r18
    1470:	ce 01       	movw	r24, r28
    1472:	88 58       	subi	r24, 0x88	; 136
    1474:	9f 4f       	sbci	r25, 0xFF	; 255
    1476:	fc 01       	movw	r30, r24
    1478:	80 81       	ld	r24, Z
    147a:	91 81       	ldd	r25, Z+1	; 0x01
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <main+0x7b0>
    1480:	9e 01       	movw	r18, r28
    1482:	28 58       	subi	r18, 0x88	; 136
    1484:	3f 4f       	sbci	r19, 0xFF	; 255
    1486:	f9 01       	movw	r30, r18
    1488:	91 83       	std	Z+1, r25	; 0x01
    148a:	80 83       	st	Z, r24
		_delay_ms(50);
		}
		if(key == 3)
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	83 30       	cpi	r24, 0x03	; 3
    1490:	09 f0       	breq	.+2      	; 0x1494 <main+0x7c8>
    1492:	7f c1       	rjmp	.+766    	; 0x1792 <main+0xac6>
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a8 e4       	ldi	r26, 0x48	; 72
    149a:	b2 e4       	ldi	r27, 0x42	; 66
    149c:	8a 8f       	std	Y+26, r24	; 0x1a
    149e:	9b 8f       	std	Y+27, r25	; 0x1b
    14a0:	ac 8f       	std	Y+28, r26	; 0x1c
    14a2:	bd 8f       	std	Y+29, r27	; 0x1d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14a4:	8e 01       	movw	r16, r28
    14a6:	02 57       	subi	r16, 0x72	; 114
    14a8:	1f 4f       	sbci	r17, 0xFF	; 255
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	4a e7       	ldi	r20, 0x7A	; 122
    14b0:	53 e4       	ldi	r21, 0x43	; 67
    14b2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    14b4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    14b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    14ba:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	f8 01       	movw	r30, r16
    14c4:	80 83       	st	Z, r24
    14c6:	91 83       	std	Z+1, r25	; 0x01
    14c8:	a2 83       	std	Z+2, r26	; 0x02
    14ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14cc:	ce 01       	movw	r24, r28
    14ce:	82 57       	subi	r24, 0x72	; 114
    14d0:	9f 4f       	sbci	r25, 0xFF	; 255
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e8       	ldi	r20, 0x80	; 128
    14d8:	5f e3       	ldi	r21, 0x3F	; 63
    14da:	fc 01       	movw	r30, r24
    14dc:	60 81       	ld	r22, Z
    14de:	71 81       	ldd	r23, Z+1	; 0x01
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    14e8:	88 23       	and	r24, r24
    14ea:	4c f4       	brge	.+18     	; 0x14fe <main+0x832>
		__ticks = 1;
    14ec:	ce 01       	movw	r24, r28
    14ee:	8e 56       	subi	r24, 0x6E	; 110
    14f0:	9f 4f       	sbci	r25, 0xFF	; 255
    14f2:	21 e0       	ldi	r18, 0x01	; 1
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	fc 01       	movw	r30, r24
    14f8:	31 83       	std	Z+1, r19	; 0x01
    14fa:	20 83       	st	Z, r18
    14fc:	69 c0       	rjmp	.+210    	; 0x15d0 <main+0x904>
	else if (__tmp > 65535)
    14fe:	ce 01       	movw	r24, r28
    1500:	82 57       	subi	r24, 0x72	; 114
    1502:	9f 4f       	sbci	r25, 0xFF	; 255
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	3f ef       	ldi	r19, 0xFF	; 255
    1508:	4f e7       	ldi	r20, 0x7F	; 127
    150a:	57 e4       	ldi	r21, 0x47	; 71
    150c:	fc 01       	movw	r30, r24
    150e:	60 81       	ld	r22, Z
    1510:	71 81       	ldd	r23, Z+1	; 0x01
    1512:	82 81       	ldd	r24, Z+2	; 0x02
    1514:	93 81       	ldd	r25, Z+3	; 0x03
    1516:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    151a:	18 16       	cp	r1, r24
    151c:	0c f0       	brlt	.+2      	; 0x1520 <main+0x854>
    151e:	46 c0       	rjmp	.+140    	; 0x15ac <main+0x8e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e2       	ldi	r20, 0x20	; 32
    1526:	51 e4       	ldi	r21, 0x41	; 65
    1528:	6a 8d       	ldd	r22, Y+26	; 0x1a
    152a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    152c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    152e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1530:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	8e 01       	movw	r16, r28
    153a:	0e 56       	subi	r16, 0x6E	; 110
    153c:	1f 4f       	sbci	r17, 0xFF	; 255
    153e:	bc 01       	movw	r22, r24
    1540:	cd 01       	movw	r24, r26
    1542:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	f8 01       	movw	r30, r16
    154c:	91 83       	std	Z+1, r25	; 0x01
    154e:	80 83       	st	Z, r24
    1550:	24 c0       	rjmp	.+72     	; 0x159a <main+0x8ce>
    1552:	ce 01       	movw	r24, r28
    1554:	8c 56       	subi	r24, 0x6C	; 108
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	29 e1       	ldi	r18, 0x19	; 25
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	fc 01       	movw	r30, r24
    155e:	31 83       	std	Z+1, r19	; 0x01
    1560:	20 83       	st	Z, r18
    1562:	ce 01       	movw	r24, r28
    1564:	8c 56       	subi	r24, 0x6C	; 108
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	fc 01       	movw	r30, r24
    156a:	80 81       	ld	r24, Z
    156c:	91 81       	ldd	r25, Z+1	; 0x01
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <main+0x8a2>
    1572:	9e 01       	movw	r18, r28
    1574:	2c 56       	subi	r18, 0x6C	; 108
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
    1578:	f9 01       	movw	r30, r18
    157a:	91 83       	std	Z+1, r25	; 0x01
    157c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157e:	ce 01       	movw	r24, r28
    1580:	8e 56       	subi	r24, 0x6E	; 110
    1582:	9f 4f       	sbci	r25, 0xFF	; 255
    1584:	9e 01       	movw	r18, r28
    1586:	2e 56       	subi	r18, 0x6E	; 110
    1588:	3f 4f       	sbci	r19, 0xFF	; 255
    158a:	f9 01       	movw	r30, r18
    158c:	20 81       	ld	r18, Z
    158e:	31 81       	ldd	r19, Z+1	; 0x01
    1590:	21 50       	subi	r18, 0x01	; 1
    1592:	31 09       	sbc	r19, r1
    1594:	fc 01       	movw	r30, r24
    1596:	31 83       	std	Z+1, r19	; 0x01
    1598:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159a:	ce 01       	movw	r24, r28
    159c:	8e 56       	subi	r24, 0x6E	; 110
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	fc 01       	movw	r30, r24
    15a2:	80 81       	ld	r24, Z
    15a4:	91 81       	ldd	r25, Z+1	; 0x01
    15a6:	89 2b       	or	r24, r25
    15a8:	a1 f6       	brne	.-88     	; 0x1552 <main+0x886>
    15aa:	2c c0       	rjmp	.+88     	; 0x1604 <main+0x938>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ac:	8e 01       	movw	r16, r28
    15ae:	0e 56       	subi	r16, 0x6E	; 110
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
    15b2:	ce 01       	movw	r24, r28
    15b4:	82 57       	subi	r24, 0x72	; 114
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	fc 01       	movw	r30, r24
    15ba:	60 81       	ld	r22, Z
    15bc:	71 81       	ldd	r23, Z+1	; 0x01
    15be:	82 81       	ldd	r24, Z+2	; 0x02
    15c0:	93 81       	ldd	r25, Z+3	; 0x03
    15c2:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	f8 01       	movw	r30, r16
    15cc:	91 83       	std	Z+1, r25	; 0x01
    15ce:	80 83       	st	Z, r24
    15d0:	ce 01       	movw	r24, r28
    15d2:	8a 56       	subi	r24, 0x6A	; 106
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	9e 01       	movw	r18, r28
    15d8:	2e 56       	subi	r18, 0x6E	; 110
    15da:	3f 4f       	sbci	r19, 0xFF	; 255
    15dc:	f9 01       	movw	r30, r18
    15de:	20 81       	ld	r18, Z
    15e0:	31 81       	ldd	r19, Z+1	; 0x01
    15e2:	fc 01       	movw	r30, r24
    15e4:	31 83       	std	Z+1, r19	; 0x01
    15e6:	20 83       	st	Z, r18
    15e8:	ce 01       	movw	r24, r28
    15ea:	8a 56       	subi	r24, 0x6A	; 106
    15ec:	9f 4f       	sbci	r25, 0xFF	; 255
    15ee:	fc 01       	movw	r30, r24
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <main+0x928>
    15f8:	9e 01       	movw	r18, r28
    15fa:	2a 56       	subi	r18, 0x6A	; 106
    15fc:	3f 4f       	sbci	r19, 0xFF	; 255
    15fe:	f9 01       	movw	r30, r18
    1600:	91 83       	std	Z+1, r25	; 0x01
    1602:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(ONE);
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(TWO);
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(THREE);
    1610:	83 e0       	ldi	r24, 0x03	; 3
    1612:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(FOUR);
    1616:	84 e0       	ldi	r24, 0x04	; 4
    1618:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_displayNo(THREE);
    161c:	83 e0       	ldi	r24, 0x03	; 3
    161e:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a8 e4       	ldi	r26, 0x48	; 72
    1628:	b2 e4       	ldi	r27, 0x42	; 66
    162a:	8e 87       	std	Y+14, r24	; 0x0e
    162c:	9f 87       	std	Y+15, r25	; 0x0f
    162e:	a8 8b       	std	Y+16, r26	; 0x10
    1630:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1632:	8e 01       	movw	r16, r28
    1634:	0c 57       	subi	r16, 0x7C	; 124
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	4a e7       	ldi	r20, 0x7A	; 122
    163e:	53 e4       	ldi	r21, 0x43	; 67
    1640:	6e 85       	ldd	r22, Y+14	; 0x0e
    1642:	7f 85       	ldd	r23, Y+15	; 0x0f
    1644:	88 89       	ldd	r24, Y+16	; 0x10
    1646:	99 89       	ldd	r25, Y+17	; 0x11
    1648:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	f8 01       	movw	r30, r16
    1652:	80 83       	st	Z, r24
    1654:	91 83       	std	Z+1, r25	; 0x01
    1656:	a2 83       	std	Z+2, r26	; 0x02
    1658:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    165a:	ce 01       	movw	r24, r28
    165c:	8c 57       	subi	r24, 0x7C	; 124
    165e:	9f 4f       	sbci	r25, 0xFF	; 255
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e8       	ldi	r20, 0x80	; 128
    1666:	5f e3       	ldi	r21, 0x3F	; 63
    1668:	fc 01       	movw	r30, r24
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    1676:	88 23       	and	r24, r24
    1678:	4c f4       	brge	.+18     	; 0x168c <main+0x9c0>
		__ticks = 1;
    167a:	ce 01       	movw	r24, r28
    167c:	88 57       	subi	r24, 0x78	; 120
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	21 e0       	ldi	r18, 0x01	; 1
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	fc 01       	movw	r30, r24
    1686:	31 83       	std	Z+1, r19	; 0x01
    1688:	20 83       	st	Z, r18
    168a:	69 c0       	rjmp	.+210    	; 0x175e <main+0xa92>
	else if (__tmp > 65535)
    168c:	ce 01       	movw	r24, r28
    168e:	8c 57       	subi	r24, 0x7C	; 124
    1690:	9f 4f       	sbci	r25, 0xFF	; 255
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	3f ef       	ldi	r19, 0xFF	; 255
    1696:	4f e7       	ldi	r20, 0x7F	; 127
    1698:	57 e4       	ldi	r21, 0x47	; 71
    169a:	fc 01       	movw	r30, r24
    169c:	60 81       	ld	r22, Z
    169e:	71 81       	ldd	r23, Z+1	; 0x01
    16a0:	82 81       	ldd	r24, Z+2	; 0x02
    16a2:	93 81       	ldd	r25, Z+3	; 0x03
    16a4:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    16a8:	18 16       	cp	r1, r24
    16aa:	0c f0       	brlt	.+2      	; 0x16ae <main+0x9e2>
    16ac:	46 c0       	rjmp	.+140    	; 0x173a <main+0xa6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e2       	ldi	r20, 0x20	; 32
    16b4:	51 e4       	ldi	r21, 0x41	; 65
    16b6:	6e 85       	ldd	r22, Y+14	; 0x0e
    16b8:	7f 85       	ldd	r23, Y+15	; 0x0f
    16ba:	88 89       	ldd	r24, Y+16	; 0x10
    16bc:	99 89       	ldd	r25, Y+17	; 0x11
    16be:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	8e 01       	movw	r16, r28
    16c8:	08 57       	subi	r16, 0x78	; 120
    16ca:	1f 4f       	sbci	r17, 0xFF	; 255
    16cc:	bc 01       	movw	r22, r24
    16ce:	cd 01       	movw	r24, r26
    16d0:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	f8 01       	movw	r30, r16
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	80 83       	st	Z, r24
    16de:	24 c0       	rjmp	.+72     	; 0x1728 <main+0xa5c>
    16e0:	ce 01       	movw	r24, r28
    16e2:	86 57       	subi	r24, 0x76	; 118
    16e4:	9f 4f       	sbci	r25, 0xFF	; 255
    16e6:	29 e1       	ldi	r18, 0x19	; 25
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	fc 01       	movw	r30, r24
    16ec:	31 83       	std	Z+1, r19	; 0x01
    16ee:	20 83       	st	Z, r18
    16f0:	ce 01       	movw	r24, r28
    16f2:	86 57       	subi	r24, 0x76	; 118
    16f4:	9f 4f       	sbci	r25, 0xFF	; 255
    16f6:	fc 01       	movw	r30, r24
    16f8:	80 81       	ld	r24, Z
    16fa:	91 81       	ldd	r25, Z+1	; 0x01
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <main+0xa30>
    1700:	9e 01       	movw	r18, r28
    1702:	26 57       	subi	r18, 0x76	; 118
    1704:	3f 4f       	sbci	r19, 0xFF	; 255
    1706:	f9 01       	movw	r30, r18
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170c:	ce 01       	movw	r24, r28
    170e:	88 57       	subi	r24, 0x78	; 120
    1710:	9f 4f       	sbci	r25, 0xFF	; 255
    1712:	9e 01       	movw	r18, r28
    1714:	28 57       	subi	r18, 0x78	; 120
    1716:	3f 4f       	sbci	r19, 0xFF	; 255
    1718:	f9 01       	movw	r30, r18
    171a:	20 81       	ld	r18, Z
    171c:	31 81       	ldd	r19, Z+1	; 0x01
    171e:	21 50       	subi	r18, 0x01	; 1
    1720:	31 09       	sbc	r19, r1
    1722:	fc 01       	movw	r30, r24
    1724:	31 83       	std	Z+1, r19	; 0x01
    1726:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1728:	ce 01       	movw	r24, r28
    172a:	88 57       	subi	r24, 0x78	; 120
    172c:	9f 4f       	sbci	r25, 0xFF	; 255
    172e:	fc 01       	movw	r30, r24
    1730:	80 81       	ld	r24, Z
    1732:	91 81       	ldd	r25, Z+1	; 0x01
    1734:	89 2b       	or	r24, r25
    1736:	a1 f6       	brne	.-88     	; 0x16e0 <main+0xa14>
    1738:	2c c0       	rjmp	.+88     	; 0x1792 <main+0xac6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173a:	8e 01       	movw	r16, r28
    173c:	08 57       	subi	r16, 0x78	; 120
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	ce 01       	movw	r24, r28
    1742:	8c 57       	subi	r24, 0x7C	; 124
    1744:	9f 4f       	sbci	r25, 0xFF	; 255
    1746:	fc 01       	movw	r30, r24
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	93 81       	ldd	r25, Z+3	; 0x03
    1750:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	f8 01       	movw	r30, r16
    175a:	91 83       	std	Z+1, r25	; 0x01
    175c:	80 83       	st	Z, r24
    175e:	ce 01       	movw	r24, r28
    1760:	84 57       	subi	r24, 0x74	; 116
    1762:	9f 4f       	sbci	r25, 0xFF	; 255
    1764:	9e 01       	movw	r18, r28
    1766:	28 57       	subi	r18, 0x78	; 120
    1768:	3f 4f       	sbci	r19, 0xFF	; 255
    176a:	f9 01       	movw	r30, r18
    176c:	20 81       	ld	r18, Z
    176e:	31 81       	ldd	r19, Z+1	; 0x01
    1770:	fc 01       	movw	r30, r24
    1772:	31 83       	std	Z+1, r19	; 0x01
    1774:	20 83       	st	Z, r18
    1776:	ce 01       	movw	r24, r28
    1778:	84 57       	subi	r24, 0x74	; 116
    177a:	9f 4f       	sbci	r25, 0xFF	; 255
    177c:	fc 01       	movw	r30, r24
    177e:	80 81       	ld	r24, Z
    1780:	91 81       	ldd	r25, Z+1	; 0x01
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	f1 f7       	brne	.-4      	; 0x1782 <main+0xab6>
    1786:	9e 01       	movw	r18, r28
    1788:	24 57       	subi	r18, 0x74	; 116
    178a:	3f 4f       	sbci	r19, 0xFF	; 255
    178c:	f9 01       	movw	r30, r18
    178e:	91 83       	std	Z+1, r25	; 0x01
    1790:	80 83       	st	Z, r24
			_delay_ms(50);
		}
		if(key == 4)
    1792:	8d 81       	ldd	r24, Y+5	; 0x05
    1794:	84 30       	cpi	r24, 0x04	; 4
    1796:	09 f0       	breq	.+2      	; 0x179a <main+0xace>
    1798:	7f c1       	rjmp	.+766    	; 0x1a98 <main+0xdcc>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a8 e4       	ldi	r26, 0x48	; 72
    17a0:	b2 e4       	ldi	r27, 0x42	; 66
    17a2:	8a a3       	std	Y+34, r24	; 0x22
    17a4:	9b a3       	std	Y+35, r25	; 0x23
    17a6:	ac a3       	std	Y+36, r26	; 0x24
    17a8:	bd a3       	std	Y+37, r27	; 0x25

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17aa:	8e 01       	movw	r16, r28
    17ac:	0e 55       	subi	r16, 0x5E	; 94
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	4a e7       	ldi	r20, 0x7A	; 122
    17b6:	53 e4       	ldi	r21, 0x43	; 67
    17b8:	6a a1       	ldd	r22, Y+34	; 0x22
    17ba:	7b a1       	ldd	r23, Y+35	; 0x23
    17bc:	8c a1       	ldd	r24, Y+36	; 0x24
    17be:	9d a1       	ldd	r25, Y+37	; 0x25
    17c0:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	f8 01       	movw	r30, r16
    17ca:	80 83       	st	Z, r24
    17cc:	91 83       	std	Z+1, r25	; 0x01
    17ce:	a2 83       	std	Z+2, r26	; 0x02
    17d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17d2:	ce 01       	movw	r24, r28
    17d4:	8e 55       	subi	r24, 0x5E	; 94
    17d6:	9f 4f       	sbci	r25, 0xFF	; 255
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e8       	ldi	r20, 0x80	; 128
    17de:	5f e3       	ldi	r21, 0x3F	; 63
    17e0:	fc 01       	movw	r30, r24
    17e2:	60 81       	ld	r22, Z
    17e4:	71 81       	ldd	r23, Z+1	; 0x01
    17e6:	82 81       	ldd	r24, Z+2	; 0x02
    17e8:	93 81       	ldd	r25, Z+3	; 0x03
    17ea:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    17ee:	88 23       	and	r24, r24
    17f0:	4c f4       	brge	.+18     	; 0x1804 <main+0xb38>
		__ticks = 1;
    17f2:	ce 01       	movw	r24, r28
    17f4:	8a 55       	subi	r24, 0x5A	; 90
    17f6:	9f 4f       	sbci	r25, 0xFF	; 255
    17f8:	21 e0       	ldi	r18, 0x01	; 1
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	fc 01       	movw	r30, r24
    17fe:	31 83       	std	Z+1, r19	; 0x01
    1800:	20 83       	st	Z, r18
    1802:	69 c0       	rjmp	.+210    	; 0x18d6 <main+0xc0a>
	else if (__tmp > 65535)
    1804:	ce 01       	movw	r24, r28
    1806:	8e 55       	subi	r24, 0x5E	; 94
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	3f ef       	ldi	r19, 0xFF	; 255
    180e:	4f e7       	ldi	r20, 0x7F	; 127
    1810:	57 e4       	ldi	r21, 0x47	; 71
    1812:	fc 01       	movw	r30, r24
    1814:	60 81       	ld	r22, Z
    1816:	71 81       	ldd	r23, Z+1	; 0x01
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    1820:	18 16       	cp	r1, r24
    1822:	0c f0       	brlt	.+2      	; 0x1826 <main+0xb5a>
    1824:	46 c0       	rjmp	.+140    	; 0x18b2 <main+0xbe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e2       	ldi	r20, 0x20	; 32
    182c:	51 e4       	ldi	r21, 0x41	; 65
    182e:	6a a1       	ldd	r22, Y+34	; 0x22
    1830:	7b a1       	ldd	r23, Y+35	; 0x23
    1832:	8c a1       	ldd	r24, Y+36	; 0x24
    1834:	9d a1       	ldd	r25, Y+37	; 0x25
    1836:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	8e 01       	movw	r16, r28
    1840:	0a 55       	subi	r16, 0x5A	; 90
    1842:	1f 4f       	sbci	r17, 0xFF	; 255
    1844:	bc 01       	movw	r22, r24
    1846:	cd 01       	movw	r24, r26
    1848:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	f8 01       	movw	r30, r16
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	80 83       	st	Z, r24
    1856:	24 c0       	rjmp	.+72     	; 0x18a0 <main+0xbd4>
    1858:	ce 01       	movw	r24, r28
    185a:	88 55       	subi	r24, 0x58	; 88
    185c:	9f 4f       	sbci	r25, 0xFF	; 255
    185e:	29 e1       	ldi	r18, 0x19	; 25
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	fc 01       	movw	r30, r24
    1864:	31 83       	std	Z+1, r19	; 0x01
    1866:	20 83       	st	Z, r18
    1868:	ce 01       	movw	r24, r28
    186a:	88 55       	subi	r24, 0x58	; 88
    186c:	9f 4f       	sbci	r25, 0xFF	; 255
    186e:	fc 01       	movw	r30, r24
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <main+0xba8>
    1878:	9e 01       	movw	r18, r28
    187a:	28 55       	subi	r18, 0x58	; 88
    187c:	3f 4f       	sbci	r19, 0xFF	; 255
    187e:	f9 01       	movw	r30, r18
    1880:	91 83       	std	Z+1, r25	; 0x01
    1882:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1884:	ce 01       	movw	r24, r28
    1886:	8a 55       	subi	r24, 0x5A	; 90
    1888:	9f 4f       	sbci	r25, 0xFF	; 255
    188a:	9e 01       	movw	r18, r28
    188c:	2a 55       	subi	r18, 0x5A	; 90
    188e:	3f 4f       	sbci	r19, 0xFF	; 255
    1890:	f9 01       	movw	r30, r18
    1892:	20 81       	ld	r18, Z
    1894:	31 81       	ldd	r19, Z+1	; 0x01
    1896:	21 50       	subi	r18, 0x01	; 1
    1898:	31 09       	sbc	r19, r1
    189a:	fc 01       	movw	r30, r24
    189c:	31 83       	std	Z+1, r19	; 0x01
    189e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a0:	ce 01       	movw	r24, r28
    18a2:	8a 55       	subi	r24, 0x5A	; 90
    18a4:	9f 4f       	sbci	r25, 0xFF	; 255
    18a6:	fc 01       	movw	r30, r24
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	89 2b       	or	r24, r25
    18ae:	a1 f6       	brne	.-88     	; 0x1858 <main+0xb8c>
    18b0:	2c c0       	rjmp	.+88     	; 0x190a <main+0xc3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b2:	8e 01       	movw	r16, r28
    18b4:	0a 55       	subi	r16, 0x5A	; 90
    18b6:	1f 4f       	sbci	r17, 0xFF	; 255
    18b8:	ce 01       	movw	r24, r28
    18ba:	8e 55       	subi	r24, 0x5E	; 94
    18bc:	9f 4f       	sbci	r25, 0xFF	; 255
    18be:	fc 01       	movw	r30, r24
    18c0:	60 81       	ld	r22, Z
    18c2:	71 81       	ldd	r23, Z+1	; 0x01
    18c4:	82 81       	ldd	r24, Z+2	; 0x02
    18c6:	93 81       	ldd	r25, Z+3	; 0x03
    18c8:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	f8 01       	movw	r30, r16
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	80 83       	st	Z, r24
    18d6:	ce 01       	movw	r24, r28
    18d8:	86 55       	subi	r24, 0x56	; 86
    18da:	9f 4f       	sbci	r25, 0xFF	; 255
    18dc:	9e 01       	movw	r18, r28
    18de:	2a 55       	subi	r18, 0x5A	; 90
    18e0:	3f 4f       	sbci	r19, 0xFF	; 255
    18e2:	f9 01       	movw	r30, r18
    18e4:	20 81       	ld	r18, Z
    18e6:	31 81       	ldd	r19, Z+1	; 0x01
    18e8:	fc 01       	movw	r30, r24
    18ea:	31 83       	std	Z+1, r19	; 0x01
    18ec:	20 83       	st	Z, r18
    18ee:	ce 01       	movw	r24, r28
    18f0:	86 55       	subi	r24, 0x56	; 86
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	fc 01       	movw	r30, r24
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <main+0xc2e>
    18fe:	9e 01       	movw	r18, r28
    1900:	26 55       	subi	r18, 0x56	; 86
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	f9 01       	movw	r30, r18
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	80 83       	st	Z, r24
		{
		_delay_ms(50);
		BCDSevegments_enable(ONE);
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(TWO);
    1910:	82 e0       	ldi	r24, 0x02	; 2
    1912:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(THREE);
    1916:	83 e0       	ldi	r24, 0x03	; 3
    1918:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(FOUR);
    191c:	84 e0       	ldi	r24, 0x04	; 4
    191e:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_displayNo(FOUR);
    1922:	84 e0       	ldi	r24, 0x04	; 4
    1924:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a8 e4       	ldi	r26, 0x48	; 72
    192e:	b2 e4       	ldi	r27, 0x42	; 66
    1930:	8e 8b       	std	Y+22, r24	; 0x16
    1932:	9f 8b       	std	Y+23, r25	; 0x17
    1934:	a8 8f       	std	Y+24, r26	; 0x18
    1936:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1938:	8e 01       	movw	r16, r28
    193a:	08 56       	subi	r16, 0x68	; 104
    193c:	1f 4f       	sbci	r17, 0xFF	; 255
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	4a e7       	ldi	r20, 0x7A	; 122
    1944:	53 e4       	ldi	r21, 0x43	; 67
    1946:	6e 89       	ldd	r22, Y+22	; 0x16
    1948:	7f 89       	ldd	r23, Y+23	; 0x17
    194a:	88 8d       	ldd	r24, Y+24	; 0x18
    194c:	99 8d       	ldd	r25, Y+25	; 0x19
    194e:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	f8 01       	movw	r30, r16
    1958:	80 83       	st	Z, r24
    195a:	91 83       	std	Z+1, r25	; 0x01
    195c:	a2 83       	std	Z+2, r26	; 0x02
    195e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1960:	ce 01       	movw	r24, r28
    1962:	88 56       	subi	r24, 0x68	; 104
    1964:	9f 4f       	sbci	r25, 0xFF	; 255
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	fc 01       	movw	r30, r24
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    197c:	88 23       	and	r24, r24
    197e:	4c f4       	brge	.+18     	; 0x1992 <main+0xcc6>
		__ticks = 1;
    1980:	ce 01       	movw	r24, r28
    1982:	84 56       	subi	r24, 0x64	; 100
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	21 e0       	ldi	r18, 0x01	; 1
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	fc 01       	movw	r30, r24
    198c:	31 83       	std	Z+1, r19	; 0x01
    198e:	20 83       	st	Z, r18
    1990:	69 c0       	rjmp	.+210    	; 0x1a64 <main+0xd98>
	else if (__tmp > 65535)
    1992:	ce 01       	movw	r24, r28
    1994:	88 56       	subi	r24, 0x68	; 104
    1996:	9f 4f       	sbci	r25, 0xFF	; 255
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	3f ef       	ldi	r19, 0xFF	; 255
    199c:	4f e7       	ldi	r20, 0x7F	; 127
    199e:	57 e4       	ldi	r21, 0x47	; 71
    19a0:	fc 01       	movw	r30, r24
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    19ae:	18 16       	cp	r1, r24
    19b0:	0c f0       	brlt	.+2      	; 0x19b4 <main+0xce8>
    19b2:	46 c0       	rjmp	.+140    	; 0x1a40 <main+0xd74>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e2       	ldi	r20, 0x20	; 32
    19ba:	51 e4       	ldi	r21, 0x41	; 65
    19bc:	6e 89       	ldd	r22, Y+22	; 0x16
    19be:	7f 89       	ldd	r23, Y+23	; 0x17
    19c0:	88 8d       	ldd	r24, Y+24	; 0x18
    19c2:	99 8d       	ldd	r25, Y+25	; 0x19
    19c4:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	8e 01       	movw	r16, r28
    19ce:	04 56       	subi	r16, 0x64	; 100
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	f8 01       	movw	r30, r16
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	80 83       	st	Z, r24
    19e4:	24 c0       	rjmp	.+72     	; 0x1a2e <main+0xd62>
    19e6:	ce 01       	movw	r24, r28
    19e8:	82 56       	subi	r24, 0x62	; 98
    19ea:	9f 4f       	sbci	r25, 0xFF	; 255
    19ec:	29 e1       	ldi	r18, 0x19	; 25
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	fc 01       	movw	r30, r24
    19f2:	31 83       	std	Z+1, r19	; 0x01
    19f4:	20 83       	st	Z, r18
    19f6:	ce 01       	movw	r24, r28
    19f8:	82 56       	subi	r24, 0x62	; 98
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	fc 01       	movw	r30, r24
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <main+0xd36>
    1a06:	9e 01       	movw	r18, r28
    1a08:	22 56       	subi	r18, 0x62	; 98
    1a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0c:	f9 01       	movw	r30, r18
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a12:	ce 01       	movw	r24, r28
    1a14:	84 56       	subi	r24, 0x64	; 100
    1a16:	9f 4f       	sbci	r25, 0xFF	; 255
    1a18:	9e 01       	movw	r18, r28
    1a1a:	24 56       	subi	r18, 0x64	; 100
    1a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1e:	f9 01       	movw	r30, r18
    1a20:	20 81       	ld	r18, Z
    1a22:	31 81       	ldd	r19, Z+1	; 0x01
    1a24:	21 50       	subi	r18, 0x01	; 1
    1a26:	31 09       	sbc	r19, r1
    1a28:	fc 01       	movw	r30, r24
    1a2a:	31 83       	std	Z+1, r19	; 0x01
    1a2c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2e:	ce 01       	movw	r24, r28
    1a30:	84 56       	subi	r24, 0x64	; 100
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	fc 01       	movw	r30, r24
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	89 2b       	or	r24, r25
    1a3c:	a1 f6       	brne	.-88     	; 0x19e6 <main+0xd1a>
    1a3e:	2c c0       	rjmp	.+88     	; 0x1a98 <main+0xdcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a40:	8e 01       	movw	r16, r28
    1a42:	04 56       	subi	r16, 0x64	; 100
    1a44:	1f 4f       	sbci	r17, 0xFF	; 255
    1a46:	ce 01       	movw	r24, r28
    1a48:	88 56       	subi	r24, 0x68	; 104
    1a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	60 81       	ld	r22, Z
    1a50:	71 81       	ldd	r23, Z+1	; 0x01
    1a52:	82 81       	ldd	r24, Z+2	; 0x02
    1a54:	93 81       	ldd	r25, Z+3	; 0x03
    1a56:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	f8 01       	movw	r30, r16
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	80 83       	st	Z, r24
    1a64:	ce 01       	movw	r24, r28
    1a66:	80 56       	subi	r24, 0x60	; 96
    1a68:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6a:	9e 01       	movw	r18, r28
    1a6c:	24 56       	subi	r18, 0x64	; 100
    1a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a70:	f9 01       	movw	r30, r18
    1a72:	20 81       	ld	r18, Z
    1a74:	31 81       	ldd	r19, Z+1	; 0x01
    1a76:	fc 01       	movw	r30, r24
    1a78:	31 83       	std	Z+1, r19	; 0x01
    1a7a:	20 83       	st	Z, r18
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	80 56       	subi	r24, 0x60	; 96
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	fc 01       	movw	r30, r24
    1a84:	80 81       	ld	r24, Z
    1a86:	91 81       	ldd	r25, Z+1	; 0x01
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <main+0xdbc>
    1a8c:	9e 01       	movw	r18, r28
    1a8e:	20 56       	subi	r18, 0x60	; 96
    1a90:	3f 4f       	sbci	r19, 0xFF	; 255
    1a92:	f9 01       	movw	r30, r18
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	80 83       	st	Z, r24
		_delay_ms(50);
		}
		if(key == 5)
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	85 30       	cpi	r24, 0x05	; 5
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <main+0xdd4>
    1a9e:	7f c1       	rjmp	.+766    	; 0x1d9e <main+0x10d2>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a8 e4       	ldi	r26, 0x48	; 72
    1aa6:	b2 e4       	ldi	r27, 0x42	; 66
    1aa8:	8a a7       	std	Y+42, r24	; 0x2a
    1aaa:	9b a7       	std	Y+43, r25	; 0x2b
    1aac:	ac a7       	std	Y+44, r26	; 0x2c
    1aae:	bd a7       	std	Y+45, r27	; 0x2d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ab0:	8e 01       	movw	r16, r28
    1ab2:	0a 54       	subi	r16, 0x4A	; 74
    1ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	4a e7       	ldi	r20, 0x7A	; 122
    1abc:	53 e4       	ldi	r21, 0x43	; 67
    1abe:	6a a5       	ldd	r22, Y+42	; 0x2a
    1ac0:	7b a5       	ldd	r23, Y+43	; 0x2b
    1ac2:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ac4:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ac6:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	f8 01       	movw	r30, r16
    1ad0:	80 83       	st	Z, r24
    1ad2:	91 83       	std	Z+1, r25	; 0x01
    1ad4:	a2 83       	std	Z+2, r26	; 0x02
    1ad6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ad8:	ce 01       	movw	r24, r28
    1ada:	8a 54       	subi	r24, 0x4A	; 74
    1adc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	60 81       	ld	r22, Z
    1aea:	71 81       	ldd	r23, Z+1	; 0x01
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    1af4:	88 23       	and	r24, r24
    1af6:	4c f4       	brge	.+18     	; 0x1b0a <main+0xe3e>
		__ticks = 1;
    1af8:	ce 01       	movw	r24, r28
    1afa:	86 54       	subi	r24, 0x46	; 70
    1afc:	9f 4f       	sbci	r25, 0xFF	; 255
    1afe:	21 e0       	ldi	r18, 0x01	; 1
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	fc 01       	movw	r30, r24
    1b04:	31 83       	std	Z+1, r19	; 0x01
    1b06:	20 83       	st	Z, r18
    1b08:	69 c0       	rjmp	.+210    	; 0x1bdc <main+0xf10>
	else if (__tmp > 65535)
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	8a 54       	subi	r24, 0x4A	; 74
    1b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	3f ef       	ldi	r19, 0xFF	; 255
    1b14:	4f e7       	ldi	r20, 0x7F	; 127
    1b16:	57 e4       	ldi	r21, 0x47	; 71
    1b18:	fc 01       	movw	r30, r24
    1b1a:	60 81       	ld	r22, Z
    1b1c:	71 81       	ldd	r23, Z+1	; 0x01
    1b1e:	82 81       	ldd	r24, Z+2	; 0x02
    1b20:	93 81       	ldd	r25, Z+3	; 0x03
    1b22:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    1b26:	18 16       	cp	r1, r24
    1b28:	0c f0       	brlt	.+2      	; 0x1b2c <main+0xe60>
    1b2a:	46 c0       	rjmp	.+140    	; 0x1bb8 <main+0xeec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e2       	ldi	r20, 0x20	; 32
    1b32:	51 e4       	ldi	r21, 0x41	; 65
    1b34:	6a a5       	ldd	r22, Y+42	; 0x2a
    1b36:	7b a5       	ldd	r23, Y+43	; 0x2b
    1b38:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b3a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b3c:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	8e 01       	movw	r16, r28
    1b46:	06 54       	subi	r16, 0x46	; 70
    1b48:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	f8 01       	movw	r30, r16
    1b58:	91 83       	std	Z+1, r25	; 0x01
    1b5a:	80 83       	st	Z, r24
    1b5c:	24 c0       	rjmp	.+72     	; 0x1ba6 <main+0xeda>
    1b5e:	ce 01       	movw	r24, r28
    1b60:	84 54       	subi	r24, 0x44	; 68
    1b62:	9f 4f       	sbci	r25, 0xFF	; 255
    1b64:	29 e1       	ldi	r18, 0x19	; 25
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	fc 01       	movw	r30, r24
    1b6a:	31 83       	std	Z+1, r19	; 0x01
    1b6c:	20 83       	st	Z, r18
    1b6e:	ce 01       	movw	r24, r28
    1b70:	84 54       	subi	r24, 0x44	; 68
    1b72:	9f 4f       	sbci	r25, 0xFF	; 255
    1b74:	fc 01       	movw	r30, r24
    1b76:	80 81       	ld	r24, Z
    1b78:	91 81       	ldd	r25, Z+1	; 0x01
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <main+0xeae>
    1b7e:	9e 01       	movw	r18, r28
    1b80:	24 54       	subi	r18, 0x44	; 68
    1b82:	3f 4f       	sbci	r19, 0xFF	; 255
    1b84:	f9 01       	movw	r30, r18
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	86 54       	subi	r24, 0x46	; 70
    1b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b90:	9e 01       	movw	r18, r28
    1b92:	26 54       	subi	r18, 0x46	; 70
    1b94:	3f 4f       	sbci	r19, 0xFF	; 255
    1b96:	f9 01       	movw	r30, r18
    1b98:	20 81       	ld	r18, Z
    1b9a:	31 81       	ldd	r19, Z+1	; 0x01
    1b9c:	21 50       	subi	r18, 0x01	; 1
    1b9e:	31 09       	sbc	r19, r1
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	31 83       	std	Z+1, r19	; 0x01
    1ba4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	86 54       	subi	r24, 0x46	; 70
    1baa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bac:	fc 01       	movw	r30, r24
    1bae:	80 81       	ld	r24, Z
    1bb0:	91 81       	ldd	r25, Z+1	; 0x01
    1bb2:	89 2b       	or	r24, r25
    1bb4:	a1 f6       	brne	.-88     	; 0x1b5e <main+0xe92>
    1bb6:	2c c0       	rjmp	.+88     	; 0x1c10 <main+0xf44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb8:	8e 01       	movw	r16, r28
    1bba:	06 54       	subi	r16, 0x46	; 70
    1bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	8a 54       	subi	r24, 0x4A	; 74
    1bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	93 81       	ldd	r25, Z+3	; 0x03
    1bce:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	80 83       	st	Z, r24
    1bdc:	ce 01       	movw	r24, r28
    1bde:	82 54       	subi	r24, 0x42	; 66
    1be0:	9f 4f       	sbci	r25, 0xFF	; 255
    1be2:	9e 01       	movw	r18, r28
    1be4:	26 54       	subi	r18, 0x46	; 70
    1be6:	3f 4f       	sbci	r19, 0xFF	; 255
    1be8:	f9 01       	movw	r30, r18
    1bea:	20 81       	ld	r18, Z
    1bec:	31 81       	ldd	r19, Z+1	; 0x01
    1bee:	fc 01       	movw	r30, r24
    1bf0:	31 83       	std	Z+1, r19	; 0x01
    1bf2:	20 83       	st	Z, r18
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	82 54       	subi	r24, 0x42	; 66
    1bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	80 81       	ld	r24, Z
    1bfe:	91 81       	ldd	r25, Z+1	; 0x01
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <main+0xf34>
    1c04:	9e 01       	movw	r18, r28
    1c06:	22 54       	subi	r18, 0x42	; 66
    1c08:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0a:	f9 01       	movw	r30, r18
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(ONE);
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(TWO);
    1c16:	82 e0       	ldi	r24, 0x02	; 2
    1c18:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(THREE);
    1c1c:	83 e0       	ldi	r24, 0x03	; 3
    1c1e:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(FOUR);
    1c22:	84 e0       	ldi	r24, 0x04	; 4
    1c24:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_displayNo(FIVE);
    1c28:	85 e0       	ldi	r24, 0x05	; 5
    1c2a:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	a8 e4       	ldi	r26, 0x48	; 72
    1c34:	b2 e4       	ldi	r27, 0x42	; 66
    1c36:	8e 8f       	std	Y+30, r24	; 0x1e
    1c38:	9f 8f       	std	Y+31, r25	; 0x1f
    1c3a:	a8 a3       	std	Y+32, r26	; 0x20
    1c3c:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c3e:	8e 01       	movw	r16, r28
    1c40:	04 55       	subi	r16, 0x54	; 84
    1c42:	1f 4f       	sbci	r17, 0xFF	; 255
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	4a e7       	ldi	r20, 0x7A	; 122
    1c4a:	53 e4       	ldi	r21, 0x43	; 67
    1c4c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1c4e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1c50:	88 a1       	ldd	r24, Y+32	; 0x20
    1c52:	99 a1       	ldd	r25, Y+33	; 0x21
    1c54:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	f8 01       	movw	r30, r16
    1c5e:	80 83       	st	Z, r24
    1c60:	91 83       	std	Z+1, r25	; 0x01
    1c62:	a2 83       	std	Z+2, r26	; 0x02
    1c64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c66:	ce 01       	movw	r24, r28
    1c68:	84 55       	subi	r24, 0x54	; 84
    1c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e8       	ldi	r20, 0x80	; 128
    1c72:	5f e3       	ldi	r21, 0x3F	; 63
    1c74:	fc 01       	movw	r30, r24
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    1c82:	88 23       	and	r24, r24
    1c84:	4c f4       	brge	.+18     	; 0x1c98 <main+0xfcc>
		__ticks = 1;
    1c86:	ce 01       	movw	r24, r28
    1c88:	80 55       	subi	r24, 0x50	; 80
    1c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8c:	21 e0       	ldi	r18, 0x01	; 1
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	fc 01       	movw	r30, r24
    1c92:	31 83       	std	Z+1, r19	; 0x01
    1c94:	20 83       	st	Z, r18
    1c96:	69 c0       	rjmp	.+210    	; 0x1d6a <main+0x109e>
	else if (__tmp > 65535)
    1c98:	ce 01       	movw	r24, r28
    1c9a:	84 55       	subi	r24, 0x54	; 84
    1c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	3f ef       	ldi	r19, 0xFF	; 255
    1ca2:	4f e7       	ldi	r20, 0x7F	; 127
    1ca4:	57 e4       	ldi	r21, 0x47	; 71
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	60 81       	ld	r22, Z
    1caa:	71 81       	ldd	r23, Z+1	; 0x01
    1cac:	82 81       	ldd	r24, Z+2	; 0x02
    1cae:	93 81       	ldd	r25, Z+3	; 0x03
    1cb0:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    1cb4:	18 16       	cp	r1, r24
    1cb6:	0c f0       	brlt	.+2      	; 0x1cba <main+0xfee>
    1cb8:	46 c0       	rjmp	.+140    	; 0x1d46 <main+0x107a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e2       	ldi	r20, 0x20	; 32
    1cc0:	51 e4       	ldi	r21, 0x41	; 65
    1cc2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1cc4:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1cc6:	88 a1       	ldd	r24, Y+32	; 0x20
    1cc8:	99 a1       	ldd	r25, Y+33	; 0x21
    1cca:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8e 01       	movw	r16, r28
    1cd4:	00 55       	subi	r16, 0x50	; 80
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	80 83       	st	Z, r24
    1cea:	24 c0       	rjmp	.+72     	; 0x1d34 <main+0x1068>
    1cec:	ce 01       	movw	r24, r28
    1cee:	8e 54       	subi	r24, 0x4E	; 78
    1cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf2:	29 e1       	ldi	r18, 0x19	; 25
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	31 83       	std	Z+1, r19	; 0x01
    1cfa:	20 83       	st	Z, r18
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	8e 54       	subi	r24, 0x4E	; 78
    1d00:	9f 4f       	sbci	r25, 0xFF	; 255
    1d02:	fc 01       	movw	r30, r24
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <main+0x103c>
    1d0c:	9e 01       	movw	r18, r28
    1d0e:	2e 54       	subi	r18, 0x4E	; 78
    1d10:	3f 4f       	sbci	r19, 0xFF	; 255
    1d12:	f9 01       	movw	r30, r18
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d18:	ce 01       	movw	r24, r28
    1d1a:	80 55       	subi	r24, 0x50	; 80
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	9e 01       	movw	r18, r28
    1d20:	20 55       	subi	r18, 0x50	; 80
    1d22:	3f 4f       	sbci	r19, 0xFF	; 255
    1d24:	f9 01       	movw	r30, r18
    1d26:	20 81       	ld	r18, Z
    1d28:	31 81       	ldd	r19, Z+1	; 0x01
    1d2a:	21 50       	subi	r18, 0x01	; 1
    1d2c:	31 09       	sbc	r19, r1
    1d2e:	fc 01       	movw	r30, r24
    1d30:	31 83       	std	Z+1, r19	; 0x01
    1d32:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	ce 01       	movw	r24, r28
    1d36:	80 55       	subi	r24, 0x50	; 80
    1d38:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	80 81       	ld	r24, Z
    1d3e:	91 81       	ldd	r25, Z+1	; 0x01
    1d40:	89 2b       	or	r24, r25
    1d42:	a1 f6       	brne	.-88     	; 0x1cec <main+0x1020>
    1d44:	2c c0       	rjmp	.+88     	; 0x1d9e <main+0x10d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d46:	8e 01       	movw	r16, r28
    1d48:	00 55       	subi	r16, 0x50	; 80
    1d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4c:	ce 01       	movw	r24, r28
    1d4e:	84 55       	subi	r24, 0x54	; 84
    1d50:	9f 4f       	sbci	r25, 0xFF	; 255
    1d52:	fc 01       	movw	r30, r24
    1d54:	60 81       	ld	r22, Z
    1d56:	71 81       	ldd	r23, Z+1	; 0x01
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	93 81       	ldd	r25, Z+3	; 0x03
    1d5c:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	f8 01       	movw	r30, r16
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	80 83       	st	Z, r24
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	8c 54       	subi	r24, 0x4C	; 76
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	9e 01       	movw	r18, r28
    1d72:	20 55       	subi	r18, 0x50	; 80
    1d74:	3f 4f       	sbci	r19, 0xFF	; 255
    1d76:	f9 01       	movw	r30, r18
    1d78:	20 81       	ld	r18, Z
    1d7a:	31 81       	ldd	r19, Z+1	; 0x01
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	31 83       	std	Z+1, r19	; 0x01
    1d80:	20 83       	st	Z, r18
    1d82:	ce 01       	movw	r24, r28
    1d84:	8c 54       	subi	r24, 0x4C	; 76
    1d86:	9f 4f       	sbci	r25, 0xFF	; 255
    1d88:	fc 01       	movw	r30, r24
    1d8a:	80 81       	ld	r24, Z
    1d8c:	91 81       	ldd	r25, Z+1	; 0x01
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <main+0x10c2>
    1d92:	9e 01       	movw	r18, r28
    1d94:	2c 54       	subi	r18, 0x4C	; 76
    1d96:	3f 4f       	sbci	r19, 0xFF	; 255
    1d98:	f9 01       	movw	r30, r18
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	80 83       	st	Z, r24
			_delay_ms(50);
		}
			if(key == 6)
    1d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1da0:	86 30       	cpi	r24, 0x06	; 6
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <main+0x10da>
    1da4:	7f c1       	rjmp	.+766    	; 0x20a4 <main+0x13d8>
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	a8 e4       	ldi	r26, 0x48	; 72
    1dac:	b2 e4       	ldi	r27, 0x42	; 66
    1dae:	8a ab       	std	Y+50, r24	; 0x32
    1db0:	9b ab       	std	Y+51, r25	; 0x33
    1db2:	ac ab       	std	Y+52, r26	; 0x34
    1db4:	bd ab       	std	Y+53, r27	; 0x35

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1db6:	8e 01       	movw	r16, r28
    1db8:	06 53       	subi	r16, 0x36	; 54
    1dba:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	4a e7       	ldi	r20, 0x7A	; 122
    1dc2:	53 e4       	ldi	r21, 0x43	; 67
    1dc4:	6a a9       	ldd	r22, Y+50	; 0x32
    1dc6:	7b a9       	ldd	r23, Y+51	; 0x33
    1dc8:	8c a9       	ldd	r24, Y+52	; 0x34
    1dca:	9d a9       	ldd	r25, Y+53	; 0x35
    1dcc:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	80 83       	st	Z, r24
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	a2 83       	std	Z+2, r26	; 0x02
    1ddc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dde:	ce 01       	movw	r24, r28
    1de0:	86 53       	subi	r24, 0x36	; 54
    1de2:	9f 4f       	sbci	r25, 0xFF	; 255
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	fc 01       	movw	r30, r24
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    1dfa:	88 23       	and	r24, r24
    1dfc:	4c f4       	brge	.+18     	; 0x1e10 <main+0x1144>
		__ticks = 1;
    1dfe:	ce 01       	movw	r24, r28
    1e00:	82 53       	subi	r24, 0x32	; 50
    1e02:	9f 4f       	sbci	r25, 0xFF	; 255
    1e04:	21 e0       	ldi	r18, 0x01	; 1
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	fc 01       	movw	r30, r24
    1e0a:	31 83       	std	Z+1, r19	; 0x01
    1e0c:	20 83       	st	Z, r18
    1e0e:	69 c0       	rjmp	.+210    	; 0x1ee2 <main+0x1216>
	else if (__tmp > 65535)
    1e10:	ce 01       	movw	r24, r28
    1e12:	86 53       	subi	r24, 0x36	; 54
    1e14:	9f 4f       	sbci	r25, 0xFF	; 255
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	3f ef       	ldi	r19, 0xFF	; 255
    1e1a:	4f e7       	ldi	r20, 0x7F	; 127
    1e1c:	57 e4       	ldi	r21, 0x47	; 71
    1e1e:	fc 01       	movw	r30, r24
    1e20:	60 81       	ld	r22, Z
    1e22:	71 81       	ldd	r23, Z+1	; 0x01
    1e24:	82 81       	ldd	r24, Z+2	; 0x02
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	0c f0       	brlt	.+2      	; 0x1e32 <main+0x1166>
    1e30:	46 c0       	rjmp	.+140    	; 0x1ebe <main+0x11f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e2       	ldi	r20, 0x20	; 32
    1e38:	51 e4       	ldi	r21, 0x41	; 65
    1e3a:	6a a9       	ldd	r22, Y+50	; 0x32
    1e3c:	7b a9       	ldd	r23, Y+51	; 0x33
    1e3e:	8c a9       	ldd	r24, Y+52	; 0x34
    1e40:	9d a9       	ldd	r25, Y+53	; 0x35
    1e42:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	8e 01       	movw	r16, r28
    1e4c:	02 53       	subi	r16, 0x32	; 50
    1e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e50:	bc 01       	movw	r22, r24
    1e52:	cd 01       	movw	r24, r26
    1e54:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	80 83       	st	Z, r24
    1e62:	24 c0       	rjmp	.+72     	; 0x1eac <main+0x11e0>
    1e64:	ce 01       	movw	r24, r28
    1e66:	80 53       	subi	r24, 0x30	; 48
    1e68:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6a:	29 e1       	ldi	r18, 0x19	; 25
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	fc 01       	movw	r30, r24
    1e70:	31 83       	std	Z+1, r19	; 0x01
    1e72:	20 83       	st	Z, r18
    1e74:	ce 01       	movw	r24, r28
    1e76:	80 53       	subi	r24, 0x30	; 48
    1e78:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	80 81       	ld	r24, Z
    1e7e:	91 81       	ldd	r25, Z+1	; 0x01
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <main+0x11b4>
    1e84:	9e 01       	movw	r18, r28
    1e86:	20 53       	subi	r18, 0x30	; 48
    1e88:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8a:	f9 01       	movw	r30, r18
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e90:	ce 01       	movw	r24, r28
    1e92:	82 53       	subi	r24, 0x32	; 50
    1e94:	9f 4f       	sbci	r25, 0xFF	; 255
    1e96:	9e 01       	movw	r18, r28
    1e98:	22 53       	subi	r18, 0x32	; 50
    1e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9c:	f9 01       	movw	r30, r18
    1e9e:	20 81       	ld	r18, Z
    1ea0:	31 81       	ldd	r19, Z+1	; 0x01
    1ea2:	21 50       	subi	r18, 0x01	; 1
    1ea4:	31 09       	sbc	r19, r1
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	31 83       	std	Z+1, r19	; 0x01
    1eaa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eac:	ce 01       	movw	r24, r28
    1eae:	82 53       	subi	r24, 0x32	; 50
    1eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	80 81       	ld	r24, Z
    1eb6:	91 81       	ldd	r25, Z+1	; 0x01
    1eb8:	89 2b       	or	r24, r25
    1eba:	a1 f6       	brne	.-88     	; 0x1e64 <main+0x1198>
    1ebc:	2c c0       	rjmp	.+88     	; 0x1f16 <main+0x124a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebe:	8e 01       	movw	r16, r28
    1ec0:	02 53       	subi	r16, 0x32	; 50
    1ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	86 53       	subi	r24, 0x36	; 54
    1ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eca:	fc 01       	movw	r30, r24
    1ecc:	60 81       	ld	r22, Z
    1ece:	71 81       	ldd	r23, Z+1	; 0x01
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	f8 01       	movw	r30, r16
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	80 83       	st	Z, r24
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	8e 52       	subi	r24, 0x2E	; 46
    1ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee8:	9e 01       	movw	r18, r28
    1eea:	22 53       	subi	r18, 0x32	; 50
    1eec:	3f 4f       	sbci	r19, 0xFF	; 255
    1eee:	f9 01       	movw	r30, r18
    1ef0:	20 81       	ld	r18, Z
    1ef2:	31 81       	ldd	r19, Z+1	; 0x01
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	31 83       	std	Z+1, r19	; 0x01
    1ef8:	20 83       	st	Z, r18
    1efa:	ce 01       	movw	r24, r28
    1efc:	8e 52       	subi	r24, 0x2E	; 46
    1efe:	9f 4f       	sbci	r25, 0xFF	; 255
    1f00:	fc 01       	movw	r30, r24
    1f02:	80 81       	ld	r24, Z
    1f04:	91 81       	ldd	r25, Z+1	; 0x01
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <main+0x123a>
    1f0a:	9e 01       	movw	r18, r28
    1f0c:	2e 52       	subi	r18, 0x2E	; 46
    1f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f10:	f9 01       	movw	r30, r18
    1f12:	91 83       	std	Z+1, r25	; 0x01
    1f14:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    1f1c:	82 e0       	ldi	r24, 0x02	; 2
    1f1e:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    1f22:	83 e0       	ldi	r24, 0x03	; 3
    1f24:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    1f28:	84 e0       	ldi	r24, 0x04	; 4
    1f2a:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(SIX);
    1f2e:	86 e0       	ldi	r24, 0x06	; 6
    1f30:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	a8 e4       	ldi	r26, 0x48	; 72
    1f3a:	b2 e4       	ldi	r27, 0x42	; 66
    1f3c:	8e a3       	std	Y+38, r24	; 0x26
    1f3e:	9f a3       	std	Y+39, r25	; 0x27
    1f40:	a8 a7       	std	Y+40, r26	; 0x28
    1f42:	b9 a7       	std	Y+41, r27	; 0x29

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f44:	8e 01       	movw	r16, r28
    1f46:	00 54       	subi	r16, 0x40	; 64
    1f48:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	4a e7       	ldi	r20, 0x7A	; 122
    1f50:	53 e4       	ldi	r21, 0x43	; 67
    1f52:	6e a1       	ldd	r22, Y+38	; 0x26
    1f54:	7f a1       	ldd	r23, Y+39	; 0x27
    1f56:	88 a5       	ldd	r24, Y+40	; 0x28
    1f58:	99 a5       	ldd	r25, Y+41	; 0x29
    1f5a:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	f8 01       	movw	r30, r16
    1f64:	80 83       	st	Z, r24
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	a2 83       	std	Z+2, r26	; 0x02
    1f6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	80 54       	subi	r24, 0x40	; 64
    1f70:	9f 4f       	sbci	r25, 0xFF	; 255
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e8       	ldi	r20, 0x80	; 128
    1f78:	5f e3       	ldi	r21, 0x3F	; 63
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	60 81       	ld	r22, Z
    1f7e:	71 81       	ldd	r23, Z+1	; 0x01
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	93 81       	ldd	r25, Z+3	; 0x03
    1f84:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    1f88:	88 23       	and	r24, r24
    1f8a:	4c f4       	brge	.+18     	; 0x1f9e <main+0x12d2>
		__ticks = 1;
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	8c 53       	subi	r24, 0x3C	; 60
    1f90:	9f 4f       	sbci	r25, 0xFF	; 255
    1f92:	21 e0       	ldi	r18, 0x01	; 1
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	fc 01       	movw	r30, r24
    1f98:	31 83       	std	Z+1, r19	; 0x01
    1f9a:	20 83       	st	Z, r18
    1f9c:	69 c0       	rjmp	.+210    	; 0x2070 <main+0x13a4>
	else if (__tmp > 65535)
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	80 54       	subi	r24, 0x40	; 64
    1fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	3f ef       	ldi	r19, 0xFF	; 255
    1fa8:	4f e7       	ldi	r20, 0x7F	; 127
    1faa:	57 e4       	ldi	r21, 0x47	; 71
    1fac:	fc 01       	movw	r30, r24
    1fae:	60 81       	ld	r22, Z
    1fb0:	71 81       	ldd	r23, Z+1	; 0x01
    1fb2:	82 81       	ldd	r24, Z+2	; 0x02
    1fb4:	93 81       	ldd	r25, Z+3	; 0x03
    1fb6:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    1fba:	18 16       	cp	r1, r24
    1fbc:	0c f0       	brlt	.+2      	; 0x1fc0 <main+0x12f4>
    1fbe:	46 c0       	rjmp	.+140    	; 0x204c <main+0x1380>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e2       	ldi	r20, 0x20	; 32
    1fc6:	51 e4       	ldi	r21, 0x41	; 65
    1fc8:	6e a1       	ldd	r22, Y+38	; 0x26
    1fca:	7f a1       	ldd	r23, Y+39	; 0x27
    1fcc:	88 a5       	ldd	r24, Y+40	; 0x28
    1fce:	99 a5       	ldd	r25, Y+41	; 0x29
    1fd0:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	8e 01       	movw	r16, r28
    1fda:	0c 53       	subi	r16, 0x3C	; 60
    1fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	f8 01       	movw	r30, r16
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
    1ff0:	24 c0       	rjmp	.+72     	; 0x203a <main+0x136e>
    1ff2:	ce 01       	movw	r24, r28
    1ff4:	8a 53       	subi	r24, 0x3A	; 58
    1ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff8:	29 e1       	ldi	r18, 0x19	; 25
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	31 83       	std	Z+1, r19	; 0x01
    2000:	20 83       	st	Z, r18
    2002:	ce 01       	movw	r24, r28
    2004:	8a 53       	subi	r24, 0x3A	; 58
    2006:	9f 4f       	sbci	r25, 0xFF	; 255
    2008:	fc 01       	movw	r30, r24
    200a:	80 81       	ld	r24, Z
    200c:	91 81       	ldd	r25, Z+1	; 0x01
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <main+0x1342>
    2012:	9e 01       	movw	r18, r28
    2014:	2a 53       	subi	r18, 0x3A	; 58
    2016:	3f 4f       	sbci	r19, 0xFF	; 255
    2018:	f9 01       	movw	r30, r18
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201e:	ce 01       	movw	r24, r28
    2020:	8c 53       	subi	r24, 0x3C	; 60
    2022:	9f 4f       	sbci	r25, 0xFF	; 255
    2024:	9e 01       	movw	r18, r28
    2026:	2c 53       	subi	r18, 0x3C	; 60
    2028:	3f 4f       	sbci	r19, 0xFF	; 255
    202a:	f9 01       	movw	r30, r18
    202c:	20 81       	ld	r18, Z
    202e:	31 81       	ldd	r19, Z+1	; 0x01
    2030:	21 50       	subi	r18, 0x01	; 1
    2032:	31 09       	sbc	r19, r1
    2034:	fc 01       	movw	r30, r24
    2036:	31 83       	std	Z+1, r19	; 0x01
    2038:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203a:	ce 01       	movw	r24, r28
    203c:	8c 53       	subi	r24, 0x3C	; 60
    203e:	9f 4f       	sbci	r25, 0xFF	; 255
    2040:	fc 01       	movw	r30, r24
    2042:	80 81       	ld	r24, Z
    2044:	91 81       	ldd	r25, Z+1	; 0x01
    2046:	89 2b       	or	r24, r25
    2048:	a1 f6       	brne	.-88     	; 0x1ff2 <main+0x1326>
    204a:	2c c0       	rjmp	.+88     	; 0x20a4 <main+0x13d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204c:	8e 01       	movw	r16, r28
    204e:	0c 53       	subi	r16, 0x3C	; 60
    2050:	1f 4f       	sbci	r17, 0xFF	; 255
    2052:	ce 01       	movw	r24, r28
    2054:	80 54       	subi	r24, 0x40	; 64
    2056:	9f 4f       	sbci	r25, 0xFF	; 255
    2058:	fc 01       	movw	r30, r24
    205a:	60 81       	ld	r22, Z
    205c:	71 81       	ldd	r23, Z+1	; 0x01
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	f8 01       	movw	r30, r16
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	80 83       	st	Z, r24
    2070:	ce 01       	movw	r24, r28
    2072:	88 53       	subi	r24, 0x38	; 56
    2074:	9f 4f       	sbci	r25, 0xFF	; 255
    2076:	9e 01       	movw	r18, r28
    2078:	2c 53       	subi	r18, 0x3C	; 60
    207a:	3f 4f       	sbci	r19, 0xFF	; 255
    207c:	f9 01       	movw	r30, r18
    207e:	20 81       	ld	r18, Z
    2080:	31 81       	ldd	r19, Z+1	; 0x01
    2082:	fc 01       	movw	r30, r24
    2084:	31 83       	std	Z+1, r19	; 0x01
    2086:	20 83       	st	Z, r18
    2088:	ce 01       	movw	r24, r28
    208a:	88 53       	subi	r24, 0x38	; 56
    208c:	9f 4f       	sbci	r25, 0xFF	; 255
    208e:	fc 01       	movw	r30, r24
    2090:	80 81       	ld	r24, Z
    2092:	91 81       	ldd	r25, Z+1	; 0x01
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <main+0x13c8>
    2098:	9e 01       	movw	r18, r28
    209a:	28 53       	subi	r18, 0x38	; 56
    209c:	3f 4f       	sbci	r19, 0xFF	; 255
    209e:	f9 01       	movw	r30, r18
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	80 83       	st	Z, r24
				_delay_ms(50);
			}
			if(key == 7)
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	87 30       	cpi	r24, 0x07	; 7
    20a8:	09 f0       	breq	.+2      	; 0x20ac <main+0x13e0>
    20aa:	7f c1       	rjmp	.+766    	; 0x23aa <main+0x16de>
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a8 e4       	ldi	r26, 0x48	; 72
    20b2:	b2 e4       	ldi	r27, 0x42	; 66
    20b4:	8a af       	std	Y+58, r24	; 0x3a
    20b6:	9b af       	std	Y+59, r25	; 0x3b
    20b8:	ac af       	std	Y+60, r26	; 0x3c
    20ba:	bd af       	std	Y+61, r27	; 0x3d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    20bc:	8e 01       	movw	r16, r28
    20be:	02 52       	subi	r16, 0x22	; 34
    20c0:	1f 4f       	sbci	r17, 0xFF	; 255
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	4a e7       	ldi	r20, 0x7A	; 122
    20c8:	53 e4       	ldi	r21, 0x43	; 67
    20ca:	6a ad       	ldd	r22, Y+58	; 0x3a
    20cc:	7b ad       	ldd	r23, Y+59	; 0x3b
    20ce:	8c ad       	ldd	r24, Y+60	; 0x3c
    20d0:	9d ad       	ldd	r25, Y+61	; 0x3d
    20d2:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	f8 01       	movw	r30, r16
    20dc:	80 83       	st	Z, r24
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	a2 83       	std	Z+2, r26	; 0x02
    20e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20e4:	ce 01       	movw	r24, r28
    20e6:	82 52       	subi	r24, 0x22	; 34
    20e8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e8       	ldi	r20, 0x80	; 128
    20f0:	5f e3       	ldi	r21, 0x3F	; 63
    20f2:	fc 01       	movw	r30, r24
    20f4:	60 81       	ld	r22, Z
    20f6:	71 81       	ldd	r23, Z+1	; 0x01
    20f8:	82 81       	ldd	r24, Z+2	; 0x02
    20fa:	93 81       	ldd	r25, Z+3	; 0x03
    20fc:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    2100:	88 23       	and	r24, r24
    2102:	4c f4       	brge	.+18     	; 0x2116 <main+0x144a>
		__ticks = 1;
    2104:	ce 01       	movw	r24, r28
    2106:	8e 51       	subi	r24, 0x1E	; 30
    2108:	9f 4f       	sbci	r25, 0xFF	; 255
    210a:	21 e0       	ldi	r18, 0x01	; 1
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	fc 01       	movw	r30, r24
    2110:	31 83       	std	Z+1, r19	; 0x01
    2112:	20 83       	st	Z, r18
    2114:	69 c0       	rjmp	.+210    	; 0x21e8 <main+0x151c>
	else if (__tmp > 65535)
    2116:	ce 01       	movw	r24, r28
    2118:	82 52       	subi	r24, 0x22	; 34
    211a:	9f 4f       	sbci	r25, 0xFF	; 255
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	3f ef       	ldi	r19, 0xFF	; 255
    2120:	4f e7       	ldi	r20, 0x7F	; 127
    2122:	57 e4       	ldi	r21, 0x47	; 71
    2124:	fc 01       	movw	r30, r24
    2126:	60 81       	ld	r22, Z
    2128:	71 81       	ldd	r23, Z+1	; 0x01
    212a:	82 81       	ldd	r24, Z+2	; 0x02
    212c:	93 81       	ldd	r25, Z+3	; 0x03
    212e:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    2132:	18 16       	cp	r1, r24
    2134:	0c f0       	brlt	.+2      	; 0x2138 <main+0x146c>
    2136:	46 c0       	rjmp	.+140    	; 0x21c4 <main+0x14f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e2       	ldi	r20, 0x20	; 32
    213e:	51 e4       	ldi	r21, 0x41	; 65
    2140:	6a ad       	ldd	r22, Y+58	; 0x3a
    2142:	7b ad       	ldd	r23, Y+59	; 0x3b
    2144:	8c ad       	ldd	r24, Y+60	; 0x3c
    2146:	9d ad       	ldd	r25, Y+61	; 0x3d
    2148:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	8e 01       	movw	r16, r28
    2152:	0e 51       	subi	r16, 0x1E	; 30
    2154:	1f 4f       	sbci	r17, 0xFF	; 255
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	f8 01       	movw	r30, r16
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	80 83       	st	Z, r24
    2168:	24 c0       	rjmp	.+72     	; 0x21b2 <main+0x14e6>
    216a:	ce 01       	movw	r24, r28
    216c:	8c 51       	subi	r24, 0x1C	; 28
    216e:	9f 4f       	sbci	r25, 0xFF	; 255
    2170:	29 e1       	ldi	r18, 0x19	; 25
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	fc 01       	movw	r30, r24
    2176:	31 83       	std	Z+1, r19	; 0x01
    2178:	20 83       	st	Z, r18
    217a:	ce 01       	movw	r24, r28
    217c:	8c 51       	subi	r24, 0x1C	; 28
    217e:	9f 4f       	sbci	r25, 0xFF	; 255
    2180:	fc 01       	movw	r30, r24
    2182:	80 81       	ld	r24, Z
    2184:	91 81       	ldd	r25, Z+1	; 0x01
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <main+0x14ba>
    218a:	9e 01       	movw	r18, r28
    218c:	2c 51       	subi	r18, 0x1C	; 28
    218e:	3f 4f       	sbci	r19, 0xFF	; 255
    2190:	f9 01       	movw	r30, r18
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2196:	ce 01       	movw	r24, r28
    2198:	8e 51       	subi	r24, 0x1E	; 30
    219a:	9f 4f       	sbci	r25, 0xFF	; 255
    219c:	9e 01       	movw	r18, r28
    219e:	2e 51       	subi	r18, 0x1E	; 30
    21a0:	3f 4f       	sbci	r19, 0xFF	; 255
    21a2:	f9 01       	movw	r30, r18
    21a4:	20 81       	ld	r18, Z
    21a6:	31 81       	ldd	r19, Z+1	; 0x01
    21a8:	21 50       	subi	r18, 0x01	; 1
    21aa:	31 09       	sbc	r19, r1
    21ac:	fc 01       	movw	r30, r24
    21ae:	31 83       	std	Z+1, r19	; 0x01
    21b0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b2:	ce 01       	movw	r24, r28
    21b4:	8e 51       	subi	r24, 0x1E	; 30
    21b6:	9f 4f       	sbci	r25, 0xFF	; 255
    21b8:	fc 01       	movw	r30, r24
    21ba:	80 81       	ld	r24, Z
    21bc:	91 81       	ldd	r25, Z+1	; 0x01
    21be:	89 2b       	or	r24, r25
    21c0:	a1 f6       	brne	.-88     	; 0x216a <main+0x149e>
    21c2:	2c c0       	rjmp	.+88     	; 0x221c <main+0x1550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c4:	8e 01       	movw	r16, r28
    21c6:	0e 51       	subi	r16, 0x1E	; 30
    21c8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ca:	ce 01       	movw	r24, r28
    21cc:	82 52       	subi	r24, 0x22	; 34
    21ce:	9f 4f       	sbci	r25, 0xFF	; 255
    21d0:	fc 01       	movw	r30, r24
    21d2:	60 81       	ld	r22, Z
    21d4:	71 81       	ldd	r23, Z+1	; 0x01
    21d6:	82 81       	ldd	r24, Z+2	; 0x02
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	f8 01       	movw	r30, r16
    21e4:	91 83       	std	Z+1, r25	; 0x01
    21e6:	80 83       	st	Z, r24
    21e8:	ce 01       	movw	r24, r28
    21ea:	8a 51       	subi	r24, 0x1A	; 26
    21ec:	9f 4f       	sbci	r25, 0xFF	; 255
    21ee:	9e 01       	movw	r18, r28
    21f0:	2e 51       	subi	r18, 0x1E	; 30
    21f2:	3f 4f       	sbci	r19, 0xFF	; 255
    21f4:	f9 01       	movw	r30, r18
    21f6:	20 81       	ld	r18, Z
    21f8:	31 81       	ldd	r19, Z+1	; 0x01
    21fa:	fc 01       	movw	r30, r24
    21fc:	31 83       	std	Z+1, r19	; 0x01
    21fe:	20 83       	st	Z, r18
    2200:	ce 01       	movw	r24, r28
    2202:	8a 51       	subi	r24, 0x1A	; 26
    2204:	9f 4f       	sbci	r25, 0xFF	; 255
    2206:	fc 01       	movw	r30, r24
    2208:	80 81       	ld	r24, Z
    220a:	91 81       	ldd	r25, Z+1	; 0x01
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <main+0x1540>
    2210:	9e 01       	movw	r18, r28
    2212:	2a 51       	subi	r18, 0x1A	; 26
    2214:	3f 4f       	sbci	r19, 0xFF	; 255
    2216:	f9 01       	movw	r30, r18
    2218:	91 83       	std	Z+1, r25	; 0x01
    221a:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    2222:	82 e0       	ldi	r24, 0x02	; 2
    2224:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    2228:	83 e0       	ldi	r24, 0x03	; 3
    222a:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    222e:	84 e0       	ldi	r24, 0x04	; 4
    2230:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(SEVEN);
    2234:	87 e0       	ldi	r24, 0x07	; 7
    2236:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	a8 e4       	ldi	r26, 0x48	; 72
    2240:	b2 e4       	ldi	r27, 0x42	; 66
    2242:	8e a7       	std	Y+46, r24	; 0x2e
    2244:	9f a7       	std	Y+47, r25	; 0x2f
    2246:	a8 ab       	std	Y+48, r26	; 0x30
    2248:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    224a:	8e 01       	movw	r16, r28
    224c:	0c 52       	subi	r16, 0x2C	; 44
    224e:	1f 4f       	sbci	r17, 0xFF	; 255
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	4a e7       	ldi	r20, 0x7A	; 122
    2256:	53 e4       	ldi	r21, 0x43	; 67
    2258:	6e a5       	ldd	r22, Y+46	; 0x2e
    225a:	7f a5       	ldd	r23, Y+47	; 0x2f
    225c:	88 a9       	ldd	r24, Y+48	; 0x30
    225e:	99 a9       	ldd	r25, Y+49	; 0x31
    2260:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	f8 01       	movw	r30, r16
    226a:	80 83       	st	Z, r24
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	a2 83       	std	Z+2, r26	; 0x02
    2270:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2272:	ce 01       	movw	r24, r28
    2274:	8c 52       	subi	r24, 0x2C	; 44
    2276:	9f 4f       	sbci	r25, 0xFF	; 255
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e8       	ldi	r20, 0x80	; 128
    227e:	5f e3       	ldi	r21, 0x3F	; 63
    2280:	fc 01       	movw	r30, r24
    2282:	60 81       	ld	r22, Z
    2284:	71 81       	ldd	r23, Z+1	; 0x01
    2286:	82 81       	ldd	r24, Z+2	; 0x02
    2288:	93 81       	ldd	r25, Z+3	; 0x03
    228a:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    228e:	88 23       	and	r24, r24
    2290:	4c f4       	brge	.+18     	; 0x22a4 <main+0x15d8>
		__ticks = 1;
    2292:	ce 01       	movw	r24, r28
    2294:	88 52       	subi	r24, 0x28	; 40
    2296:	9f 4f       	sbci	r25, 0xFF	; 255
    2298:	21 e0       	ldi	r18, 0x01	; 1
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	fc 01       	movw	r30, r24
    229e:	31 83       	std	Z+1, r19	; 0x01
    22a0:	20 83       	st	Z, r18
    22a2:	69 c0       	rjmp	.+210    	; 0x2376 <main+0x16aa>
	else if (__tmp > 65535)
    22a4:	ce 01       	movw	r24, r28
    22a6:	8c 52       	subi	r24, 0x2C	; 44
    22a8:	9f 4f       	sbci	r25, 0xFF	; 255
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	3f ef       	ldi	r19, 0xFF	; 255
    22ae:	4f e7       	ldi	r20, 0x7F	; 127
    22b0:	57 e4       	ldi	r21, 0x47	; 71
    22b2:	fc 01       	movw	r30, r24
    22b4:	60 81       	ld	r22, Z
    22b6:	71 81       	ldd	r23, Z+1	; 0x01
    22b8:	82 81       	ldd	r24, Z+2	; 0x02
    22ba:	93 81       	ldd	r25, Z+3	; 0x03
    22bc:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    22c0:	18 16       	cp	r1, r24
    22c2:	0c f0       	brlt	.+2      	; 0x22c6 <main+0x15fa>
    22c4:	46 c0       	rjmp	.+140    	; 0x2352 <main+0x1686>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e2       	ldi	r20, 0x20	; 32
    22cc:	51 e4       	ldi	r21, 0x41	; 65
    22ce:	6e a5       	ldd	r22, Y+46	; 0x2e
    22d0:	7f a5       	ldd	r23, Y+47	; 0x2f
    22d2:	88 a9       	ldd	r24, Y+48	; 0x30
    22d4:	99 a9       	ldd	r25, Y+49	; 0x31
    22d6:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	8e 01       	movw	r16, r28
    22e0:	08 52       	subi	r16, 0x28	; 40
    22e2:	1f 4f       	sbci	r17, 0xFF	; 255
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	f8 01       	movw	r30, r16
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	80 83       	st	Z, r24
    22f6:	24 c0       	rjmp	.+72     	; 0x2340 <main+0x1674>
    22f8:	ce 01       	movw	r24, r28
    22fa:	86 52       	subi	r24, 0x26	; 38
    22fc:	9f 4f       	sbci	r25, 0xFF	; 255
    22fe:	29 e1       	ldi	r18, 0x19	; 25
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	fc 01       	movw	r30, r24
    2304:	31 83       	std	Z+1, r19	; 0x01
    2306:	20 83       	st	Z, r18
    2308:	ce 01       	movw	r24, r28
    230a:	86 52       	subi	r24, 0x26	; 38
    230c:	9f 4f       	sbci	r25, 0xFF	; 255
    230e:	fc 01       	movw	r30, r24
    2310:	80 81       	ld	r24, Z
    2312:	91 81       	ldd	r25, Z+1	; 0x01
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <main+0x1648>
    2318:	9e 01       	movw	r18, r28
    231a:	26 52       	subi	r18, 0x26	; 38
    231c:	3f 4f       	sbci	r19, 0xFF	; 255
    231e:	f9 01       	movw	r30, r18
    2320:	91 83       	std	Z+1, r25	; 0x01
    2322:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2324:	ce 01       	movw	r24, r28
    2326:	88 52       	subi	r24, 0x28	; 40
    2328:	9f 4f       	sbci	r25, 0xFF	; 255
    232a:	9e 01       	movw	r18, r28
    232c:	28 52       	subi	r18, 0x28	; 40
    232e:	3f 4f       	sbci	r19, 0xFF	; 255
    2330:	f9 01       	movw	r30, r18
    2332:	20 81       	ld	r18, Z
    2334:	31 81       	ldd	r19, Z+1	; 0x01
    2336:	21 50       	subi	r18, 0x01	; 1
    2338:	31 09       	sbc	r19, r1
    233a:	fc 01       	movw	r30, r24
    233c:	31 83       	std	Z+1, r19	; 0x01
    233e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2340:	ce 01       	movw	r24, r28
    2342:	88 52       	subi	r24, 0x28	; 40
    2344:	9f 4f       	sbci	r25, 0xFF	; 255
    2346:	fc 01       	movw	r30, r24
    2348:	80 81       	ld	r24, Z
    234a:	91 81       	ldd	r25, Z+1	; 0x01
    234c:	89 2b       	or	r24, r25
    234e:	a1 f6       	brne	.-88     	; 0x22f8 <main+0x162c>
    2350:	2c c0       	rjmp	.+88     	; 0x23aa <main+0x16de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2352:	8e 01       	movw	r16, r28
    2354:	08 52       	subi	r16, 0x28	; 40
    2356:	1f 4f       	sbci	r17, 0xFF	; 255
    2358:	ce 01       	movw	r24, r28
    235a:	8c 52       	subi	r24, 0x2C	; 44
    235c:	9f 4f       	sbci	r25, 0xFF	; 255
    235e:	fc 01       	movw	r30, r24
    2360:	60 81       	ld	r22, Z
    2362:	71 81       	ldd	r23, Z+1	; 0x01
    2364:	82 81       	ldd	r24, Z+2	; 0x02
    2366:	93 81       	ldd	r25, Z+3	; 0x03
    2368:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	f8 01       	movw	r30, r16
    2372:	91 83       	std	Z+1, r25	; 0x01
    2374:	80 83       	st	Z, r24
    2376:	ce 01       	movw	r24, r28
    2378:	84 52       	subi	r24, 0x24	; 36
    237a:	9f 4f       	sbci	r25, 0xFF	; 255
    237c:	9e 01       	movw	r18, r28
    237e:	28 52       	subi	r18, 0x28	; 40
    2380:	3f 4f       	sbci	r19, 0xFF	; 255
    2382:	f9 01       	movw	r30, r18
    2384:	20 81       	ld	r18, Z
    2386:	31 81       	ldd	r19, Z+1	; 0x01
    2388:	fc 01       	movw	r30, r24
    238a:	31 83       	std	Z+1, r19	; 0x01
    238c:	20 83       	st	Z, r18
    238e:	ce 01       	movw	r24, r28
    2390:	84 52       	subi	r24, 0x24	; 36
    2392:	9f 4f       	sbci	r25, 0xFF	; 255
    2394:	fc 01       	movw	r30, r24
    2396:	80 81       	ld	r24, Z
    2398:	91 81       	ldd	r25, Z+1	; 0x01
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <main+0x16ce>
    239e:	9e 01       	movw	r18, r28
    23a0:	24 52       	subi	r18, 0x24	; 36
    23a2:	3f 4f       	sbci	r19, 0xFF	; 255
    23a4:	f9 01       	movw	r30, r18
    23a6:	91 83       	std	Z+1, r25	; 0x01
    23a8:	80 83       	st	Z, r24
				_delay_ms(50);
			}
			if(key == 8)
    23aa:	8d 81       	ldd	r24, Y+5	; 0x05
    23ac:	88 30       	cpi	r24, 0x08	; 8
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <main+0x16e6>
    23b0:	8b c1       	rjmp	.+790    	; 0x26c8 <main+0x19fc>
    23b2:	9e 01       	movw	r18, r28
    23b4:	2e 5b       	subi	r18, 0xBE	; 190
    23b6:	3f 4f       	sbci	r19, 0xFF	; 255
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	a8 e4       	ldi	r26, 0x48	; 72
    23be:	b2 e4       	ldi	r27, 0x42	; 66
    23c0:	f9 01       	movw	r30, r18
    23c2:	80 83       	st	Z, r24
    23c4:	91 83       	std	Z+1, r25	; 0x01
    23c6:	a2 83       	std	Z+2, r26	; 0x02
    23c8:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    23ca:	8e 01       	movw	r16, r28
    23cc:	0e 50       	subi	r16, 0x0E	; 14
    23ce:	1f 4f       	sbci	r17, 0xFF	; 255
    23d0:	ce 01       	movw	r24, r28
    23d2:	8e 5b       	subi	r24, 0xBE	; 190
    23d4:	9f 4f       	sbci	r25, 0xFF	; 255
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	4a e7       	ldi	r20, 0x7A	; 122
    23dc:	53 e4       	ldi	r21, 0x43	; 67
    23de:	fc 01       	movw	r30, r24
    23e0:	60 81       	ld	r22, Z
    23e2:	71 81       	ldd	r23, Z+1	; 0x01
    23e4:	82 81       	ldd	r24, Z+2	; 0x02
    23e6:	93 81       	ldd	r25, Z+3	; 0x03
    23e8:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	f8 01       	movw	r30, r16
    23f2:	80 83       	st	Z, r24
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	a2 83       	std	Z+2, r26	; 0x02
    23f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23fa:	ce 01       	movw	r24, r28
    23fc:	8e 50       	subi	r24, 0x0E	; 14
    23fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e8       	ldi	r20, 0x80	; 128
    2406:	5f e3       	ldi	r21, 0x3F	; 63
    2408:	fc 01       	movw	r30, r24
    240a:	60 81       	ld	r22, Z
    240c:	71 81       	ldd	r23, Z+1	; 0x01
    240e:	82 81       	ldd	r24, Z+2	; 0x02
    2410:	93 81       	ldd	r25, Z+3	; 0x03
    2412:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    2416:	88 23       	and	r24, r24
    2418:	4c f4       	brge	.+18     	; 0x242c <main+0x1760>
		__ticks = 1;
    241a:	ce 01       	movw	r24, r28
    241c:	8a 50       	subi	r24, 0x0A	; 10
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	21 e0       	ldi	r18, 0x01	; 1
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	fc 01       	movw	r30, r24
    2426:	31 83       	std	Z+1, r19	; 0x01
    2428:	20 83       	st	Z, r18
    242a:	6d c0       	rjmp	.+218    	; 0x2506 <main+0x183a>
	else if (__tmp > 65535)
    242c:	ce 01       	movw	r24, r28
    242e:	8e 50       	subi	r24, 0x0E	; 14
    2430:	9f 4f       	sbci	r25, 0xFF	; 255
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	3f ef       	ldi	r19, 0xFF	; 255
    2436:	4f e7       	ldi	r20, 0x7F	; 127
    2438:	57 e4       	ldi	r21, 0x47	; 71
    243a:	fc 01       	movw	r30, r24
    243c:	60 81       	ld	r22, Z
    243e:	71 81       	ldd	r23, Z+1	; 0x01
    2440:	82 81       	ldd	r24, Z+2	; 0x02
    2442:	93 81       	ldd	r25, Z+3	; 0x03
    2444:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    2448:	18 16       	cp	r1, r24
    244a:	0c f0       	brlt	.+2      	; 0x244e <main+0x1782>
    244c:	4a c0       	rjmp	.+148    	; 0x24e2 <main+0x1816>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    244e:	ce 01       	movw	r24, r28
    2450:	8e 5b       	subi	r24, 0xBE	; 190
    2452:	9f 4f       	sbci	r25, 0xFF	; 255
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e2       	ldi	r20, 0x20	; 32
    245a:	51 e4       	ldi	r21, 0x41	; 65
    245c:	fc 01       	movw	r30, r24
    245e:	60 81       	ld	r22, Z
    2460:	71 81       	ldd	r23, Z+1	; 0x01
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	8e 01       	movw	r16, r28
    2470:	0a 50       	subi	r16, 0x0A	; 10
    2472:	1f 4f       	sbci	r17, 0xFF	; 255
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	f8 01       	movw	r30, r16
    2482:	91 83       	std	Z+1, r25	; 0x01
    2484:	80 83       	st	Z, r24
    2486:	24 c0       	rjmp	.+72     	; 0x24d0 <main+0x1804>
    2488:	ce 01       	movw	r24, r28
    248a:	88 50       	subi	r24, 0x08	; 8
    248c:	9f 4f       	sbci	r25, 0xFF	; 255
    248e:	29 e1       	ldi	r18, 0x19	; 25
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	fc 01       	movw	r30, r24
    2494:	31 83       	std	Z+1, r19	; 0x01
    2496:	20 83       	st	Z, r18
    2498:	ce 01       	movw	r24, r28
    249a:	88 50       	subi	r24, 0x08	; 8
    249c:	9f 4f       	sbci	r25, 0xFF	; 255
    249e:	fc 01       	movw	r30, r24
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <main+0x17d8>
    24a8:	9e 01       	movw	r18, r28
    24aa:	28 50       	subi	r18, 0x08	; 8
    24ac:	3f 4f       	sbci	r19, 0xFF	; 255
    24ae:	f9 01       	movw	r30, r18
    24b0:	91 83       	std	Z+1, r25	; 0x01
    24b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b4:	ce 01       	movw	r24, r28
    24b6:	8a 50       	subi	r24, 0x0A	; 10
    24b8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ba:	9e 01       	movw	r18, r28
    24bc:	2a 50       	subi	r18, 0x0A	; 10
    24be:	3f 4f       	sbci	r19, 0xFF	; 255
    24c0:	f9 01       	movw	r30, r18
    24c2:	20 81       	ld	r18, Z
    24c4:	31 81       	ldd	r19, Z+1	; 0x01
    24c6:	21 50       	subi	r18, 0x01	; 1
    24c8:	31 09       	sbc	r19, r1
    24ca:	fc 01       	movw	r30, r24
    24cc:	31 83       	std	Z+1, r19	; 0x01
    24ce:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d0:	ce 01       	movw	r24, r28
    24d2:	8a 50       	subi	r24, 0x0A	; 10
    24d4:	9f 4f       	sbci	r25, 0xFF	; 255
    24d6:	fc 01       	movw	r30, r24
    24d8:	80 81       	ld	r24, Z
    24da:	91 81       	ldd	r25, Z+1	; 0x01
    24dc:	89 2b       	or	r24, r25
    24de:	a1 f6       	brne	.-88     	; 0x2488 <main+0x17bc>
    24e0:	2c c0       	rjmp	.+88     	; 0x253a <main+0x186e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e2:	8e 01       	movw	r16, r28
    24e4:	0a 50       	subi	r16, 0x0A	; 10
    24e6:	1f 4f       	sbci	r17, 0xFF	; 255
    24e8:	ce 01       	movw	r24, r28
    24ea:	8e 50       	subi	r24, 0x0E	; 14
    24ec:	9f 4f       	sbci	r25, 0xFF	; 255
    24ee:	fc 01       	movw	r30, r24
    24f0:	60 81       	ld	r22, Z
    24f2:	71 81       	ldd	r23, Z+1	; 0x01
    24f4:	82 81       	ldd	r24, Z+2	; 0x02
    24f6:	93 81       	ldd	r25, Z+3	; 0x03
    24f8:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	f8 01       	movw	r30, r16
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	80 83       	st	Z, r24
    2506:	ce 01       	movw	r24, r28
    2508:	86 50       	subi	r24, 0x06	; 6
    250a:	9f 4f       	sbci	r25, 0xFF	; 255
    250c:	9e 01       	movw	r18, r28
    250e:	2a 50       	subi	r18, 0x0A	; 10
    2510:	3f 4f       	sbci	r19, 0xFF	; 255
    2512:	f9 01       	movw	r30, r18
    2514:	20 81       	ld	r18, Z
    2516:	31 81       	ldd	r19, Z+1	; 0x01
    2518:	fc 01       	movw	r30, r24
    251a:	31 83       	std	Z+1, r19	; 0x01
    251c:	20 83       	st	Z, r18
    251e:	ce 01       	movw	r24, r28
    2520:	86 50       	subi	r24, 0x06	; 6
    2522:	9f 4f       	sbci	r25, 0xFF	; 255
    2524:	fc 01       	movw	r30, r24
    2526:	80 81       	ld	r24, Z
    2528:	91 81       	ldd	r25, Z+1	; 0x01
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	f1 f7       	brne	.-4      	; 0x252a <main+0x185e>
    252e:	9e 01       	movw	r18, r28
    2530:	26 50       	subi	r18, 0x06	; 6
    2532:	3f 4f       	sbci	r19, 0xFF	; 255
    2534:	f9 01       	movw	r30, r18
    2536:	91 83       	std	Z+1, r25	; 0x01
    2538:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    2546:	83 e0       	ldi	r24, 0x03	; 3
    2548:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    254c:	84 e0       	ldi	r24, 0x04	; 4
    254e:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(EIGHT);
    2552:	88 e0       	ldi	r24, 0x08	; 8
    2554:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	a8 e4       	ldi	r26, 0x48	; 72
    255e:	b2 e4       	ldi	r27, 0x42	; 66
    2560:	8e ab       	std	Y+54, r24	; 0x36
    2562:	9f ab       	std	Y+55, r25	; 0x37
    2564:	a8 af       	std	Y+56, r26	; 0x38
    2566:	b9 af       	std	Y+57, r27	; 0x39

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2568:	8e 01       	movw	r16, r28
    256a:	08 51       	subi	r16, 0x18	; 24
    256c:	1f 4f       	sbci	r17, 0xFF	; 255
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	4a e7       	ldi	r20, 0x7A	; 122
    2574:	53 e4       	ldi	r21, 0x43	; 67
    2576:	6e a9       	ldd	r22, Y+54	; 0x36
    2578:	7f a9       	ldd	r23, Y+55	; 0x37
    257a:	88 ad       	ldd	r24, Y+56	; 0x38
    257c:	99 ad       	ldd	r25, Y+57	; 0x39
    257e:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	f8 01       	movw	r30, r16
    2588:	80 83       	st	Z, r24
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	a2 83       	std	Z+2, r26	; 0x02
    258e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2590:	ce 01       	movw	r24, r28
    2592:	88 51       	subi	r24, 0x18	; 24
    2594:	9f 4f       	sbci	r25, 0xFF	; 255
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e8       	ldi	r20, 0x80	; 128
    259c:	5f e3       	ldi	r21, 0x3F	; 63
    259e:	fc 01       	movw	r30, r24
    25a0:	60 81       	ld	r22, Z
    25a2:	71 81       	ldd	r23, Z+1	; 0x01
    25a4:	82 81       	ldd	r24, Z+2	; 0x02
    25a6:	93 81       	ldd	r25, Z+3	; 0x03
    25a8:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    25ac:	88 23       	and	r24, r24
    25ae:	4c f4       	brge	.+18     	; 0x25c2 <main+0x18f6>
		__ticks = 1;
    25b0:	ce 01       	movw	r24, r28
    25b2:	84 51       	subi	r24, 0x14	; 20
    25b4:	9f 4f       	sbci	r25, 0xFF	; 255
    25b6:	21 e0       	ldi	r18, 0x01	; 1
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	fc 01       	movw	r30, r24
    25bc:	31 83       	std	Z+1, r19	; 0x01
    25be:	20 83       	st	Z, r18
    25c0:	69 c0       	rjmp	.+210    	; 0x2694 <main+0x19c8>
	else if (__tmp > 65535)
    25c2:	ce 01       	movw	r24, r28
    25c4:	88 51       	subi	r24, 0x18	; 24
    25c6:	9f 4f       	sbci	r25, 0xFF	; 255
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	3f ef       	ldi	r19, 0xFF	; 255
    25cc:	4f e7       	ldi	r20, 0x7F	; 127
    25ce:	57 e4       	ldi	r21, 0x47	; 71
    25d0:	fc 01       	movw	r30, r24
    25d2:	60 81       	ld	r22, Z
    25d4:	71 81       	ldd	r23, Z+1	; 0x01
    25d6:	82 81       	ldd	r24, Z+2	; 0x02
    25d8:	93 81       	ldd	r25, Z+3	; 0x03
    25da:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    25de:	18 16       	cp	r1, r24
    25e0:	0c f0       	brlt	.+2      	; 0x25e4 <main+0x1918>
    25e2:	46 c0       	rjmp	.+140    	; 0x2670 <main+0x19a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e2       	ldi	r20, 0x20	; 32
    25ea:	51 e4       	ldi	r21, 0x41	; 65
    25ec:	6e a9       	ldd	r22, Y+54	; 0x36
    25ee:	7f a9       	ldd	r23, Y+55	; 0x37
    25f0:	88 ad       	ldd	r24, Y+56	; 0x38
    25f2:	99 ad       	ldd	r25, Y+57	; 0x39
    25f4:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	8e 01       	movw	r16, r28
    25fe:	04 51       	subi	r16, 0x14	; 20
    2600:	1f 4f       	sbci	r17, 0xFF	; 255
    2602:	bc 01       	movw	r22, r24
    2604:	cd 01       	movw	r24, r26
    2606:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	f8 01       	movw	r30, r16
    2610:	91 83       	std	Z+1, r25	; 0x01
    2612:	80 83       	st	Z, r24
    2614:	24 c0       	rjmp	.+72     	; 0x265e <main+0x1992>
    2616:	ce 01       	movw	r24, r28
    2618:	82 51       	subi	r24, 0x12	; 18
    261a:	9f 4f       	sbci	r25, 0xFF	; 255
    261c:	29 e1       	ldi	r18, 0x19	; 25
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	fc 01       	movw	r30, r24
    2622:	31 83       	std	Z+1, r19	; 0x01
    2624:	20 83       	st	Z, r18
    2626:	ce 01       	movw	r24, r28
    2628:	82 51       	subi	r24, 0x12	; 18
    262a:	9f 4f       	sbci	r25, 0xFF	; 255
    262c:	fc 01       	movw	r30, r24
    262e:	80 81       	ld	r24, Z
    2630:	91 81       	ldd	r25, Z+1	; 0x01
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <main+0x1966>
    2636:	9e 01       	movw	r18, r28
    2638:	22 51       	subi	r18, 0x12	; 18
    263a:	3f 4f       	sbci	r19, 0xFF	; 255
    263c:	f9 01       	movw	r30, r18
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2642:	ce 01       	movw	r24, r28
    2644:	84 51       	subi	r24, 0x14	; 20
    2646:	9f 4f       	sbci	r25, 0xFF	; 255
    2648:	9e 01       	movw	r18, r28
    264a:	24 51       	subi	r18, 0x14	; 20
    264c:	3f 4f       	sbci	r19, 0xFF	; 255
    264e:	f9 01       	movw	r30, r18
    2650:	20 81       	ld	r18, Z
    2652:	31 81       	ldd	r19, Z+1	; 0x01
    2654:	21 50       	subi	r18, 0x01	; 1
    2656:	31 09       	sbc	r19, r1
    2658:	fc 01       	movw	r30, r24
    265a:	31 83       	std	Z+1, r19	; 0x01
    265c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265e:	ce 01       	movw	r24, r28
    2660:	84 51       	subi	r24, 0x14	; 20
    2662:	9f 4f       	sbci	r25, 0xFF	; 255
    2664:	fc 01       	movw	r30, r24
    2666:	80 81       	ld	r24, Z
    2668:	91 81       	ldd	r25, Z+1	; 0x01
    266a:	89 2b       	or	r24, r25
    266c:	a1 f6       	brne	.-88     	; 0x2616 <main+0x194a>
    266e:	2c c0       	rjmp	.+88     	; 0x26c8 <main+0x19fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2670:	8e 01       	movw	r16, r28
    2672:	04 51       	subi	r16, 0x14	; 20
    2674:	1f 4f       	sbci	r17, 0xFF	; 255
    2676:	ce 01       	movw	r24, r28
    2678:	88 51       	subi	r24, 0x18	; 24
    267a:	9f 4f       	sbci	r25, 0xFF	; 255
    267c:	fc 01       	movw	r30, r24
    267e:	60 81       	ld	r22, Z
    2680:	71 81       	ldd	r23, Z+1	; 0x01
    2682:	82 81       	ldd	r24, Z+2	; 0x02
    2684:	93 81       	ldd	r25, Z+3	; 0x03
    2686:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	f8 01       	movw	r30, r16
    2690:	91 83       	std	Z+1, r25	; 0x01
    2692:	80 83       	st	Z, r24
    2694:	ce 01       	movw	r24, r28
    2696:	80 51       	subi	r24, 0x10	; 16
    2698:	9f 4f       	sbci	r25, 0xFF	; 255
    269a:	9e 01       	movw	r18, r28
    269c:	24 51       	subi	r18, 0x14	; 20
    269e:	3f 4f       	sbci	r19, 0xFF	; 255
    26a0:	f9 01       	movw	r30, r18
    26a2:	20 81       	ld	r18, Z
    26a4:	31 81       	ldd	r19, Z+1	; 0x01
    26a6:	fc 01       	movw	r30, r24
    26a8:	31 83       	std	Z+1, r19	; 0x01
    26aa:	20 83       	st	Z, r18
    26ac:	ce 01       	movw	r24, r28
    26ae:	80 51       	subi	r24, 0x10	; 16
    26b0:	9f 4f       	sbci	r25, 0xFF	; 255
    26b2:	fc 01       	movw	r30, r24
    26b4:	80 81       	ld	r24, Z
    26b6:	91 81       	ldd	r25, Z+1	; 0x01
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <main+0x19ec>
    26bc:	9e 01       	movw	r18, r28
    26be:	20 51       	subi	r18, 0x10	; 16
    26c0:	3f 4f       	sbci	r19, 0xFF	; 255
    26c2:	f9 01       	movw	r30, r18
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	80 83       	st	Z, r24
				_delay_ms(50);
			}
			if(key == 9)
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	89 30       	cpi	r24, 0x09	; 9
    26cc:	09 f0       	breq	.+2      	; 0x26d0 <main+0x1a04>
    26ce:	8e c1       	rjmp	.+796    	; 0x29ec <main+0x1d20>
    26d0:	9e 01       	movw	r18, r28
    26d2:	26 5b       	subi	r18, 0xB6	; 182
    26d4:	3f 4f       	sbci	r19, 0xFF	; 255
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	a8 e4       	ldi	r26, 0x48	; 72
    26dc:	b2 e4       	ldi	r27, 0x42	; 66
    26de:	f9 01       	movw	r30, r18
    26e0:	80 83       	st	Z, r24
    26e2:	91 83       	std	Z+1, r25	; 0x01
    26e4:	a2 83       	std	Z+2, r26	; 0x02
    26e6:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    26e8:	8e 01       	movw	r16, r28
    26ea:	0a 5f       	subi	r16, 0xFA	; 250
    26ec:	1e 4f       	sbci	r17, 0xFE	; 254
    26ee:	ce 01       	movw	r24, r28
    26f0:	86 5b       	subi	r24, 0xB6	; 182
    26f2:	9f 4f       	sbci	r25, 0xFF	; 255
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4a e7       	ldi	r20, 0x7A	; 122
    26fa:	53 e4       	ldi	r21, 0x43	; 67
    26fc:	fc 01       	movw	r30, r24
    26fe:	60 81       	ld	r22, Z
    2700:	71 81       	ldd	r23, Z+1	; 0x01
    2702:	82 81       	ldd	r24, Z+2	; 0x02
    2704:	93 81       	ldd	r25, Z+3	; 0x03
    2706:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	f8 01       	movw	r30, r16
    2710:	80 83       	st	Z, r24
    2712:	91 83       	std	Z+1, r25	; 0x01
    2714:	a2 83       	std	Z+2, r26	; 0x02
    2716:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2718:	ce 01       	movw	r24, r28
    271a:	8a 5f       	subi	r24, 0xFA	; 250
    271c:	9e 4f       	sbci	r25, 0xFE	; 254
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e8       	ldi	r20, 0x80	; 128
    2724:	5f e3       	ldi	r21, 0x3F	; 63
    2726:	fc 01       	movw	r30, r24
    2728:	60 81       	ld	r22, Z
    272a:	71 81       	ldd	r23, Z+1	; 0x01
    272c:	82 81       	ldd	r24, Z+2	; 0x02
    272e:	93 81       	ldd	r25, Z+3	; 0x03
    2730:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    2734:	88 23       	and	r24, r24
    2736:	4c f4       	brge	.+18     	; 0x274a <main+0x1a7e>
		__ticks = 1;
    2738:	ce 01       	movw	r24, r28
    273a:	86 5f       	subi	r24, 0xF6	; 246
    273c:	9e 4f       	sbci	r25, 0xFE	; 254
    273e:	21 e0       	ldi	r18, 0x01	; 1
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	fc 01       	movw	r30, r24
    2744:	31 83       	std	Z+1, r19	; 0x01
    2746:	20 83       	st	Z, r18
    2748:	6d c0       	rjmp	.+218    	; 0x2824 <main+0x1b58>
	else if (__tmp > 65535)
    274a:	ce 01       	movw	r24, r28
    274c:	8a 5f       	subi	r24, 0xFA	; 250
    274e:	9e 4f       	sbci	r25, 0xFE	; 254
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	3f ef       	ldi	r19, 0xFF	; 255
    2754:	4f e7       	ldi	r20, 0x7F	; 127
    2756:	57 e4       	ldi	r21, 0x47	; 71
    2758:	fc 01       	movw	r30, r24
    275a:	60 81       	ld	r22, Z
    275c:	71 81       	ldd	r23, Z+1	; 0x01
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	93 81       	ldd	r25, Z+3	; 0x03
    2762:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    2766:	18 16       	cp	r1, r24
    2768:	0c f0       	brlt	.+2      	; 0x276c <main+0x1aa0>
    276a:	4a c0       	rjmp	.+148    	; 0x2800 <main+0x1b34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276c:	ce 01       	movw	r24, r28
    276e:	86 5b       	subi	r24, 0xB6	; 182
    2770:	9f 4f       	sbci	r25, 0xFF	; 255
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e2       	ldi	r20, 0x20	; 32
    2778:	51 e4       	ldi	r21, 0x41	; 65
    277a:	fc 01       	movw	r30, r24
    277c:	60 81       	ld	r22, Z
    277e:	71 81       	ldd	r23, Z+1	; 0x01
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	93 81       	ldd	r25, Z+3	; 0x03
    2784:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	8e 01       	movw	r16, r28
    278e:	06 5f       	subi	r16, 0xF6	; 246
    2790:	1e 4f       	sbci	r17, 0xFE	; 254
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	f8 01       	movw	r30, r16
    27a0:	91 83       	std	Z+1, r25	; 0x01
    27a2:	80 83       	st	Z, r24
    27a4:	24 c0       	rjmp	.+72     	; 0x27ee <main+0x1b22>
    27a6:	ce 01       	movw	r24, r28
    27a8:	84 5f       	subi	r24, 0xF4	; 244
    27aa:	9e 4f       	sbci	r25, 0xFE	; 254
    27ac:	29 e1       	ldi	r18, 0x19	; 25
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	fc 01       	movw	r30, r24
    27b2:	31 83       	std	Z+1, r19	; 0x01
    27b4:	20 83       	st	Z, r18
    27b6:	ce 01       	movw	r24, r28
    27b8:	84 5f       	subi	r24, 0xF4	; 244
    27ba:	9e 4f       	sbci	r25, 0xFE	; 254
    27bc:	fc 01       	movw	r30, r24
    27be:	80 81       	ld	r24, Z
    27c0:	91 81       	ldd	r25, Z+1	; 0x01
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	f1 f7       	brne	.-4      	; 0x27c2 <main+0x1af6>
    27c6:	9e 01       	movw	r18, r28
    27c8:	24 5f       	subi	r18, 0xF4	; 244
    27ca:	3e 4f       	sbci	r19, 0xFE	; 254
    27cc:	f9 01       	movw	r30, r18
    27ce:	91 83       	std	Z+1, r25	; 0x01
    27d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d2:	ce 01       	movw	r24, r28
    27d4:	86 5f       	subi	r24, 0xF6	; 246
    27d6:	9e 4f       	sbci	r25, 0xFE	; 254
    27d8:	9e 01       	movw	r18, r28
    27da:	26 5f       	subi	r18, 0xF6	; 246
    27dc:	3e 4f       	sbci	r19, 0xFE	; 254
    27de:	f9 01       	movw	r30, r18
    27e0:	20 81       	ld	r18, Z
    27e2:	31 81       	ldd	r19, Z+1	; 0x01
    27e4:	21 50       	subi	r18, 0x01	; 1
    27e6:	31 09       	sbc	r19, r1
    27e8:	fc 01       	movw	r30, r24
    27ea:	31 83       	std	Z+1, r19	; 0x01
    27ec:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ee:	ce 01       	movw	r24, r28
    27f0:	86 5f       	subi	r24, 0xF6	; 246
    27f2:	9e 4f       	sbci	r25, 0xFE	; 254
    27f4:	fc 01       	movw	r30, r24
    27f6:	80 81       	ld	r24, Z
    27f8:	91 81       	ldd	r25, Z+1	; 0x01
    27fa:	89 2b       	or	r24, r25
    27fc:	a1 f6       	brne	.-88     	; 0x27a6 <main+0x1ada>
    27fe:	2c c0       	rjmp	.+88     	; 0x2858 <main+0x1b8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2800:	8e 01       	movw	r16, r28
    2802:	06 5f       	subi	r16, 0xF6	; 246
    2804:	1e 4f       	sbci	r17, 0xFE	; 254
    2806:	ce 01       	movw	r24, r28
    2808:	8a 5f       	subi	r24, 0xFA	; 250
    280a:	9e 4f       	sbci	r25, 0xFE	; 254
    280c:	fc 01       	movw	r30, r24
    280e:	60 81       	ld	r22, Z
    2810:	71 81       	ldd	r23, Z+1	; 0x01
    2812:	82 81       	ldd	r24, Z+2	; 0x02
    2814:	93 81       	ldd	r25, Z+3	; 0x03
    2816:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	f8 01       	movw	r30, r16
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	80 83       	st	Z, r24
    2824:	ce 01       	movw	r24, r28
    2826:	82 5f       	subi	r24, 0xF2	; 242
    2828:	9e 4f       	sbci	r25, 0xFE	; 254
    282a:	9e 01       	movw	r18, r28
    282c:	26 5f       	subi	r18, 0xF6	; 246
    282e:	3e 4f       	sbci	r19, 0xFE	; 254
    2830:	f9 01       	movw	r30, r18
    2832:	20 81       	ld	r18, Z
    2834:	31 81       	ldd	r19, Z+1	; 0x01
    2836:	fc 01       	movw	r30, r24
    2838:	31 83       	std	Z+1, r19	; 0x01
    283a:	20 83       	st	Z, r18
    283c:	ce 01       	movw	r24, r28
    283e:	82 5f       	subi	r24, 0xF2	; 242
    2840:	9e 4f       	sbci	r25, 0xFE	; 254
    2842:	fc 01       	movw	r30, r24
    2844:	80 81       	ld	r24, Z
    2846:	91 81       	ldd	r25, Z+1	; 0x01
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <main+0x1b7c>
    284c:	9e 01       	movw	r18, r28
    284e:	22 5f       	subi	r18, 0xF2	; 242
    2850:	3e 4f       	sbci	r19, 0xFE	; 254
    2852:	f9 01       	movw	r30, r18
    2854:	91 83       	std	Z+1, r25	; 0x01
    2856:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    285e:	82 e0       	ldi	r24, 0x02	; 2
    2860:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    2864:	83 e0       	ldi	r24, 0x03	; 3
    2866:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    286a:	84 e0       	ldi	r24, 0x04	; 4
    286c:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(NINE);
    2870:	89 e0       	ldi	r24, 0x09	; 9
    2872:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    2876:	9e 01       	movw	r18, r28
    2878:	22 5c       	subi	r18, 0xC2	; 194
    287a:	3f 4f       	sbci	r19, 0xFF	; 255
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	a8 e4       	ldi	r26, 0x48	; 72
    2882:	b2 e4       	ldi	r27, 0x42	; 66
    2884:	f9 01       	movw	r30, r18
    2886:	80 83       	st	Z, r24
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	a2 83       	std	Z+2, r26	; 0x02
    288c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    288e:	8e 01       	movw	r16, r28
    2890:	04 50       	subi	r16, 0x04	; 4
    2892:	1f 4f       	sbci	r17, 0xFF	; 255
    2894:	ce 01       	movw	r24, r28
    2896:	ce 96       	adiw	r24, 0x3e	; 62
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	4a e7       	ldi	r20, 0x7A	; 122
    289e:	53 e4       	ldi	r21, 0x43	; 67
    28a0:	fc 01       	movw	r30, r24
    28a2:	60 81       	ld	r22, Z
    28a4:	71 81       	ldd	r23, Z+1	; 0x01
    28a6:	82 81       	ldd	r24, Z+2	; 0x02
    28a8:	93 81       	ldd	r25, Z+3	; 0x03
    28aa:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	f8 01       	movw	r30, r16
    28b4:	80 83       	st	Z, r24
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	a2 83       	std	Z+2, r26	; 0x02
    28ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28bc:	ce 01       	movw	r24, r28
    28be:	84 50       	subi	r24, 0x04	; 4
    28c0:	9f 4f       	sbci	r25, 0xFF	; 255
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e8       	ldi	r20, 0x80	; 128
    28c8:	5f e3       	ldi	r21, 0x3F	; 63
    28ca:	fc 01       	movw	r30, r24
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    28d8:	88 23       	and	r24, r24
    28da:	44 f4       	brge	.+16     	; 0x28ec <main+0x1c20>
		__ticks = 1;
    28dc:	ce 01       	movw	r24, r28
    28de:	93 95       	inc	r25
    28e0:	21 e0       	ldi	r18, 0x01	; 1
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	fc 01       	movw	r30, r24
    28e6:	31 83       	std	Z+1, r19	; 0x01
    28e8:	20 83       	st	Z, r18
    28ea:	67 c0       	rjmp	.+206    	; 0x29ba <main+0x1cee>
	else if (__tmp > 65535)
    28ec:	ce 01       	movw	r24, r28
    28ee:	84 50       	subi	r24, 0x04	; 4
    28f0:	9f 4f       	sbci	r25, 0xFF	; 255
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	3f ef       	ldi	r19, 0xFF	; 255
    28f6:	4f e7       	ldi	r20, 0x7F	; 127
    28f8:	57 e4       	ldi	r21, 0x47	; 71
    28fa:	fc 01       	movw	r30, r24
    28fc:	60 81       	ld	r22, Z
    28fe:	71 81       	ldd	r23, Z+1	; 0x01
    2900:	82 81       	ldd	r24, Z+2	; 0x02
    2902:	93 81       	ldd	r25, Z+3	; 0x03
    2904:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    2908:	18 16       	cp	r1, r24
    290a:	0c f0       	brlt	.+2      	; 0x290e <main+0x1c42>
    290c:	45 c0       	rjmp	.+138    	; 0x2998 <main+0x1ccc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290e:	ce 01       	movw	r24, r28
    2910:	ce 96       	adiw	r24, 0x3e	; 62
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e2       	ldi	r20, 0x20	; 32
    2918:	51 e4       	ldi	r21, 0x41	; 65
    291a:	fc 01       	movw	r30, r24
    291c:	60 81       	ld	r22, Z
    291e:	71 81       	ldd	r23, Z+1	; 0x01
    2920:	82 81       	ldd	r24, Z+2	; 0x02
    2922:	93 81       	ldd	r25, Z+3	; 0x03
    2924:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	8e 01       	movw	r16, r28
    292e:	13 95       	inc	r17
    2930:	bc 01       	movw	r22, r24
    2932:	cd 01       	movw	r24, r26
    2934:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	f8 01       	movw	r30, r16
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	80 83       	st	Z, r24
    2942:	22 c0       	rjmp	.+68     	; 0x2988 <main+0x1cbc>
    2944:	ce 01       	movw	r24, r28
    2946:	8e 5f       	subi	r24, 0xFE	; 254
    2948:	9e 4f       	sbci	r25, 0xFE	; 254
    294a:	29 e1       	ldi	r18, 0x19	; 25
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	fc 01       	movw	r30, r24
    2950:	31 83       	std	Z+1, r19	; 0x01
    2952:	20 83       	st	Z, r18
    2954:	ce 01       	movw	r24, r28
    2956:	8e 5f       	subi	r24, 0xFE	; 254
    2958:	9e 4f       	sbci	r25, 0xFE	; 254
    295a:	fc 01       	movw	r30, r24
    295c:	80 81       	ld	r24, Z
    295e:	91 81       	ldd	r25, Z+1	; 0x01
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <main+0x1c94>
    2964:	9e 01       	movw	r18, r28
    2966:	2e 5f       	subi	r18, 0xFE	; 254
    2968:	3e 4f       	sbci	r19, 0xFE	; 254
    296a:	f9 01       	movw	r30, r18
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2970:	ce 01       	movw	r24, r28
    2972:	93 95       	inc	r25
    2974:	9e 01       	movw	r18, r28
    2976:	33 95       	inc	r19
    2978:	f9 01       	movw	r30, r18
    297a:	20 81       	ld	r18, Z
    297c:	31 81       	ldd	r19, Z+1	; 0x01
    297e:	21 50       	subi	r18, 0x01	; 1
    2980:	31 09       	sbc	r19, r1
    2982:	fc 01       	movw	r30, r24
    2984:	31 83       	std	Z+1, r19	; 0x01
    2986:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2988:	ce 01       	movw	r24, r28
    298a:	93 95       	inc	r25
    298c:	fc 01       	movw	r30, r24
    298e:	80 81       	ld	r24, Z
    2990:	91 81       	ldd	r25, Z+1	; 0x01
    2992:	89 2b       	or	r24, r25
    2994:	b9 f6       	brne	.-82     	; 0x2944 <main+0x1c78>
    2996:	2a c0       	rjmp	.+84     	; 0x29ec <main+0x1d20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2998:	8e 01       	movw	r16, r28
    299a:	13 95       	inc	r17
    299c:	ce 01       	movw	r24, r28
    299e:	84 50       	subi	r24, 0x04	; 4
    29a0:	9f 4f       	sbci	r25, 0xFF	; 255
    29a2:	fc 01       	movw	r30, r24
    29a4:	60 81       	ld	r22, Z
    29a6:	71 81       	ldd	r23, Z+1	; 0x01
    29a8:	82 81       	ldd	r24, Z+2	; 0x02
    29aa:	93 81       	ldd	r25, Z+3	; 0x03
    29ac:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	f8 01       	movw	r30, r16
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
    29ba:	ce 01       	movw	r24, r28
    29bc:	8c 5f       	subi	r24, 0xFC	; 252
    29be:	9e 4f       	sbci	r25, 0xFE	; 254
    29c0:	9e 01       	movw	r18, r28
    29c2:	33 95       	inc	r19
    29c4:	f9 01       	movw	r30, r18
    29c6:	20 81       	ld	r18, Z
    29c8:	31 81       	ldd	r19, Z+1	; 0x01
    29ca:	fc 01       	movw	r30, r24
    29cc:	31 83       	std	Z+1, r19	; 0x01
    29ce:	20 83       	st	Z, r18
    29d0:	ce 01       	movw	r24, r28
    29d2:	8c 5f       	subi	r24, 0xFC	; 252
    29d4:	9e 4f       	sbci	r25, 0xFE	; 254
    29d6:	fc 01       	movw	r30, r24
    29d8:	80 81       	ld	r24, Z
    29da:	91 81       	ldd	r25, Z+1	; 0x01
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <main+0x1d10>
    29e0:	9e 01       	movw	r18, r28
    29e2:	2c 5f       	subi	r18, 0xFC	; 252
    29e4:	3e 4f       	sbci	r19, 0xFE	; 254
    29e6:	f9 01       	movw	r30, r18
    29e8:	91 83       	std	Z+1, r25	; 0x01
    29ea:	80 83       	st	Z, r24
    29ec:	9e 01       	movw	r18, r28
    29ee:	2a 5b       	subi	r18, 0xBA	; 186
    29f0:	3f 4f       	sbci	r19, 0xFF	; 255
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	aa e7       	ldi	r26, 0x7A	; 122
    29f8:	b4 e4       	ldi	r27, 0x44	; 68
    29fa:	f9 01       	movw	r30, r18
    29fc:	80 83       	st	Z, r24
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	a2 83       	std	Z+2, r26	; 0x02
    2a02:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a04:	8e 01       	movw	r16, r28
    2a06:	00 5f       	subi	r16, 0xF0	; 240
    2a08:	1e 4f       	sbci	r17, 0xFE	; 254
    2a0a:	ce 01       	movw	r24, r28
    2a0c:	8a 5b       	subi	r24, 0xBA	; 186
    2a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	4a e7       	ldi	r20, 0x7A	; 122
    2a16:	53 e4       	ldi	r21, 0x43	; 67
    2a18:	fc 01       	movw	r30, r24
    2a1a:	60 81       	ld	r22, Z
    2a1c:	71 81       	ldd	r23, Z+1	; 0x01
    2a1e:	82 81       	ldd	r24, Z+2	; 0x02
    2a20:	93 81       	ldd	r25, Z+3	; 0x03
    2a22:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	f8 01       	movw	r30, r16
    2a2c:	80 83       	st	Z, r24
    2a2e:	91 83       	std	Z+1, r25	; 0x01
    2a30:	a2 83       	std	Z+2, r26	; 0x02
    2a32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a34:	ce 01       	movw	r24, r28
    2a36:	80 5f       	subi	r24, 0xF0	; 240
    2a38:	9e 4f       	sbci	r25, 0xFE	; 254
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	40 e8       	ldi	r20, 0x80	; 128
    2a40:	5f e3       	ldi	r21, 0x3F	; 63
    2a42:	fc 01       	movw	r30, r24
    2a44:	60 81       	ld	r22, Z
    2a46:	71 81       	ldd	r23, Z+1	; 0x01
    2a48:	82 81       	ldd	r24, Z+2	; 0x02
    2a4a:	93 81       	ldd	r25, Z+3	; 0x03
    2a4c:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__cmpsf2>
    2a50:	88 23       	and	r24, r24
    2a52:	4c f4       	brge	.+18     	; 0x2a66 <main+0x1d9a>
		__ticks = 1;
    2a54:	ce 01       	movw	r24, r28
    2a56:	8c 5e       	subi	r24, 0xEC	; 236
    2a58:	9e 4f       	sbci	r25, 0xFE	; 254
    2a5a:	21 e0       	ldi	r18, 0x01	; 1
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	fc 01       	movw	r30, r24
    2a60:	31 83       	std	Z+1, r19	; 0x01
    2a62:	20 83       	st	Z, r18
    2a64:	6d c0       	rjmp	.+218    	; 0x2b40 <main+0x1e74>
	else if (__tmp > 65535)
    2a66:	ce 01       	movw	r24, r28
    2a68:	80 5f       	subi	r24, 0xF0	; 240
    2a6a:	9e 4f       	sbci	r25, 0xFE	; 254
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	3f ef       	ldi	r19, 0xFF	; 255
    2a70:	4f e7       	ldi	r20, 0x7F	; 127
    2a72:	57 e4       	ldi	r21, 0x47	; 71
    2a74:	fc 01       	movw	r30, r24
    2a76:	60 81       	ld	r22, Z
    2a78:	71 81       	ldd	r23, Z+1	; 0x01
    2a7a:	82 81       	ldd	r24, Z+2	; 0x02
    2a7c:	93 81       	ldd	r25, Z+3	; 0x03
    2a7e:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gesf2>
    2a82:	18 16       	cp	r1, r24
    2a84:	0c f0       	brlt	.+2      	; 0x2a88 <main+0x1dbc>
    2a86:	4a c0       	rjmp	.+148    	; 0x2b1c <main+0x1e50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a88:	ce 01       	movw	r24, r28
    2a8a:	8a 5b       	subi	r24, 0xBA	; 186
    2a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e2       	ldi	r20, 0x20	; 32
    2a94:	51 e4       	ldi	r21, 0x41	; 65
    2a96:	fc 01       	movw	r30, r24
    2a98:	60 81       	ld	r22, Z
    2a9a:	71 81       	ldd	r23, Z+1	; 0x01
    2a9c:	82 81       	ldd	r24, Z+2	; 0x02
    2a9e:	93 81       	ldd	r25, Z+3	; 0x03
    2aa0:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	8e 01       	movw	r16, r28
    2aaa:	0c 5e       	subi	r16, 0xEC	; 236
    2aac:	1e 4f       	sbci	r17, 0xFE	; 254
    2aae:	bc 01       	movw	r22, r24
    2ab0:	cd 01       	movw	r24, r26
    2ab2:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	f8 01       	movw	r30, r16
    2abc:	91 83       	std	Z+1, r25	; 0x01
    2abe:	80 83       	st	Z, r24
    2ac0:	24 c0       	rjmp	.+72     	; 0x2b0a <main+0x1e3e>
    2ac2:	ce 01       	movw	r24, r28
    2ac4:	8a 5e       	subi	r24, 0xEA	; 234
    2ac6:	9e 4f       	sbci	r25, 0xFE	; 254
    2ac8:	29 e1       	ldi	r18, 0x19	; 25
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	fc 01       	movw	r30, r24
    2ace:	31 83       	std	Z+1, r19	; 0x01
    2ad0:	20 83       	st	Z, r18
    2ad2:	ce 01       	movw	r24, r28
    2ad4:	8a 5e       	subi	r24, 0xEA	; 234
    2ad6:	9e 4f       	sbci	r25, 0xFE	; 254
    2ad8:	fc 01       	movw	r30, r24
    2ada:	80 81       	ld	r24, Z
    2adc:	91 81       	ldd	r25, Z+1	; 0x01
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	f1 f7       	brne	.-4      	; 0x2ade <main+0x1e12>
    2ae2:	9e 01       	movw	r18, r28
    2ae4:	2a 5e       	subi	r18, 0xEA	; 234
    2ae6:	3e 4f       	sbci	r19, 0xFE	; 254
    2ae8:	f9 01       	movw	r30, r18
    2aea:	91 83       	std	Z+1, r25	; 0x01
    2aec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aee:	ce 01       	movw	r24, r28
    2af0:	8c 5e       	subi	r24, 0xEC	; 236
    2af2:	9e 4f       	sbci	r25, 0xFE	; 254
    2af4:	9e 01       	movw	r18, r28
    2af6:	2c 5e       	subi	r18, 0xEC	; 236
    2af8:	3e 4f       	sbci	r19, 0xFE	; 254
    2afa:	f9 01       	movw	r30, r18
    2afc:	20 81       	ld	r18, Z
    2afe:	31 81       	ldd	r19, Z+1	; 0x01
    2b00:	21 50       	subi	r18, 0x01	; 1
    2b02:	31 09       	sbc	r19, r1
    2b04:	fc 01       	movw	r30, r24
    2b06:	31 83       	std	Z+1, r19	; 0x01
    2b08:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	8c 5e       	subi	r24, 0xEC	; 236
    2b0e:	9e 4f       	sbci	r25, 0xFE	; 254
    2b10:	fc 01       	movw	r30, r24
    2b12:	80 81       	ld	r24, Z
    2b14:	91 81       	ldd	r25, Z+1	; 0x01
    2b16:	89 2b       	or	r24, r25
    2b18:	a1 f6       	brne	.-88     	; 0x2ac2 <main+0x1df6>
    2b1a:	2c c0       	rjmp	.+88     	; 0x2b74 <main+0x1ea8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1c:	8e 01       	movw	r16, r28
    2b1e:	0c 5e       	subi	r16, 0xEC	; 236
    2b20:	1e 4f       	sbci	r17, 0xFE	; 254
    2b22:	ce 01       	movw	r24, r28
    2b24:	80 5f       	subi	r24, 0xF0	; 240
    2b26:	9e 4f       	sbci	r25, 0xFE	; 254
    2b28:	fc 01       	movw	r30, r24
    2b2a:	60 81       	ld	r22, Z
    2b2c:	71 81       	ldd	r23, Z+1	; 0x01
    2b2e:	82 81       	ldd	r24, Z+2	; 0x02
    2b30:	93 81       	ldd	r25, Z+3	; 0x03
    2b32:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	f8 01       	movw	r30, r16
    2b3c:	91 83       	std	Z+1, r25	; 0x01
    2b3e:	80 83       	st	Z, r24
    2b40:	ce 01       	movw	r24, r28
    2b42:	88 5e       	subi	r24, 0xE8	; 232
    2b44:	9e 4f       	sbci	r25, 0xFE	; 254
    2b46:	9e 01       	movw	r18, r28
    2b48:	2c 5e       	subi	r18, 0xEC	; 236
    2b4a:	3e 4f       	sbci	r19, 0xFE	; 254
    2b4c:	f9 01       	movw	r30, r18
    2b4e:	20 81       	ld	r18, Z
    2b50:	31 81       	ldd	r19, Z+1	; 0x01
    2b52:	fc 01       	movw	r30, r24
    2b54:	31 83       	std	Z+1, r19	; 0x01
    2b56:	20 83       	st	Z, r18
    2b58:	ce 01       	movw	r24, r28
    2b5a:	88 5e       	subi	r24, 0xE8	; 232
    2b5c:	9e 4f       	sbci	r25, 0xFE	; 254
    2b5e:	fc 01       	movw	r30, r24
    2b60:	80 81       	ld	r24, Z
    2b62:	91 81       	ldd	r25, Z+1	; 0x01
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <main+0x1e98>
    2b68:	9e 01       	movw	r18, r28
    2b6a:	28 5e       	subi	r18, 0xE8	; 232
    2b6c:	3e 4f       	sbci	r19, 0xFE	; 254
    2b6e:	f9 01       	movw	r30, r18
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	80 83       	st	Z, r24
				_delay_ms(50);
			}
		_delay_ms(1000);
    }
    2b74:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <main+0x1ae>

00002b78 <__cmpsf2>:
    2b78:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__fp_cmp>
    2b7c:	08 f4       	brcc	.+2      	; 0x2b80 <__cmpsf2+0x8>
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	08 95       	ret

00002b82 <__fixunssfsi>:
    2b82:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fp_splitA>
    2b86:	88 f0       	brcs	.+34     	; 0x2baa <__fixunssfsi+0x28>
    2b88:	9f 57       	subi	r25, 0x7F	; 127
    2b8a:	98 f0       	brcs	.+38     	; 0x2bb2 <__fixunssfsi+0x30>
    2b8c:	b9 2f       	mov	r27, r25
    2b8e:	99 27       	eor	r25, r25
    2b90:	b7 51       	subi	r27, 0x17	; 23
    2b92:	b0 f0       	brcs	.+44     	; 0x2bc0 <__fixunssfsi+0x3e>
    2b94:	e1 f0       	breq	.+56     	; 0x2bce <__fixunssfsi+0x4c>
    2b96:	66 0f       	add	r22, r22
    2b98:	77 1f       	adc	r23, r23
    2b9a:	88 1f       	adc	r24, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	1a f0       	brmi	.+6      	; 0x2ba6 <__fixunssfsi+0x24>
    2ba0:	ba 95       	dec	r27
    2ba2:	c9 f7       	brne	.-14     	; 0x2b96 <__fixunssfsi+0x14>
    2ba4:	14 c0       	rjmp	.+40     	; 0x2bce <__fixunssfsi+0x4c>
    2ba6:	b1 30       	cpi	r27, 0x01	; 1
    2ba8:	91 f0       	breq	.+36     	; 0x2bce <__fixunssfsi+0x4c>
    2baa:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__fp_zero>
    2bae:	b1 e0       	ldi	r27, 0x01	; 1
    2bb0:	08 95       	ret
    2bb2:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__fp_zero>
    2bb6:	67 2f       	mov	r22, r23
    2bb8:	78 2f       	mov	r23, r24
    2bba:	88 27       	eor	r24, r24
    2bbc:	b8 5f       	subi	r27, 0xF8	; 248
    2bbe:	39 f0       	breq	.+14     	; 0x2bce <__fixunssfsi+0x4c>
    2bc0:	b9 3f       	cpi	r27, 0xF9	; 249
    2bc2:	cc f3       	brlt	.-14     	; 0x2bb6 <__fixunssfsi+0x34>
    2bc4:	86 95       	lsr	r24
    2bc6:	77 95       	ror	r23
    2bc8:	67 95       	ror	r22
    2bca:	b3 95       	inc	r27
    2bcc:	d9 f7       	brne	.-10     	; 0x2bc4 <__fixunssfsi+0x42>
    2bce:	3e f4       	brtc	.+14     	; 0x2bde <__fixunssfsi+0x5c>
    2bd0:	90 95       	com	r25
    2bd2:	80 95       	com	r24
    2bd4:	70 95       	com	r23
    2bd6:	61 95       	neg	r22
    2bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bda:	8f 4f       	sbci	r24, 0xFF	; 255
    2bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bde:	08 95       	ret

00002be0 <__fp_cmp>:
    2be0:	99 0f       	add	r25, r25
    2be2:	00 08       	sbc	r0, r0
    2be4:	55 0f       	add	r21, r21
    2be6:	aa 0b       	sbc	r26, r26
    2be8:	e0 e8       	ldi	r30, 0x80	; 128
    2bea:	fe ef       	ldi	r31, 0xFE	; 254
    2bec:	16 16       	cp	r1, r22
    2bee:	17 06       	cpc	r1, r23
    2bf0:	e8 07       	cpc	r30, r24
    2bf2:	f9 07       	cpc	r31, r25
    2bf4:	c0 f0       	brcs	.+48     	; 0x2c26 <__fp_cmp+0x46>
    2bf6:	12 16       	cp	r1, r18
    2bf8:	13 06       	cpc	r1, r19
    2bfa:	e4 07       	cpc	r30, r20
    2bfc:	f5 07       	cpc	r31, r21
    2bfe:	98 f0       	brcs	.+38     	; 0x2c26 <__fp_cmp+0x46>
    2c00:	62 1b       	sub	r22, r18
    2c02:	73 0b       	sbc	r23, r19
    2c04:	84 0b       	sbc	r24, r20
    2c06:	95 0b       	sbc	r25, r21
    2c08:	39 f4       	brne	.+14     	; 0x2c18 <__fp_cmp+0x38>
    2c0a:	0a 26       	eor	r0, r26
    2c0c:	61 f0       	breq	.+24     	; 0x2c26 <__fp_cmp+0x46>
    2c0e:	23 2b       	or	r18, r19
    2c10:	24 2b       	or	r18, r20
    2c12:	25 2b       	or	r18, r21
    2c14:	21 f4       	brne	.+8      	; 0x2c1e <__fp_cmp+0x3e>
    2c16:	08 95       	ret
    2c18:	0a 26       	eor	r0, r26
    2c1a:	09 f4       	brne	.+2      	; 0x2c1e <__fp_cmp+0x3e>
    2c1c:	a1 40       	sbci	r26, 0x01	; 1
    2c1e:	a6 95       	lsr	r26
    2c20:	8f ef       	ldi	r24, 0xFF	; 255
    2c22:	81 1d       	adc	r24, r1
    2c24:	81 1d       	adc	r24, r1
    2c26:	08 95       	ret

00002c28 <__fp_inf>:
    2c28:	97 f9       	bld	r25, 7
    2c2a:	9f 67       	ori	r25, 0x7F	; 127
    2c2c:	80 e8       	ldi	r24, 0x80	; 128
    2c2e:	70 e0       	ldi	r23, 0x00	; 0
    2c30:	60 e0       	ldi	r22, 0x00	; 0
    2c32:	08 95       	ret

00002c34 <__fp_nan>:
    2c34:	9f ef       	ldi	r25, 0xFF	; 255
    2c36:	80 ec       	ldi	r24, 0xC0	; 192
    2c38:	08 95       	ret

00002c3a <__fp_pscA>:
    2c3a:	00 24       	eor	r0, r0
    2c3c:	0a 94       	dec	r0
    2c3e:	16 16       	cp	r1, r22
    2c40:	17 06       	cpc	r1, r23
    2c42:	18 06       	cpc	r1, r24
    2c44:	09 06       	cpc	r0, r25
    2c46:	08 95       	ret

00002c48 <__fp_pscB>:
    2c48:	00 24       	eor	r0, r0
    2c4a:	0a 94       	dec	r0
    2c4c:	12 16       	cp	r1, r18
    2c4e:	13 06       	cpc	r1, r19
    2c50:	14 06       	cpc	r1, r20
    2c52:	05 06       	cpc	r0, r21
    2c54:	08 95       	ret

00002c56 <__fp_round>:
    2c56:	09 2e       	mov	r0, r25
    2c58:	03 94       	inc	r0
    2c5a:	00 0c       	add	r0, r0
    2c5c:	11 f4       	brne	.+4      	; 0x2c62 <__fp_round+0xc>
    2c5e:	88 23       	and	r24, r24
    2c60:	52 f0       	brmi	.+20     	; 0x2c76 <__fp_round+0x20>
    2c62:	bb 0f       	add	r27, r27
    2c64:	40 f4       	brcc	.+16     	; 0x2c76 <__fp_round+0x20>
    2c66:	bf 2b       	or	r27, r31
    2c68:	11 f4       	brne	.+4      	; 0x2c6e <__fp_round+0x18>
    2c6a:	60 ff       	sbrs	r22, 0
    2c6c:	04 c0       	rjmp	.+8      	; 0x2c76 <__fp_round+0x20>
    2c6e:	6f 5f       	subi	r22, 0xFF	; 255
    2c70:	7f 4f       	sbci	r23, 0xFF	; 255
    2c72:	8f 4f       	sbci	r24, 0xFF	; 255
    2c74:	9f 4f       	sbci	r25, 0xFF	; 255
    2c76:	08 95       	ret

00002c78 <__fp_split3>:
    2c78:	57 fd       	sbrc	r21, 7
    2c7a:	90 58       	subi	r25, 0x80	; 128
    2c7c:	44 0f       	add	r20, r20
    2c7e:	55 1f       	adc	r21, r21
    2c80:	59 f0       	breq	.+22     	; 0x2c98 <__fp_splitA+0x10>
    2c82:	5f 3f       	cpi	r21, 0xFF	; 255
    2c84:	71 f0       	breq	.+28     	; 0x2ca2 <__fp_splitA+0x1a>
    2c86:	47 95       	ror	r20

00002c88 <__fp_splitA>:
    2c88:	88 0f       	add	r24, r24
    2c8a:	97 fb       	bst	r25, 7
    2c8c:	99 1f       	adc	r25, r25
    2c8e:	61 f0       	breq	.+24     	; 0x2ca8 <__fp_splitA+0x20>
    2c90:	9f 3f       	cpi	r25, 0xFF	; 255
    2c92:	79 f0       	breq	.+30     	; 0x2cb2 <__fp_splitA+0x2a>
    2c94:	87 95       	ror	r24
    2c96:	08 95       	ret
    2c98:	12 16       	cp	r1, r18
    2c9a:	13 06       	cpc	r1, r19
    2c9c:	14 06       	cpc	r1, r20
    2c9e:	55 1f       	adc	r21, r21
    2ca0:	f2 cf       	rjmp	.-28     	; 0x2c86 <__fp_split3+0xe>
    2ca2:	46 95       	lsr	r20
    2ca4:	f1 df       	rcall	.-30     	; 0x2c88 <__fp_splitA>
    2ca6:	08 c0       	rjmp	.+16     	; 0x2cb8 <__fp_splitA+0x30>
    2ca8:	16 16       	cp	r1, r22
    2caa:	17 06       	cpc	r1, r23
    2cac:	18 06       	cpc	r1, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	f1 cf       	rjmp	.-30     	; 0x2c94 <__fp_splitA+0xc>
    2cb2:	86 95       	lsr	r24
    2cb4:	71 05       	cpc	r23, r1
    2cb6:	61 05       	cpc	r22, r1
    2cb8:	08 94       	sec
    2cba:	08 95       	ret

00002cbc <__fp_zero>:
    2cbc:	e8 94       	clt

00002cbe <__fp_szero>:
    2cbe:	bb 27       	eor	r27, r27
    2cc0:	66 27       	eor	r22, r22
    2cc2:	77 27       	eor	r23, r23
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	97 f9       	bld	r25, 7
    2cc8:	08 95       	ret

00002cca <__gesf2>:
    2cca:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <__fp_cmp>
    2cce:	08 f4       	brcc	.+2      	; 0x2cd2 <__gesf2+0x8>
    2cd0:	8f ef       	ldi	r24, 0xFF	; 255
    2cd2:	08 95       	ret

00002cd4 <__mulsf3>:
    2cd4:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <__mulsf3x>
    2cd8:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__fp_round>
    2cdc:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__fp_pscA>
    2ce0:	38 f0       	brcs	.+14     	; 0x2cf0 <__mulsf3+0x1c>
    2ce2:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__fp_pscB>
    2ce6:	20 f0       	brcs	.+8      	; 0x2cf0 <__mulsf3+0x1c>
    2ce8:	95 23       	and	r25, r21
    2cea:	11 f0       	breq	.+4      	; 0x2cf0 <__mulsf3+0x1c>
    2cec:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__fp_inf>
    2cf0:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__fp_nan>
    2cf4:	11 24       	eor	r1, r1
    2cf6:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__fp_szero>

00002cfa <__mulsf3x>:
    2cfa:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__fp_split3>
    2cfe:	70 f3       	brcs	.-36     	; 0x2cdc <__mulsf3+0x8>

00002d00 <__mulsf3_pse>:
    2d00:	95 9f       	mul	r25, r21
    2d02:	c1 f3       	breq	.-16     	; 0x2cf4 <__mulsf3+0x20>
    2d04:	95 0f       	add	r25, r21
    2d06:	50 e0       	ldi	r21, 0x00	; 0
    2d08:	55 1f       	adc	r21, r21
    2d0a:	62 9f       	mul	r22, r18
    2d0c:	f0 01       	movw	r30, r0
    2d0e:	72 9f       	mul	r23, r18
    2d10:	bb 27       	eor	r27, r27
    2d12:	f0 0d       	add	r31, r0
    2d14:	b1 1d       	adc	r27, r1
    2d16:	63 9f       	mul	r22, r19
    2d18:	aa 27       	eor	r26, r26
    2d1a:	f0 0d       	add	r31, r0
    2d1c:	b1 1d       	adc	r27, r1
    2d1e:	aa 1f       	adc	r26, r26
    2d20:	64 9f       	mul	r22, r20
    2d22:	66 27       	eor	r22, r22
    2d24:	b0 0d       	add	r27, r0
    2d26:	a1 1d       	adc	r26, r1
    2d28:	66 1f       	adc	r22, r22
    2d2a:	82 9f       	mul	r24, r18
    2d2c:	22 27       	eor	r18, r18
    2d2e:	b0 0d       	add	r27, r0
    2d30:	a1 1d       	adc	r26, r1
    2d32:	62 1f       	adc	r22, r18
    2d34:	73 9f       	mul	r23, r19
    2d36:	b0 0d       	add	r27, r0
    2d38:	a1 1d       	adc	r26, r1
    2d3a:	62 1f       	adc	r22, r18
    2d3c:	83 9f       	mul	r24, r19
    2d3e:	a0 0d       	add	r26, r0
    2d40:	61 1d       	adc	r22, r1
    2d42:	22 1f       	adc	r18, r18
    2d44:	74 9f       	mul	r23, r20
    2d46:	33 27       	eor	r19, r19
    2d48:	a0 0d       	add	r26, r0
    2d4a:	61 1d       	adc	r22, r1
    2d4c:	23 1f       	adc	r18, r19
    2d4e:	84 9f       	mul	r24, r20
    2d50:	60 0d       	add	r22, r0
    2d52:	21 1d       	adc	r18, r1
    2d54:	82 2f       	mov	r24, r18
    2d56:	76 2f       	mov	r23, r22
    2d58:	6a 2f       	mov	r22, r26
    2d5a:	11 24       	eor	r1, r1
    2d5c:	9f 57       	subi	r25, 0x7F	; 127
    2d5e:	50 40       	sbci	r21, 0x00	; 0
    2d60:	9a f0       	brmi	.+38     	; 0x2d88 <__mulsf3_pse+0x88>
    2d62:	f1 f0       	breq	.+60     	; 0x2da0 <__mulsf3_pse+0xa0>
    2d64:	88 23       	and	r24, r24
    2d66:	4a f0       	brmi	.+18     	; 0x2d7a <__mulsf3_pse+0x7a>
    2d68:	ee 0f       	add	r30, r30
    2d6a:	ff 1f       	adc	r31, r31
    2d6c:	bb 1f       	adc	r27, r27
    2d6e:	66 1f       	adc	r22, r22
    2d70:	77 1f       	adc	r23, r23
    2d72:	88 1f       	adc	r24, r24
    2d74:	91 50       	subi	r25, 0x01	; 1
    2d76:	50 40       	sbci	r21, 0x00	; 0
    2d78:	a9 f7       	brne	.-22     	; 0x2d64 <__mulsf3_pse+0x64>
    2d7a:	9e 3f       	cpi	r25, 0xFE	; 254
    2d7c:	51 05       	cpc	r21, r1
    2d7e:	80 f0       	brcs	.+32     	; 0x2da0 <__mulsf3_pse+0xa0>
    2d80:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__fp_inf>
    2d84:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__fp_szero>
    2d88:	5f 3f       	cpi	r21, 0xFF	; 255
    2d8a:	e4 f3       	brlt	.-8      	; 0x2d84 <__mulsf3_pse+0x84>
    2d8c:	98 3e       	cpi	r25, 0xE8	; 232
    2d8e:	d4 f3       	brlt	.-12     	; 0x2d84 <__mulsf3_pse+0x84>
    2d90:	86 95       	lsr	r24
    2d92:	77 95       	ror	r23
    2d94:	67 95       	ror	r22
    2d96:	b7 95       	ror	r27
    2d98:	f7 95       	ror	r31
    2d9a:	e7 95       	ror	r30
    2d9c:	9f 5f       	subi	r25, 0xFF	; 255
    2d9e:	c1 f7       	brne	.-16     	; 0x2d90 <__mulsf3_pse+0x90>
    2da0:	fe 2b       	or	r31, r30
    2da2:	88 0f       	add	r24, r24
    2da4:	91 1d       	adc	r25, r1
    2da6:	96 95       	lsr	r25
    2da8:	87 95       	ror	r24
    2daa:	97 f9       	bld	r25, 7
    2dac:	08 95       	ret

00002dae <_exit>:
    2dae:	f8 94       	cli

00002db0 <__stop_program>:
    2db0:	ff cf       	rjmp	.-2      	; 0x2db0 <__stop_program>
