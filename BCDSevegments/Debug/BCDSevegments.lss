
BCDSevegments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000034c6  0000353a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003574  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000035b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016b3  00000000  00000000  000036b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085d  00000000  00000000  00004d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014ea  00000000  00000000  000055c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  00006aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000511  00000000  00000000  00006d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000492  00000000  00000000  0000724d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000076df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 b0 09 	call	0x1360	; 0x1360 <main>
      7a:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <BCDSevegments_Init>:
	}
	if(segment_Number == 4)
	{
		DIO_WritePin(BCDSEVSEGMENTS4_Enable_PIN,LOW);
	}
}
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
      8a:	61 e0       	ldi	r22, 0x01	; 1
      8c:	8a e1       	ldi	r24, 0x1A	; 26
      8e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
      92:	61 e0       	ldi	r22, 0x01	; 1
      94:	8b e1       	ldi	r24, 0x1B	; 27
      96:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
      9a:	61 e0       	ldi	r22, 0x01	; 1
      9c:	8e e1       	ldi	r24, 0x1E	; 30
      9e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
      a2:	61 e0       	ldi	r22, 0x01	; 1
      a4:	8f e1       	ldi	r24, 0x1F	; 31
      a6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
      aa:	61 e0       	ldi	r22, 0x01	; 1
      ac:	88 e0       	ldi	r24, 0x08	; 8
      ae:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
      b2:	61 e0       	ldi	r22, 0x01	; 1
      b4:	89 e0       	ldi	r24, 0x09	; 9
      b6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
      ba:	61 e0       	ldi	r22, 0x01	; 1
      bc:	8a e0       	ldi	r24, 0x0A	; 10
      be:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
      c2:	61 e0       	ldi	r22, 0x01	; 1
      c4:	8b e0       	ldi	r24, 0x0B	; 11
      c6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	8a e1       	ldi	r24, 0x1A	; 26
      ce:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	8b e1       	ldi	r24, 0x1B	; 27
      d6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	8e e1       	ldi	r24, 0x1E	; 30
      de:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	8f e1       	ldi	r24, 0x1F	; 31
      e6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
      ea:	00 00       	nop
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	08 95       	ret

000000f2 <BCDSevegments_enable>:
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	1f 92       	push	r1
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
      fc:	89 83       	std	Y+1, r24	; 0x01
      fe:	89 81       	ldd	r24, Y+1	; 0x01
     100:	81 30       	cpi	r24, 0x01	; 1
     102:	21 f4       	brne	.+8      	; 0x10c <BCDSevegments_enable+0x1a>
     104:	61 e0       	ldi	r22, 0x01	; 1
     106:	8a e1       	ldi	r24, 0x1A	; 26
     108:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
     10c:	89 81       	ldd	r24, Y+1	; 0x01
     10e:	82 30       	cpi	r24, 0x02	; 2
     110:	21 f4       	brne	.+8      	; 0x11a <BCDSevegments_enable+0x28>
     112:	61 e0       	ldi	r22, 0x01	; 1
     114:	8b e1       	ldi	r24, 0x1B	; 27
     116:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
     11a:	89 81       	ldd	r24, Y+1	; 0x01
     11c:	83 30       	cpi	r24, 0x03	; 3
     11e:	21 f4       	brne	.+8      	; 0x128 <BCDSevegments_enable+0x36>
     120:	61 e0       	ldi	r22, 0x01	; 1
     122:	8e e1       	ldi	r24, 0x1E	; 30
     124:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	84 30       	cpi	r24, 0x04	; 4
     12c:	21 f4       	brne	.+8      	; 0x136 <BCDSevegments_enable+0x44>
     12e:	61 e0       	ldi	r22, 0x01	; 1
     130:	8f e1       	ldi	r24, 0x1F	; 31
     132:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
     136:	00 00       	nop
     138:	0f 90       	pop	r0
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <BCDSevegments_displayNo>:
void BCDSevegments_displayNo(uint8 number)
{
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	1f 92       	push	r1
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	89 83       	std	Y+1, r24	; 0x01
	if (number == 0)
     14c:	89 81       	ldd	r24, Y+1	; 0x01
     14e:	88 23       	and	r24, r24
     150:	89 f4       	brne	.+34     	; 0x174 <BCDSevegments_displayNo+0x34>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	88 e0       	ldi	r24, 0x08	; 8
     156:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	89 e0       	ldi	r24, 0x09	; 9
     15e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	8a e0       	ldi	r24, 0x0A	; 10
     166:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	8b e0       	ldi	r24, 0x0B	; 11
     16e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     172:	b3 c0       	rjmp	.+358    	; 0x2da <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 1)
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	81 30       	cpi	r24, 0x01	; 1
     178:	89 f4       	brne	.+34     	; 0x19c <BCDSevegments_displayNo+0x5c>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     17a:	61 e0       	ldi	r22, 0x01	; 1
     17c:	88 e0       	ldi	r24, 0x08	; 8
     17e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	89 e0       	ldi	r24, 0x09	; 9
     186:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     18a:	60 e0       	ldi	r22, 0x00	; 0
     18c:	8a e0       	ldi	r24, 0x0A	; 10
     18e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     192:	60 e0       	ldi	r22, 0x00	; 0
     194:	8b e0       	ldi	r24, 0x0B	; 11
     196:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     19a:	9f c0       	rjmp	.+318    	; 0x2da <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 2)
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	82 30       	cpi	r24, 0x02	; 2
     1a0:	89 f4       	brne	.+34     	; 0x1c4 <BCDSevegments_displayNo+0x84>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	88 e0       	ldi	r24, 0x08	; 8
     1a6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     1aa:	61 e0       	ldi	r22, 0x01	; 1
     1ac:	89 e0       	ldi	r24, 0x09	; 9
     1ae:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	8a e0       	ldi	r24, 0x0A	; 10
     1b6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	8b e0       	ldi	r24, 0x0B	; 11
     1be:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1c2:	8b c0       	rjmp	.+278    	; 0x2da <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 3)
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	83 30       	cpi	r24, 0x03	; 3
     1c8:	89 f4       	brne	.+34     	; 0x1ec <BCDSevegments_displayNo+0xac>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     1ca:	61 e0       	ldi	r22, 0x01	; 1
     1cc:	88 e0       	ldi	r24, 0x08	; 8
     1ce:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     1d2:	61 e0       	ldi	r22, 0x01	; 1
     1d4:	89 e0       	ldi	r24, 0x09	; 9
     1d6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	8a e0       	ldi	r24, 0x0A	; 10
     1de:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	8b e0       	ldi	r24, 0x0B	; 11
     1e6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1ea:	77 c0       	rjmp	.+238    	; 0x2da <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if (number == 4)
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
     1ee:	84 30       	cpi	r24, 0x04	; 4
     1f0:	89 f4       	brne	.+34     	; 0x214 <BCDSevegments_displayNo+0xd4>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	88 e0       	ldi	r24, 0x08	; 8
     1f6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	89 e0       	ldi	r24, 0x09	; 9
     1fe:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     202:	61 e0       	ldi	r22, 0x01	; 1
     204:	8a e0       	ldi	r24, 0x0A	; 10
     206:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	8b e0       	ldi	r24, 0x0B	; 11
     20e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     212:	63 c0       	rjmp	.+198    	; 0x2da <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 5)
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	85 30       	cpi	r24, 0x05	; 5
     218:	89 f4       	brne	.+34     	; 0x23c <BCDSevegments_displayNo+0xfc>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	88 e0       	ldi	r24, 0x08	; 8
     21e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	89 e0       	ldi	r24, 0x09	; 9
     226:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     22a:	61 e0       	ldi	r22, 0x01	; 1
     22c:	8a e0       	ldi	r24, 0x0A	; 10
     22e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	8b e0       	ldi	r24, 0x0B	; 11
     236:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     23a:	4f c0       	rjmp	.+158    	; 0x2da <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 6)
     23c:	89 81       	ldd	r24, Y+1	; 0x01
     23e:	86 30       	cpi	r24, 0x06	; 6
     240:	89 f4       	brne	.+34     	; 0x264 <BCDSevegments_displayNo+0x124>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	88 e0       	ldi	r24, 0x08	; 8
     246:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     24a:	61 e0       	ldi	r22, 0x01	; 1
     24c:	89 e0       	ldi	r24, 0x09	; 9
     24e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     252:	61 e0       	ldi	r22, 0x01	; 1
     254:	8a e0       	ldi	r24, 0x0A	; 10
     256:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	8b e0       	ldi	r24, 0x0B	; 11
     25e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     262:	3b c0       	rjmp	.+118    	; 0x2da <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 7)
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	87 30       	cpi	r24, 0x07	; 7
     268:	89 f4       	brne	.+34     	; 0x28c <BCDSevegments_displayNo+0x14c>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	88 e0       	ldi	r24, 0x08	; 8
     26e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     272:	61 e0       	ldi	r22, 0x01	; 1
     274:	89 e0       	ldi	r24, 0x09	; 9
     276:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	8a e0       	ldi	r24, 0x0A	; 10
     27e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	8b e0       	ldi	r24, 0x0B	; 11
     286:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     28a:	27 c0       	rjmp	.+78     	; 0x2da <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 8)
     28c:	89 81       	ldd	r24, Y+1	; 0x01
     28e:	88 30       	cpi	r24, 0x08	; 8
     290:	89 f4       	brne	.+34     	; 0x2b4 <BCDSevegments_displayNo+0x174>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	88 e0       	ldi	r24, 0x08	; 8
     296:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	89 e0       	ldi	r24, 0x09	; 9
     29e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	8a e0       	ldi	r24, 0x0A	; 10
     2a6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
     2aa:	61 e0       	ldi	r22, 0x01	; 1
     2ac:	8b e0       	ldi	r24, 0x0B	; 11
     2ae:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     2b2:	13 c0       	rjmp	.+38     	; 0x2da <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
	else if(number == 9)
     2b4:	89 81       	ldd	r24, Y+1	; 0x01
     2b6:	89 30       	cpi	r24, 0x09	; 9
     2b8:	81 f4       	brne	.+32     	; 0x2da <BCDSevegments_displayNo+0x19a>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	88 e0       	ldi	r24, 0x08	; 8
     2be:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	89 e0       	ldi	r24, 0x09	; 9
     2c6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	8a e0       	ldi	r24, 0x0A	; 10
     2ce:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
     2d2:	61 e0       	ldi	r22, 0x01	; 1
     2d4:	8b e0       	ldi	r24, 0x0B	; 11
     2d6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	}
     2da:	00 00       	nop
     2dc:	0f 90       	pop	r0
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	08 95       	ret

000002e4 <DIO_WritePin>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "BitwiseOperation.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <DIO_WritePin+0x6>
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	89 83       	std	Y+1, r24	; 0x01
     2f0:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNum >= 0 && PinNum < 8 )
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	88 30       	cpi	r24, 0x08	; 8
     2f6:	78 f5       	brcc	.+94     	; 0x356 <DIO_WritePin+0x72>
	{
			if(PinValue == 1)
     2f8:	8a 81       	ldd	r24, Y+2	; 0x02
     2fa:	81 30       	cpi	r24, 0x01	; 1
     2fc:	a1 f4       	brne	.+40     	; 0x326 <DIO_WritePin+0x42>
			{
				Set_Bit( PORTA , PinNum);
     2fe:	8b e3       	ldi	r24, 0x3B	; 59
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	2b e3       	ldi	r18, 0x3B	; 59
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	f9 01       	movw	r30, r18
     308:	20 81       	ld	r18, Z
     30a:	62 2f       	mov	r22, r18
     30c:	29 81       	ldd	r18, Y+1	; 0x01
     30e:	42 2f       	mov	r20, r18
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	21 e0       	ldi	r18, 0x01	; 1
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_WritePin+0x38>
     318:	22 0f       	add	r18, r18
     31a:	33 1f       	adc	r19, r19
     31c:	4a 95       	dec	r20
     31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_WritePin+0x34>
     320:	26 2b       	or	r18, r22
     322:	fc 01       	movw	r30, r24
     324:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
     326:	8a 81       	ldd	r24, Y+2	; 0x02
     328:	88 23       	and	r24, r24
     32a:	a9 f4       	brne	.+42     	; 0x356 <DIO_WritePin+0x72>
			{
				Clear_Bit( PORTA , PinNum);
     32c:	8b e3       	ldi	r24, 0x3B	; 59
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	2b e3       	ldi	r18, 0x3B	; 59
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	f9 01       	movw	r30, r18
     336:	20 81       	ld	r18, Z
     338:	62 2f       	mov	r22, r18
     33a:	29 81       	ldd	r18, Y+1	; 0x01
     33c:	42 2f       	mov	r20, r18
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	21 e0       	ldi	r18, 0x01	; 1
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_WritePin+0x66>
     346:	22 0f       	add	r18, r18
     348:	33 1f       	adc	r19, r19
     34a:	4a 95       	dec	r20
     34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_WritePin+0x62>
     34e:	20 95       	com	r18
     350:	26 23       	and	r18, r22
     352:	fc 01       	movw	r30, r24
     354:	20 83       	st	Z, r18
			}
	}
	if(PinNum > 7 && PinNum < 16)
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	88 30       	cpi	r24, 0x08	; 8
     35a:	c0 f1       	brcs	.+112    	; 0x3cc <DIO_WritePin+0xe8>
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	80 31       	cpi	r24, 0x10	; 16
     360:	a8 f5       	brcc	.+106    	; 0x3cc <DIO_WritePin+0xe8>
	{
		if(PinValue == 1)
     362:	8a 81       	ldd	r24, Y+2	; 0x02
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	b9 f4       	brne	.+46     	; 0x396 <DIO_WritePin+0xb2>
		{
			Set_Bit( PORTB , (PinNum-8));
     368:	88 e3       	ldi	r24, 0x38	; 56
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	28 e3       	ldi	r18, 0x38	; 56
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	f9 01       	movw	r30, r18
     372:	20 81       	ld	r18, Z
     374:	62 2f       	mov	r22, r18
     376:	29 81       	ldd	r18, Y+1	; 0x01
     378:	22 2f       	mov	r18, r18
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	a9 01       	movw	r20, r18
     37e:	48 50       	subi	r20, 0x08	; 8
     380:	51 09       	sbc	r21, r1
     382:	21 e0       	ldi	r18, 0x01	; 1
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_WritePin+0xa8>
     388:	22 0f       	add	r18, r18
     38a:	33 1f       	adc	r19, r19
     38c:	4a 95       	dec	r20
     38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_WritePin+0xa4>
     390:	26 2b       	or	r18, r22
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
     396:	8a 81       	ldd	r24, Y+2	; 0x02
     398:	88 23       	and	r24, r24
     39a:	c1 f4       	brne	.+48     	; 0x3cc <DIO_WritePin+0xe8>
		{
			Clear_Bit( PORTB , (PinNum-8));
     39c:	88 e3       	ldi	r24, 0x38	; 56
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	28 e3       	ldi	r18, 0x38	; 56
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	f9 01       	movw	r30, r18
     3a6:	20 81       	ld	r18, Z
     3a8:	62 2f       	mov	r22, r18
     3aa:	29 81       	ldd	r18, Y+1	; 0x01
     3ac:	22 2f       	mov	r18, r18
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	a9 01       	movw	r20, r18
     3b2:	48 50       	subi	r20, 0x08	; 8
     3b4:	51 09       	sbc	r21, r1
     3b6:	21 e0       	ldi	r18, 0x01	; 1
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_WritePin+0xdc>
     3bc:	22 0f       	add	r18, r18
     3be:	33 1f       	adc	r19, r19
     3c0:	4a 95       	dec	r20
     3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_WritePin+0xd8>
     3c4:	20 95       	com	r18
     3c6:	26 23       	and	r18, r22
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 83       	st	Z, r18
		}
	}
	if(PinNum > 15 && PinNum < 24)
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	80 31       	cpi	r24, 0x10	; 16
     3d0:	c0 f1       	brcs	.+112    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	88 31       	cpi	r24, 0x18	; 24
     3d6:	a8 f5       	brcc	.+106    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	{
		if(PinValue == 1)
     3d8:	8a 81       	ldd	r24, Y+2	; 0x02
     3da:	81 30       	cpi	r24, 0x01	; 1
     3dc:	b9 f4       	brne	.+46     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		{
			Set_Bit( PORTC , (PinNum-16));
     3de:	85 e3       	ldi	r24, 0x35	; 53
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	25 e3       	ldi	r18, 0x35	; 53
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	f9 01       	movw	r30, r18
     3e8:	20 81       	ld	r18, Z
     3ea:	62 2f       	mov	r22, r18
     3ec:	29 81       	ldd	r18, Y+1	; 0x01
     3ee:	22 2f       	mov	r18, r18
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	a9 01       	movw	r20, r18
     3f4:	40 51       	subi	r20, 0x10	; 16
     3f6:	51 09       	sbc	r21, r1
     3f8:	21 e0       	ldi	r18, 0x01	; 1
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fe:	22 0f       	add	r18, r18
     400:	33 1f       	adc	r19, r19
     402:	4a 95       	dec	r20
     404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_WritePin+0x11a>
     406:	26 2b       	or	r18, r22
     408:	fc 01       	movw	r30, r24
     40a:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
     40c:	8a 81       	ldd	r24, Y+2	; 0x02
     40e:	88 23       	and	r24, r24
     410:	c1 f4       	brne	.+48     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		{
			Clear_Bit( PORTC , (PinNum-16));
     412:	85 e3       	ldi	r24, 0x35	; 53
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	25 e3       	ldi	r18, 0x35	; 53
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	f9 01       	movw	r30, r18
     41c:	20 81       	ld	r18, Z
     41e:	62 2f       	mov	r22, r18
     420:	29 81       	ldd	r18, Y+1	; 0x01
     422:	22 2f       	mov	r18, r18
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	a9 01       	movw	r20, r18
     428:	40 51       	subi	r20, 0x10	; 16
     42a:	51 09       	sbc	r21, r1
     42c:	21 e0       	ldi	r18, 0x01	; 1
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     432:	22 0f       	add	r18, r18
     434:	33 1f       	adc	r19, r19
     436:	4a 95       	dec	r20
     438:	e2 f7       	brpl	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     43a:	20 95       	com	r18
     43c:	26 23       	and	r18, r22
     43e:	fc 01       	movw	r30, r24
     440:	20 83       	st	Z, r18
		}
	}
	
	if(PinNum > 24 && PinNum < 32)
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	89 31       	cpi	r24, 0x19	; 25
     446:	c0 f1       	brcs	.+112    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	80 32       	cpi	r24, 0x20	; 32
     44c:	a8 f5       	brcc	.+106    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
	{
			if(PinValue == 1)
     44e:	8a 81       	ldd	r24, Y+2	; 0x02
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	b9 f4       	brne	.+46     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			{
				Set_Bit( PORTD , (PinNum-24));
     454:	82 e3       	ldi	r24, 0x32	; 50
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	22 e3       	ldi	r18, 0x32	; 50
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	f9 01       	movw	r30, r18
     45e:	20 81       	ld	r18, Z
     460:	62 2f       	mov	r22, r18
     462:	29 81       	ldd	r18, Y+1	; 0x01
     464:	22 2f       	mov	r18, r18
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	a9 01       	movw	r20, r18
     46a:	48 51       	subi	r20, 0x18	; 24
     46c:	51 09       	sbc	r21, r1
     46e:	21 e0       	ldi	r18, 0x01	; 1
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	02 c0       	rjmp	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     474:	22 0f       	add	r18, r18
     476:	33 1f       	adc	r19, r19
     478:	4a 95       	dec	r20
     47a:	e2 f7       	brpl	.-8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     47c:	26 2b       	or	r18, r22
     47e:	fc 01       	movw	r30, r24
     480:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
     482:	8a 81       	ldd	r24, Y+2	; 0x02
     484:	88 23       	and	r24, r24
     486:	c1 f4       	brne	.+48     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
			{
				Clear_Bit( PORTD , (PinNum-24));
     488:	82 e3       	ldi	r24, 0x32	; 50
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	22 e3       	ldi	r18, 0x32	; 50
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	f9 01       	movw	r30, r18
     492:	20 81       	ld	r18, Z
     494:	62 2f       	mov	r22, r18
     496:	29 81       	ldd	r18, Y+1	; 0x01
     498:	22 2f       	mov	r18, r18
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	a9 01       	movw	r20, r18
     49e:	48 51       	subi	r20, 0x18	; 24
     4a0:	51 09       	sbc	r21, r1
     4a2:	21 e0       	ldi	r18, 0x01	; 1
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4a8:	22 0f       	add	r18, r18
     4aa:	33 1f       	adc	r19, r19
     4ac:	4a 95       	dec	r20
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4b0:	20 95       	com	r18
     4b2:	26 23       	and	r18, r22
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
			}
	}
}
     4b8:	00 00       	nop
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <DIO_SetPinDirection>:
/*
pindirection = 1 output
pindirection = 0 input
*/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <DIO_SetPinDirection+0x6>
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	89 83       	std	Y+1, r24	; 0x01
     4d0:	6a 83       	std	Y+2, r22	; 0x02
		if(PinNum >= 0 && PinNum < 8 )
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	88 30       	cpi	r24, 0x08	; 8
     4d6:	78 f5       	brcc	.+94     	; 0x536 <DIO_SetPinDirection+0x72>
		{
			if(PinDirection== 1)
     4d8:	8a 81       	ldd	r24, Y+2	; 0x02
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	a1 f4       	brne	.+40     	; 0x506 <DIO_SetPinDirection+0x42>
			{
				Set_Bit( DDRA , PinNum);
     4de:	8a e3       	ldi	r24, 0x3A	; 58
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	2a e3       	ldi	r18, 0x3A	; 58
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	f9 01       	movw	r30, r18
     4e8:	20 81       	ld	r18, Z
     4ea:	62 2f       	mov	r22, r18
     4ec:	29 81       	ldd	r18, Y+1	; 0x01
     4ee:	42 2f       	mov	r20, r18
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	21 e0       	ldi	r18, 0x01	; 1
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_SetPinDirection+0x38>
     4f8:	22 0f       	add	r18, r18
     4fa:	33 1f       	adc	r19, r19
     4fc:	4a 95       	dec	r20
     4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_SetPinDirection+0x34>
     500:	26 2b       	or	r18, r22
     502:	fc 01       	movw	r30, r24
     504:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     506:	8a 81       	ldd	r24, Y+2	; 0x02
     508:	88 23       	and	r24, r24
     50a:	a9 f4       	brne	.+42     	; 0x536 <DIO_SetPinDirection+0x72>
			{
				Clear_Bit( DDRA , PinNum);
     50c:	8a e3       	ldi	r24, 0x3A	; 58
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	2a e3       	ldi	r18, 0x3A	; 58
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	f9 01       	movw	r30, r18
     516:	20 81       	ld	r18, Z
     518:	62 2f       	mov	r22, r18
     51a:	29 81       	ldd	r18, Y+1	; 0x01
     51c:	42 2f       	mov	r20, r18
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	21 e0       	ldi	r18, 0x01	; 1
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_SetPinDirection+0x66>
     526:	22 0f       	add	r18, r18
     528:	33 1f       	adc	r19, r19
     52a:	4a 95       	dec	r20
     52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_SetPinDirection+0x62>
     52e:	20 95       	com	r18
     530:	26 23       	and	r18, r22
     532:	fc 01       	movw	r30, r24
     534:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 7 && PinNum < 16)
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	88 30       	cpi	r24, 0x08	; 8
     53a:	c0 f1       	brcs	.+112    	; 0x5ac <DIO_SetPinDirection+0xe8>
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	80 31       	cpi	r24, 0x10	; 16
     540:	a8 f5       	brcc	.+106    	; 0x5ac <DIO_SetPinDirection+0xe8>
		{
			if(PinDirection== 1)
     542:	8a 81       	ldd	r24, Y+2	; 0x02
     544:	81 30       	cpi	r24, 0x01	; 1
     546:	b9 f4       	brne	.+46     	; 0x576 <DIO_SetPinDirection+0xb2>
			{
				Set_Bit( DDRB , (PinNum-8));
     548:	87 e3       	ldi	r24, 0x37	; 55
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	27 e3       	ldi	r18, 0x37	; 55
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	f9 01       	movw	r30, r18
     552:	20 81       	ld	r18, Z
     554:	62 2f       	mov	r22, r18
     556:	29 81       	ldd	r18, Y+1	; 0x01
     558:	22 2f       	mov	r18, r18
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	a9 01       	movw	r20, r18
     55e:	48 50       	subi	r20, 0x08	; 8
     560:	51 09       	sbc	r21, r1
     562:	21 e0       	ldi	r18, 0x01	; 1
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_SetPinDirection+0xa8>
     568:	22 0f       	add	r18, r18
     56a:	33 1f       	adc	r19, r19
     56c:	4a 95       	dec	r20
     56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_SetPinDirection+0xa4>
     570:	26 2b       	or	r18, r22
     572:	fc 01       	movw	r30, r24
     574:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	88 23       	and	r24, r24
     57a:	c1 f4       	brne	.+48     	; 0x5ac <DIO_SetPinDirection+0xe8>
			{
				Clear_Bit( DDRB , (PinNum-8));
     57c:	87 e3       	ldi	r24, 0x37	; 55
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	27 e3       	ldi	r18, 0x37	; 55
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	f9 01       	movw	r30, r18
     586:	20 81       	ld	r18, Z
     588:	62 2f       	mov	r22, r18
     58a:	29 81       	ldd	r18, Y+1	; 0x01
     58c:	22 2f       	mov	r18, r18
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	a9 01       	movw	r20, r18
     592:	48 50       	subi	r20, 0x08	; 8
     594:	51 09       	sbc	r21, r1
     596:	21 e0       	ldi	r18, 0x01	; 1
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_SetPinDirection+0xdc>
     59c:	22 0f       	add	r18, r18
     59e:	33 1f       	adc	r19, r19
     5a0:	4a 95       	dec	r20
     5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_SetPinDirection+0xd8>
     5a4:	20 95       	com	r18
     5a6:	26 23       	and	r18, r22
     5a8:	fc 01       	movw	r30, r24
     5aa:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 15 && PinNum < 24)
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	80 31       	cpi	r24, 0x10	; 16
     5b0:	c0 f1       	brcs	.+112    	; 0x622 <DIO_SetPinDirection+0x15e>
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	88 31       	cpi	r24, 0x18	; 24
     5b6:	a8 f5       	brcc	.+106    	; 0x622 <DIO_SetPinDirection+0x15e>
		{
			if(PinDirection== 1)
     5b8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ba:	81 30       	cpi	r24, 0x01	; 1
     5bc:	b9 f4       	brne	.+46     	; 0x5ec <DIO_SetPinDirection+0x128>
			{
				Set_Bit( DDRC , (PinNum-16));
     5be:	84 e3       	ldi	r24, 0x34	; 52
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	24 e3       	ldi	r18, 0x34	; 52
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	f9 01       	movw	r30, r18
     5c8:	20 81       	ld	r18, Z
     5ca:	62 2f       	mov	r22, r18
     5cc:	29 81       	ldd	r18, Y+1	; 0x01
     5ce:	22 2f       	mov	r18, r18
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	a9 01       	movw	r20, r18
     5d4:	40 51       	subi	r20, 0x10	; 16
     5d6:	51 09       	sbc	r21, r1
     5d8:	21 e0       	ldi	r18, 0x01	; 1
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_SetPinDirection+0x11e>
     5de:	22 0f       	add	r18, r18
     5e0:	33 1f       	adc	r19, r19
     5e2:	4a 95       	dec	r20
     5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_SetPinDirection+0x11a>
     5e6:	26 2b       	or	r18, r22
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     5ec:	8a 81       	ldd	r24, Y+2	; 0x02
     5ee:	88 23       	and	r24, r24
     5f0:	c1 f4       	brne	.+48     	; 0x622 <DIO_SetPinDirection+0x15e>
			{
				Clear_Bit( DDRC , (PinNum-16));
     5f2:	84 e3       	ldi	r24, 0x34	; 52
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	24 e3       	ldi	r18, 0x34	; 52
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	f9 01       	movw	r30, r18
     5fc:	20 81       	ld	r18, Z
     5fe:	62 2f       	mov	r22, r18
     600:	29 81       	ldd	r18, Y+1	; 0x01
     602:	22 2f       	mov	r18, r18
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	a9 01       	movw	r20, r18
     608:	40 51       	subi	r20, 0x10	; 16
     60a:	51 09       	sbc	r21, r1
     60c:	21 e0       	ldi	r18, 0x01	; 1
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_SetPinDirection+0x152>
     612:	22 0f       	add	r18, r18
     614:	33 1f       	adc	r19, r19
     616:	4a 95       	dec	r20
     618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_SetPinDirection+0x14e>
     61a:	20 95       	com	r18
     61c:	26 23       	and	r18, r22
     61e:	fc 01       	movw	r30, r24
     620:	20 83       	st	Z, r18
			}
		}
		
		if(PinNum > 24 && PinNum < 32)
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	89 31       	cpi	r24, 0x19	; 25
     626:	c0 f1       	brcs	.+112    	; 0x698 <DIO_SetPinDirection+0x1d4>
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	80 32       	cpi	r24, 0x20	; 32
     62c:	a8 f5       	brcc	.+106    	; 0x698 <DIO_SetPinDirection+0x1d4>
		{
			if(PinDirection== 1)
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	81 30       	cpi	r24, 0x01	; 1
     632:	b9 f4       	brne	.+46     	; 0x662 <DIO_SetPinDirection+0x19e>
			{
				Set_Bit( DDRD , (PinNum-24));
     634:	81 e3       	ldi	r24, 0x31	; 49
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	21 e3       	ldi	r18, 0x31	; 49
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	f9 01       	movw	r30, r18
     63e:	20 81       	ld	r18, Z
     640:	62 2f       	mov	r22, r18
     642:	29 81       	ldd	r18, Y+1	; 0x01
     644:	22 2f       	mov	r18, r18
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	a9 01       	movw	r20, r18
     64a:	48 51       	subi	r20, 0x18	; 24
     64c:	51 09       	sbc	r21, r1
     64e:	21 e0       	ldi	r18, 0x01	; 1
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_SetPinDirection+0x194>
     654:	22 0f       	add	r18, r18
     656:	33 1f       	adc	r19, r19
     658:	4a 95       	dec	r20
     65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_SetPinDirection+0x190>
     65c:	26 2b       	or	r18, r22
     65e:	fc 01       	movw	r30, r24
     660:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	88 23       	and	r24, r24
     666:	c1 f4       	brne	.+48     	; 0x698 <DIO_SetPinDirection+0x1d4>
			{
				Clear_Bit( DDRD , (PinNum-24));
     668:	81 e3       	ldi	r24, 0x31	; 49
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	21 e3       	ldi	r18, 0x31	; 49
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	f9 01       	movw	r30, r18
     672:	20 81       	ld	r18, Z
     674:	62 2f       	mov	r22, r18
     676:	29 81       	ldd	r18, Y+1	; 0x01
     678:	22 2f       	mov	r18, r18
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	a9 01       	movw	r20, r18
     67e:	48 51       	subi	r20, 0x18	; 24
     680:	51 09       	sbc	r21, r1
     682:	21 e0       	ldi	r18, 0x01	; 1
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_SetPinDirection+0x1c8>
     688:	22 0f       	add	r18, r18
     68a:	33 1f       	adc	r19, r19
     68c:	4a 95       	dec	r20
     68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_SetPinDirection+0x1c4>
     690:	20 95       	com	r18
     692:	26 23       	and	r18, r22
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18
			}
		}
}
     698:	00 00       	nop
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <DIO_ReadPin+0x6>
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
     6ae:	8a 83       	std	Y+2, r24	; 0x02
		uint8 return_value=0;
     6b0:	19 82       	std	Y+1, r1	; 0x01
		if(PinNum >= 0 && PinNum < 8 )
     6b2:	8a 81       	ldd	r24, Y+2	; 0x02
     6b4:	88 30       	cpi	r24, 0x08	; 8
     6b6:	d8 f4       	brcc	.+54     	; 0x6ee <DIO_ReadPin+0x4a>
		{
			return_value = Get_Bit(PINA , PinNum);
     6b8:	89 e3       	ldi	r24, 0x39	; 57
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	fc 01       	movw	r30, r24
     6be:	80 81       	ld	r24, Z
     6c0:	28 2f       	mov	r18, r24
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	8a 81       	ldd	r24, Y+2	; 0x02
     6c6:	48 2f       	mov	r20, r24
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_ReadPin+0x30>
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	4a 95       	dec	r20
     6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_ReadPin+0x2c>
     6d8:	82 23       	and	r24, r18
     6da:	93 23       	and	r25, r19
     6dc:	2a 81       	ldd	r18, Y+2	; 0x02
     6de:	22 2f       	mov	r18, r18
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_ReadPin+0x44>
     6e4:	95 95       	asr	r25
     6e6:	87 95       	ror	r24
     6e8:	2a 95       	dec	r18
     6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_ReadPin+0x40>
     6ec:	89 83       	std	Y+1, r24	; 0x01
		}
		if(PinNum > 7 && PinNum < 16)
     6ee:	8a 81       	ldd	r24, Y+2	; 0x02
     6f0:	88 30       	cpi	r24, 0x08	; 8
     6f2:	18 f1       	brcs	.+70     	; 0x73a <DIO_ReadPin+0x96>
     6f4:	8a 81       	ldd	r24, Y+2	; 0x02
     6f6:	80 31       	cpi	r24, 0x10	; 16
     6f8:	00 f5       	brcc	.+64     	; 0x73a <DIO_ReadPin+0x96>
		{
			return_value = Get_Bit(PINB , (PinNum-8));
     6fa:	86 e3       	ldi	r24, 0x36	; 54
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	fc 01       	movw	r30, r24
     700:	80 81       	ld	r24, Z
     702:	28 2f       	mov	r18, r24
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	8a 81       	ldd	r24, Y+2	; 0x02
     708:	88 2f       	mov	r24, r24
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	ac 01       	movw	r20, r24
     70e:	48 50       	subi	r20, 0x08	; 8
     710:	51 09       	sbc	r21, r1
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_ReadPin+0x78>
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	4a 95       	dec	r20
     71e:	e2 f7       	brpl	.-8      	; 0x718 <DIO_ReadPin+0x74>
     720:	82 23       	and	r24, r18
     722:	93 23       	and	r25, r19
     724:	2a 81       	ldd	r18, Y+2	; 0x02
     726:	22 2f       	mov	r18, r18
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	28 50       	subi	r18, 0x08	; 8
     72c:	31 09       	sbc	r19, r1
     72e:	02 c0       	rjmp	.+4      	; 0x734 <DIO_ReadPin+0x90>
     730:	95 95       	asr	r25
     732:	87 95       	ror	r24
     734:	2a 95       	dec	r18
     736:	e2 f7       	brpl	.-8      	; 0x730 <DIO_ReadPin+0x8c>
     738:	89 83       	std	Y+1, r24	; 0x01
		}
		if(PinNum > 15 && PinNum < 24)
     73a:	8a 81       	ldd	r24, Y+2	; 0x02
     73c:	80 31       	cpi	r24, 0x10	; 16
     73e:	18 f1       	brcs	.+70     	; 0x786 <DIO_ReadPin+0xe2>
     740:	8a 81       	ldd	r24, Y+2	; 0x02
     742:	88 31       	cpi	r24, 0x18	; 24
     744:	00 f5       	brcc	.+64     	; 0x786 <DIO_ReadPin+0xe2>
		{
			return_value = Get_Bit(PINC , (PinNum-16));
     746:	83 e3       	ldi	r24, 0x33	; 51
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	fc 01       	movw	r30, r24
     74c:	80 81       	ld	r24, Z
     74e:	28 2f       	mov	r18, r24
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	8a 81       	ldd	r24, Y+2	; 0x02
     754:	88 2f       	mov	r24, r24
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	ac 01       	movw	r20, r24
     75a:	40 51       	subi	r20, 0x10	; 16
     75c:	51 09       	sbc	r21, r1
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	02 c0       	rjmp	.+4      	; 0x768 <DIO_ReadPin+0xc4>
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	4a 95       	dec	r20
     76a:	e2 f7       	brpl	.-8      	; 0x764 <DIO_ReadPin+0xc0>
     76c:	82 23       	and	r24, r18
     76e:	93 23       	and	r25, r19
     770:	2a 81       	ldd	r18, Y+2	; 0x02
     772:	22 2f       	mov	r18, r18
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	20 51       	subi	r18, 0x10	; 16
     778:	31 09       	sbc	r19, r1
     77a:	02 c0       	rjmp	.+4      	; 0x780 <DIO_ReadPin+0xdc>
     77c:	95 95       	asr	r25
     77e:	87 95       	ror	r24
     780:	2a 95       	dec	r18
     782:	e2 f7       	brpl	.-8      	; 0x77c <DIO_ReadPin+0xd8>
     784:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if(PinNum > 24 && PinNum < 32)
     786:	8a 81       	ldd	r24, Y+2	; 0x02
     788:	89 31       	cpi	r24, 0x19	; 25
     78a:	18 f1       	brcs	.+70     	; 0x7d2 <DIO_ReadPin+0x12e>
     78c:	8a 81       	ldd	r24, Y+2	; 0x02
     78e:	80 32       	cpi	r24, 0x20	; 32
     790:	00 f5       	brcc	.+64     	; 0x7d2 <DIO_ReadPin+0x12e>
		{
			return_value = Get_Bit(PIND , (PinNum-24));
     792:	80 e3       	ldi	r24, 0x30	; 48
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	fc 01       	movw	r30, r24
     798:	80 81       	ld	r24, Z
     79a:	28 2f       	mov	r18, r24
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	8a 81       	ldd	r24, Y+2	; 0x02
     7a0:	88 2f       	mov	r24, r24
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	ac 01       	movw	r20, r24
     7a6:	48 51       	subi	r20, 0x18	; 24
     7a8:	51 09       	sbc	r21, r1
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <DIO_ReadPin+0x110>
     7b0:	88 0f       	add	r24, r24
     7b2:	99 1f       	adc	r25, r25
     7b4:	4a 95       	dec	r20
     7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <DIO_ReadPin+0x10c>
     7b8:	82 23       	and	r24, r18
     7ba:	93 23       	and	r25, r19
     7bc:	2a 81       	ldd	r18, Y+2	; 0x02
     7be:	22 2f       	mov	r18, r18
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	28 51       	subi	r18, 0x18	; 24
     7c4:	31 09       	sbc	r19, r1
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <DIO_ReadPin+0x128>
     7c8:	95 95       	asr	r25
     7ca:	87 95       	ror	r24
     7cc:	2a 95       	dec	r18
     7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <DIO_ReadPin+0x124>
     7d0:	89 83       	std	Y+1, r24	; 0x01
		}
		return return_value;
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <Keypad_init>:

#include "Keypad.h"
#include "Keypad_cfg.h"

void Keypad_init()
{
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
	//Coloumns INPUT
	DIO_SetPinDirection(Keypad_Coloumn1_PIN,INPUT);
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	85 e1       	ldi	r24, 0x15	; 21
     7ea:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_Coloumn2_PIN,INPUT);
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	86 e1       	ldi	r24, 0x16	; 22
     7f2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_Coloumn3_PIN,INPUT);
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	87 e1       	ldi	r24, 0x17	; 23
     7fa:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
	
	//PUll UP Column
	DIO_WritePin(Keypad_Coloumn1_PIN,HIGH);
     7fe:	61 e0       	ldi	r22, 0x01	; 1
     800:	85 e1       	ldi	r24, 0x15	; 21
     802:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	DIO_WritePin(Keypad_Coloumn2_PIN,HIGH);
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	86 e1       	ldi	r24, 0x16	; 22
     80a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	DIO_WritePin(Keypad_Coloumn3_PIN,HIGH);
     80e:	61 e0       	ldi	r22, 0x01	; 1
     810:	87 e1       	ldi	r24, 0x17	; 23
     812:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	
	//ROWS OUTPUT
	DIO_SetPinDirection(Keypad_ROW1_PIN,OUTPUT);
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	82 e1       	ldi	r24, 0x12	; 18
     81a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_ROW2_PIN,OUTPUT);
     81e:	61 e0       	ldi	r22, 0x01	; 1
     820:	83 e1       	ldi	r24, 0x13	; 19
     822:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_ROW3_PIN,OUTPUT);
     826:	61 e0       	ldi	r22, 0x01	; 1
     828:	84 e1       	ldi	r24, 0x14	; 20
     82a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>

}
     82e:	00 00       	nop
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <Keypad_getPressedKey>:

uint8 Keypad_getPressedKey()
{
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	1f 92       	push	r1
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
	uint8 Pushed_Button = 0 ;
     840:	19 82       	std	Y+1, r1	; 0x01
	DIO_WritePin(Keypad_ROW1_PIN,LOW);
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	82 e1       	ldi	r24, 0x12	; 18
     846:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	DIO_WritePin(Keypad_ROW2_PIN,HIGH);
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	83 e1       	ldi	r24, 0x13	; 19
     84e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	DIO_WritePin(Keypad_ROW3_PIN,HIGH);
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	84 e1       	ldi	r24, 0x14	; 20
     856:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     85a:	85 e1       	ldi	r24, 0x15	; 21
     85c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_ReadPin>
     860:	88 23       	and	r24, r24
     862:	19 f4       	brne	.+6      	; 0x86a <__stack+0xb>
	{
		Pushed_Button = 1;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	89 83       	std	Y+1, r24	; 0x01
     868:	0f c0       	rjmp	.+30     	; 0x888 <__stack+0x29>
	}
	else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     86a:	86 e1       	ldi	r24, 0x16	; 22
     86c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_ReadPin>
     870:	88 23       	and	r24, r24
     872:	19 f4       	brne	.+6      	; 0x87a <__stack+0x1b>
	{
		Pushed_Button = 2;
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	07 c0       	rjmp	.+14     	; 0x888 <__stack+0x29>
	}
	else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     87a:	87 e1       	ldi	r24, 0x17	; 23
     87c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_ReadPin>
     880:	88 23       	and	r24, r24
     882:	11 f4       	brne	.+4      	; 0x888 <__stack+0x29>
	{
		Pushed_Button = 3;
     884:	83 e0       	ldi	r24, 0x03	; 3
     886:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_WritePin(Keypad_ROW1_PIN,HIGH);
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	82 e1       	ldi	r24, 0x12	; 18
     88c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	DIO_WritePin(Keypad_ROW2_PIN,LOW);
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	83 e1       	ldi	r24, 0x13	; 19
     894:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	DIO_WritePin(Keypad_ROW3_PIN,HIGH);
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	84 e1       	ldi	r24, 0x14	; 20
     89c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     8a0:	85 e1       	ldi	r24, 0x15	; 21
     8a2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_ReadPin>
     8a6:	88 23       	and	r24, r24
     8a8:	19 f4       	brne	.+6      	; 0x8b0 <__stack+0x51>
	{
			Pushed_Button = 4;
     8aa:	84 e0       	ldi	r24, 0x04	; 4
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	0f c0       	rjmp	.+30     	; 0x8ce <__stack+0x6f>
	}
	else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     8b0:	86 e1       	ldi	r24, 0x16	; 22
     8b2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_ReadPin>
     8b6:	88 23       	and	r24, r24
     8b8:	19 f4       	brne	.+6      	; 0x8c0 <__stack+0x61>
	{
			Pushed_Button = 5;
     8ba:	85 e0       	ldi	r24, 0x05	; 5
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	07 c0       	rjmp	.+14     	; 0x8ce <__stack+0x6f>
	}
	else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     8c0:	87 e1       	ldi	r24, 0x17	; 23
     8c2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_ReadPin>
     8c6:	88 23       	and	r24, r24
     8c8:	11 f4       	brne	.+4      	; 0x8ce <__stack+0x6f>
	{
			Pushed_Button = 6;
     8ca:	86 e0       	ldi	r24, 0x06	; 6
     8cc:	89 83       	std	Y+1, r24	; 0x01
	}
		DIO_WritePin(Keypad_ROW1_PIN,HIGH);
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	82 e1       	ldi	r24, 0x12	; 18
     8d2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(Keypad_ROW2_PIN,HIGH);
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	83 e1       	ldi	r24, 0x13	; 19
     8da:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		DIO_WritePin(Keypad_ROW3_PIN,LOW);
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	84 e1       	ldi	r24, 0x14	; 20
     8e2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
		if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     8e6:	85 e1       	ldi	r24, 0x15	; 21
     8e8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_ReadPin>
     8ec:	88 23       	and	r24, r24
     8ee:	19 f4       	brne	.+6      	; 0x8f6 <__stack+0x97>
		{
			Pushed_Button = 7;
     8f0:	87 e0       	ldi	r24, 0x07	; 7
     8f2:	89 83       	std	Y+1, r24	; 0x01
     8f4:	0f c0       	rjmp	.+30     	; 0x914 <__stack+0xb5>
		}
		else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     8f6:	86 e1       	ldi	r24, 0x16	; 22
     8f8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_ReadPin>
     8fc:	88 23       	and	r24, r24
     8fe:	19 f4       	brne	.+6      	; 0x906 <__stack+0xa7>
		{
			Pushed_Button = 8;
     900:	88 e0       	ldi	r24, 0x08	; 8
     902:	89 83       	std	Y+1, r24	; 0x01
     904:	07 c0       	rjmp	.+14     	; 0x914 <__stack+0xb5>
		}
		else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     906:	87 e1       	ldi	r24, 0x17	; 23
     908:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_ReadPin>
     90c:	88 23       	and	r24, r24
     90e:	11 f4       	brne	.+4      	; 0x914 <__stack+0xb5>
		{
			Pushed_Button = 9;
     910:	89 e0       	ldi	r24, 0x09	; 9
     912:	89 83       	std	Y+1, r24	; 0x01
		}
		return Pushed_Button;
     914:	89 81       	ldd	r24, Y+1	; 0x01
	
     916:	0f 90       	pop	r0
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	08 95       	ret

0000091e <LCD_init>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "avr/delay.h"

void LCD_init()
{
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
	//#ifdef Bit_Mode4
	
	/*Data PINS*/
	DIO_SetPinDirection(LCD_D4 , OUTPUT);
     926:	61 e0       	ldi	r22, 0x01	; 1
     928:	84 e0       	ldi	r24, 0x04	; 4
     92a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D5 , OUTPUT);
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	85 e0       	ldi	r24, 0x05	; 5
     932:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D6 , OUTPUT);
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	86 e0       	ldi	r24, 0x06	; 6
     93a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D7 , OUTPUT);
     93e:	61 e0       	ldi	r22, 0x01	; 1
     940:	87 e0       	ldi	r24, 0x07	; 7
     942:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
	/*Command Pins*/
	DIO_SetPinDirection(LCD_RS , OUTPUT);
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW , OUTPUT);
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	82 e0       	ldi	r24, 0x02	; 2
     952:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_ENABLE , OUTPUT);
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	83 e0       	ldi	r24, 0x03	; 3
     95a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <DIO_SetPinDirection>
	
	LCD_sendCommand(0x33);
     95e:	83 e3       	ldi	r24, 0x33	; 51
     960:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_sendCommand>
	LCD_sendCommand(0x32);
     964:	82 e3       	ldi	r24, 0x32	; 50
     966:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_sendCommand>
	/*Send Command To Set 4-Bit Mode*/
	LCD_sendCommand(Function_Set_4Bit);
     96a:	88 e2       	ldi	r24, 0x28	; 40
     96c:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_sendCommand>
	/*Turn On Cyrser */
	LCD_sendCommand(Cyrser_On);
     970:	8e e0       	ldi	r24, 0x0E	; 14
     972:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_sendCommand>
	/*Clear Display*/
	LCD_sendCommand(Clear_Command);
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_sendCommand>
	/**/
	LCD_sendCommand(0x06);
     97c:	86 e0       	ldi	r24, 0x06	; 6
     97e:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_sendCommand>
	
	
	#endif
	*/
	
}
     982:	00 00       	nop
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	08 95       	ret

0000098a <LCD_sendCommand>:
void LCD_sendCommand(uint8 Cmd)
{
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	ab 97       	sbiw	r28, 0x2b	; 43
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
     99e:	8b a7       	std	Y+43, r24	; 0x2b
	/*RS == 0 For Command Register*/
	DIO_WritePin(LCD_RS,LOW);
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	/*R/W == 0 For Writing */
	DIO_WritePin(LCD_RW , LOW);
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	
	/*LCD Enable Pin LOW For Latching*/
	DIO_WritePin(LCD_ENABLE,LOW);
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	
	/* Send Command Sequance */
	LCD_PORT = ( LCD_PORT & Mask_First_4Bits ) | ( Cmd & Mask_Last_4Bits );
     9b8:	8b e3       	ldi	r24, 0x3B	; 59
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	2b e3       	ldi	r18, 0x3B	; 59
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	f9 01       	movw	r30, r18
     9c2:	20 81       	ld	r18, Z
     9c4:	32 2f       	mov	r19, r18
     9c6:	3f 70       	andi	r19, 0x0F	; 15
     9c8:	2b a5       	ldd	r18, Y+43	; 0x2b
     9ca:	20 7f       	andi	r18, 0xF0	; 240
     9cc:	23 2b       	or	r18, r19
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 83       	st	Z, r18
	 
	/*Latching Sequance*/
	DIO_WritePin(LCD_ENABLE,HIGH);
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	83 e0       	ldi	r24, 0x03	; 3
     9d6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	a0 e0       	ldi	r26, 0x00	; 0
     9e0:	b0 e4       	ldi	r27, 0x40	; 64
     9e2:	89 83       	std	Y+1, r24	; 0x01
     9e4:	9a 83       	std	Y+2, r25	; 0x02
     9e6:	ab 83       	std	Y+3, r26	; 0x03
     9e8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	4a e7       	ldi	r20, 0x7A	; 122
     9f0:	53 e4       	ldi	r21, 0x43	; 67
     9f2:	69 81       	ldd	r22, Y+1	; 0x01
     9f4:	7a 81       	ldd	r23, Y+2	; 0x02
     9f6:	8b 81       	ldd	r24, Y+3	; 0x03
     9f8:	9c 81       	ldd	r25, Y+4	; 0x04
     9fa:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
     9fe:	dc 01       	movw	r26, r24
     a00:	cb 01       	movw	r24, r22
     a02:	89 a3       	std	Y+33, r24	; 0x21
     a04:	9a a3       	std	Y+34, r25	; 0x22
     a06:	ab a3       	std	Y+35, r26	; 0x23
     a08:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	40 e8       	ldi	r20, 0x80	; 128
     a10:	5f e3       	ldi	r21, 0x3F	; 63
     a12:	69 a1       	ldd	r22, Y+33	; 0x21
     a14:	7a a1       	ldd	r23, Y+34	; 0x22
     a16:	8b a1       	ldd	r24, Y+35	; 0x23
     a18:	9c a1       	ldd	r25, Y+36	; 0x24
     a1a:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
     a1e:	88 23       	and	r24, r24
     a20:	2c f4       	brge	.+10     	; 0xa2c <LCD_sendCommand+0xa2>
		__ticks = 1;
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	9e a3       	std	Y+38, r25	; 0x26
     a28:	8d a3       	std	Y+37, r24	; 0x25
     a2a:	3f c0       	rjmp	.+126    	; 0xaaa <LCD_sendCommand+0x120>
	else if (__tmp > 65535)
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	3f ef       	ldi	r19, 0xFF	; 255
     a30:	4f e7       	ldi	r20, 0x7F	; 127
     a32:	57 e4       	ldi	r21, 0x47	; 71
     a34:	69 a1       	ldd	r22, Y+33	; 0x21
     a36:	7a a1       	ldd	r23, Y+34	; 0x22
     a38:	8b a1       	ldd	r24, Y+35	; 0x23
     a3a:	9c a1       	ldd	r25, Y+36	; 0x24
     a3c:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
     a40:	18 16       	cp	r1, r24
     a42:	4c f5       	brge	.+82     	; 0xa96 <LCD_sendCommand+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e2       	ldi	r20, 0x20	; 32
     a4a:	51 e4       	ldi	r21, 0x41	; 65
     a4c:	69 81       	ldd	r22, Y+1	; 0x01
     a4e:	7a 81       	ldd	r23, Y+2	; 0x02
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	9c 81       	ldd	r25, Y+4	; 0x04
     a54:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
     a58:	dc 01       	movw	r26, r24
     a5a:	cb 01       	movw	r24, r22
     a5c:	bc 01       	movw	r22, r24
     a5e:	cd 01       	movw	r24, r26
     a60:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
     a64:	dc 01       	movw	r26, r24
     a66:	cb 01       	movw	r24, r22
     a68:	9e a3       	std	Y+38, r25	; 0x26
     a6a:	8d a3       	std	Y+37, r24	; 0x25
     a6c:	0f c0       	rjmp	.+30     	; 0xa8c <LCD_sendCommand+0x102>
     a6e:	89 e1       	ldi	r24, 0x19	; 25
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	98 a7       	std	Y+40, r25	; 0x28
     a74:	8f a3       	std	Y+39, r24	; 0x27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a76:	8f a1       	ldd	r24, Y+39	; 0x27
     a78:	98 a5       	ldd	r25, Y+40	; 0x28
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	f1 f7       	brne	.-4      	; 0xa7a <LCD_sendCommand+0xf0>
     a7e:	98 a7       	std	Y+40, r25	; 0x28
     a80:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a82:	8d a1       	ldd	r24, Y+37	; 0x25
     a84:	9e a1       	ldd	r25, Y+38	; 0x26
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	9e a3       	std	Y+38, r25	; 0x26
     a8a:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a8c:	8d a1       	ldd	r24, Y+37	; 0x25
     a8e:	9e a1       	ldd	r25, Y+38	; 0x26
     a90:	89 2b       	or	r24, r25
     a92:	69 f7       	brne	.-38     	; 0xa6e <LCD_sendCommand+0xe4>
     a94:	14 c0       	rjmp	.+40     	; 0xabe <LCD_sendCommand+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a96:	69 a1       	ldd	r22, Y+33	; 0x21
     a98:	7a a1       	ldd	r23, Y+34	; 0x22
     a9a:	8b a1       	ldd	r24, Y+35	; 0x23
     a9c:	9c a1       	ldd	r25, Y+36	; 0x24
     a9e:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
     aa2:	dc 01       	movw	r26, r24
     aa4:	cb 01       	movw	r24, r22
     aa6:	9e a3       	std	Y+38, r25	; 0x26
     aa8:	8d a3       	std	Y+37, r24	; 0x25
     aaa:	8d a1       	ldd	r24, Y+37	; 0x25
     aac:	9e a1       	ldd	r25, Y+38	; 0x26
     aae:	9a a7       	std	Y+42, r25	; 0x2a
     ab0:	89 a7       	std	Y+41, r24	; 0x29
     ab2:	89 a5       	ldd	r24, Y+41	; 0x29
     ab4:	9a a5       	ldd	r25, Y+42	; 0x2a
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <LCD_sendCommand+0x12c>
     aba:	9a a7       	std	Y+42, r25	; 0x2a
     abc:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(2);
	/*LOW For Enable to Latch*/
	DIO_WritePin(LCD_ENABLE,LOW);
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	
	
	/*LCD Enable Pin LOW For Latching*/
	DIO_WritePin(LCD_ENABLE,LOW);
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	83 e0       	ldi	r24, 0x03	; 3
     aca:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	/*Send Command*/
	LCD_PORT = ( LCD_PORT & Mask_First_4Bits ) | ( Cmd << Number_Four ); 
     ace:	8b e3       	ldi	r24, 0x3B	; 59
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	2b e3       	ldi	r18, 0x3B	; 59
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	f9 01       	movw	r30, r18
     ad8:	20 81       	ld	r18, Z
     ada:	42 2f       	mov	r20, r18
     adc:	4f 70       	andi	r20, 0x0F	; 15
     ade:	2b a5       	ldd	r18, Y+43	; 0x2b
     ae0:	22 2f       	mov	r18, r18
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	22 95       	swap	r18
     ae6:	32 95       	swap	r19
     ae8:	30 7f       	andi	r19, 0xF0	; 240
     aea:	32 27       	eor	r19, r18
     aec:	20 7f       	andi	r18, 0xF0	; 240
     aee:	32 27       	eor	r19, r18
     af0:	24 2b       	or	r18, r20
     af2:	fc 01       	movw	r30, r24
     af4:	20 83       	st	Z, r18
	
	/*Latching Sequance*/
	DIO_WritePin(LCD_ENABLE,HIGH);
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e0       	ldi	r26, 0x00	; 0
     b04:	b0 e4       	ldi	r27, 0x40	; 64
     b06:	8d 83       	std	Y+5, r24	; 0x05
     b08:	9e 83       	std	Y+6, r25	; 0x06
     b0a:	af 83       	std	Y+7, r26	; 0x07
     b0c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	4a e7       	ldi	r20, 0x7A	; 122
     b14:	53 e4       	ldi	r21, 0x43	; 67
     b16:	6d 81       	ldd	r22, Y+5	; 0x05
     b18:	7e 81       	ldd	r23, Y+6	; 0x06
     b1a:	8f 81       	ldd	r24, Y+7	; 0x07
     b1c:	98 85       	ldd	r25, Y+8	; 0x08
     b1e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
     b22:	dc 01       	movw	r26, r24
     b24:	cb 01       	movw	r24, r22
     b26:	8f 8b       	std	Y+23, r24	; 0x17
     b28:	98 8f       	std	Y+24, r25	; 0x18
     b2a:	a9 8f       	std	Y+25, r26	; 0x19
     b2c:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	40 e8       	ldi	r20, 0x80	; 128
     b34:	5f e3       	ldi	r21, 0x3F	; 63
     b36:	6f 89       	ldd	r22, Y+23	; 0x17
     b38:	78 8d       	ldd	r23, Y+24	; 0x18
     b3a:	89 8d       	ldd	r24, Y+25	; 0x19
     b3c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b3e:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
     b42:	88 23       	and	r24, r24
     b44:	2c f4       	brge	.+10     	; 0xb50 <LCD_sendCommand+0x1c6>
		__ticks = 1;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	9c 8f       	std	Y+28, r25	; 0x1c
     b4c:	8b 8f       	std	Y+27, r24	; 0x1b
     b4e:	3f c0       	rjmp	.+126    	; 0xbce <LCD_sendCommand+0x244>
	else if (__tmp > 65535)
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	3f ef       	ldi	r19, 0xFF	; 255
     b54:	4f e7       	ldi	r20, 0x7F	; 127
     b56:	57 e4       	ldi	r21, 0x47	; 71
     b58:	6f 89       	ldd	r22, Y+23	; 0x17
     b5a:	78 8d       	ldd	r23, Y+24	; 0x18
     b5c:	89 8d       	ldd	r24, Y+25	; 0x19
     b5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b60:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
     b64:	18 16       	cp	r1, r24
     b66:	4c f5       	brge	.+82     	; 0xbba <LCD_sendCommand+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e2       	ldi	r20, 0x20	; 32
     b6e:	51 e4       	ldi	r21, 0x41	; 65
     b70:	6d 81       	ldd	r22, Y+5	; 0x05
     b72:	7e 81       	ldd	r23, Y+6	; 0x06
     b74:	8f 81       	ldd	r24, Y+7	; 0x07
     b76:	98 85       	ldd	r25, Y+8	; 0x08
     b78:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
     b7c:	dc 01       	movw	r26, r24
     b7e:	cb 01       	movw	r24, r22
     b80:	bc 01       	movw	r22, r24
     b82:	cd 01       	movw	r24, r26
     b84:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	9c 8f       	std	Y+28, r25	; 0x1c
     b8e:	8b 8f       	std	Y+27, r24	; 0x1b
     b90:	0f c0       	rjmp	.+30     	; 0xbb0 <LCD_sendCommand+0x226>
     b92:	89 e1       	ldi	r24, 0x19	; 25
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	9e 8f       	std	Y+30, r25	; 0x1e
     b98:	8d 8f       	std	Y+29, r24	; 0x1d
     b9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <LCD_sendCommand+0x214>
     ba2:	9e 8f       	std	Y+30, r25	; 0x1e
     ba4:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ba6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ba8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	9c 8f       	std	Y+28, r25	; 0x1c
     bae:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bb4:	89 2b       	or	r24, r25
     bb6:	69 f7       	brne	.-38     	; 0xb92 <LCD_sendCommand+0x208>
     bb8:	14 c0       	rjmp	.+40     	; 0xbe2 <LCD_sendCommand+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bba:	6f 89       	ldd	r22, Y+23	; 0x17
     bbc:	78 8d       	ldd	r23, Y+24	; 0x18
     bbe:	89 8d       	ldd	r24, Y+25	; 0x19
     bc0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bc2:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9c 8f       	std	Y+28, r25	; 0x1c
     bcc:	8b 8f       	std	Y+27, r24	; 0x1b
     bce:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bd2:	98 a3       	std	Y+32, r25	; 0x20
     bd4:	8f 8f       	std	Y+31, r24	; 0x1f
     bd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bd8:	98 a1       	ldd	r25, Y+32	; 0x20
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	f1 f7       	brne	.-4      	; 0xbda <LCD_sendCommand+0x250>
     bde:	98 a3       	std	Y+32, r25	; 0x20
     be0:	8f 8f       	std	Y+31, r24	; 0x1f
	_delay_ms(2);
	/*LOW For Enable to Latch*/
	DIO_WritePin(LCD_ENABLE,LOW);
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	a0 e0       	ldi	r26, 0x00	; 0
     bf0:	b0 e4       	ldi	r27, 0x40	; 64
     bf2:	89 87       	std	Y+9, r24	; 0x09
     bf4:	9a 87       	std	Y+10, r25	; 0x0a
     bf6:	ab 87       	std	Y+11, r26	; 0x0b
     bf8:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	4a e7       	ldi	r20, 0x7A	; 122
     c00:	53 e4       	ldi	r21, 0x43	; 67
     c02:	69 85       	ldd	r22, Y+9	; 0x09
     c04:	7a 85       	ldd	r23, Y+10	; 0x0a
     c06:	8b 85       	ldd	r24, Y+11	; 0x0b
     c08:	9c 85       	ldd	r25, Y+12	; 0x0c
     c0a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	8d 87       	std	Y+13, r24	; 0x0d
     c14:	9e 87       	std	Y+14, r25	; 0x0e
     c16:	af 87       	std	Y+15, r26	; 0x0f
     c18:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e8       	ldi	r20, 0x80	; 128
     c20:	5f e3       	ldi	r21, 0x3F	; 63
     c22:	6d 85       	ldd	r22, Y+13	; 0x0d
     c24:	7e 85       	ldd	r23, Y+14	; 0x0e
     c26:	8f 85       	ldd	r24, Y+15	; 0x0f
     c28:	98 89       	ldd	r25, Y+16	; 0x10
     c2a:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
     c2e:	88 23       	and	r24, r24
     c30:	2c f4       	brge	.+10     	; 0xc3c <LCD_sendCommand+0x2b2>
		__ticks = 1;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	9a 8b       	std	Y+18, r25	; 0x12
     c38:	89 8b       	std	Y+17, r24	; 0x11
     c3a:	3f c0       	rjmp	.+126    	; 0xcba <LCD_sendCommand+0x330>
	else if (__tmp > 65535)
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	3f ef       	ldi	r19, 0xFF	; 255
     c40:	4f e7       	ldi	r20, 0x7F	; 127
     c42:	57 e4       	ldi	r21, 0x47	; 71
     c44:	6d 85       	ldd	r22, Y+13	; 0x0d
     c46:	7e 85       	ldd	r23, Y+14	; 0x0e
     c48:	8f 85       	ldd	r24, Y+15	; 0x0f
     c4a:	98 89       	ldd	r25, Y+16	; 0x10
     c4c:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
     c50:	18 16       	cp	r1, r24
     c52:	4c f5       	brge	.+82     	; 0xca6 <LCD_sendCommand+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e2       	ldi	r20, 0x20	; 32
     c5a:	51 e4       	ldi	r21, 0x41	; 65
     c5c:	69 85       	ldd	r22, Y+9	; 0x09
     c5e:	7a 85       	ldd	r23, Y+10	; 0x0a
     c60:	8b 85       	ldd	r24, Y+11	; 0x0b
     c62:	9c 85       	ldd	r25, Y+12	; 0x0c
     c64:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	bc 01       	movw	r22, r24
     c6e:	cd 01       	movw	r24, r26
     c70:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	9a 8b       	std	Y+18, r25	; 0x12
     c7a:	89 8b       	std	Y+17, r24	; 0x11
     c7c:	0f c0       	rjmp	.+30     	; 0xc9c <LCD_sendCommand+0x312>
     c7e:	89 e1       	ldi	r24, 0x19	; 25
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	9c 8b       	std	Y+20, r25	; 0x14
     c84:	8b 8b       	std	Y+19, r24	; 0x13
     c86:	8b 89       	ldd	r24, Y+19	; 0x13
     c88:	9c 89       	ldd	r25, Y+20	; 0x14
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <LCD_sendCommand+0x300>
     c8e:	9c 8b       	std	Y+20, r25	; 0x14
     c90:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c92:	89 89       	ldd	r24, Y+17	; 0x11
     c94:	9a 89       	ldd	r25, Y+18	; 0x12
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	9a 8b       	std	Y+18, r25	; 0x12
     c9a:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c9c:	89 89       	ldd	r24, Y+17	; 0x11
     c9e:	9a 89       	ldd	r25, Y+18	; 0x12
     ca0:	89 2b       	or	r24, r25
     ca2:	69 f7       	brne	.-38     	; 0xc7e <LCD_sendCommand+0x2f4>
	_delay_ms(2);
}
     ca4:	14 c0       	rjmp	.+40     	; 0xcce <LCD_sendCommand+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ca6:	6d 85       	ldd	r22, Y+13	; 0x0d
     ca8:	7e 85       	ldd	r23, Y+14	; 0x0e
     caa:	8f 85       	ldd	r24, Y+15	; 0x0f
     cac:	98 89       	ldd	r25, Y+16	; 0x10
     cae:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	9a 8b       	std	Y+18, r25	; 0x12
     cb8:	89 8b       	std	Y+17, r24	; 0x11
     cba:	89 89       	ldd	r24, Y+17	; 0x11
     cbc:	9a 89       	ldd	r25, Y+18	; 0x12
     cbe:	9e 8b       	std	Y+22, r25	; 0x16
     cc0:	8d 8b       	std	Y+21, r24	; 0x15
     cc2:	8d 89       	ldd	r24, Y+21	; 0x15
     cc4:	9e 89       	ldd	r25, Y+22	; 0x16
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <LCD_sendCommand+0x33c>
     cca:	9e 8b       	std	Y+22, r25	; 0x16
     ccc:	8d 8b       	std	Y+21, r24	; 0x15
     cce:	00 00       	nop
     cd0:	ab 96       	adiw	r28, 0x2b	; 43
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <LCD_displayChar>:

void LCD_displayChar(uint8 ch)
{
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	ed 97       	sbiw	r28, 0x3d	; 61
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	8d af       	std	Y+61, r24	; 0x3d
	/*RS == 1 For Data Register*/
	DIO_WritePin(LCD_RS,HIGH);
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	/*R/W == 0 For Writing */
	DIO_WritePin(LCD_RW , LOW);
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	
	/*LCD Enable Pin LOW For Latching*/
	DIO_WritePin(LCD_ENABLE,LOW);
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	83 e0       	ldi	r24, 0x03	; 3
     d0c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	
	/* Send Command Sequance */
	LCD_PORT = ( LCD_PORT & Mask_First_4Bits ) | ( ch & Mask_Last_4Bits );
     d10:	8b e3       	ldi	r24, 0x3B	; 59
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	2b e3       	ldi	r18, 0x3B	; 59
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	f9 01       	movw	r30, r18
     d1a:	20 81       	ld	r18, Z
     d1c:	32 2f       	mov	r19, r18
     d1e:	3f 70       	andi	r19, 0x0F	; 15
     d20:	2d ad       	ldd	r18, Y+61	; 0x3d
     d22:	20 7f       	andi	r18, 0xF0	; 240
     d24:	23 2b       	or	r18, r19
     d26:	fc 01       	movw	r30, r24
     d28:	20 83       	st	Z, r18
	
	/*Latching Sequance*/
	DIO_WritePin(LCD_ENABLE,HIGH);
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	83 e0       	ldi	r24, 0x03	; 3
     d2e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	a0 e0       	ldi	r26, 0x00	; 0
     d38:	b0 e4       	ldi	r27, 0x40	; 64
     d3a:	89 83       	std	Y+1, r24	; 0x01
     d3c:	9a 83       	std	Y+2, r25	; 0x02
     d3e:	ab 83       	std	Y+3, r26	; 0x03
     d40:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	4a e7       	ldi	r20, 0x7A	; 122
     d48:	53 e4       	ldi	r21, 0x43	; 67
     d4a:	69 81       	ldd	r22, Y+1	; 0x01
     d4c:	7a 81       	ldd	r23, Y+2	; 0x02
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	8b ab       	std	Y+51, r24	; 0x33
     d5c:	9c ab       	std	Y+52, r25	; 0x34
     d5e:	ad ab       	std	Y+53, r26	; 0x35
     d60:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 e8       	ldi	r20, 0x80	; 128
     d68:	5f e3       	ldi	r21, 0x3F	; 63
     d6a:	6b a9       	ldd	r22, Y+51	; 0x33
     d6c:	7c a9       	ldd	r23, Y+52	; 0x34
     d6e:	8d a9       	ldd	r24, Y+53	; 0x35
     d70:	9e a9       	ldd	r25, Y+54	; 0x36
     d72:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
     d76:	88 23       	and	r24, r24
     d78:	2c f4       	brge	.+10     	; 0xd84 <LCD_displayChar+0xa2>
		__ticks = 1;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	98 af       	std	Y+56, r25	; 0x38
     d80:	8f ab       	std	Y+55, r24	; 0x37
     d82:	3f c0       	rjmp	.+126    	; 0xe02 <LCD_displayChar+0x120>
	else if (__tmp > 65535)
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	3f ef       	ldi	r19, 0xFF	; 255
     d88:	4f e7       	ldi	r20, 0x7F	; 127
     d8a:	57 e4       	ldi	r21, 0x47	; 71
     d8c:	6b a9       	ldd	r22, Y+51	; 0x33
     d8e:	7c a9       	ldd	r23, Y+52	; 0x34
     d90:	8d a9       	ldd	r24, Y+53	; 0x35
     d92:	9e a9       	ldd	r25, Y+54	; 0x36
     d94:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
     d98:	18 16       	cp	r1, r24
     d9a:	4c f5       	brge	.+82     	; 0xdee <LCD_displayChar+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	40 e2       	ldi	r20, 0x20	; 32
     da2:	51 e4       	ldi	r21, 0x41	; 65
     da4:	69 81       	ldd	r22, Y+1	; 0x01
     da6:	7a 81       	ldd	r23, Y+2	; 0x02
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	bc 01       	movw	r22, r24
     db6:	cd 01       	movw	r24, r26
     db8:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	98 af       	std	Y+56, r25	; 0x38
     dc2:	8f ab       	std	Y+55, r24	; 0x37
     dc4:	0f c0       	rjmp	.+30     	; 0xde4 <LCD_displayChar+0x102>
     dc6:	89 e1       	ldi	r24, 0x19	; 25
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	9a af       	std	Y+58, r25	; 0x3a
     dcc:	89 af       	std	Y+57, r24	; 0x39
     dce:	89 ad       	ldd	r24, Y+57	; 0x39
     dd0:	9a ad       	ldd	r25, Y+58	; 0x3a
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <LCD_displayChar+0xf0>
     dd6:	9a af       	std	Y+58, r25	; 0x3a
     dd8:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dda:	8f a9       	ldd	r24, Y+55	; 0x37
     ddc:	98 ad       	ldd	r25, Y+56	; 0x38
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	98 af       	std	Y+56, r25	; 0x38
     de2:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de4:	8f a9       	ldd	r24, Y+55	; 0x37
     de6:	98 ad       	ldd	r25, Y+56	; 0x38
     de8:	89 2b       	or	r24, r25
     dea:	69 f7       	brne	.-38     	; 0xdc6 <LCD_displayChar+0xe4>
     dec:	14 c0       	rjmp	.+40     	; 0xe16 <LCD_displayChar+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dee:	6b a9       	ldd	r22, Y+51	; 0x33
     df0:	7c a9       	ldd	r23, Y+52	; 0x34
     df2:	8d a9       	ldd	r24, Y+53	; 0x35
     df4:	9e a9       	ldd	r25, Y+54	; 0x36
     df6:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	98 af       	std	Y+56, r25	; 0x38
     e00:	8f ab       	std	Y+55, r24	; 0x37
     e02:	8f a9       	ldd	r24, Y+55	; 0x37
     e04:	98 ad       	ldd	r25, Y+56	; 0x38
     e06:	9c af       	std	Y+60, r25	; 0x3c
     e08:	8b af       	std	Y+59, r24	; 0x3b
     e0a:	8b ad       	ldd	r24, Y+59	; 0x3b
     e0c:	9c ad       	ldd	r25, Y+60	; 0x3c
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	f1 f7       	brne	.-4      	; 0xe0e <LCD_displayChar+0x12c>
     e12:	9c af       	std	Y+60, r25	; 0x3c
     e14:	8b af       	std	Y+59, r24	; 0x3b
	_delay_ms(2);
	/*LOW For Enable to Latch*/
	DIO_WritePin(LCD_ENABLE,LOW);
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	83 e0       	ldi	r24, 0x03	; 3
     e1a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	
	
	/*LCD Enable Pin LOW For Latching*/
	DIO_WritePin(LCD_ENABLE,LOW);
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	83 e0       	ldi	r24, 0x03	; 3
     e22:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
	/*Send Command*/
	LCD_PORT = ( LCD_PORT & Mask_First_4Bits ) | ( ch << Number_Four );
     e26:	8b e3       	ldi	r24, 0x3B	; 59
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	2b e3       	ldi	r18, 0x3B	; 59
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	f9 01       	movw	r30, r18
     e30:	20 81       	ld	r18, Z
     e32:	42 2f       	mov	r20, r18
     e34:	4f 70       	andi	r20, 0x0F	; 15
     e36:	2d ad       	ldd	r18, Y+61	; 0x3d
     e38:	22 2f       	mov	r18, r18
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	22 95       	swap	r18
     e3e:	32 95       	swap	r19
     e40:	30 7f       	andi	r19, 0xF0	; 240
     e42:	32 27       	eor	r19, r18
     e44:	20 7f       	andi	r18, 0xF0	; 240
     e46:	32 27       	eor	r19, r18
     e48:	24 2b       	or	r18, r20
     e4a:	fc 01       	movw	r30, r24
     e4c:	20 83       	st	Z, r18
	
	/*Latching Sequance*/
	DIO_WritePin(LCD_ENABLE,HIGH);
     e4e:	61 e0       	ldi	r22, 0x01	; 1
     e50:	83 e0       	ldi	r24, 0x03	; 3
     e52:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	a0 e0       	ldi	r26, 0x00	; 0
     e5c:	b0 e4       	ldi	r27, 0x40	; 64
     e5e:	8d 83       	std	Y+5, r24	; 0x05
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	af 83       	std	Y+7, r26	; 0x07
     e64:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	4a e7       	ldi	r20, 0x7A	; 122
     e6c:	53 e4       	ldi	r21, 0x43	; 67
     e6e:	6d 81       	ldd	r22, Y+5	; 0x05
     e70:	7e 81       	ldd	r23, Y+6	; 0x06
     e72:	8f 81       	ldd	r24, Y+7	; 0x07
     e74:	98 85       	ldd	r25, Y+8	; 0x08
     e76:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	89 a7       	std	Y+41, r24	; 0x29
     e80:	9a a7       	std	Y+42, r25	; 0x2a
     e82:	ab a7       	std	Y+43, r26	; 0x2b
     e84:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 e8       	ldi	r20, 0x80	; 128
     e8c:	5f e3       	ldi	r21, 0x3F	; 63
     e8e:	69 a5       	ldd	r22, Y+41	; 0x29
     e90:	7a a5       	ldd	r23, Y+42	; 0x2a
     e92:	8b a5       	ldd	r24, Y+43	; 0x2b
     e94:	9c a5       	ldd	r25, Y+44	; 0x2c
     e96:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
     e9a:	88 23       	and	r24, r24
     e9c:	2c f4       	brge	.+10     	; 0xea8 <LCD_displayChar+0x1c6>
		__ticks = 1;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	9e a7       	std	Y+46, r25	; 0x2e
     ea4:	8d a7       	std	Y+45, r24	; 0x2d
     ea6:	3f c0       	rjmp	.+126    	; 0xf26 <LCD_displayChar+0x244>
	else if (__tmp > 65535)
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	3f ef       	ldi	r19, 0xFF	; 255
     eac:	4f e7       	ldi	r20, 0x7F	; 127
     eae:	57 e4       	ldi	r21, 0x47	; 71
     eb0:	69 a5       	ldd	r22, Y+41	; 0x29
     eb2:	7a a5       	ldd	r23, Y+42	; 0x2a
     eb4:	8b a5       	ldd	r24, Y+43	; 0x2b
     eb6:	9c a5       	ldd	r25, Y+44	; 0x2c
     eb8:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
     ebc:	18 16       	cp	r1, r24
     ebe:	4c f5       	brge	.+82     	; 0xf12 <LCD_displayChar+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e2       	ldi	r20, 0x20	; 32
     ec6:	51 e4       	ldi	r21, 0x41	; 65
     ec8:	6d 81       	ldd	r22, Y+5	; 0x05
     eca:	7e 81       	ldd	r23, Y+6	; 0x06
     ecc:	8f 81       	ldd	r24, Y+7	; 0x07
     ece:	98 85       	ldd	r25, Y+8	; 0x08
     ed0:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	bc 01       	movw	r22, r24
     eda:	cd 01       	movw	r24, r26
     edc:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	9e a7       	std	Y+46, r25	; 0x2e
     ee6:	8d a7       	std	Y+45, r24	; 0x2d
     ee8:	0f c0       	rjmp	.+30     	; 0xf08 <LCD_displayChar+0x226>
     eea:	89 e1       	ldi	r24, 0x19	; 25
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	98 ab       	std	Y+48, r25	; 0x30
     ef0:	8f a7       	std	Y+47, r24	; 0x2f
     ef2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ef4:	98 a9       	ldd	r25, Y+48	; 0x30
     ef6:	01 97       	sbiw	r24, 0x01	; 1
     ef8:	f1 f7       	brne	.-4      	; 0xef6 <LCD_displayChar+0x214>
     efa:	98 ab       	std	Y+48, r25	; 0x30
     efc:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     efe:	8d a5       	ldd	r24, Y+45	; 0x2d
     f00:	9e a5       	ldd	r25, Y+46	; 0x2e
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	9e a7       	std	Y+46, r25	; 0x2e
     f06:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f08:	8d a5       	ldd	r24, Y+45	; 0x2d
     f0a:	9e a5       	ldd	r25, Y+46	; 0x2e
     f0c:	89 2b       	or	r24, r25
     f0e:	69 f7       	brne	.-38     	; 0xeea <LCD_displayChar+0x208>
     f10:	14 c0       	rjmp	.+40     	; 0xf3a <LCD_displayChar+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f12:	69 a5       	ldd	r22, Y+41	; 0x29
     f14:	7a a5       	ldd	r23, Y+42	; 0x2a
     f16:	8b a5       	ldd	r24, Y+43	; 0x2b
     f18:	9c a5       	ldd	r25, Y+44	; 0x2c
     f1a:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	9e a7       	std	Y+46, r25	; 0x2e
     f24:	8d a7       	std	Y+45, r24	; 0x2d
     f26:	8d a5       	ldd	r24, Y+45	; 0x2d
     f28:	9e a5       	ldd	r25, Y+46	; 0x2e
     f2a:	9a ab       	std	Y+50, r25	; 0x32
     f2c:	89 ab       	std	Y+49, r24	; 0x31
     f2e:	89 a9       	ldd	r24, Y+49	; 0x31
     f30:	9a a9       	ldd	r25, Y+50	; 0x32
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	f1 f7       	brne	.-4      	; 0xf32 <LCD_displayChar+0x250>
     f36:	9a ab       	std	Y+50, r25	; 0x32
     f38:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(2);
	/*LOW For Enable to Latch*/
	DIO_WritePin(LCD_ENABLE,LOW);
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	83 e0       	ldi	r24, 0x03	; 3
     f3e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_WritePin>
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	a8 ec       	ldi	r26, 0xC8	; 200
     f48:	b2 e4       	ldi	r27, 0x42	; 66
     f4a:	89 87       	std	Y+9, r24	; 0x09
     f4c:	9a 87       	std	Y+10, r25	; 0x0a
     f4e:	ab 87       	std	Y+11, r26	; 0x0b
     f50:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     f52:	2b ea       	ldi	r18, 0xAB	; 171
     f54:	3a ea       	ldi	r19, 0xAA	; 170
     f56:	4a ea       	ldi	r20, 0xAA	; 170
     f58:	5e e3       	ldi	r21, 0x3E	; 62
     f5a:	69 85       	ldd	r22, Y+9	; 0x09
     f5c:	7a 85       	ldd	r23, Y+10	; 0x0a
     f5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f60:	9c 85       	ldd	r25, Y+12	; 0x0c
     f62:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	8d 87       	std	Y+13, r24	; 0x0d
     f6c:	9e 87       	std	Y+14, r25	; 0x0e
     f6e:	af 87       	std	Y+15, r26	; 0x0f
     f70:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	40 e8       	ldi	r20, 0x80	; 128
     f78:	5e e3       	ldi	r21, 0x3E	; 62
     f7a:	69 85       	ldd	r22, Y+9	; 0x09
     f7c:	7a 85       	ldd	r23, Y+10	; 0x0a
     f7e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f80:	9c 85       	ldd	r25, Y+12	; 0x0c
     f82:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	89 8b       	std	Y+17, r24	; 0x11
     f8c:	9a 8b       	std	Y+18, r25	; 0x12
     f8e:	ab 8b       	std	Y+19, r26	; 0x13
     f90:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e8       	ldi	r20, 0x80	; 128
     f98:	5f e3       	ldi	r21, 0x3F	; 63
     f9a:	6d 85       	ldd	r22, Y+13	; 0x0d
     f9c:	7e 85       	ldd	r23, Y+14	; 0x0e
     f9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa0:	98 89       	ldd	r25, Y+16	; 0x10
     fa2:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
     fa6:	88 23       	and	r24, r24
     fa8:	1c f4       	brge	.+6      	; 0xfb0 <LCD_displayChar+0x2ce>
		__ticks = 1;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	8d 8b       	std	Y+21, r24	; 0x15
     fae:	b2 c0       	rjmp	.+356    	; 0x1114 <LCD_displayChar+0x432>
	else if (__tmp2 > 65535)
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	3f ef       	ldi	r19, 0xFF	; 255
     fb4:	4f e7       	ldi	r20, 0x7F	; 127
     fb6:	57 e4       	ldi	r21, 0x47	; 71
     fb8:	69 89       	ldd	r22, Y+17	; 0x11
     fba:	7a 89       	ldd	r23, Y+18	; 0x12
     fbc:	8b 89       	ldd	r24, Y+19	; 0x13
     fbe:	9c 89       	ldd	r25, Y+20	; 0x14
     fc0:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
     fc4:	18 16       	cp	r1, r24
     fc6:	0c f0       	brlt	.+2      	; 0xfca <LCD_displayChar+0x2e8>
     fc8:	7b c0       	rjmp	.+246    	; 0x10c0 <LCD_displayChar+0x3de>
	{
		_delay_ms(__us / 1000.0);
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	4a e7       	ldi	r20, 0x7A	; 122
     fd0:	54 e4       	ldi	r21, 0x44	; 68
     fd2:	69 85       	ldd	r22, Y+9	; 0x09
     fd4:	7a 85       	ldd	r23, Y+10	; 0x0a
     fd6:	8b 85       	ldd	r24, Y+11	; 0x0b
     fd8:	9c 85       	ldd	r25, Y+12	; 0x0c
     fda:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <__divsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	8e 8b       	std	Y+22, r24	; 0x16
     fe4:	9f 8b       	std	Y+23, r25	; 0x17
     fe6:	a8 8f       	std	Y+24, r26	; 0x18
     fe8:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	4a e7       	ldi	r20, 0x7A	; 122
     ff0:	53 e4       	ldi	r21, 0x43	; 67
     ff2:	6e 89       	ldd	r22, Y+22	; 0x16
     ff4:	7f 89       	ldd	r23, Y+23	; 0x17
     ff6:	88 8d       	ldd	r24, Y+24	; 0x18
     ff8:	99 8d       	ldd	r25, Y+25	; 0x19
     ffa:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	8a 8f       	std	Y+26, r24	; 0x1a
    1004:	9b 8f       	std	Y+27, r25	; 0x1b
    1006:	ac 8f       	std	Y+28, r26	; 0x1c
    1008:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e8       	ldi	r20, 0x80	; 128
    1010:	5f e3       	ldi	r21, 0x3F	; 63
    1012:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1014:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1016:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1018:	9d 8d       	ldd	r25, Y+29	; 0x1d
    101a:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    101e:	88 23       	and	r24, r24
    1020:	2c f4       	brge	.+10     	; 0x102c <LCD_displayChar+0x34a>
		__ticks = 1;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9f 8f       	std	Y+31, r25	; 0x1f
    1028:	8e 8f       	std	Y+30, r24	; 0x1e
    102a:	3f c0       	rjmp	.+126    	; 0x10aa <LCD_displayChar+0x3c8>
	else if (__tmp > 65535)
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	3f ef       	ldi	r19, 0xFF	; 255
    1030:	4f e7       	ldi	r20, 0x7F	; 127
    1032:	57 e4       	ldi	r21, 0x47	; 71
    1034:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1036:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1038:	8c 8d       	ldd	r24, Y+28	; 0x1c
    103a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    103c:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    1040:	18 16       	cp	r1, r24
    1042:	4c f5       	brge	.+82     	; 0x1096 <LCD_displayChar+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e2       	ldi	r20, 0x20	; 32
    104a:	51 e4       	ldi	r21, 0x41	; 65
    104c:	6e 89       	ldd	r22, Y+22	; 0x16
    104e:	7f 89       	ldd	r23, Y+23	; 0x17
    1050:	88 8d       	ldd	r24, Y+24	; 0x18
    1052:	99 8d       	ldd	r25, Y+25	; 0x19
    1054:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	9f 8f       	std	Y+31, r25	; 0x1f
    106a:	8e 8f       	std	Y+30, r24	; 0x1e
    106c:	0f c0       	rjmp	.+30     	; 0x108c <LCD_displayChar+0x3aa>
    106e:	89 e1       	ldi	r24, 0x19	; 25
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	99 a3       	std	Y+33, r25	; 0x21
    1074:	88 a3       	std	Y+32, r24	; 0x20
    1076:	88 a1       	ldd	r24, Y+32	; 0x20
    1078:	99 a1       	ldd	r25, Y+33	; 0x21
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <LCD_displayChar+0x398>
    107e:	99 a3       	std	Y+33, r25	; 0x21
    1080:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1082:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1084:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	9f 8f       	std	Y+31, r25	; 0x1f
    108a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    108e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1090:	89 2b       	or	r24, r25
    1092:	69 f7       	brne	.-38     	; 0x106e <LCD_displayChar+0x38c>
    1094:	3f c0       	rjmp	.+126    	; 0x1114 <LCD_displayChar+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1096:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1098:	7b 8d       	ldd	r23, Y+27	; 0x1b
    109a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    109c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    109e:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	9f 8f       	std	Y+31, r25	; 0x1f
    10a8:	8e 8f       	std	Y+30, r24	; 0x1e
    10aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10ae:	9b a3       	std	Y+35, r25	; 0x23
    10b0:	8a a3       	std	Y+34, r24	; 0x22
    10b2:	8a a1       	ldd	r24, Y+34	; 0x22
    10b4:	9b a1       	ldd	r25, Y+35	; 0x23
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <LCD_displayChar+0x3d4>
    10ba:	9b a3       	std	Y+35, r25	; 0x23
    10bc:	8a a3       	std	Y+34, r24	; 0x22
    10be:	2a c0       	rjmp	.+84     	; 0x1114 <LCD_displayChar+0x432>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	4f e7       	ldi	r20, 0x7F	; 127
    10c6:	53 e4       	ldi	r21, 0x43	; 67
    10c8:	6d 85       	ldd	r22, Y+13	; 0x0d
    10ca:	7e 85       	ldd	r23, Y+14	; 0x0e
    10cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ce:	98 89       	ldd	r25, Y+16	; 0x10
    10d0:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    10d4:	18 16       	cp	r1, r24
    10d6:	ac f4       	brge	.+42     	; 0x1102 <LCD_displayChar+0x420>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    10d8:	69 89       	ldd	r22, Y+17	; 0x11
    10da:	7a 89       	ldd	r23, Y+18	; 0x12
    10dc:	8b 89       	ldd	r24, Y+19	; 0x13
    10de:	9c 89       	ldd	r25, Y+20	; 0x14
    10e0:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	9d a3       	std	Y+37, r25	; 0x25
    10ea:	8c a3       	std	Y+36, r24	; 0x24
    10ec:	8c a1       	ldd	r24, Y+36	; 0x24
    10ee:	9d a1       	ldd	r25, Y+37	; 0x25
    10f0:	9f a3       	std	Y+39, r25	; 0x27
    10f2:	8e a3       	std	Y+38, r24	; 0x26
    10f4:	8e a1       	ldd	r24, Y+38	; 0x26
    10f6:	9f a1       	ldd	r25, Y+39	; 0x27
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <LCD_displayChar+0x416>
    10fc:	9f a3       	std	Y+39, r25	; 0x27
    10fe:	8e a3       	std	Y+38, r24	; 0x26
	_delay_us(100);
	
}
    1100:	0f c0       	rjmp	.+30     	; 0x1120 <LCD_displayChar+0x43e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1102:	6d 85       	ldd	r22, Y+13	; 0x0d
    1104:	7e 85       	ldd	r23, Y+14	; 0x0e
    1106:	8f 85       	ldd	r24, Y+15	; 0x0f
    1108:	98 89       	ldd	r25, Y+16	; 0x10
    110a:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	8d 8b       	std	Y+21, r24	; 0x15
    1114:	8d 89       	ldd	r24, Y+21	; 0x15
    1116:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1118:	88 a5       	ldd	r24, Y+40	; 0x28
    111a:	8a 95       	dec	r24
    111c:	f1 f7       	brne	.-4      	; 0x111a <LCD_displayChar+0x438>
    111e:	88 a7       	std	Y+40, r24	; 0x28
    1120:	00 00       	nop
    1122:	ed 96       	adiw	r28, 0x3d	; 61
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	08 95       	ret

00001134 <LCD_displayString>:
void LCD_displayString(uint8 str[])
{
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	6f 97       	sbiw	r28, 0x1f	; 31
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	9f 8f       	std	Y+31, r25	; 0x1f
    114a:	8e 8f       	std	Y+30, r24	; 0x1e
	/*Variable For for Loop*/
	uint8 i=0;
    114c:	19 82       	std	Y+1, r1	; 0x01
	
	while(str[i]!= 0)
    114e:	f2 c0       	rjmp	.+484    	; 0x1334 <LCD_displayString+0x200>
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	a0 ea       	ldi	r26, 0xA0	; 160
    1156:	b0 e4       	ldi	r27, 0x40	; 64
    1158:	8a 83       	std	Y+2, r24	; 0x02
    115a:	9b 83       	std	Y+3, r25	; 0x03
    115c:	ac 83       	std	Y+4, r26	; 0x04
    115e:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	4a e7       	ldi	r20, 0x7A	; 122
    1166:	53 e4       	ldi	r21, 0x43	; 67
    1168:	6a 81       	ldd	r22, Y+2	; 0x02
    116a:	7b 81       	ldd	r23, Y+3	; 0x03
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	8c 8b       	std	Y+20, r24	; 0x14
    117a:	9d 8b       	std	Y+21, r25	; 0x15
    117c:	ae 8b       	std	Y+22, r26	; 0x16
    117e:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e8       	ldi	r20, 0x80	; 128
    1186:	5f e3       	ldi	r21, 0x3F	; 63
    1188:	6c 89       	ldd	r22, Y+20	; 0x14
    118a:	7d 89       	ldd	r23, Y+21	; 0x15
    118c:	8e 89       	ldd	r24, Y+22	; 0x16
    118e:	9f 89       	ldd	r25, Y+23	; 0x17
    1190:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    1194:	88 23       	and	r24, r24
    1196:	2c f4       	brge	.+10     	; 0x11a2 <LCD_displayString+0x6e>
		__ticks = 1;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	99 8f       	std	Y+25, r25	; 0x19
    119e:	88 8f       	std	Y+24, r24	; 0x18
    11a0:	3f c0       	rjmp	.+126    	; 0x1220 <LCD_displayString+0xec>
	else if (__tmp > 65535)
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	3f ef       	ldi	r19, 0xFF	; 255
    11a6:	4f e7       	ldi	r20, 0x7F	; 127
    11a8:	57 e4       	ldi	r21, 0x47	; 71
    11aa:	6c 89       	ldd	r22, Y+20	; 0x14
    11ac:	7d 89       	ldd	r23, Y+21	; 0x15
    11ae:	8e 89       	ldd	r24, Y+22	; 0x16
    11b0:	9f 89       	ldd	r25, Y+23	; 0x17
    11b2:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    11b6:	18 16       	cp	r1, r24
    11b8:	4c f5       	brge	.+82     	; 0x120c <LCD_displayString+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e2       	ldi	r20, 0x20	; 32
    11c0:	51 e4       	ldi	r21, 0x41	; 65
    11c2:	6a 81       	ldd	r22, Y+2	; 0x02
    11c4:	7b 81       	ldd	r23, Y+3	; 0x03
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	bc 01       	movw	r22, r24
    11d4:	cd 01       	movw	r24, r26
    11d6:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	99 8f       	std	Y+25, r25	; 0x19
    11e0:	88 8f       	std	Y+24, r24	; 0x18
    11e2:	0f c0       	rjmp	.+30     	; 0x1202 <LCD_displayString+0xce>
    11e4:	89 e1       	ldi	r24, 0x19	; 25
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	9b 8f       	std	Y+27, r25	; 0x1b
    11ea:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <LCD_displayString+0xbc>
    11f4:	9b 8f       	std	Y+27, r25	; 0x1b
    11f6:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f8:	88 8d       	ldd	r24, Y+24	; 0x18
    11fa:	99 8d       	ldd	r25, Y+25	; 0x19
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	99 8f       	std	Y+25, r25	; 0x19
    1200:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1202:	88 8d       	ldd	r24, Y+24	; 0x18
    1204:	99 8d       	ldd	r25, Y+25	; 0x19
    1206:	89 2b       	or	r24, r25
    1208:	69 f7       	brne	.-38     	; 0x11e4 <LCD_displayString+0xb0>
    120a:	14 c0       	rjmp	.+40     	; 0x1234 <LCD_displayString+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    120c:	6c 89       	ldd	r22, Y+20	; 0x14
    120e:	7d 89       	ldd	r23, Y+21	; 0x15
    1210:	8e 89       	ldd	r24, Y+22	; 0x16
    1212:	9f 89       	ldd	r25, Y+23	; 0x17
    1214:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	99 8f       	std	Y+25, r25	; 0x19
    121e:	88 8f       	std	Y+24, r24	; 0x18
    1220:	88 8d       	ldd	r24, Y+24	; 0x18
    1222:	99 8d       	ldd	r25, Y+25	; 0x19
    1224:	9d 8f       	std	Y+29, r25	; 0x1d
    1226:	8c 8f       	std	Y+28, r24	; 0x1c
    1228:	8c 8d       	ldd	r24, Y+28	; 0x1c
    122a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <LCD_displayString+0xf8>
    1230:	9d 8f       	std	Y+29, r25	; 0x1d
    1232:	8c 8f       	std	Y+28, r24	; 0x1c
	{
		_delay_ms(5);
		LCD_displayChar(str[i]);
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    123c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    123e:	82 0f       	add	r24, r18
    1240:	93 1f       	adc	r25, r19
    1242:	fc 01       	movw	r30, r24
    1244:	80 81       	ld	r24, Z
    1246:	0e 94 71 06 	call	0xce2	; 0xce2 <LCD_displayChar>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a0 ea       	ldi	r26, 0xA0	; 160
    1250:	b0 e4       	ldi	r27, 0x40	; 64
    1252:	8e 83       	std	Y+6, r24	; 0x06
    1254:	9f 83       	std	Y+7, r25	; 0x07
    1256:	a8 87       	std	Y+8, r26	; 0x08
    1258:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	4a e7       	ldi	r20, 0x7A	; 122
    1260:	53 e4       	ldi	r21, 0x43	; 67
    1262:	6e 81       	ldd	r22, Y+6	; 0x06
    1264:	7f 81       	ldd	r23, Y+7	; 0x07
    1266:	88 85       	ldd	r24, Y+8	; 0x08
    1268:	99 85       	ldd	r25, Y+9	; 0x09
    126a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	8a 87       	std	Y+10, r24	; 0x0a
    1274:	9b 87       	std	Y+11, r25	; 0x0b
    1276:	ac 87       	std	Y+12, r26	; 0x0c
    1278:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e8       	ldi	r20, 0x80	; 128
    1280:	5f e3       	ldi	r21, 0x3F	; 63
    1282:	6a 85       	ldd	r22, Y+10	; 0x0a
    1284:	7b 85       	ldd	r23, Y+11	; 0x0b
    1286:	8c 85       	ldd	r24, Y+12	; 0x0c
    1288:	9d 85       	ldd	r25, Y+13	; 0x0d
    128a:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    128e:	88 23       	and	r24, r24
    1290:	2c f4       	brge	.+10     	; 0x129c <LCD_displayString+0x168>
		__ticks = 1;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	9f 87       	std	Y+15, r25	; 0x0f
    1298:	8e 87       	std	Y+14, r24	; 0x0e
    129a:	3f c0       	rjmp	.+126    	; 0x131a <LCD_displayString+0x1e6>
	else if (__tmp > 65535)
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	3f ef       	ldi	r19, 0xFF	; 255
    12a0:	4f e7       	ldi	r20, 0x7F	; 127
    12a2:	57 e4       	ldi	r21, 0x47	; 71
    12a4:	6a 85       	ldd	r22, Y+10	; 0x0a
    12a6:	7b 85       	ldd	r23, Y+11	; 0x0b
    12a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    12aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    12ac:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    12b0:	18 16       	cp	r1, r24
    12b2:	4c f5       	brge	.+82     	; 0x1306 <LCD_displayString+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e2       	ldi	r20, 0x20	; 32
    12ba:	51 e4       	ldi	r21, 0x41	; 65
    12bc:	6e 81       	ldd	r22, Y+6	; 0x06
    12be:	7f 81       	ldd	r23, Y+7	; 0x07
    12c0:	88 85       	ldd	r24, Y+8	; 0x08
    12c2:	99 85       	ldd	r25, Y+9	; 0x09
    12c4:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	bc 01       	movw	r22, r24
    12ce:	cd 01       	movw	r24, r26
    12d0:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	9f 87       	std	Y+15, r25	; 0x0f
    12da:	8e 87       	std	Y+14, r24	; 0x0e
    12dc:	0f c0       	rjmp	.+30     	; 0x12fc <LCD_displayString+0x1c8>
    12de:	89 e1       	ldi	r24, 0x19	; 25
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	99 8b       	std	Y+17, r25	; 0x11
    12e4:	88 8b       	std	Y+16, r24	; 0x10
    12e6:	88 89       	ldd	r24, Y+16	; 0x10
    12e8:	99 89       	ldd	r25, Y+17	; 0x11
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <LCD_displayString+0x1b6>
    12ee:	99 8b       	std	Y+17, r25	; 0x11
    12f0:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    12f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	9f 87       	std	Y+15, r25	; 0x0f
    12fa:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    12fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1300:	89 2b       	or	r24, r25
    1302:	69 f7       	brne	.-38     	; 0x12de <LCD_displayString+0x1aa>
    1304:	14 c0       	rjmp	.+40     	; 0x132e <LCD_displayString+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1306:	6a 85       	ldd	r22, Y+10	; 0x0a
    1308:	7b 85       	ldd	r23, Y+11	; 0x0b
    130a:	8c 85       	ldd	r24, Y+12	; 0x0c
    130c:	9d 85       	ldd	r25, Y+13	; 0x0d
    130e:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	9f 87       	std	Y+15, r25	; 0x0f
    1318:	8e 87       	std	Y+14, r24	; 0x0e
    131a:	8e 85       	ldd	r24, Y+14	; 0x0e
    131c:	9f 85       	ldd	r25, Y+15	; 0x0f
    131e:	9b 8b       	std	Y+19, r25	; 0x13
    1320:	8a 8b       	std	Y+18, r24	; 0x12
    1322:	8a 89       	ldd	r24, Y+18	; 0x12
    1324:	9b 89       	ldd	r25, Y+19	; 0x13
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <LCD_displayString+0x1f2>
    132a:	9b 8b       	std	Y+19, r25	; 0x13
    132c:	8a 8b       	std	Y+18, r24	; 0x12
		_delay_ms(5);
		i++;
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	8f 5f       	subi	r24, 0xFF	; 255
    1332:	89 83       	std	Y+1, r24	; 0x01
void LCD_displayString(uint8 str[])
{
	/*Variable For for Loop*/
	uint8 i=0;
	
	while(str[i]!= 0)
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    133c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    133e:	82 0f       	add	r24, r18
    1340:	93 1f       	adc	r25, r19
    1342:	fc 01       	movw	r30, r24
    1344:	80 81       	ld	r24, Z
    1346:	88 23       	and	r24, r24
    1348:	09 f0       	breq	.+2      	; 0x134c <LCD_displayString+0x218>
    134a:	02 cf       	rjmp	.-508    	; 0x1150 <LCD_displayString+0x1c>
		_delay_ms(5);
		LCD_displayChar(str[i]);
		_delay_ms(5);
		i++;
	}
}
    134c:	00 00       	nop
    134e:	6f 96       	adiw	r28, 0x1f	; 31
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	08 95       	ret

00001360 <main>:
#include "avr/delay.h"
#include "LCD.h"
#include "LCD_Cfg.h"

int main(void)
{
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	c4 51       	subi	r28, 0x14	; 20
    136e:	d1 40       	sbci	r29, 0x01	; 1
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	BCDSevegments_Init();
    137a:	0e 94 41 00 	call	0x82	; 0x82 <BCDSevegments_Init>
	Keypad_init();
    137e:	0e 94 ef 03 	call	0x7de	; 0x7de <Keypad_init>
	LCD_init();
    1382:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_init>
	uint8 strr[] = {'E' , 'L' , 'G' , 'A' , 'Z' , 'Z' , 'A','R' , '\0'};
    1386:	ce 01       	movw	r24, r28
    1388:	84 5f       	subi	r24, 0xF4	; 244
    138a:	9e 4f       	sbci	r25, 0xFE	; 254
    138c:	29 e0       	ldi	r18, 0x09	; 9
    138e:	e0 e6       	ldi	r30, 0x60	; 96
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	dc 01       	movw	r26, r24
    1394:	01 90       	ld	r0, Z+
    1396:	0d 92       	st	X+, r0
    1398:	2a 95       	dec	r18
    139a:	e1 f7       	brne	.-8      	; 0x1394 <main+0x34>
		LCD_displayString(strr);
    139c:	ce 01       	movw	r24, r28
    139e:	84 5f       	subi	r24, 0xF4	; 244
    13a0:	9e 4f       	sbci	r25, 0xFE	; 254
    13a2:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_displayString>
		
    while (1) 
    {
	
		uint8 key = Keypad_getPressedKey();
    13a6:	0e 94 1b 04 	call	0x836	; 0x836 <Keypad_getPressedKey>
    13aa:	89 83       	std	Y+1, r24	; 0x01
		if (key == 1)
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <main+0x54>
    13b2:	99 c1       	rjmp	.+818    	; 0x16e6 <main+0x386>
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a8 e4       	ldi	r26, 0x48	; 72
    13ba:	b2 e4       	ldi	r27, 0x42	; 66
    13bc:	8e 83       	std	Y+6, r24	; 0x06
    13be:	9f 83       	std	Y+7, r25	; 0x07
    13c0:	a8 87       	std	Y+8, r26	; 0x08
    13c2:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13c4:	8e 01       	movw	r16, r28
    13c6:	08 5a       	subi	r16, 0xA8	; 168
    13c8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	4a e7       	ldi	r20, 0x7A	; 122
    13d0:	53 e4       	ldi	r21, 0x43	; 67
    13d2:	6e 81       	ldd	r22, Y+6	; 0x06
    13d4:	7f 81       	ldd	r23, Y+7	; 0x07
    13d6:	88 85       	ldd	r24, Y+8	; 0x08
    13d8:	99 85       	ldd	r25, Y+9	; 0x09
    13da:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	f8 01       	movw	r30, r16
    13e4:	80 83       	st	Z, r24
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	a2 83       	std	Z+2, r26	; 0x02
    13ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13ec:	ce 01       	movw	r24, r28
    13ee:	88 5a       	subi	r24, 0xA8	; 168
    13f0:	9f 4f       	sbci	r25, 0xFF	; 255
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e8       	ldi	r20, 0x80	; 128
    13f8:	5f e3       	ldi	r21, 0x3F	; 63
    13fa:	fc 01       	movw	r30, r24
    13fc:	60 81       	ld	r22, Z
    13fe:	71 81       	ldd	r23, Z+1	; 0x01
    1400:	82 81       	ldd	r24, Z+2	; 0x02
    1402:	93 81       	ldd	r25, Z+3	; 0x03
    1404:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    1408:	88 23       	and	r24, r24
    140a:	4c f4       	brge	.+18     	; 0x141e <main+0xbe>
		__ticks = 1;
    140c:	ce 01       	movw	r24, r28
    140e:	84 5a       	subi	r24, 0xA4	; 164
    1410:	9f 4f       	sbci	r25, 0xFF	; 255
    1412:	21 e0       	ldi	r18, 0x01	; 1
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	fc 01       	movw	r30, r24
    1418:	31 83       	std	Z+1, r19	; 0x01
    141a:	20 83       	st	Z, r18
    141c:	69 c0       	rjmp	.+210    	; 0x14f0 <main+0x190>
	else if (__tmp > 65535)
    141e:	ce 01       	movw	r24, r28
    1420:	88 5a       	subi	r24, 0xA8	; 168
    1422:	9f 4f       	sbci	r25, 0xFF	; 255
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	3f ef       	ldi	r19, 0xFF	; 255
    1428:	4f e7       	ldi	r20, 0x7F	; 127
    142a:	57 e4       	ldi	r21, 0x47	; 71
    142c:	fc 01       	movw	r30, r24
    142e:	60 81       	ld	r22, Z
    1430:	71 81       	ldd	r23, Z+1	; 0x01
    1432:	82 81       	ldd	r24, Z+2	; 0x02
    1434:	93 81       	ldd	r25, Z+3	; 0x03
    1436:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    143a:	18 16       	cp	r1, r24
    143c:	0c f0       	brlt	.+2      	; 0x1440 <main+0xe0>
    143e:	46 c0       	rjmp	.+140    	; 0x14cc <main+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e2       	ldi	r20, 0x20	; 32
    1446:	51 e4       	ldi	r21, 0x41	; 65
    1448:	6e 81       	ldd	r22, Y+6	; 0x06
    144a:	7f 81       	ldd	r23, Y+7	; 0x07
    144c:	88 85       	ldd	r24, Y+8	; 0x08
    144e:	99 85       	ldd	r25, Y+9	; 0x09
    1450:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	8e 01       	movw	r16, r28
    145a:	04 5a       	subi	r16, 0xA4	; 164
    145c:	1f 4f       	sbci	r17, 0xFF	; 255
    145e:	bc 01       	movw	r22, r24
    1460:	cd 01       	movw	r24, r26
    1462:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	f8 01       	movw	r30, r16
    146c:	91 83       	std	Z+1, r25	; 0x01
    146e:	80 83       	st	Z, r24
    1470:	24 c0       	rjmp	.+72     	; 0x14ba <main+0x15a>
    1472:	ce 01       	movw	r24, r28
    1474:	82 5a       	subi	r24, 0xA2	; 162
    1476:	9f 4f       	sbci	r25, 0xFF	; 255
    1478:	29 e1       	ldi	r18, 0x19	; 25
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	fc 01       	movw	r30, r24
    147e:	31 83       	std	Z+1, r19	; 0x01
    1480:	20 83       	st	Z, r18
    1482:	ce 01       	movw	r24, r28
    1484:	82 5a       	subi	r24, 0xA2	; 162
    1486:	9f 4f       	sbci	r25, 0xFF	; 255
    1488:	fc 01       	movw	r30, r24
    148a:	80 81       	ld	r24, Z
    148c:	91 81       	ldd	r25, Z+1	; 0x01
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <main+0x12e>
    1492:	9e 01       	movw	r18, r28
    1494:	22 5a       	subi	r18, 0xA2	; 162
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
    1498:	f9 01       	movw	r30, r18
    149a:	91 83       	std	Z+1, r25	; 0x01
    149c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149e:	ce 01       	movw	r24, r28
    14a0:	84 5a       	subi	r24, 0xA4	; 164
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	9e 01       	movw	r18, r28
    14a6:	24 5a       	subi	r18, 0xA4	; 164
    14a8:	3f 4f       	sbci	r19, 0xFF	; 255
    14aa:	f9 01       	movw	r30, r18
    14ac:	20 81       	ld	r18, Z
    14ae:	31 81       	ldd	r19, Z+1	; 0x01
    14b0:	21 50       	subi	r18, 0x01	; 1
    14b2:	31 09       	sbc	r19, r1
    14b4:	fc 01       	movw	r30, r24
    14b6:	31 83       	std	Z+1, r19	; 0x01
    14b8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ba:	ce 01       	movw	r24, r28
    14bc:	84 5a       	subi	r24, 0xA4	; 164
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	fc 01       	movw	r30, r24
    14c2:	80 81       	ld	r24, Z
    14c4:	91 81       	ldd	r25, Z+1	; 0x01
    14c6:	89 2b       	or	r24, r25
    14c8:	a1 f6       	brne	.-88     	; 0x1472 <main+0x112>
    14ca:	2c c0       	rjmp	.+88     	; 0x1524 <main+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14cc:	8e 01       	movw	r16, r28
    14ce:	04 5a       	subi	r16, 0xA4	; 164
    14d0:	1f 4f       	sbci	r17, 0xFF	; 255
    14d2:	ce 01       	movw	r24, r28
    14d4:	88 5a       	subi	r24, 0xA8	; 168
    14d6:	9f 4f       	sbci	r25, 0xFF	; 255
    14d8:	fc 01       	movw	r30, r24
    14da:	60 81       	ld	r22, Z
    14dc:	71 81       	ldd	r23, Z+1	; 0x01
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	93 81       	ldd	r25, Z+3	; 0x03
    14e2:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	f8 01       	movw	r30, r16
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	80 83       	st	Z, r24
    14f0:	ce 01       	movw	r24, r28
    14f2:	80 5a       	subi	r24, 0xA0	; 160
    14f4:	9f 4f       	sbci	r25, 0xFF	; 255
    14f6:	9e 01       	movw	r18, r28
    14f8:	24 5a       	subi	r18, 0xA4	; 164
    14fa:	3f 4f       	sbci	r19, 0xFF	; 255
    14fc:	f9 01       	movw	r30, r18
    14fe:	20 81       	ld	r18, Z
    1500:	31 81       	ldd	r19, Z+1	; 0x01
    1502:	fc 01       	movw	r30, r24
    1504:	31 83       	std	Z+1, r19	; 0x01
    1506:	20 83       	st	Z, r18
    1508:	ce 01       	movw	r24, r28
    150a:	80 5a       	subi	r24, 0xA0	; 160
    150c:	9f 4f       	sbci	r25, 0xFF	; 255
    150e:	fc 01       	movw	r30, r24
    1510:	80 81       	ld	r24, Z
    1512:	91 81       	ldd	r25, Z+1	; 0x01
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <main+0x1b4>
    1518:	9e 01       	movw	r18, r28
    151a:	20 5a       	subi	r18, 0xA0	; 160
    151c:	3f 4f       	sbci	r19, 0xFF	; 255
    151e:	f9 01       	movw	r30, r18
    1520:	91 83       	std	Z+1, r25	; 0x01
    1522:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(ONE);
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
			BCDSevegments_enable(TWO);
    152a:	82 e0       	ldi	r24, 0x02	; 2
    152c:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
			BCDSevegments_enable(THREE);
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
			BCDSevegments_enable(FOUR);
    1536:	84 e0       	ldi	r24, 0x04	; 4
    1538:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
			/*display one*/
			BCDSevegments_displayNo(ONE);
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	0e 94 a0 00 	call	0x140	; 0x140 <BCDSevegments_displayNo>
    1542:	9e 01       	movw	r18, r28
    1544:	26 5b       	subi	r18, 0xB6	; 182
    1546:	3f 4f       	sbci	r19, 0xFF	; 255
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	a8 e4       	ldi	r26, 0x48	; 72
    154e:	b2 e4       	ldi	r27, 0x42	; 66
    1550:	f9 01       	movw	r30, r18
    1552:	80 83       	st	Z, r24
    1554:	91 83       	std	Z+1, r25	; 0x01
    1556:	a2 83       	std	Z+2, r26	; 0x02
    1558:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    155a:	8e 01       	movw	r16, r28
    155c:	02 5b       	subi	r16, 0xB2	; 178
    155e:	1f 4f       	sbci	r17, 0xFF	; 255
    1560:	ce 01       	movw	r24, r28
    1562:	86 5b       	subi	r24, 0xB6	; 182
    1564:	9f 4f       	sbci	r25, 0xFF	; 255
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	4a e7       	ldi	r20, 0x7A	; 122
    156c:	53 e4       	ldi	r21, 0x43	; 67
    156e:	fc 01       	movw	r30, r24
    1570:	60 81       	ld	r22, Z
    1572:	71 81       	ldd	r23, Z+1	; 0x01
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	93 81       	ldd	r25, Z+3	; 0x03
    1578:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	f8 01       	movw	r30, r16
    1582:	80 83       	st	Z, r24
    1584:	91 83       	std	Z+1, r25	; 0x01
    1586:	a2 83       	std	Z+2, r26	; 0x02
    1588:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    158a:	ce 01       	movw	r24, r28
    158c:	82 5b       	subi	r24, 0xB2	; 178
    158e:	9f 4f       	sbci	r25, 0xFF	; 255
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e8       	ldi	r20, 0x80	; 128
    1596:	5f e3       	ldi	r21, 0x3F	; 63
    1598:	fc 01       	movw	r30, r24
    159a:	60 81       	ld	r22, Z
    159c:	71 81       	ldd	r23, Z+1	; 0x01
    159e:	82 81       	ldd	r24, Z+2	; 0x02
    15a0:	93 81       	ldd	r25, Z+3	; 0x03
    15a2:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    15a6:	88 23       	and	r24, r24
    15a8:	4c f4       	brge	.+18     	; 0x15bc <main+0x25c>
		__ticks = 1;
    15aa:	ce 01       	movw	r24, r28
    15ac:	8e 5a       	subi	r24, 0xAE	; 174
    15ae:	9f 4f       	sbci	r25, 0xFF	; 255
    15b0:	21 e0       	ldi	r18, 0x01	; 1
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	fc 01       	movw	r30, r24
    15b6:	31 83       	std	Z+1, r19	; 0x01
    15b8:	20 83       	st	Z, r18
    15ba:	6d c0       	rjmp	.+218    	; 0x1696 <main+0x336>
	else if (__tmp > 65535)
    15bc:	ce 01       	movw	r24, r28
    15be:	82 5b       	subi	r24, 0xB2	; 178
    15c0:	9f 4f       	sbci	r25, 0xFF	; 255
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	3f ef       	ldi	r19, 0xFF	; 255
    15c6:	4f e7       	ldi	r20, 0x7F	; 127
    15c8:	57 e4       	ldi	r21, 0x47	; 71
    15ca:	fc 01       	movw	r30, r24
    15cc:	60 81       	ld	r22, Z
    15ce:	71 81       	ldd	r23, Z+1	; 0x01
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	93 81       	ldd	r25, Z+3	; 0x03
    15d4:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    15d8:	18 16       	cp	r1, r24
    15da:	0c f0       	brlt	.+2      	; 0x15de <main+0x27e>
    15dc:	4a c0       	rjmp	.+148    	; 0x1672 <main+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15de:	ce 01       	movw	r24, r28
    15e0:	86 5b       	subi	r24, 0xB6	; 182
    15e2:	9f 4f       	sbci	r25, 0xFF	; 255
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e2       	ldi	r20, 0x20	; 32
    15ea:	51 e4       	ldi	r21, 0x41	; 65
    15ec:	fc 01       	movw	r30, r24
    15ee:	60 81       	ld	r22, Z
    15f0:	71 81       	ldd	r23, Z+1	; 0x01
    15f2:	82 81       	ldd	r24, Z+2	; 0x02
    15f4:	93 81       	ldd	r25, Z+3	; 0x03
    15f6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	8e 01       	movw	r16, r28
    1600:	0e 5a       	subi	r16, 0xAE	; 174
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	f8 01       	movw	r30, r16
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
    1616:	24 c0       	rjmp	.+72     	; 0x1660 <main+0x300>
    1618:	ce 01       	movw	r24, r28
    161a:	8c 5a       	subi	r24, 0xAC	; 172
    161c:	9f 4f       	sbci	r25, 0xFF	; 255
    161e:	29 e1       	ldi	r18, 0x19	; 25
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	fc 01       	movw	r30, r24
    1624:	31 83       	std	Z+1, r19	; 0x01
    1626:	20 83       	st	Z, r18
    1628:	ce 01       	movw	r24, r28
    162a:	8c 5a       	subi	r24, 0xAC	; 172
    162c:	9f 4f       	sbci	r25, 0xFF	; 255
    162e:	fc 01       	movw	r30, r24
    1630:	80 81       	ld	r24, Z
    1632:	91 81       	ldd	r25, Z+1	; 0x01
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <main+0x2d4>
    1638:	9e 01       	movw	r18, r28
    163a:	2c 5a       	subi	r18, 0xAC	; 172
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	f9 01       	movw	r30, r18
    1640:	91 83       	std	Z+1, r25	; 0x01
    1642:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1644:	ce 01       	movw	r24, r28
    1646:	8e 5a       	subi	r24, 0xAE	; 174
    1648:	9f 4f       	sbci	r25, 0xFF	; 255
    164a:	9e 01       	movw	r18, r28
    164c:	2e 5a       	subi	r18, 0xAE	; 174
    164e:	3f 4f       	sbci	r19, 0xFF	; 255
    1650:	f9 01       	movw	r30, r18
    1652:	20 81       	ld	r18, Z
    1654:	31 81       	ldd	r19, Z+1	; 0x01
    1656:	21 50       	subi	r18, 0x01	; 1
    1658:	31 09       	sbc	r19, r1
    165a:	fc 01       	movw	r30, r24
    165c:	31 83       	std	Z+1, r19	; 0x01
    165e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1660:	ce 01       	movw	r24, r28
    1662:	8e 5a       	subi	r24, 0xAE	; 174
    1664:	9f 4f       	sbci	r25, 0xFF	; 255
    1666:	fc 01       	movw	r30, r24
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01
    166c:	89 2b       	or	r24, r25
    166e:	a1 f6       	brne	.-88     	; 0x1618 <main+0x2b8>
    1670:	2c c0       	rjmp	.+88     	; 0x16ca <main+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1672:	8e 01       	movw	r16, r28
    1674:	0e 5a       	subi	r16, 0xAE	; 174
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	ce 01       	movw	r24, r28
    167a:	82 5b       	subi	r24, 0xB2	; 178
    167c:	9f 4f       	sbci	r25, 0xFF	; 255
    167e:	fc 01       	movw	r30, r24
    1680:	60 81       	ld	r22, Z
    1682:	71 81       	ldd	r23, Z+1	; 0x01
    1684:	82 81       	ldd	r24, Z+2	; 0x02
    1686:	93 81       	ldd	r25, Z+3	; 0x03
    1688:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	f8 01       	movw	r30, r16
    1692:	91 83       	std	Z+1, r25	; 0x01
    1694:	80 83       	st	Z, r24
    1696:	ce 01       	movw	r24, r28
    1698:	8a 5a       	subi	r24, 0xAA	; 170
    169a:	9f 4f       	sbci	r25, 0xFF	; 255
    169c:	9e 01       	movw	r18, r28
    169e:	2e 5a       	subi	r18, 0xAE	; 174
    16a0:	3f 4f       	sbci	r19, 0xFF	; 255
    16a2:	f9 01       	movw	r30, r18
    16a4:	20 81       	ld	r18, Z
    16a6:	31 81       	ldd	r19, Z+1	; 0x01
    16a8:	fc 01       	movw	r30, r24
    16aa:	31 83       	std	Z+1, r19	; 0x01
    16ac:	20 83       	st	Z, r18
    16ae:	ce 01       	movw	r24, r28
    16b0:	8a 5a       	subi	r24, 0xAA	; 170
    16b2:	9f 4f       	sbci	r25, 0xFF	; 255
    16b4:	fc 01       	movw	r30, r24
    16b6:	80 81       	ld	r24, Z
    16b8:	91 81       	ldd	r25, Z+1	; 0x01
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <main+0x35a>
    16be:	9e 01       	movw	r18, r28
    16c0:	2a 5a       	subi	r18, 0xAA	; 170
    16c2:	3f 4f       	sbci	r19, 0xFF	; 255
    16c4:	f9 01       	movw	r30, r18
    16c6:	91 83       	std	Z+1, r25	; 0x01
    16c8:	80 83       	st	Z, r24
			_delay_ms(50);
			LCD_displayString(strr[key]);
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	88 2f       	mov	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9e 01       	movw	r18, r28
    16d2:	24 5f       	subi	r18, 0xF4	; 244
    16d4:	3e 4f       	sbci	r19, 0xFE	; 254
    16d6:	82 0f       	add	r24, r18
    16d8:	93 1f       	adc	r25, r19
    16da:	fc 01       	movw	r30, r24
    16dc:	80 81       	ld	r24, Z
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_displayString>
		}
		if(key == 2)
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	82 30       	cpi	r24, 0x02	; 2
    16ea:	09 f0       	breq	.+2      	; 0x16ee <main+0x38e>
    16ec:	8d c1       	rjmp	.+794    	; 0x1a08 <main+0x6a8>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a8 e4       	ldi	r26, 0x48	; 72
    16f4:	b2 e4       	ldi	r27, 0x42	; 66
    16f6:	8e 87       	std	Y+14, r24	; 0x0e
    16f8:	9f 87       	std	Y+15, r25	; 0x0f
    16fa:	a8 8b       	std	Y+16, r26	; 0x10
    16fc:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    16fe:	8e 01       	movw	r16, r28
    1700:	04 59       	subi	r16, 0x94	; 148
    1702:	1f 4f       	sbci	r17, 0xFF	; 255
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	4a e7       	ldi	r20, 0x7A	; 122
    170a:	53 e4       	ldi	r21, 0x43	; 67
    170c:	6e 85       	ldd	r22, Y+14	; 0x0e
    170e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1710:	88 89       	ldd	r24, Y+16	; 0x10
    1712:	99 89       	ldd	r25, Y+17	; 0x11
    1714:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	f8 01       	movw	r30, r16
    171e:	80 83       	st	Z, r24
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	a2 83       	std	Z+2, r26	; 0x02
    1724:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1726:	ce 01       	movw	r24, r28
    1728:	84 59       	subi	r24, 0x94	; 148
    172a:	9f 4f       	sbci	r25, 0xFF	; 255
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e8       	ldi	r20, 0x80	; 128
    1732:	5f e3       	ldi	r21, 0x3F	; 63
    1734:	fc 01       	movw	r30, r24
    1736:	60 81       	ld	r22, Z
    1738:	71 81       	ldd	r23, Z+1	; 0x01
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    1742:	88 23       	and	r24, r24
    1744:	4c f4       	brge	.+18     	; 0x1758 <main+0x3f8>
		__ticks = 1;
    1746:	ce 01       	movw	r24, r28
    1748:	80 59       	subi	r24, 0x90	; 144
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	21 e0       	ldi	r18, 0x01	; 1
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	fc 01       	movw	r30, r24
    1752:	31 83       	std	Z+1, r19	; 0x01
    1754:	20 83       	st	Z, r18
    1756:	69 c0       	rjmp	.+210    	; 0x182a <main+0x4ca>
	else if (__tmp > 65535)
    1758:	ce 01       	movw	r24, r28
    175a:	84 59       	subi	r24, 0x94	; 148
    175c:	9f 4f       	sbci	r25, 0xFF	; 255
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	3f ef       	ldi	r19, 0xFF	; 255
    1762:	4f e7       	ldi	r20, 0x7F	; 127
    1764:	57 e4       	ldi	r21, 0x47	; 71
    1766:	fc 01       	movw	r30, r24
    1768:	60 81       	ld	r22, Z
    176a:	71 81       	ldd	r23, Z+1	; 0x01
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    1774:	18 16       	cp	r1, r24
    1776:	0c f0       	brlt	.+2      	; 0x177a <main+0x41a>
    1778:	46 c0       	rjmp	.+140    	; 0x1806 <main+0x4a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e2       	ldi	r20, 0x20	; 32
    1780:	51 e4       	ldi	r21, 0x41	; 65
    1782:	6e 85       	ldd	r22, Y+14	; 0x0e
    1784:	7f 85       	ldd	r23, Y+15	; 0x0f
    1786:	88 89       	ldd	r24, Y+16	; 0x10
    1788:	99 89       	ldd	r25, Y+17	; 0x11
    178a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	8e 01       	movw	r16, r28
    1794:	00 59       	subi	r16, 0x90	; 144
    1796:	1f 4f       	sbci	r17, 0xFF	; 255
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	f8 01       	movw	r30, r16
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
    17aa:	24 c0       	rjmp	.+72     	; 0x17f4 <main+0x494>
    17ac:	ce 01       	movw	r24, r28
    17ae:	8e 58       	subi	r24, 0x8E	; 142
    17b0:	9f 4f       	sbci	r25, 0xFF	; 255
    17b2:	29 e1       	ldi	r18, 0x19	; 25
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	fc 01       	movw	r30, r24
    17b8:	31 83       	std	Z+1, r19	; 0x01
    17ba:	20 83       	st	Z, r18
    17bc:	ce 01       	movw	r24, r28
    17be:	8e 58       	subi	r24, 0x8E	; 142
    17c0:	9f 4f       	sbci	r25, 0xFF	; 255
    17c2:	fc 01       	movw	r30, r24
    17c4:	80 81       	ld	r24, Z
    17c6:	91 81       	ldd	r25, Z+1	; 0x01
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <main+0x468>
    17cc:	9e 01       	movw	r18, r28
    17ce:	2e 58       	subi	r18, 0x8E	; 142
    17d0:	3f 4f       	sbci	r19, 0xFF	; 255
    17d2:	f9 01       	movw	r30, r18
    17d4:	91 83       	std	Z+1, r25	; 0x01
    17d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d8:	ce 01       	movw	r24, r28
    17da:	80 59       	subi	r24, 0x90	; 144
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	9e 01       	movw	r18, r28
    17e0:	20 59       	subi	r18, 0x90	; 144
    17e2:	3f 4f       	sbci	r19, 0xFF	; 255
    17e4:	f9 01       	movw	r30, r18
    17e6:	20 81       	ld	r18, Z
    17e8:	31 81       	ldd	r19, Z+1	; 0x01
    17ea:	21 50       	subi	r18, 0x01	; 1
    17ec:	31 09       	sbc	r19, r1
    17ee:	fc 01       	movw	r30, r24
    17f0:	31 83       	std	Z+1, r19	; 0x01
    17f2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f4:	ce 01       	movw	r24, r28
    17f6:	80 59       	subi	r24, 0x90	; 144
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	fc 01       	movw	r30, r24
    17fc:	80 81       	ld	r24, Z
    17fe:	91 81       	ldd	r25, Z+1	; 0x01
    1800:	89 2b       	or	r24, r25
    1802:	a1 f6       	brne	.-88     	; 0x17ac <main+0x44c>
    1804:	2c c0       	rjmp	.+88     	; 0x185e <main+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1806:	8e 01       	movw	r16, r28
    1808:	00 59       	subi	r16, 0x90	; 144
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	ce 01       	movw	r24, r28
    180e:	84 59       	subi	r24, 0x94	; 148
    1810:	9f 4f       	sbci	r25, 0xFF	; 255
    1812:	fc 01       	movw	r30, r24
    1814:	60 81       	ld	r22, Z
    1816:	71 81       	ldd	r23, Z+1	; 0x01
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	f8 01       	movw	r30, r16
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
    182a:	ce 01       	movw	r24, r28
    182c:	8c 58       	subi	r24, 0x8C	; 140
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	9e 01       	movw	r18, r28
    1832:	20 59       	subi	r18, 0x90	; 144
    1834:	3f 4f       	sbci	r19, 0xFF	; 255
    1836:	f9 01       	movw	r30, r18
    1838:	20 81       	ld	r18, Z
    183a:	31 81       	ldd	r19, Z+1	; 0x01
    183c:	fc 01       	movw	r30, r24
    183e:	31 83       	std	Z+1, r19	; 0x01
    1840:	20 83       	st	Z, r18
    1842:	ce 01       	movw	r24, r28
    1844:	8c 58       	subi	r24, 0x8C	; 140
    1846:	9f 4f       	sbci	r25, 0xFF	; 255
    1848:	fc 01       	movw	r30, r24
    184a:	80 81       	ld	r24, Z
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <main+0x4ee>
    1852:	9e 01       	movw	r18, r28
    1854:	2c 58       	subi	r18, 0x8C	; 140
    1856:	3f 4f       	sbci	r19, 0xFF	; 255
    1858:	f9 01       	movw	r30, r18
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	80 83       	st	Z, r24
		{
		_delay_ms(50);
		BCDSevegments_enable(ONE);
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
		BCDSevegments_enable(TWO);
    1864:	82 e0       	ldi	r24, 0x02	; 2
    1866:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
		BCDSevegments_enable(THREE);
    186a:	83 e0       	ldi	r24, 0x03	; 3
    186c:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
		BCDSevegments_enable(FOUR);
    1870:	84 e0       	ldi	r24, 0x04	; 4
    1872:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
		BCDSevegments_displayNo(TWO);
    1876:	82 e0       	ldi	r24, 0x02	; 2
    1878:	0e 94 a0 00 	call	0x140	; 0x140 <BCDSevegments_displayNo>
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	a8 e4       	ldi	r26, 0x48	; 72
    1882:	b2 e4       	ldi	r27, 0x42	; 66
    1884:	8a 83       	std	Y+2, r24	; 0x02
    1886:	9b 83       	std	Y+3, r25	; 0x03
    1888:	ac 83       	std	Y+4, r26	; 0x04
    188a:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    188c:	8e 01       	movw	r16, r28
    188e:	0e 59       	subi	r16, 0x9E	; 158
    1890:	1f 4f       	sbci	r17, 0xFF	; 255
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	4a e7       	ldi	r20, 0x7A	; 122
    1898:	53 e4       	ldi	r21, 0x43	; 67
    189a:	6a 81       	ldd	r22, Y+2	; 0x02
    189c:	7b 81       	ldd	r23, Y+3	; 0x03
    189e:	8c 81       	ldd	r24, Y+4	; 0x04
    18a0:	9d 81       	ldd	r25, Y+5	; 0x05
    18a2:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	f8 01       	movw	r30, r16
    18ac:	80 83       	st	Z, r24
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	a2 83       	std	Z+2, r26	; 0x02
    18b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18b4:	ce 01       	movw	r24, r28
    18b6:	8e 59       	subi	r24, 0x9E	; 158
    18b8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	fc 01       	movw	r30, r24
    18c4:	60 81       	ld	r22, Z
    18c6:	71 81       	ldd	r23, Z+1	; 0x01
    18c8:	82 81       	ldd	r24, Z+2	; 0x02
    18ca:	93 81       	ldd	r25, Z+3	; 0x03
    18cc:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    18d0:	88 23       	and	r24, r24
    18d2:	4c f4       	brge	.+18     	; 0x18e6 <main+0x586>
		__ticks = 1;
    18d4:	ce 01       	movw	r24, r28
    18d6:	8a 59       	subi	r24, 0x9A	; 154
    18d8:	9f 4f       	sbci	r25, 0xFF	; 255
    18da:	21 e0       	ldi	r18, 0x01	; 1
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	fc 01       	movw	r30, r24
    18e0:	31 83       	std	Z+1, r19	; 0x01
    18e2:	20 83       	st	Z, r18
    18e4:	69 c0       	rjmp	.+210    	; 0x19b8 <main+0x658>
	else if (__tmp > 65535)
    18e6:	ce 01       	movw	r24, r28
    18e8:	8e 59       	subi	r24, 0x9E	; 158
    18ea:	9f 4f       	sbci	r25, 0xFF	; 255
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	3f ef       	ldi	r19, 0xFF	; 255
    18f0:	4f e7       	ldi	r20, 0x7F	; 127
    18f2:	57 e4       	ldi	r21, 0x47	; 71
    18f4:	fc 01       	movw	r30, r24
    18f6:	60 81       	ld	r22, Z
    18f8:	71 81       	ldd	r23, Z+1	; 0x01
    18fa:	82 81       	ldd	r24, Z+2	; 0x02
    18fc:	93 81       	ldd	r25, Z+3	; 0x03
    18fe:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    1902:	18 16       	cp	r1, r24
    1904:	0c f0       	brlt	.+2      	; 0x1908 <main+0x5a8>
    1906:	46 c0       	rjmp	.+140    	; 0x1994 <main+0x634>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e2       	ldi	r20, 0x20	; 32
    190e:	51 e4       	ldi	r21, 0x41	; 65
    1910:	6a 81       	ldd	r22, Y+2	; 0x02
    1912:	7b 81       	ldd	r23, Y+3	; 0x03
    1914:	8c 81       	ldd	r24, Y+4	; 0x04
    1916:	9d 81       	ldd	r25, Y+5	; 0x05
    1918:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8e 01       	movw	r16, r28
    1922:	0a 59       	subi	r16, 0x9A	; 154
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	bc 01       	movw	r22, r24
    1928:	cd 01       	movw	r24, r26
    192a:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	f8 01       	movw	r30, r16
    1934:	91 83       	std	Z+1, r25	; 0x01
    1936:	80 83       	st	Z, r24
    1938:	24 c0       	rjmp	.+72     	; 0x1982 <main+0x622>
    193a:	ce 01       	movw	r24, r28
    193c:	88 59       	subi	r24, 0x98	; 152
    193e:	9f 4f       	sbci	r25, 0xFF	; 255
    1940:	29 e1       	ldi	r18, 0x19	; 25
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	fc 01       	movw	r30, r24
    1946:	31 83       	std	Z+1, r19	; 0x01
    1948:	20 83       	st	Z, r18
    194a:	ce 01       	movw	r24, r28
    194c:	88 59       	subi	r24, 0x98	; 152
    194e:	9f 4f       	sbci	r25, 0xFF	; 255
    1950:	fc 01       	movw	r30, r24
    1952:	80 81       	ld	r24, Z
    1954:	91 81       	ldd	r25, Z+1	; 0x01
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <main+0x5f6>
    195a:	9e 01       	movw	r18, r28
    195c:	28 59       	subi	r18, 0x98	; 152
    195e:	3f 4f       	sbci	r19, 0xFF	; 255
    1960:	f9 01       	movw	r30, r18
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1966:	ce 01       	movw	r24, r28
    1968:	8a 59       	subi	r24, 0x9A	; 154
    196a:	9f 4f       	sbci	r25, 0xFF	; 255
    196c:	9e 01       	movw	r18, r28
    196e:	2a 59       	subi	r18, 0x9A	; 154
    1970:	3f 4f       	sbci	r19, 0xFF	; 255
    1972:	f9 01       	movw	r30, r18
    1974:	20 81       	ld	r18, Z
    1976:	31 81       	ldd	r19, Z+1	; 0x01
    1978:	21 50       	subi	r18, 0x01	; 1
    197a:	31 09       	sbc	r19, r1
    197c:	fc 01       	movw	r30, r24
    197e:	31 83       	std	Z+1, r19	; 0x01
    1980:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1982:	ce 01       	movw	r24, r28
    1984:	8a 59       	subi	r24, 0x9A	; 154
    1986:	9f 4f       	sbci	r25, 0xFF	; 255
    1988:	fc 01       	movw	r30, r24
    198a:	80 81       	ld	r24, Z
    198c:	91 81       	ldd	r25, Z+1	; 0x01
    198e:	89 2b       	or	r24, r25
    1990:	a1 f6       	brne	.-88     	; 0x193a <main+0x5da>
    1992:	2c c0       	rjmp	.+88     	; 0x19ec <main+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1994:	8e 01       	movw	r16, r28
    1996:	0a 59       	subi	r16, 0x9A	; 154
    1998:	1f 4f       	sbci	r17, 0xFF	; 255
    199a:	ce 01       	movw	r24, r28
    199c:	8e 59       	subi	r24, 0x9E	; 158
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	fc 01       	movw	r30, r24
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	f8 01       	movw	r30, r16
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	80 83       	st	Z, r24
    19b8:	ce 01       	movw	r24, r28
    19ba:	86 59       	subi	r24, 0x96	; 150
    19bc:	9f 4f       	sbci	r25, 0xFF	; 255
    19be:	9e 01       	movw	r18, r28
    19c0:	2a 59       	subi	r18, 0x9A	; 154
    19c2:	3f 4f       	sbci	r19, 0xFF	; 255
    19c4:	f9 01       	movw	r30, r18
    19c6:	20 81       	ld	r18, Z
    19c8:	31 81       	ldd	r19, Z+1	; 0x01
    19ca:	fc 01       	movw	r30, r24
    19cc:	31 83       	std	Z+1, r19	; 0x01
    19ce:	20 83       	st	Z, r18
    19d0:	ce 01       	movw	r24, r28
    19d2:	86 59       	subi	r24, 0x96	; 150
    19d4:	9f 4f       	sbci	r25, 0xFF	; 255
    19d6:	fc 01       	movw	r30, r24
    19d8:	80 81       	ld	r24, Z
    19da:	91 81       	ldd	r25, Z+1	; 0x01
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <main+0x67c>
    19e0:	9e 01       	movw	r18, r28
    19e2:	26 59       	subi	r18, 0x96	; 150
    19e4:	3f 4f       	sbci	r19, 0xFF	; 255
    19e6:	f9 01       	movw	r30, r18
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	80 83       	st	Z, r24
		_delay_ms(50);
		LCD_displayString(strr[key]);
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	88 2f       	mov	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	9e 01       	movw	r18, r28
    19f4:	24 5f       	subi	r18, 0xF4	; 244
    19f6:	3e 4f       	sbci	r19, 0xFE	; 254
    19f8:	82 0f       	add	r24, r18
    19fa:	93 1f       	adc	r25, r19
    19fc:	fc 01       	movw	r30, r24
    19fe:	80 81       	ld	r24, Z
    1a00:	88 2f       	mov	r24, r24
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_displayString>
		}
		if(key == 3)
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	83 30       	cpi	r24, 0x03	; 3
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <main+0x6b0>
    1a0e:	8d c1       	rjmp	.+794    	; 0x1d2a <main+0x9ca>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a8 e4       	ldi	r26, 0x48	; 72
    1a16:	b2 e4       	ldi	r27, 0x42	; 66
    1a18:	8e 8b       	std	Y+22, r24	; 0x16
    1a1a:	9f 8b       	std	Y+23, r25	; 0x17
    1a1c:	a8 8f       	std	Y+24, r26	; 0x18
    1a1e:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a20:	8e 01       	movw	r16, r28
    1a22:	00 58       	subi	r16, 0x80	; 128
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a e7       	ldi	r20, 0x7A	; 122
    1a2c:	53 e4       	ldi	r21, 0x43	; 67
    1a2e:	6e 89       	ldd	r22, Y+22	; 0x16
    1a30:	7f 89       	ldd	r23, Y+23	; 0x17
    1a32:	88 8d       	ldd	r24, Y+24	; 0x18
    1a34:	99 8d       	ldd	r25, Y+25	; 0x19
    1a36:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	f8 01       	movw	r30, r16
    1a40:	80 83       	st	Z, r24
    1a42:	91 83       	std	Z+1, r25	; 0x01
    1a44:	a2 83       	std	Z+2, r26	; 0x02
    1a46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a48:	ce 01       	movw	r24, r28
    1a4a:	80 58       	subi	r24, 0x80	; 128
    1a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	fc 01       	movw	r30, r24
    1a58:	60 81       	ld	r22, Z
    1a5a:	71 81       	ldd	r23, Z+1	; 0x01
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    1a64:	88 23       	and	r24, r24
    1a66:	4c f4       	brge	.+18     	; 0x1a7a <main+0x71a>
		__ticks = 1;
    1a68:	ce 01       	movw	r24, r28
    1a6a:	8c 57       	subi	r24, 0x7C	; 124
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	21 e0       	ldi	r18, 0x01	; 1
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	fc 01       	movw	r30, r24
    1a74:	31 83       	std	Z+1, r19	; 0x01
    1a76:	20 83       	st	Z, r18
    1a78:	69 c0       	rjmp	.+210    	; 0x1b4c <main+0x7ec>
	else if (__tmp > 65535)
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	80 58       	subi	r24, 0x80	; 128
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	3f ef       	ldi	r19, 0xFF	; 255
    1a84:	4f e7       	ldi	r20, 0x7F	; 127
    1a86:	57 e4       	ldi	r21, 0x47	; 71
    1a88:	fc 01       	movw	r30, r24
    1a8a:	60 81       	ld	r22, Z
    1a8c:	71 81       	ldd	r23, Z+1	; 0x01
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	93 81       	ldd	r25, Z+3	; 0x03
    1a92:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    1a96:	18 16       	cp	r1, r24
    1a98:	0c f0       	brlt	.+2      	; 0x1a9c <main+0x73c>
    1a9a:	46 c0       	rjmp	.+140    	; 0x1b28 <main+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e2       	ldi	r20, 0x20	; 32
    1aa2:	51 e4       	ldi	r21, 0x41	; 65
    1aa4:	6e 89       	ldd	r22, Y+22	; 0x16
    1aa6:	7f 89       	ldd	r23, Y+23	; 0x17
    1aa8:	88 8d       	ldd	r24, Y+24	; 0x18
    1aaa:	99 8d       	ldd	r25, Y+25	; 0x19
    1aac:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	8e 01       	movw	r16, r28
    1ab6:	0c 57       	subi	r16, 0x7C	; 124
    1ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aba:	bc 01       	movw	r22, r24
    1abc:	cd 01       	movw	r24, r26
    1abe:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	91 83       	std	Z+1, r25	; 0x01
    1aca:	80 83       	st	Z, r24
    1acc:	24 c0       	rjmp	.+72     	; 0x1b16 <main+0x7b6>
    1ace:	ce 01       	movw	r24, r28
    1ad0:	8a 57       	subi	r24, 0x7A	; 122
    1ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad4:	29 e1       	ldi	r18, 0x19	; 25
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	fc 01       	movw	r30, r24
    1ada:	31 83       	std	Z+1, r19	; 0x01
    1adc:	20 83       	st	Z, r18
    1ade:	ce 01       	movw	r24, r28
    1ae0:	8a 57       	subi	r24, 0x7A	; 122
    1ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	80 81       	ld	r24, Z
    1ae8:	91 81       	ldd	r25, Z+1	; 0x01
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <main+0x78a>
    1aee:	9e 01       	movw	r18, r28
    1af0:	2a 57       	subi	r18, 0x7A	; 122
    1af2:	3f 4f       	sbci	r19, 0xFF	; 255
    1af4:	f9 01       	movw	r30, r18
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afa:	ce 01       	movw	r24, r28
    1afc:	8c 57       	subi	r24, 0x7C	; 124
    1afe:	9f 4f       	sbci	r25, 0xFF	; 255
    1b00:	9e 01       	movw	r18, r28
    1b02:	2c 57       	subi	r18, 0x7C	; 124
    1b04:	3f 4f       	sbci	r19, 0xFF	; 255
    1b06:	f9 01       	movw	r30, r18
    1b08:	20 81       	ld	r18, Z
    1b0a:	31 81       	ldd	r19, Z+1	; 0x01
    1b0c:	21 50       	subi	r18, 0x01	; 1
    1b0e:	31 09       	sbc	r19, r1
    1b10:	fc 01       	movw	r30, r24
    1b12:	31 83       	std	Z+1, r19	; 0x01
    1b14:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b16:	ce 01       	movw	r24, r28
    1b18:	8c 57       	subi	r24, 0x7C	; 124
    1b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	80 81       	ld	r24, Z
    1b20:	91 81       	ldd	r25, Z+1	; 0x01
    1b22:	89 2b       	or	r24, r25
    1b24:	a1 f6       	brne	.-88     	; 0x1ace <main+0x76e>
    1b26:	2c c0       	rjmp	.+88     	; 0x1b80 <main+0x820>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b28:	8e 01       	movw	r16, r28
    1b2a:	0c 57       	subi	r16, 0x7C	; 124
    1b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2e:	ce 01       	movw	r24, r28
    1b30:	80 58       	subi	r24, 0x80	; 128
    1b32:	9f 4f       	sbci	r25, 0xFF	; 255
    1b34:	fc 01       	movw	r30, r24
    1b36:	60 81       	ld	r22, Z
    1b38:	71 81       	ldd	r23, Z+1	; 0x01
    1b3a:	82 81       	ldd	r24, Z+2	; 0x02
    1b3c:	93 81       	ldd	r25, Z+3	; 0x03
    1b3e:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	f8 01       	movw	r30, r16
    1b48:	91 83       	std	Z+1, r25	; 0x01
    1b4a:	80 83       	st	Z, r24
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	88 57       	subi	r24, 0x78	; 120
    1b50:	9f 4f       	sbci	r25, 0xFF	; 255
    1b52:	9e 01       	movw	r18, r28
    1b54:	2c 57       	subi	r18, 0x7C	; 124
    1b56:	3f 4f       	sbci	r19, 0xFF	; 255
    1b58:	f9 01       	movw	r30, r18
    1b5a:	20 81       	ld	r18, Z
    1b5c:	31 81       	ldd	r19, Z+1	; 0x01
    1b5e:	fc 01       	movw	r30, r24
    1b60:	31 83       	std	Z+1, r19	; 0x01
    1b62:	20 83       	st	Z, r18
    1b64:	ce 01       	movw	r24, r28
    1b66:	88 57       	subi	r24, 0x78	; 120
    1b68:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <main+0x810>
    1b74:	9e 01       	movw	r18, r28
    1b76:	28 57       	subi	r18, 0x78	; 120
    1b78:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7a:	f9 01       	movw	r30, r18
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(ONE);
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
			BCDSevegments_enable(TWO);
    1b86:	82 e0       	ldi	r24, 0x02	; 2
    1b88:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
			BCDSevegments_enable(THREE);
    1b8c:	83 e0       	ldi	r24, 0x03	; 3
    1b8e:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
			BCDSevegments_enable(FOUR);
    1b92:	84 e0       	ldi	r24, 0x04	; 4
    1b94:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
			BCDSevegments_displayNo(THREE);
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	0e 94 a0 00 	call	0x140	; 0x140 <BCDSevegments_displayNo>
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	a8 e4       	ldi	r26, 0x48	; 72
    1ba4:	b2 e4       	ldi	r27, 0x42	; 66
    1ba6:	8a 87       	std	Y+10, r24	; 0x0a
    1ba8:	9b 87       	std	Y+11, r25	; 0x0b
    1baa:	ac 87       	std	Y+12, r26	; 0x0c
    1bac:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bae:	8e 01       	movw	r16, r28
    1bb0:	0a 58       	subi	r16, 0x8A	; 138
    1bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a e7       	ldi	r20, 0x7A	; 122
    1bba:	53 e4       	ldi	r21, 0x43	; 67
    1bbc:	6a 85       	ldd	r22, Y+10	; 0x0a
    1bbe:	7b 85       	ldd	r23, Y+11	; 0x0b
    1bc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bc2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bc4:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	f8 01       	movw	r30, r16
    1bce:	80 83       	st	Z, r24
    1bd0:	91 83       	std	Z+1, r25	; 0x01
    1bd2:	a2 83       	std	Z+2, r26	; 0x02
    1bd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	8a 58       	subi	r24, 0x8A	; 138
    1bda:	9f 4f       	sbci	r25, 0xFF	; 255
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e8       	ldi	r20, 0x80	; 128
    1be2:	5f e3       	ldi	r21, 0x3F	; 63
    1be4:	fc 01       	movw	r30, r24
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	4c f4       	brge	.+18     	; 0x1c08 <main+0x8a8>
		__ticks = 1;
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	86 58       	subi	r24, 0x86	; 134
    1bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfc:	21 e0       	ldi	r18, 0x01	; 1
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	fc 01       	movw	r30, r24
    1c02:	31 83       	std	Z+1, r19	; 0x01
    1c04:	20 83       	st	Z, r18
    1c06:	69 c0       	rjmp	.+210    	; 0x1cda <main+0x97a>
	else if (__tmp > 65535)
    1c08:	ce 01       	movw	r24, r28
    1c0a:	8a 58       	subi	r24, 0x8A	; 138
    1c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	57 e4       	ldi	r21, 0x47	; 71
    1c16:	fc 01       	movw	r30, r24
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    1c24:	18 16       	cp	r1, r24
    1c26:	0c f0       	brlt	.+2      	; 0x1c2a <main+0x8ca>
    1c28:	46 c0       	rjmp	.+140    	; 0x1cb6 <main+0x956>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e2       	ldi	r20, 0x20	; 32
    1c30:	51 e4       	ldi	r21, 0x41	; 65
    1c32:	6a 85       	ldd	r22, Y+10	; 0x0a
    1c34:	7b 85       	ldd	r23, Y+11	; 0x0b
    1c36:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c38:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c3a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	8e 01       	movw	r16, r28
    1c44:	06 58       	subi	r16, 0x86	; 134
    1c46:	1f 4f       	sbci	r17, 0xFF	; 255
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	f8 01       	movw	r30, r16
    1c56:	91 83       	std	Z+1, r25	; 0x01
    1c58:	80 83       	st	Z, r24
    1c5a:	24 c0       	rjmp	.+72     	; 0x1ca4 <main+0x944>
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	84 58       	subi	r24, 0x84	; 132
    1c60:	9f 4f       	sbci	r25, 0xFF	; 255
    1c62:	29 e1       	ldi	r18, 0x19	; 25
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	fc 01       	movw	r30, r24
    1c68:	31 83       	std	Z+1, r19	; 0x01
    1c6a:	20 83       	st	Z, r18
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	84 58       	subi	r24, 0x84	; 132
    1c70:	9f 4f       	sbci	r25, 0xFF	; 255
    1c72:	fc 01       	movw	r30, r24
    1c74:	80 81       	ld	r24, Z
    1c76:	91 81       	ldd	r25, Z+1	; 0x01
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <main+0x918>
    1c7c:	9e 01       	movw	r18, r28
    1c7e:	24 58       	subi	r18, 0x84	; 132
    1c80:	3f 4f       	sbci	r19, 0xFF	; 255
    1c82:	f9 01       	movw	r30, r18
    1c84:	91 83       	std	Z+1, r25	; 0x01
    1c86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	ce 01       	movw	r24, r28
    1c8a:	86 58       	subi	r24, 0x86	; 134
    1c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8e:	9e 01       	movw	r18, r28
    1c90:	26 58       	subi	r18, 0x86	; 134
    1c92:	3f 4f       	sbci	r19, 0xFF	; 255
    1c94:	f9 01       	movw	r30, r18
    1c96:	20 81       	ld	r18, Z
    1c98:	31 81       	ldd	r19, Z+1	; 0x01
    1c9a:	21 50       	subi	r18, 0x01	; 1
    1c9c:	31 09       	sbc	r19, r1
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	31 83       	std	Z+1, r19	; 0x01
    1ca2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	86 58       	subi	r24, 0x86	; 134
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	fc 01       	movw	r30, r24
    1cac:	80 81       	ld	r24, Z
    1cae:	91 81       	ldd	r25, Z+1	; 0x01
    1cb0:	89 2b       	or	r24, r25
    1cb2:	a1 f6       	brne	.-88     	; 0x1c5c <main+0x8fc>
    1cb4:	2c c0       	rjmp	.+88     	; 0x1d0e <main+0x9ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb6:	8e 01       	movw	r16, r28
    1cb8:	06 58       	subi	r16, 0x86	; 134
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	8a 58       	subi	r24, 0x8A	; 138
    1cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	80 83       	st	Z, r24
    1cda:	ce 01       	movw	r24, r28
    1cdc:	82 58       	subi	r24, 0x82	; 130
    1cde:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce0:	9e 01       	movw	r18, r28
    1ce2:	26 58       	subi	r18, 0x86	; 134
    1ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce6:	f9 01       	movw	r30, r18
    1ce8:	20 81       	ld	r18, Z
    1cea:	31 81       	ldd	r19, Z+1	; 0x01
    1cec:	fc 01       	movw	r30, r24
    1cee:	31 83       	std	Z+1, r19	; 0x01
    1cf0:	20 83       	st	Z, r18
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	82 58       	subi	r24, 0x82	; 130
    1cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	80 81       	ld	r24, Z
    1cfc:	91 81       	ldd	r25, Z+1	; 0x01
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <main+0x99e>
    1d02:	9e 01       	movw	r18, r28
    1d04:	22 58       	subi	r18, 0x82	; 130
    1d06:	3f 4f       	sbci	r19, 0xFF	; 255
    1d08:	f9 01       	movw	r30, r18
    1d0a:	91 83       	std	Z+1, r25	; 0x01
    1d0c:	80 83       	st	Z, r24
			_delay_ms(50);
			LCD_displayString(strr[key]);
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	88 2f       	mov	r24, r24
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9e 01       	movw	r18, r28
    1d16:	24 5f       	subi	r18, 0xF4	; 244
    1d18:	3e 4f       	sbci	r19, 0xFE	; 254
    1d1a:	82 0f       	add	r24, r18
    1d1c:	93 1f       	adc	r25, r19
    1d1e:	fc 01       	movw	r30, r24
    1d20:	80 81       	ld	r24, Z
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_displayString>
		}
		if(key == 4)
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	84 30       	cpi	r24, 0x04	; 4
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <main+0x9d2>
    1d30:	8d c1       	rjmp	.+794    	; 0x204c <main+0xcec>
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	a8 e4       	ldi	r26, 0x48	; 72
    1d38:	b2 e4       	ldi	r27, 0x42	; 66
    1d3a:	8e 8f       	std	Y+30, r24	; 0x1e
    1d3c:	9f 8f       	std	Y+31, r25	; 0x1f
    1d3e:	a8 a3       	std	Y+32, r26	; 0x20
    1d40:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d42:	8e 01       	movw	r16, r28
    1d44:	0c 56       	subi	r16, 0x6C	; 108
    1d46:	1f 4f       	sbci	r17, 0xFF	; 255
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	4a e7       	ldi	r20, 0x7A	; 122
    1d4e:	53 e4       	ldi	r21, 0x43	; 67
    1d50:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1d52:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1d54:	88 a1       	ldd	r24, Y+32	; 0x20
    1d56:	99 a1       	ldd	r25, Y+33	; 0x21
    1d58:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	f8 01       	movw	r30, r16
    1d62:	80 83       	st	Z, r24
    1d64:	91 83       	std	Z+1, r25	; 0x01
    1d66:	a2 83       	std	Z+2, r26	; 0x02
    1d68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	8c 56       	subi	r24, 0x6C	; 108
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e8       	ldi	r20, 0x80	; 128
    1d76:	5f e3       	ldi	r21, 0x3F	; 63
    1d78:	fc 01       	movw	r30, r24
    1d7a:	60 81       	ld	r22, Z
    1d7c:	71 81       	ldd	r23, Z+1	; 0x01
    1d7e:	82 81       	ldd	r24, Z+2	; 0x02
    1d80:	93 81       	ldd	r25, Z+3	; 0x03
    1d82:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	4c f4       	brge	.+18     	; 0x1d9c <main+0xa3c>
		__ticks = 1;
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	88 56       	subi	r24, 0x68	; 104
    1d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d90:	21 e0       	ldi	r18, 0x01	; 1
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	fc 01       	movw	r30, r24
    1d96:	31 83       	std	Z+1, r19	; 0x01
    1d98:	20 83       	st	Z, r18
    1d9a:	69 c0       	rjmp	.+210    	; 0x1e6e <main+0xb0e>
	else if (__tmp > 65535)
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	8c 56       	subi	r24, 0x6C	; 108
    1da0:	9f 4f       	sbci	r25, 0xFF	; 255
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	3f ef       	ldi	r19, 0xFF	; 255
    1da6:	4f e7       	ldi	r20, 0x7F	; 127
    1da8:	57 e4       	ldi	r21, 0x47	; 71
    1daa:	fc 01       	movw	r30, r24
    1dac:	60 81       	ld	r22, Z
    1dae:	71 81       	ldd	r23, Z+1	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    1db8:	18 16       	cp	r1, r24
    1dba:	0c f0       	brlt	.+2      	; 0x1dbe <main+0xa5e>
    1dbc:	46 c0       	rjmp	.+140    	; 0x1e4a <main+0xaea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e2       	ldi	r20, 0x20	; 32
    1dc4:	51 e4       	ldi	r21, 0x41	; 65
    1dc6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1dc8:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1dca:	88 a1       	ldd	r24, Y+32	; 0x20
    1dcc:	99 a1       	ldd	r25, Y+33	; 0x21
    1dce:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	8e 01       	movw	r16, r28
    1dd8:	08 56       	subi	r16, 0x68	; 104
    1dda:	1f 4f       	sbci	r17, 0xFF	; 255
    1ddc:	bc 01       	movw	r22, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	f8 01       	movw	r30, r16
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	80 83       	st	Z, r24
    1dee:	24 c0       	rjmp	.+72     	; 0x1e38 <main+0xad8>
    1df0:	ce 01       	movw	r24, r28
    1df2:	86 56       	subi	r24, 0x66	; 102
    1df4:	9f 4f       	sbci	r25, 0xFF	; 255
    1df6:	29 e1       	ldi	r18, 0x19	; 25
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	31 83       	std	Z+1, r19	; 0x01
    1dfe:	20 83       	st	Z, r18
    1e00:	ce 01       	movw	r24, r28
    1e02:	86 56       	subi	r24, 0x66	; 102
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	fc 01       	movw	r30, r24
    1e08:	80 81       	ld	r24, Z
    1e0a:	91 81       	ldd	r25, Z+1	; 0x01
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <main+0xaac>
    1e10:	9e 01       	movw	r18, r28
    1e12:	26 56       	subi	r18, 0x66	; 102
    1e14:	3f 4f       	sbci	r19, 0xFF	; 255
    1e16:	f9 01       	movw	r30, r18
    1e18:	91 83       	std	Z+1, r25	; 0x01
    1e1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	88 56       	subi	r24, 0x68	; 104
    1e20:	9f 4f       	sbci	r25, 0xFF	; 255
    1e22:	9e 01       	movw	r18, r28
    1e24:	28 56       	subi	r18, 0x68	; 104
    1e26:	3f 4f       	sbci	r19, 0xFF	; 255
    1e28:	f9 01       	movw	r30, r18
    1e2a:	20 81       	ld	r18, Z
    1e2c:	31 81       	ldd	r19, Z+1	; 0x01
    1e2e:	21 50       	subi	r18, 0x01	; 1
    1e30:	31 09       	sbc	r19, r1
    1e32:	fc 01       	movw	r30, r24
    1e34:	31 83       	std	Z+1, r19	; 0x01
    1e36:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e38:	ce 01       	movw	r24, r28
    1e3a:	88 56       	subi	r24, 0x68	; 104
    1e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3e:	fc 01       	movw	r30, r24
    1e40:	80 81       	ld	r24, Z
    1e42:	91 81       	ldd	r25, Z+1	; 0x01
    1e44:	89 2b       	or	r24, r25
    1e46:	a1 f6       	brne	.-88     	; 0x1df0 <main+0xa90>
    1e48:	2c c0       	rjmp	.+88     	; 0x1ea2 <main+0xb42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4a:	8e 01       	movw	r16, r28
    1e4c:	08 56       	subi	r16, 0x68	; 104
    1e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e50:	ce 01       	movw	r24, r28
    1e52:	8c 56       	subi	r24, 0x6C	; 108
    1e54:	9f 4f       	sbci	r25, 0xFF	; 255
    1e56:	fc 01       	movw	r30, r24
    1e58:	60 81       	ld	r22, Z
    1e5a:	71 81       	ldd	r23, Z+1	; 0x01
    1e5c:	82 81       	ldd	r24, Z+2	; 0x02
    1e5e:	93 81       	ldd	r25, Z+3	; 0x03
    1e60:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	f8 01       	movw	r30, r16
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
    1e6e:	ce 01       	movw	r24, r28
    1e70:	84 56       	subi	r24, 0x64	; 100
    1e72:	9f 4f       	sbci	r25, 0xFF	; 255
    1e74:	9e 01       	movw	r18, r28
    1e76:	28 56       	subi	r18, 0x68	; 104
    1e78:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7a:	f9 01       	movw	r30, r18
    1e7c:	20 81       	ld	r18, Z
    1e7e:	31 81       	ldd	r19, Z+1	; 0x01
    1e80:	fc 01       	movw	r30, r24
    1e82:	31 83       	std	Z+1, r19	; 0x01
    1e84:	20 83       	st	Z, r18
    1e86:	ce 01       	movw	r24, r28
    1e88:	84 56       	subi	r24, 0x64	; 100
    1e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	80 81       	ld	r24, Z
    1e90:	91 81       	ldd	r25, Z+1	; 0x01
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <main+0xb32>
    1e96:	9e 01       	movw	r18, r28
    1e98:	24 56       	subi	r18, 0x64	; 100
    1e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9c:	f9 01       	movw	r30, r18
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	80 83       	st	Z, r24
		{
		_delay_ms(50);
		BCDSevegments_enable(ONE);
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
		BCDSevegments_enable(TWO);
    1ea8:	82 e0       	ldi	r24, 0x02	; 2
    1eaa:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
		BCDSevegments_enable(THREE);
    1eae:	83 e0       	ldi	r24, 0x03	; 3
    1eb0:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
		BCDSevegments_enable(FOUR);
    1eb4:	84 e0       	ldi	r24, 0x04	; 4
    1eb6:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
		BCDSevegments_displayNo(FOUR);
    1eba:	84 e0       	ldi	r24, 0x04	; 4
    1ebc:	0e 94 a0 00 	call	0x140	; 0x140 <BCDSevegments_displayNo>
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a8 e4       	ldi	r26, 0x48	; 72
    1ec6:	b2 e4       	ldi	r27, 0x42	; 66
    1ec8:	8a 8b       	std	Y+18, r24	; 0x12
    1eca:	9b 8b       	std	Y+19, r25	; 0x13
    1ecc:	ac 8b       	std	Y+20, r26	; 0x14
    1ece:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ed0:	8e 01       	movw	r16, r28
    1ed2:	06 57       	subi	r16, 0x76	; 118
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4a e7       	ldi	r20, 0x7A	; 122
    1edc:	53 e4       	ldi	r21, 0x43	; 67
    1ede:	6a 89       	ldd	r22, Y+18	; 0x12
    1ee0:	7b 89       	ldd	r23, Y+19	; 0x13
    1ee2:	8c 89       	ldd	r24, Y+20	; 0x14
    1ee4:	9d 89       	ldd	r25, Y+21	; 0x15
    1ee6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	f8 01       	movw	r30, r16
    1ef0:	80 83       	st	Z, r24
    1ef2:	91 83       	std	Z+1, r25	; 0x01
    1ef4:	a2 83       	std	Z+2, r26	; 0x02
    1ef6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ef8:	ce 01       	movw	r24, r28
    1efa:	86 57       	subi	r24, 0x76	; 118
    1efc:	9f 4f       	sbci	r25, 0xFF	; 255
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	fc 01       	movw	r30, r24
    1f08:	60 81       	ld	r22, Z
    1f0a:	71 81       	ldd	r23, Z+1	; 0x01
    1f0c:	82 81       	ldd	r24, Z+2	; 0x02
    1f0e:	93 81       	ldd	r25, Z+3	; 0x03
    1f10:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    1f14:	88 23       	and	r24, r24
    1f16:	4c f4       	brge	.+18     	; 0x1f2a <main+0xbca>
		__ticks = 1;
    1f18:	ce 01       	movw	r24, r28
    1f1a:	82 57       	subi	r24, 0x72	; 114
    1f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1e:	21 e0       	ldi	r18, 0x01	; 1
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	fc 01       	movw	r30, r24
    1f24:	31 83       	std	Z+1, r19	; 0x01
    1f26:	20 83       	st	Z, r18
    1f28:	69 c0       	rjmp	.+210    	; 0x1ffc <main+0xc9c>
	else if (__tmp > 65535)
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	86 57       	subi	r24, 0x76	; 118
    1f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	3f ef       	ldi	r19, 0xFF	; 255
    1f34:	4f e7       	ldi	r20, 0x7F	; 127
    1f36:	57 e4       	ldi	r21, 0x47	; 71
    1f38:	fc 01       	movw	r30, r24
    1f3a:	60 81       	ld	r22, Z
    1f3c:	71 81       	ldd	r23, Z+1	; 0x01
    1f3e:	82 81       	ldd	r24, Z+2	; 0x02
    1f40:	93 81       	ldd	r25, Z+3	; 0x03
    1f42:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	0c f0       	brlt	.+2      	; 0x1f4c <main+0xbec>
    1f4a:	46 c0       	rjmp	.+140    	; 0x1fd8 <main+0xc78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e2       	ldi	r20, 0x20	; 32
    1f52:	51 e4       	ldi	r21, 0x41	; 65
    1f54:	6a 89       	ldd	r22, Y+18	; 0x12
    1f56:	7b 89       	ldd	r23, Y+19	; 0x13
    1f58:	8c 89       	ldd	r24, Y+20	; 0x14
    1f5a:	9d 89       	ldd	r25, Y+21	; 0x15
    1f5c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	8e 01       	movw	r16, r28
    1f66:	02 57       	subi	r16, 0x72	; 114
    1f68:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6a:	bc 01       	movw	r22, r24
    1f6c:	cd 01       	movw	r24, r26
    1f6e:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	f8 01       	movw	r30, r16
    1f78:	91 83       	std	Z+1, r25	; 0x01
    1f7a:	80 83       	st	Z, r24
    1f7c:	24 c0       	rjmp	.+72     	; 0x1fc6 <main+0xc66>
    1f7e:	ce 01       	movw	r24, r28
    1f80:	80 57       	subi	r24, 0x70	; 112
    1f82:	9f 4f       	sbci	r25, 0xFF	; 255
    1f84:	29 e1       	ldi	r18, 0x19	; 25
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	fc 01       	movw	r30, r24
    1f8a:	31 83       	std	Z+1, r19	; 0x01
    1f8c:	20 83       	st	Z, r18
    1f8e:	ce 01       	movw	r24, r28
    1f90:	80 57       	subi	r24, 0x70	; 112
    1f92:	9f 4f       	sbci	r25, 0xFF	; 255
    1f94:	fc 01       	movw	r30, r24
    1f96:	80 81       	ld	r24, Z
    1f98:	91 81       	ldd	r25, Z+1	; 0x01
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <main+0xc3a>
    1f9e:	9e 01       	movw	r18, r28
    1fa0:	20 57       	subi	r18, 0x70	; 112
    1fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa4:	f9 01       	movw	r30, r18
    1fa6:	91 83       	std	Z+1, r25	; 0x01
    1fa8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1faa:	ce 01       	movw	r24, r28
    1fac:	82 57       	subi	r24, 0x72	; 114
    1fae:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb0:	9e 01       	movw	r18, r28
    1fb2:	22 57       	subi	r18, 0x72	; 114
    1fb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb6:	f9 01       	movw	r30, r18
    1fb8:	20 81       	ld	r18, Z
    1fba:	31 81       	ldd	r19, Z+1	; 0x01
    1fbc:	21 50       	subi	r18, 0x01	; 1
    1fbe:	31 09       	sbc	r19, r1
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	31 83       	std	Z+1, r19	; 0x01
    1fc4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	82 57       	subi	r24, 0x72	; 114
    1fca:	9f 4f       	sbci	r25, 0xFF	; 255
    1fcc:	fc 01       	movw	r30, r24
    1fce:	80 81       	ld	r24, Z
    1fd0:	91 81       	ldd	r25, Z+1	; 0x01
    1fd2:	89 2b       	or	r24, r25
    1fd4:	a1 f6       	brne	.-88     	; 0x1f7e <main+0xc1e>
    1fd6:	2c c0       	rjmp	.+88     	; 0x2030 <main+0xcd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd8:	8e 01       	movw	r16, r28
    1fda:	02 57       	subi	r16, 0x72	; 114
    1fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fde:	ce 01       	movw	r24, r28
    1fe0:	86 57       	subi	r24, 0x76	; 118
    1fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	60 81       	ld	r22, Z
    1fe8:	71 81       	ldd	r23, Z+1	; 0x01
    1fea:	82 81       	ldd	r24, Z+2	; 0x02
    1fec:	93 81       	ldd	r25, Z+3	; 0x03
    1fee:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	f8 01       	movw	r30, r16
    1ff8:	91 83       	std	Z+1, r25	; 0x01
    1ffa:	80 83       	st	Z, r24
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	8e 56       	subi	r24, 0x6E	; 110
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	9e 01       	movw	r18, r28
    2004:	22 57       	subi	r18, 0x72	; 114
    2006:	3f 4f       	sbci	r19, 0xFF	; 255
    2008:	f9 01       	movw	r30, r18
    200a:	20 81       	ld	r18, Z
    200c:	31 81       	ldd	r19, Z+1	; 0x01
    200e:	fc 01       	movw	r30, r24
    2010:	31 83       	std	Z+1, r19	; 0x01
    2012:	20 83       	st	Z, r18
    2014:	ce 01       	movw	r24, r28
    2016:	8e 56       	subi	r24, 0x6E	; 110
    2018:	9f 4f       	sbci	r25, 0xFF	; 255
    201a:	fc 01       	movw	r30, r24
    201c:	80 81       	ld	r24, Z
    201e:	91 81       	ldd	r25, Z+1	; 0x01
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <main+0xcc0>
    2024:	9e 01       	movw	r18, r28
    2026:	2e 56       	subi	r18, 0x6E	; 110
    2028:	3f 4f       	sbci	r19, 0xFF	; 255
    202a:	f9 01       	movw	r30, r18
    202c:	91 83       	std	Z+1, r25	; 0x01
    202e:	80 83       	st	Z, r24
		_delay_ms(50);
		LCD_displayString(strr[key]);
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	88 2f       	mov	r24, r24
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9e 01       	movw	r18, r28
    2038:	24 5f       	subi	r18, 0xF4	; 244
    203a:	3e 4f       	sbci	r19, 0xFE	; 254
    203c:	82 0f       	add	r24, r18
    203e:	93 1f       	adc	r25, r19
    2040:	fc 01       	movw	r30, r24
    2042:	80 81       	ld	r24, Z
    2044:	88 2f       	mov	r24, r24
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_displayString>
		}
		if(key == 5)
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	85 30       	cpi	r24, 0x05	; 5
    2050:	09 f0       	breq	.+2      	; 0x2054 <main+0xcf4>
    2052:	8d c1       	rjmp	.+794    	; 0x236e <main+0x100e>
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	a8 e4       	ldi	r26, 0x48	; 72
    205a:	b2 e4       	ldi	r27, 0x42	; 66
    205c:	8e a3       	std	Y+38, r24	; 0x26
    205e:	9f a3       	std	Y+39, r25	; 0x27
    2060:	a8 a7       	std	Y+40, r26	; 0x28
    2062:	b9 a7       	std	Y+41, r27	; 0x29

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2064:	8e 01       	movw	r16, r28
    2066:	08 55       	subi	r16, 0x58	; 88
    2068:	1f 4f       	sbci	r17, 0xFF	; 255
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	4a e7       	ldi	r20, 0x7A	; 122
    2070:	53 e4       	ldi	r21, 0x43	; 67
    2072:	6e a1       	ldd	r22, Y+38	; 0x26
    2074:	7f a1       	ldd	r23, Y+39	; 0x27
    2076:	88 a5       	ldd	r24, Y+40	; 0x28
    2078:	99 a5       	ldd	r25, Y+41	; 0x29
    207a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	f8 01       	movw	r30, r16
    2084:	80 83       	st	Z, r24
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	a2 83       	std	Z+2, r26	; 0x02
    208a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    208c:	ce 01       	movw	r24, r28
    208e:	88 55       	subi	r24, 0x58	; 88
    2090:	9f 4f       	sbci	r25, 0xFF	; 255
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e8       	ldi	r20, 0x80	; 128
    2098:	5f e3       	ldi	r21, 0x3F	; 63
    209a:	fc 01       	movw	r30, r24
    209c:	60 81       	ld	r22, Z
    209e:	71 81       	ldd	r23, Z+1	; 0x01
    20a0:	82 81       	ldd	r24, Z+2	; 0x02
    20a2:	93 81       	ldd	r25, Z+3	; 0x03
    20a4:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    20a8:	88 23       	and	r24, r24
    20aa:	4c f4       	brge	.+18     	; 0x20be <main+0xd5e>
		__ticks = 1;
    20ac:	ce 01       	movw	r24, r28
    20ae:	84 55       	subi	r24, 0x54	; 84
    20b0:	9f 4f       	sbci	r25, 0xFF	; 255
    20b2:	21 e0       	ldi	r18, 0x01	; 1
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	fc 01       	movw	r30, r24
    20b8:	31 83       	std	Z+1, r19	; 0x01
    20ba:	20 83       	st	Z, r18
    20bc:	69 c0       	rjmp	.+210    	; 0x2190 <main+0xe30>
	else if (__tmp > 65535)
    20be:	ce 01       	movw	r24, r28
    20c0:	88 55       	subi	r24, 0x58	; 88
    20c2:	9f 4f       	sbci	r25, 0xFF	; 255
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	3f ef       	ldi	r19, 0xFF	; 255
    20c8:	4f e7       	ldi	r20, 0x7F	; 127
    20ca:	57 e4       	ldi	r21, 0x47	; 71
    20cc:	fc 01       	movw	r30, r24
    20ce:	60 81       	ld	r22, Z
    20d0:	71 81       	ldd	r23, Z+1	; 0x01
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	93 81       	ldd	r25, Z+3	; 0x03
    20d6:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    20da:	18 16       	cp	r1, r24
    20dc:	0c f0       	brlt	.+2      	; 0x20e0 <main+0xd80>
    20de:	46 c0       	rjmp	.+140    	; 0x216c <main+0xe0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e2       	ldi	r20, 0x20	; 32
    20e6:	51 e4       	ldi	r21, 0x41	; 65
    20e8:	6e a1       	ldd	r22, Y+38	; 0x26
    20ea:	7f a1       	ldd	r23, Y+39	; 0x27
    20ec:	88 a5       	ldd	r24, Y+40	; 0x28
    20ee:	99 a5       	ldd	r25, Y+41	; 0x29
    20f0:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	8e 01       	movw	r16, r28
    20fa:	04 55       	subi	r16, 0x54	; 84
    20fc:	1f 4f       	sbci	r17, 0xFF	; 255
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	f8 01       	movw	r30, r16
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
    2110:	24 c0       	rjmp	.+72     	; 0x215a <main+0xdfa>
    2112:	ce 01       	movw	r24, r28
    2114:	82 55       	subi	r24, 0x52	; 82
    2116:	9f 4f       	sbci	r25, 0xFF	; 255
    2118:	29 e1       	ldi	r18, 0x19	; 25
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	fc 01       	movw	r30, r24
    211e:	31 83       	std	Z+1, r19	; 0x01
    2120:	20 83       	st	Z, r18
    2122:	ce 01       	movw	r24, r28
    2124:	82 55       	subi	r24, 0x52	; 82
    2126:	9f 4f       	sbci	r25, 0xFF	; 255
    2128:	fc 01       	movw	r30, r24
    212a:	80 81       	ld	r24, Z
    212c:	91 81       	ldd	r25, Z+1	; 0x01
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <main+0xdce>
    2132:	9e 01       	movw	r18, r28
    2134:	22 55       	subi	r18, 0x52	; 82
    2136:	3f 4f       	sbci	r19, 0xFF	; 255
    2138:	f9 01       	movw	r30, r18
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213e:	ce 01       	movw	r24, r28
    2140:	84 55       	subi	r24, 0x54	; 84
    2142:	9f 4f       	sbci	r25, 0xFF	; 255
    2144:	9e 01       	movw	r18, r28
    2146:	24 55       	subi	r18, 0x54	; 84
    2148:	3f 4f       	sbci	r19, 0xFF	; 255
    214a:	f9 01       	movw	r30, r18
    214c:	20 81       	ld	r18, Z
    214e:	31 81       	ldd	r19, Z+1	; 0x01
    2150:	21 50       	subi	r18, 0x01	; 1
    2152:	31 09       	sbc	r19, r1
    2154:	fc 01       	movw	r30, r24
    2156:	31 83       	std	Z+1, r19	; 0x01
    2158:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215a:	ce 01       	movw	r24, r28
    215c:	84 55       	subi	r24, 0x54	; 84
    215e:	9f 4f       	sbci	r25, 0xFF	; 255
    2160:	fc 01       	movw	r30, r24
    2162:	80 81       	ld	r24, Z
    2164:	91 81       	ldd	r25, Z+1	; 0x01
    2166:	89 2b       	or	r24, r25
    2168:	a1 f6       	brne	.-88     	; 0x2112 <main+0xdb2>
    216a:	2c c0       	rjmp	.+88     	; 0x21c4 <main+0xe64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216c:	8e 01       	movw	r16, r28
    216e:	04 55       	subi	r16, 0x54	; 84
    2170:	1f 4f       	sbci	r17, 0xFF	; 255
    2172:	ce 01       	movw	r24, r28
    2174:	88 55       	subi	r24, 0x58	; 88
    2176:	9f 4f       	sbci	r25, 0xFF	; 255
    2178:	fc 01       	movw	r30, r24
    217a:	60 81       	ld	r22, Z
    217c:	71 81       	ldd	r23, Z+1	; 0x01
    217e:	82 81       	ldd	r24, Z+2	; 0x02
    2180:	93 81       	ldd	r25, Z+3	; 0x03
    2182:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	f8 01       	movw	r30, r16
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	80 83       	st	Z, r24
    2190:	ce 01       	movw	r24, r28
    2192:	80 55       	subi	r24, 0x50	; 80
    2194:	9f 4f       	sbci	r25, 0xFF	; 255
    2196:	9e 01       	movw	r18, r28
    2198:	24 55       	subi	r18, 0x54	; 84
    219a:	3f 4f       	sbci	r19, 0xFF	; 255
    219c:	f9 01       	movw	r30, r18
    219e:	20 81       	ld	r18, Z
    21a0:	31 81       	ldd	r19, Z+1	; 0x01
    21a2:	fc 01       	movw	r30, r24
    21a4:	31 83       	std	Z+1, r19	; 0x01
    21a6:	20 83       	st	Z, r18
    21a8:	ce 01       	movw	r24, r28
    21aa:	80 55       	subi	r24, 0x50	; 80
    21ac:	9f 4f       	sbci	r25, 0xFF	; 255
    21ae:	fc 01       	movw	r30, r24
    21b0:	80 81       	ld	r24, Z
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <main+0xe54>
    21b8:	9e 01       	movw	r18, r28
    21ba:	20 55       	subi	r18, 0x50	; 80
    21bc:	3f 4f       	sbci	r19, 0xFF	; 255
    21be:	f9 01       	movw	r30, r18
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(ONE);
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
			BCDSevegments_enable(TWO);
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
			BCDSevegments_enable(THREE);
    21d0:	83 e0       	ldi	r24, 0x03	; 3
    21d2:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
			BCDSevegments_enable(FOUR);
    21d6:	84 e0       	ldi	r24, 0x04	; 4
    21d8:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
			BCDSevegments_displayNo(FIVE);
    21dc:	85 e0       	ldi	r24, 0x05	; 5
    21de:	0e 94 a0 00 	call	0x140	; 0x140 <BCDSevegments_displayNo>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	a8 e4       	ldi	r26, 0x48	; 72
    21e8:	b2 e4       	ldi	r27, 0x42	; 66
    21ea:	8a 8f       	std	Y+26, r24	; 0x1a
    21ec:	9b 8f       	std	Y+27, r25	; 0x1b
    21ee:	ac 8f       	std	Y+28, r26	; 0x1c
    21f0:	bd 8f       	std	Y+29, r27	; 0x1d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    21f2:	8e 01       	movw	r16, r28
    21f4:	02 56       	subi	r16, 0x62	; 98
    21f6:	1f 4f       	sbci	r17, 0xFF	; 255
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	4a e7       	ldi	r20, 0x7A	; 122
    21fe:	53 e4       	ldi	r21, 0x43	; 67
    2200:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2202:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2204:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2206:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2208:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	f8 01       	movw	r30, r16
    2212:	80 83       	st	Z, r24
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	a2 83       	std	Z+2, r26	; 0x02
    2218:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    221a:	ce 01       	movw	r24, r28
    221c:	82 56       	subi	r24, 0x62	; 98
    221e:	9f 4f       	sbci	r25, 0xFF	; 255
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e8       	ldi	r20, 0x80	; 128
    2226:	5f e3       	ldi	r21, 0x3F	; 63
    2228:	fc 01       	movw	r30, r24
    222a:	60 81       	ld	r22, Z
    222c:	71 81       	ldd	r23, Z+1	; 0x01
    222e:	82 81       	ldd	r24, Z+2	; 0x02
    2230:	93 81       	ldd	r25, Z+3	; 0x03
    2232:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    2236:	88 23       	and	r24, r24
    2238:	4c f4       	brge	.+18     	; 0x224c <main+0xeec>
		__ticks = 1;
    223a:	ce 01       	movw	r24, r28
    223c:	8e 55       	subi	r24, 0x5E	; 94
    223e:	9f 4f       	sbci	r25, 0xFF	; 255
    2240:	21 e0       	ldi	r18, 0x01	; 1
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	fc 01       	movw	r30, r24
    2246:	31 83       	std	Z+1, r19	; 0x01
    2248:	20 83       	st	Z, r18
    224a:	69 c0       	rjmp	.+210    	; 0x231e <main+0xfbe>
	else if (__tmp > 65535)
    224c:	ce 01       	movw	r24, r28
    224e:	82 56       	subi	r24, 0x62	; 98
    2250:	9f 4f       	sbci	r25, 0xFF	; 255
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	3f ef       	ldi	r19, 0xFF	; 255
    2256:	4f e7       	ldi	r20, 0x7F	; 127
    2258:	57 e4       	ldi	r21, 0x47	; 71
    225a:	fc 01       	movw	r30, r24
    225c:	60 81       	ld	r22, Z
    225e:	71 81       	ldd	r23, Z+1	; 0x01
    2260:	82 81       	ldd	r24, Z+2	; 0x02
    2262:	93 81       	ldd	r25, Z+3	; 0x03
    2264:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    2268:	18 16       	cp	r1, r24
    226a:	0c f0       	brlt	.+2      	; 0x226e <main+0xf0e>
    226c:	46 c0       	rjmp	.+140    	; 0x22fa <main+0xf9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e2       	ldi	r20, 0x20	; 32
    2274:	51 e4       	ldi	r21, 0x41	; 65
    2276:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2278:	7b 8d       	ldd	r23, Y+27	; 0x1b
    227a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    227c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    227e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	8e 01       	movw	r16, r28
    2288:	0e 55       	subi	r16, 0x5E	; 94
    228a:	1f 4f       	sbci	r17, 0xFF	; 255
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	f8 01       	movw	r30, r16
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
    229e:	24 c0       	rjmp	.+72     	; 0x22e8 <main+0xf88>
    22a0:	ce 01       	movw	r24, r28
    22a2:	8c 55       	subi	r24, 0x5C	; 92
    22a4:	9f 4f       	sbci	r25, 0xFF	; 255
    22a6:	29 e1       	ldi	r18, 0x19	; 25
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	fc 01       	movw	r30, r24
    22ac:	31 83       	std	Z+1, r19	; 0x01
    22ae:	20 83       	st	Z, r18
    22b0:	ce 01       	movw	r24, r28
    22b2:	8c 55       	subi	r24, 0x5C	; 92
    22b4:	9f 4f       	sbci	r25, 0xFF	; 255
    22b6:	fc 01       	movw	r30, r24
    22b8:	80 81       	ld	r24, Z
    22ba:	91 81       	ldd	r25, Z+1	; 0x01
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <main+0xf5c>
    22c0:	9e 01       	movw	r18, r28
    22c2:	2c 55       	subi	r18, 0x5C	; 92
    22c4:	3f 4f       	sbci	r19, 0xFF	; 255
    22c6:	f9 01       	movw	r30, r18
    22c8:	91 83       	std	Z+1, r25	; 0x01
    22ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22cc:	ce 01       	movw	r24, r28
    22ce:	8e 55       	subi	r24, 0x5E	; 94
    22d0:	9f 4f       	sbci	r25, 0xFF	; 255
    22d2:	9e 01       	movw	r18, r28
    22d4:	2e 55       	subi	r18, 0x5E	; 94
    22d6:	3f 4f       	sbci	r19, 0xFF	; 255
    22d8:	f9 01       	movw	r30, r18
    22da:	20 81       	ld	r18, Z
    22dc:	31 81       	ldd	r19, Z+1	; 0x01
    22de:	21 50       	subi	r18, 0x01	; 1
    22e0:	31 09       	sbc	r19, r1
    22e2:	fc 01       	movw	r30, r24
    22e4:	31 83       	std	Z+1, r19	; 0x01
    22e6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e8:	ce 01       	movw	r24, r28
    22ea:	8e 55       	subi	r24, 0x5E	; 94
    22ec:	9f 4f       	sbci	r25, 0xFF	; 255
    22ee:	fc 01       	movw	r30, r24
    22f0:	80 81       	ld	r24, Z
    22f2:	91 81       	ldd	r25, Z+1	; 0x01
    22f4:	89 2b       	or	r24, r25
    22f6:	a1 f6       	brne	.-88     	; 0x22a0 <main+0xf40>
    22f8:	2c c0       	rjmp	.+88     	; 0x2352 <main+0xff2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fa:	8e 01       	movw	r16, r28
    22fc:	0e 55       	subi	r16, 0x5E	; 94
    22fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2300:	ce 01       	movw	r24, r28
    2302:	82 56       	subi	r24, 0x62	; 98
    2304:	9f 4f       	sbci	r25, 0xFF	; 255
    2306:	fc 01       	movw	r30, r24
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	f8 01       	movw	r30, r16
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	80 83       	st	Z, r24
    231e:	ce 01       	movw	r24, r28
    2320:	8a 55       	subi	r24, 0x5A	; 90
    2322:	9f 4f       	sbci	r25, 0xFF	; 255
    2324:	9e 01       	movw	r18, r28
    2326:	2e 55       	subi	r18, 0x5E	; 94
    2328:	3f 4f       	sbci	r19, 0xFF	; 255
    232a:	f9 01       	movw	r30, r18
    232c:	20 81       	ld	r18, Z
    232e:	31 81       	ldd	r19, Z+1	; 0x01
    2330:	fc 01       	movw	r30, r24
    2332:	31 83       	std	Z+1, r19	; 0x01
    2334:	20 83       	st	Z, r18
    2336:	ce 01       	movw	r24, r28
    2338:	8a 55       	subi	r24, 0x5A	; 90
    233a:	9f 4f       	sbci	r25, 0xFF	; 255
    233c:	fc 01       	movw	r30, r24
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <main+0xfe2>
    2346:	9e 01       	movw	r18, r28
    2348:	2a 55       	subi	r18, 0x5A	; 90
    234a:	3f 4f       	sbci	r19, 0xFF	; 255
    234c:	f9 01       	movw	r30, r18
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	80 83       	st	Z, r24
			_delay_ms(50);
			LCD_displayString(strr[key]);
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	88 2f       	mov	r24, r24
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	9e 01       	movw	r18, r28
    235a:	24 5f       	subi	r18, 0xF4	; 244
    235c:	3e 4f       	sbci	r19, 0xFE	; 254
    235e:	82 0f       	add	r24, r18
    2360:	93 1f       	adc	r25, r19
    2362:	fc 01       	movw	r30, r24
    2364:	80 81       	ld	r24, Z
    2366:	88 2f       	mov	r24, r24
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_displayString>
		}
			if(key == 6)
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	86 30       	cpi	r24, 0x06	; 6
    2372:	09 f0       	breq	.+2      	; 0x2376 <main+0x1016>
    2374:	8d c1       	rjmp	.+794    	; 0x2690 <main+0x1330>
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	a8 e4       	ldi	r26, 0x48	; 72
    237c:	b2 e4       	ldi	r27, 0x42	; 66
    237e:	8e a7       	std	Y+46, r24	; 0x2e
    2380:	9f a7       	std	Y+47, r25	; 0x2f
    2382:	a8 ab       	std	Y+48, r26	; 0x30
    2384:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2386:	8e 01       	movw	r16, r28
    2388:	04 54       	subi	r16, 0x44	; 68
    238a:	1f 4f       	sbci	r17, 0xFF	; 255
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	4a e7       	ldi	r20, 0x7A	; 122
    2392:	53 e4       	ldi	r21, 0x43	; 67
    2394:	6e a5       	ldd	r22, Y+46	; 0x2e
    2396:	7f a5       	ldd	r23, Y+47	; 0x2f
    2398:	88 a9       	ldd	r24, Y+48	; 0x30
    239a:	99 a9       	ldd	r25, Y+49	; 0x31
    239c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	f8 01       	movw	r30, r16
    23a6:	80 83       	st	Z, r24
    23a8:	91 83       	std	Z+1, r25	; 0x01
    23aa:	a2 83       	std	Z+2, r26	; 0x02
    23ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ae:	ce 01       	movw	r24, r28
    23b0:	84 54       	subi	r24, 0x44	; 68
    23b2:	9f 4f       	sbci	r25, 0xFF	; 255
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e8       	ldi	r20, 0x80	; 128
    23ba:	5f e3       	ldi	r21, 0x3F	; 63
    23bc:	fc 01       	movw	r30, r24
    23be:	60 81       	ld	r22, Z
    23c0:	71 81       	ldd	r23, Z+1	; 0x01
    23c2:	82 81       	ldd	r24, Z+2	; 0x02
    23c4:	93 81       	ldd	r25, Z+3	; 0x03
    23c6:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    23ca:	88 23       	and	r24, r24
    23cc:	4c f4       	brge	.+18     	; 0x23e0 <main+0x1080>
		__ticks = 1;
    23ce:	ce 01       	movw	r24, r28
    23d0:	80 54       	subi	r24, 0x40	; 64
    23d2:	9f 4f       	sbci	r25, 0xFF	; 255
    23d4:	21 e0       	ldi	r18, 0x01	; 1
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	fc 01       	movw	r30, r24
    23da:	31 83       	std	Z+1, r19	; 0x01
    23dc:	20 83       	st	Z, r18
    23de:	69 c0       	rjmp	.+210    	; 0x24b2 <main+0x1152>
	else if (__tmp > 65535)
    23e0:	ce 01       	movw	r24, r28
    23e2:	84 54       	subi	r24, 0x44	; 68
    23e4:	9f 4f       	sbci	r25, 0xFF	; 255
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	fc 01       	movw	r30, r24
    23f0:	60 81       	ld	r22, Z
    23f2:	71 81       	ldd	r23, Z+1	; 0x01
    23f4:	82 81       	ldd	r24, Z+2	; 0x02
    23f6:	93 81       	ldd	r25, Z+3	; 0x03
    23f8:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    23fc:	18 16       	cp	r1, r24
    23fe:	0c f0       	brlt	.+2      	; 0x2402 <main+0x10a2>
    2400:	46 c0       	rjmp	.+140    	; 0x248e <main+0x112e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e2       	ldi	r20, 0x20	; 32
    2408:	51 e4       	ldi	r21, 0x41	; 65
    240a:	6e a5       	ldd	r22, Y+46	; 0x2e
    240c:	7f a5       	ldd	r23, Y+47	; 0x2f
    240e:	88 a9       	ldd	r24, Y+48	; 0x30
    2410:	99 a9       	ldd	r25, Y+49	; 0x31
    2412:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	8e 01       	movw	r16, r28
    241c:	00 54       	subi	r16, 0x40	; 64
    241e:	1f 4f       	sbci	r17, 0xFF	; 255
    2420:	bc 01       	movw	r22, r24
    2422:	cd 01       	movw	r24, r26
    2424:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	f8 01       	movw	r30, r16
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	80 83       	st	Z, r24
    2432:	24 c0       	rjmp	.+72     	; 0x247c <main+0x111c>
    2434:	ce 01       	movw	r24, r28
    2436:	8e 53       	subi	r24, 0x3E	; 62
    2438:	9f 4f       	sbci	r25, 0xFF	; 255
    243a:	29 e1       	ldi	r18, 0x19	; 25
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	fc 01       	movw	r30, r24
    2440:	31 83       	std	Z+1, r19	; 0x01
    2442:	20 83       	st	Z, r18
    2444:	ce 01       	movw	r24, r28
    2446:	8e 53       	subi	r24, 0x3E	; 62
    2448:	9f 4f       	sbci	r25, 0xFF	; 255
    244a:	fc 01       	movw	r30, r24
    244c:	80 81       	ld	r24, Z
    244e:	91 81       	ldd	r25, Z+1	; 0x01
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <main+0x10f0>
    2454:	9e 01       	movw	r18, r28
    2456:	2e 53       	subi	r18, 0x3E	; 62
    2458:	3f 4f       	sbci	r19, 0xFF	; 255
    245a:	f9 01       	movw	r30, r18
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2460:	ce 01       	movw	r24, r28
    2462:	80 54       	subi	r24, 0x40	; 64
    2464:	9f 4f       	sbci	r25, 0xFF	; 255
    2466:	9e 01       	movw	r18, r28
    2468:	20 54       	subi	r18, 0x40	; 64
    246a:	3f 4f       	sbci	r19, 0xFF	; 255
    246c:	f9 01       	movw	r30, r18
    246e:	20 81       	ld	r18, Z
    2470:	31 81       	ldd	r19, Z+1	; 0x01
    2472:	21 50       	subi	r18, 0x01	; 1
    2474:	31 09       	sbc	r19, r1
    2476:	fc 01       	movw	r30, r24
    2478:	31 83       	std	Z+1, r19	; 0x01
    247a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	ce 01       	movw	r24, r28
    247e:	80 54       	subi	r24, 0x40	; 64
    2480:	9f 4f       	sbci	r25, 0xFF	; 255
    2482:	fc 01       	movw	r30, r24
    2484:	80 81       	ld	r24, Z
    2486:	91 81       	ldd	r25, Z+1	; 0x01
    2488:	89 2b       	or	r24, r25
    248a:	a1 f6       	brne	.-88     	; 0x2434 <main+0x10d4>
    248c:	2c c0       	rjmp	.+88     	; 0x24e6 <main+0x1186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248e:	8e 01       	movw	r16, r28
    2490:	00 54       	subi	r16, 0x40	; 64
    2492:	1f 4f       	sbci	r17, 0xFF	; 255
    2494:	ce 01       	movw	r24, r28
    2496:	84 54       	subi	r24, 0x44	; 68
    2498:	9f 4f       	sbci	r25, 0xFF	; 255
    249a:	fc 01       	movw	r30, r24
    249c:	60 81       	ld	r22, Z
    249e:	71 81       	ldd	r23, Z+1	; 0x01
    24a0:	82 81       	ldd	r24, Z+2	; 0x02
    24a2:	93 81       	ldd	r25, Z+3	; 0x03
    24a4:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	f8 01       	movw	r30, r16
    24ae:	91 83       	std	Z+1, r25	; 0x01
    24b0:	80 83       	st	Z, r24
    24b2:	ce 01       	movw	r24, r28
    24b4:	8c 53       	subi	r24, 0x3C	; 60
    24b6:	9f 4f       	sbci	r25, 0xFF	; 255
    24b8:	9e 01       	movw	r18, r28
    24ba:	20 54       	subi	r18, 0x40	; 64
    24bc:	3f 4f       	sbci	r19, 0xFF	; 255
    24be:	f9 01       	movw	r30, r18
    24c0:	20 81       	ld	r18, Z
    24c2:	31 81       	ldd	r19, Z+1	; 0x01
    24c4:	fc 01       	movw	r30, r24
    24c6:	31 83       	std	Z+1, r19	; 0x01
    24c8:	20 83       	st	Z, r18
    24ca:	ce 01       	movw	r24, r28
    24cc:	8c 53       	subi	r24, 0x3C	; 60
    24ce:	9f 4f       	sbci	r25, 0xFF	; 255
    24d0:	fc 01       	movw	r30, r24
    24d2:	80 81       	ld	r24, Z
    24d4:	91 81       	ldd	r25, Z+1	; 0x01
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <main+0x1176>
    24da:	9e 01       	movw	r18, r28
    24dc:	2c 53       	subi	r18, 0x3C	; 60
    24de:	3f 4f       	sbci	r19, 0xFF	; 255
    24e0:	f9 01       	movw	r30, r18
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    24f2:	83 e0       	ldi	r24, 0x03	; 3
    24f4:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    24f8:	84 e0       	ldi	r24, 0x04	; 4
    24fa:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_displayNo(SIX);
    24fe:	86 e0       	ldi	r24, 0x06	; 6
    2500:	0e 94 a0 00 	call	0x140	; 0x140 <BCDSevegments_displayNo>
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	a8 e4       	ldi	r26, 0x48	; 72
    250a:	b2 e4       	ldi	r27, 0x42	; 66
    250c:	8a a3       	std	Y+34, r24	; 0x22
    250e:	9b a3       	std	Y+35, r25	; 0x23
    2510:	ac a3       	std	Y+36, r26	; 0x24
    2512:	bd a3       	std	Y+37, r27	; 0x25

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2514:	8e 01       	movw	r16, r28
    2516:	0e 54       	subi	r16, 0x4E	; 78
    2518:	1f 4f       	sbci	r17, 0xFF	; 255
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	4a e7       	ldi	r20, 0x7A	; 122
    2520:	53 e4       	ldi	r21, 0x43	; 67
    2522:	6a a1       	ldd	r22, Y+34	; 0x22
    2524:	7b a1       	ldd	r23, Y+35	; 0x23
    2526:	8c a1       	ldd	r24, Y+36	; 0x24
    2528:	9d a1       	ldd	r25, Y+37	; 0x25
    252a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	f8 01       	movw	r30, r16
    2534:	80 83       	st	Z, r24
    2536:	91 83       	std	Z+1, r25	; 0x01
    2538:	a2 83       	std	Z+2, r26	; 0x02
    253a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    253c:	ce 01       	movw	r24, r28
    253e:	8e 54       	subi	r24, 0x4E	; 78
    2540:	9f 4f       	sbci	r25, 0xFF	; 255
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e8       	ldi	r20, 0x80	; 128
    2548:	5f e3       	ldi	r21, 0x3F	; 63
    254a:	fc 01       	movw	r30, r24
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    2558:	88 23       	and	r24, r24
    255a:	4c f4       	brge	.+18     	; 0x256e <main+0x120e>
		__ticks = 1;
    255c:	ce 01       	movw	r24, r28
    255e:	8a 54       	subi	r24, 0x4A	; 74
    2560:	9f 4f       	sbci	r25, 0xFF	; 255
    2562:	21 e0       	ldi	r18, 0x01	; 1
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	fc 01       	movw	r30, r24
    2568:	31 83       	std	Z+1, r19	; 0x01
    256a:	20 83       	st	Z, r18
    256c:	69 c0       	rjmp	.+210    	; 0x2640 <main+0x12e0>
	else if (__tmp > 65535)
    256e:	ce 01       	movw	r24, r28
    2570:	8e 54       	subi	r24, 0x4E	; 78
    2572:	9f 4f       	sbci	r25, 0xFF	; 255
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	3f ef       	ldi	r19, 0xFF	; 255
    2578:	4f e7       	ldi	r20, 0x7F	; 127
    257a:	57 e4       	ldi	r21, 0x47	; 71
    257c:	fc 01       	movw	r30, r24
    257e:	60 81       	ld	r22, Z
    2580:	71 81       	ldd	r23, Z+1	; 0x01
    2582:	82 81       	ldd	r24, Z+2	; 0x02
    2584:	93 81       	ldd	r25, Z+3	; 0x03
    2586:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    258a:	18 16       	cp	r1, r24
    258c:	0c f0       	brlt	.+2      	; 0x2590 <main+0x1230>
    258e:	46 c0       	rjmp	.+140    	; 0x261c <main+0x12bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e2       	ldi	r20, 0x20	; 32
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	6a a1       	ldd	r22, Y+34	; 0x22
    259a:	7b a1       	ldd	r23, Y+35	; 0x23
    259c:	8c a1       	ldd	r24, Y+36	; 0x24
    259e:	9d a1       	ldd	r25, Y+37	; 0x25
    25a0:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	8e 01       	movw	r16, r28
    25aa:	0a 54       	subi	r16, 0x4A	; 74
    25ac:	1f 4f       	sbci	r17, 0xFF	; 255
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	f8 01       	movw	r30, r16
    25bc:	91 83       	std	Z+1, r25	; 0x01
    25be:	80 83       	st	Z, r24
    25c0:	24 c0       	rjmp	.+72     	; 0x260a <main+0x12aa>
    25c2:	ce 01       	movw	r24, r28
    25c4:	88 54       	subi	r24, 0x48	; 72
    25c6:	9f 4f       	sbci	r25, 0xFF	; 255
    25c8:	29 e1       	ldi	r18, 0x19	; 25
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	fc 01       	movw	r30, r24
    25ce:	31 83       	std	Z+1, r19	; 0x01
    25d0:	20 83       	st	Z, r18
    25d2:	ce 01       	movw	r24, r28
    25d4:	88 54       	subi	r24, 0x48	; 72
    25d6:	9f 4f       	sbci	r25, 0xFF	; 255
    25d8:	fc 01       	movw	r30, r24
    25da:	80 81       	ld	r24, Z
    25dc:	91 81       	ldd	r25, Z+1	; 0x01
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <main+0x127e>
    25e2:	9e 01       	movw	r18, r28
    25e4:	28 54       	subi	r18, 0x48	; 72
    25e6:	3f 4f       	sbci	r19, 0xFF	; 255
    25e8:	f9 01       	movw	r30, r18
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ee:	ce 01       	movw	r24, r28
    25f0:	8a 54       	subi	r24, 0x4A	; 74
    25f2:	9f 4f       	sbci	r25, 0xFF	; 255
    25f4:	9e 01       	movw	r18, r28
    25f6:	2a 54       	subi	r18, 0x4A	; 74
    25f8:	3f 4f       	sbci	r19, 0xFF	; 255
    25fa:	f9 01       	movw	r30, r18
    25fc:	20 81       	ld	r18, Z
    25fe:	31 81       	ldd	r19, Z+1	; 0x01
    2600:	21 50       	subi	r18, 0x01	; 1
    2602:	31 09       	sbc	r19, r1
    2604:	fc 01       	movw	r30, r24
    2606:	31 83       	std	Z+1, r19	; 0x01
    2608:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260a:	ce 01       	movw	r24, r28
    260c:	8a 54       	subi	r24, 0x4A	; 74
    260e:	9f 4f       	sbci	r25, 0xFF	; 255
    2610:	fc 01       	movw	r30, r24
    2612:	80 81       	ld	r24, Z
    2614:	91 81       	ldd	r25, Z+1	; 0x01
    2616:	89 2b       	or	r24, r25
    2618:	a1 f6       	brne	.-88     	; 0x25c2 <main+0x1262>
    261a:	2c c0       	rjmp	.+88     	; 0x2674 <main+0x1314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261c:	8e 01       	movw	r16, r28
    261e:	0a 54       	subi	r16, 0x4A	; 74
    2620:	1f 4f       	sbci	r17, 0xFF	; 255
    2622:	ce 01       	movw	r24, r28
    2624:	8e 54       	subi	r24, 0x4E	; 78
    2626:	9f 4f       	sbci	r25, 0xFF	; 255
    2628:	fc 01       	movw	r30, r24
    262a:	60 81       	ld	r22, Z
    262c:	71 81       	ldd	r23, Z+1	; 0x01
    262e:	82 81       	ldd	r24, Z+2	; 0x02
    2630:	93 81       	ldd	r25, Z+3	; 0x03
    2632:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	f8 01       	movw	r30, r16
    263c:	91 83       	std	Z+1, r25	; 0x01
    263e:	80 83       	st	Z, r24
    2640:	ce 01       	movw	r24, r28
    2642:	86 54       	subi	r24, 0x46	; 70
    2644:	9f 4f       	sbci	r25, 0xFF	; 255
    2646:	9e 01       	movw	r18, r28
    2648:	2a 54       	subi	r18, 0x4A	; 74
    264a:	3f 4f       	sbci	r19, 0xFF	; 255
    264c:	f9 01       	movw	r30, r18
    264e:	20 81       	ld	r18, Z
    2650:	31 81       	ldd	r19, Z+1	; 0x01
    2652:	fc 01       	movw	r30, r24
    2654:	31 83       	std	Z+1, r19	; 0x01
    2656:	20 83       	st	Z, r18
    2658:	ce 01       	movw	r24, r28
    265a:	86 54       	subi	r24, 0x46	; 70
    265c:	9f 4f       	sbci	r25, 0xFF	; 255
    265e:	fc 01       	movw	r30, r24
    2660:	80 81       	ld	r24, Z
    2662:	91 81       	ldd	r25, Z+1	; 0x01
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <main+0x1304>
    2668:	9e 01       	movw	r18, r28
    266a:	26 54       	subi	r18, 0x46	; 70
    266c:	3f 4f       	sbci	r19, 0xFF	; 255
    266e:	f9 01       	movw	r30, r18
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	80 83       	st	Z, r24
				_delay_ms(50);
				LCD_displayString(strr[key]);
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	88 2f       	mov	r24, r24
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	9e 01       	movw	r18, r28
    267c:	24 5f       	subi	r18, 0xF4	; 244
    267e:	3e 4f       	sbci	r19, 0xFE	; 254
    2680:	82 0f       	add	r24, r18
    2682:	93 1f       	adc	r25, r19
    2684:	fc 01       	movw	r30, r24
    2686:	80 81       	ld	r24, Z
    2688:	88 2f       	mov	r24, r24
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_displayString>
			}
			if(key == 7)
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	87 30       	cpi	r24, 0x07	; 7
    2694:	09 f0       	breq	.+2      	; 0x2698 <main+0x1338>
    2696:	8d c1       	rjmp	.+794    	; 0x29b2 <main+0x1652>
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	a8 e4       	ldi	r26, 0x48	; 72
    269e:	b2 e4       	ldi	r27, 0x42	; 66
    26a0:	8e ab       	std	Y+54, r24	; 0x36
    26a2:	9f ab       	std	Y+55, r25	; 0x37
    26a4:	a8 af       	std	Y+56, r26	; 0x38
    26a6:	b9 af       	std	Y+57, r27	; 0x39

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    26a8:	8e 01       	movw	r16, r28
    26aa:	00 53       	subi	r16, 0x30	; 48
    26ac:	1f 4f       	sbci	r17, 0xFF	; 255
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	4a e7       	ldi	r20, 0x7A	; 122
    26b4:	53 e4       	ldi	r21, 0x43	; 67
    26b6:	6e a9       	ldd	r22, Y+54	; 0x36
    26b8:	7f a9       	ldd	r23, Y+55	; 0x37
    26ba:	88 ad       	ldd	r24, Y+56	; 0x38
    26bc:	99 ad       	ldd	r25, Y+57	; 0x39
    26be:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	f8 01       	movw	r30, r16
    26c8:	80 83       	st	Z, r24
    26ca:	91 83       	std	Z+1, r25	; 0x01
    26cc:	a2 83       	std	Z+2, r26	; 0x02
    26ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26d0:	ce 01       	movw	r24, r28
    26d2:	80 53       	subi	r24, 0x30	; 48
    26d4:	9f 4f       	sbci	r25, 0xFF	; 255
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e8       	ldi	r20, 0x80	; 128
    26dc:	5f e3       	ldi	r21, 0x3F	; 63
    26de:	fc 01       	movw	r30, r24
    26e0:	60 81       	ld	r22, Z
    26e2:	71 81       	ldd	r23, Z+1	; 0x01
    26e4:	82 81       	ldd	r24, Z+2	; 0x02
    26e6:	93 81       	ldd	r25, Z+3	; 0x03
    26e8:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    26ec:	88 23       	and	r24, r24
    26ee:	4c f4       	brge	.+18     	; 0x2702 <main+0x13a2>
		__ticks = 1;
    26f0:	ce 01       	movw	r24, r28
    26f2:	8c 52       	subi	r24, 0x2C	; 44
    26f4:	9f 4f       	sbci	r25, 0xFF	; 255
    26f6:	21 e0       	ldi	r18, 0x01	; 1
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	fc 01       	movw	r30, r24
    26fc:	31 83       	std	Z+1, r19	; 0x01
    26fe:	20 83       	st	Z, r18
    2700:	69 c0       	rjmp	.+210    	; 0x27d4 <main+0x1474>
	else if (__tmp > 65535)
    2702:	ce 01       	movw	r24, r28
    2704:	80 53       	subi	r24, 0x30	; 48
    2706:	9f 4f       	sbci	r25, 0xFF	; 255
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	3f ef       	ldi	r19, 0xFF	; 255
    270c:	4f e7       	ldi	r20, 0x7F	; 127
    270e:	57 e4       	ldi	r21, 0x47	; 71
    2710:	fc 01       	movw	r30, r24
    2712:	60 81       	ld	r22, Z
    2714:	71 81       	ldd	r23, Z+1	; 0x01
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	93 81       	ldd	r25, Z+3	; 0x03
    271a:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    271e:	18 16       	cp	r1, r24
    2720:	0c f0       	brlt	.+2      	; 0x2724 <main+0x13c4>
    2722:	46 c0       	rjmp	.+140    	; 0x27b0 <main+0x1450>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e2       	ldi	r20, 0x20	; 32
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	6e a9       	ldd	r22, Y+54	; 0x36
    272e:	7f a9       	ldd	r23, Y+55	; 0x37
    2730:	88 ad       	ldd	r24, Y+56	; 0x38
    2732:	99 ad       	ldd	r25, Y+57	; 0x39
    2734:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	8e 01       	movw	r16, r28
    273e:	0c 52       	subi	r16, 0x2C	; 44
    2740:	1f 4f       	sbci	r17, 0xFF	; 255
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	f8 01       	movw	r30, r16
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	80 83       	st	Z, r24
    2754:	24 c0       	rjmp	.+72     	; 0x279e <main+0x143e>
    2756:	ce 01       	movw	r24, r28
    2758:	8a 52       	subi	r24, 0x2A	; 42
    275a:	9f 4f       	sbci	r25, 0xFF	; 255
    275c:	29 e1       	ldi	r18, 0x19	; 25
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	fc 01       	movw	r30, r24
    2762:	31 83       	std	Z+1, r19	; 0x01
    2764:	20 83       	st	Z, r18
    2766:	ce 01       	movw	r24, r28
    2768:	8a 52       	subi	r24, 0x2A	; 42
    276a:	9f 4f       	sbci	r25, 0xFF	; 255
    276c:	fc 01       	movw	r30, r24
    276e:	80 81       	ld	r24, Z
    2770:	91 81       	ldd	r25, Z+1	; 0x01
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	f1 f7       	brne	.-4      	; 0x2772 <main+0x1412>
    2776:	9e 01       	movw	r18, r28
    2778:	2a 52       	subi	r18, 0x2A	; 42
    277a:	3f 4f       	sbci	r19, 0xFF	; 255
    277c:	f9 01       	movw	r30, r18
    277e:	91 83       	std	Z+1, r25	; 0x01
    2780:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2782:	ce 01       	movw	r24, r28
    2784:	8c 52       	subi	r24, 0x2C	; 44
    2786:	9f 4f       	sbci	r25, 0xFF	; 255
    2788:	9e 01       	movw	r18, r28
    278a:	2c 52       	subi	r18, 0x2C	; 44
    278c:	3f 4f       	sbci	r19, 0xFF	; 255
    278e:	f9 01       	movw	r30, r18
    2790:	20 81       	ld	r18, Z
    2792:	31 81       	ldd	r19, Z+1	; 0x01
    2794:	21 50       	subi	r18, 0x01	; 1
    2796:	31 09       	sbc	r19, r1
    2798:	fc 01       	movw	r30, r24
    279a:	31 83       	std	Z+1, r19	; 0x01
    279c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279e:	ce 01       	movw	r24, r28
    27a0:	8c 52       	subi	r24, 0x2C	; 44
    27a2:	9f 4f       	sbci	r25, 0xFF	; 255
    27a4:	fc 01       	movw	r30, r24
    27a6:	80 81       	ld	r24, Z
    27a8:	91 81       	ldd	r25, Z+1	; 0x01
    27aa:	89 2b       	or	r24, r25
    27ac:	a1 f6       	brne	.-88     	; 0x2756 <main+0x13f6>
    27ae:	2c c0       	rjmp	.+88     	; 0x2808 <main+0x14a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b0:	8e 01       	movw	r16, r28
    27b2:	0c 52       	subi	r16, 0x2C	; 44
    27b4:	1f 4f       	sbci	r17, 0xFF	; 255
    27b6:	ce 01       	movw	r24, r28
    27b8:	80 53       	subi	r24, 0x30	; 48
    27ba:	9f 4f       	sbci	r25, 0xFF	; 255
    27bc:	fc 01       	movw	r30, r24
    27be:	60 81       	ld	r22, Z
    27c0:	71 81       	ldd	r23, Z+1	; 0x01
    27c2:	82 81       	ldd	r24, Z+2	; 0x02
    27c4:	93 81       	ldd	r25, Z+3	; 0x03
    27c6:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	f8 01       	movw	r30, r16
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	80 83       	st	Z, r24
    27d4:	ce 01       	movw	r24, r28
    27d6:	88 52       	subi	r24, 0x28	; 40
    27d8:	9f 4f       	sbci	r25, 0xFF	; 255
    27da:	9e 01       	movw	r18, r28
    27dc:	2c 52       	subi	r18, 0x2C	; 44
    27de:	3f 4f       	sbci	r19, 0xFF	; 255
    27e0:	f9 01       	movw	r30, r18
    27e2:	20 81       	ld	r18, Z
    27e4:	31 81       	ldd	r19, Z+1	; 0x01
    27e6:	fc 01       	movw	r30, r24
    27e8:	31 83       	std	Z+1, r19	; 0x01
    27ea:	20 83       	st	Z, r18
    27ec:	ce 01       	movw	r24, r28
    27ee:	88 52       	subi	r24, 0x28	; 40
    27f0:	9f 4f       	sbci	r25, 0xFF	; 255
    27f2:	fc 01       	movw	r30, r24
    27f4:	80 81       	ld	r24, Z
    27f6:	91 81       	ldd	r25, Z+1	; 0x01
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <main+0x1498>
    27fc:	9e 01       	movw	r18, r28
    27fe:	28 52       	subi	r18, 0x28	; 40
    2800:	3f 4f       	sbci	r19, 0xFF	; 255
    2802:	f9 01       	movw	r30, r18
    2804:	91 83       	std	Z+1, r25	; 0x01
    2806:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    280e:	82 e0       	ldi	r24, 0x02	; 2
    2810:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    2814:	83 e0       	ldi	r24, 0x03	; 3
    2816:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    281a:	84 e0       	ldi	r24, 0x04	; 4
    281c:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_displayNo(SEVEN);
    2820:	87 e0       	ldi	r24, 0x07	; 7
    2822:	0e 94 a0 00 	call	0x140	; 0x140 <BCDSevegments_displayNo>
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	a8 e4       	ldi	r26, 0x48	; 72
    282c:	b2 e4       	ldi	r27, 0x42	; 66
    282e:	8a a7       	std	Y+42, r24	; 0x2a
    2830:	9b a7       	std	Y+43, r25	; 0x2b
    2832:	ac a7       	std	Y+44, r26	; 0x2c
    2834:	bd a7       	std	Y+45, r27	; 0x2d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2836:	8e 01       	movw	r16, r28
    2838:	0a 53       	subi	r16, 0x3A	; 58
    283a:	1f 4f       	sbci	r17, 0xFF	; 255
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	4a e7       	ldi	r20, 0x7A	; 122
    2842:	53 e4       	ldi	r21, 0x43	; 67
    2844:	6a a5       	ldd	r22, Y+42	; 0x2a
    2846:	7b a5       	ldd	r23, Y+43	; 0x2b
    2848:	8c a5       	ldd	r24, Y+44	; 0x2c
    284a:	9d a5       	ldd	r25, Y+45	; 0x2d
    284c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	f8 01       	movw	r30, r16
    2856:	80 83       	st	Z, r24
    2858:	91 83       	std	Z+1, r25	; 0x01
    285a:	a2 83       	std	Z+2, r26	; 0x02
    285c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    285e:	ce 01       	movw	r24, r28
    2860:	8a 53       	subi	r24, 0x3A	; 58
    2862:	9f 4f       	sbci	r25, 0xFF	; 255
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e8       	ldi	r20, 0x80	; 128
    286a:	5f e3       	ldi	r21, 0x3F	; 63
    286c:	fc 01       	movw	r30, r24
    286e:	60 81       	ld	r22, Z
    2870:	71 81       	ldd	r23, Z+1	; 0x01
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	93 81       	ldd	r25, Z+3	; 0x03
    2876:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    287a:	88 23       	and	r24, r24
    287c:	4c f4       	brge	.+18     	; 0x2890 <main+0x1530>
		__ticks = 1;
    287e:	ce 01       	movw	r24, r28
    2880:	86 53       	subi	r24, 0x36	; 54
    2882:	9f 4f       	sbci	r25, 0xFF	; 255
    2884:	21 e0       	ldi	r18, 0x01	; 1
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	fc 01       	movw	r30, r24
    288a:	31 83       	std	Z+1, r19	; 0x01
    288c:	20 83       	st	Z, r18
    288e:	69 c0       	rjmp	.+210    	; 0x2962 <main+0x1602>
	else if (__tmp > 65535)
    2890:	ce 01       	movw	r24, r28
    2892:	8a 53       	subi	r24, 0x3A	; 58
    2894:	9f 4f       	sbci	r25, 0xFF	; 255
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	3f ef       	ldi	r19, 0xFF	; 255
    289a:	4f e7       	ldi	r20, 0x7F	; 127
    289c:	57 e4       	ldi	r21, 0x47	; 71
    289e:	fc 01       	movw	r30, r24
    28a0:	60 81       	ld	r22, Z
    28a2:	71 81       	ldd	r23, Z+1	; 0x01
    28a4:	82 81       	ldd	r24, Z+2	; 0x02
    28a6:	93 81       	ldd	r25, Z+3	; 0x03
    28a8:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    28ac:	18 16       	cp	r1, r24
    28ae:	0c f0       	brlt	.+2      	; 0x28b2 <main+0x1552>
    28b0:	46 c0       	rjmp	.+140    	; 0x293e <main+0x15de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e2       	ldi	r20, 0x20	; 32
    28b8:	51 e4       	ldi	r21, 0x41	; 65
    28ba:	6a a5       	ldd	r22, Y+42	; 0x2a
    28bc:	7b a5       	ldd	r23, Y+43	; 0x2b
    28be:	8c a5       	ldd	r24, Y+44	; 0x2c
    28c0:	9d a5       	ldd	r25, Y+45	; 0x2d
    28c2:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	8e 01       	movw	r16, r28
    28cc:	06 53       	subi	r16, 0x36	; 54
    28ce:	1f 4f       	sbci	r17, 0xFF	; 255
    28d0:	bc 01       	movw	r22, r24
    28d2:	cd 01       	movw	r24, r26
    28d4:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	f8 01       	movw	r30, r16
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
    28e2:	24 c0       	rjmp	.+72     	; 0x292c <main+0x15cc>
    28e4:	ce 01       	movw	r24, r28
    28e6:	84 53       	subi	r24, 0x34	; 52
    28e8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ea:	29 e1       	ldi	r18, 0x19	; 25
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	fc 01       	movw	r30, r24
    28f0:	31 83       	std	Z+1, r19	; 0x01
    28f2:	20 83       	st	Z, r18
    28f4:	ce 01       	movw	r24, r28
    28f6:	84 53       	subi	r24, 0x34	; 52
    28f8:	9f 4f       	sbci	r25, 0xFF	; 255
    28fa:	fc 01       	movw	r30, r24
    28fc:	80 81       	ld	r24, Z
    28fe:	91 81       	ldd	r25, Z+1	; 0x01
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <main+0x15a0>
    2904:	9e 01       	movw	r18, r28
    2906:	24 53       	subi	r18, 0x34	; 52
    2908:	3f 4f       	sbci	r19, 0xFF	; 255
    290a:	f9 01       	movw	r30, r18
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2910:	ce 01       	movw	r24, r28
    2912:	86 53       	subi	r24, 0x36	; 54
    2914:	9f 4f       	sbci	r25, 0xFF	; 255
    2916:	9e 01       	movw	r18, r28
    2918:	26 53       	subi	r18, 0x36	; 54
    291a:	3f 4f       	sbci	r19, 0xFF	; 255
    291c:	f9 01       	movw	r30, r18
    291e:	20 81       	ld	r18, Z
    2920:	31 81       	ldd	r19, Z+1	; 0x01
    2922:	21 50       	subi	r18, 0x01	; 1
    2924:	31 09       	sbc	r19, r1
    2926:	fc 01       	movw	r30, r24
    2928:	31 83       	std	Z+1, r19	; 0x01
    292a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292c:	ce 01       	movw	r24, r28
    292e:	86 53       	subi	r24, 0x36	; 54
    2930:	9f 4f       	sbci	r25, 0xFF	; 255
    2932:	fc 01       	movw	r30, r24
    2934:	80 81       	ld	r24, Z
    2936:	91 81       	ldd	r25, Z+1	; 0x01
    2938:	89 2b       	or	r24, r25
    293a:	a1 f6       	brne	.-88     	; 0x28e4 <main+0x1584>
    293c:	2c c0       	rjmp	.+88     	; 0x2996 <main+0x1636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293e:	8e 01       	movw	r16, r28
    2940:	06 53       	subi	r16, 0x36	; 54
    2942:	1f 4f       	sbci	r17, 0xFF	; 255
    2944:	ce 01       	movw	r24, r28
    2946:	8a 53       	subi	r24, 0x3A	; 58
    2948:	9f 4f       	sbci	r25, 0xFF	; 255
    294a:	fc 01       	movw	r30, r24
    294c:	60 81       	ld	r22, Z
    294e:	71 81       	ldd	r23, Z+1	; 0x01
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	f8 01       	movw	r30, r16
    295e:	91 83       	std	Z+1, r25	; 0x01
    2960:	80 83       	st	Z, r24
    2962:	ce 01       	movw	r24, r28
    2964:	82 53       	subi	r24, 0x32	; 50
    2966:	9f 4f       	sbci	r25, 0xFF	; 255
    2968:	9e 01       	movw	r18, r28
    296a:	26 53       	subi	r18, 0x36	; 54
    296c:	3f 4f       	sbci	r19, 0xFF	; 255
    296e:	f9 01       	movw	r30, r18
    2970:	20 81       	ld	r18, Z
    2972:	31 81       	ldd	r19, Z+1	; 0x01
    2974:	fc 01       	movw	r30, r24
    2976:	31 83       	std	Z+1, r19	; 0x01
    2978:	20 83       	st	Z, r18
    297a:	ce 01       	movw	r24, r28
    297c:	82 53       	subi	r24, 0x32	; 50
    297e:	9f 4f       	sbci	r25, 0xFF	; 255
    2980:	fc 01       	movw	r30, r24
    2982:	80 81       	ld	r24, Z
    2984:	91 81       	ldd	r25, Z+1	; 0x01
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <main+0x1626>
    298a:	9e 01       	movw	r18, r28
    298c:	22 53       	subi	r18, 0x32	; 50
    298e:	3f 4f       	sbci	r19, 0xFF	; 255
    2990:	f9 01       	movw	r30, r18
    2992:	91 83       	std	Z+1, r25	; 0x01
    2994:	80 83       	st	Z, r24
				_delay_ms(50);
				LCD_displayString(strr[key]);
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	88 2f       	mov	r24, r24
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	9e 01       	movw	r18, r28
    299e:	24 5f       	subi	r18, 0xF4	; 244
    29a0:	3e 4f       	sbci	r19, 0xFE	; 254
    29a2:	82 0f       	add	r24, r18
    29a4:	93 1f       	adc	r25, r19
    29a6:	fc 01       	movw	r30, r24
    29a8:	80 81       	ld	r24, Z
    29aa:	88 2f       	mov	r24, r24
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_displayString>
			}
			if(key == 8)
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	88 30       	cpi	r24, 0x08	; 8
    29b6:	09 f0       	breq	.+2      	; 0x29ba <main+0x165a>
    29b8:	97 c1       	rjmp	.+814    	; 0x2ce8 <main+0x1988>
    29ba:	9e 01       	movw	r18, r28
    29bc:	22 5c       	subi	r18, 0xC2	; 194
    29be:	3f 4f       	sbci	r19, 0xFF	; 255
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	a8 e4       	ldi	r26, 0x48	; 72
    29c6:	b2 e4       	ldi	r27, 0x42	; 66
    29c8:	f9 01       	movw	r30, r18
    29ca:	80 83       	st	Z, r24
    29cc:	91 83       	std	Z+1, r25	; 0x01
    29ce:	a2 83       	std	Z+2, r26	; 0x02
    29d0:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    29d2:	8e 01       	movw	r16, r28
    29d4:	0c 51       	subi	r16, 0x1C	; 28
    29d6:	1f 4f       	sbci	r17, 0xFF	; 255
    29d8:	ce 01       	movw	r24, r28
    29da:	ce 96       	adiw	r24, 0x3e	; 62
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	4a e7       	ldi	r20, 0x7A	; 122
    29e2:	53 e4       	ldi	r21, 0x43	; 67
    29e4:	fc 01       	movw	r30, r24
    29e6:	60 81       	ld	r22, Z
    29e8:	71 81       	ldd	r23, Z+1	; 0x01
    29ea:	82 81       	ldd	r24, Z+2	; 0x02
    29ec:	93 81       	ldd	r25, Z+3	; 0x03
    29ee:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	f8 01       	movw	r30, r16
    29f8:	80 83       	st	Z, r24
    29fa:	91 83       	std	Z+1, r25	; 0x01
    29fc:	a2 83       	std	Z+2, r26	; 0x02
    29fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a00:	ce 01       	movw	r24, r28
    2a02:	8c 51       	subi	r24, 0x1C	; 28
    2a04:	9f 4f       	sbci	r25, 0xFF	; 255
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e8       	ldi	r20, 0x80	; 128
    2a0c:	5f e3       	ldi	r21, 0x3F	; 63
    2a0e:	fc 01       	movw	r30, r24
    2a10:	60 81       	ld	r22, Z
    2a12:	71 81       	ldd	r23, Z+1	; 0x01
    2a14:	82 81       	ldd	r24, Z+2	; 0x02
    2a16:	93 81       	ldd	r25, Z+3	; 0x03
    2a18:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    2a1c:	88 23       	and	r24, r24
    2a1e:	4c f4       	brge	.+18     	; 0x2a32 <main+0x16d2>
		__ticks = 1;
    2a20:	ce 01       	movw	r24, r28
    2a22:	88 51       	subi	r24, 0x18	; 24
    2a24:	9f 4f       	sbci	r25, 0xFF	; 255
    2a26:	21 e0       	ldi	r18, 0x01	; 1
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	31 83       	std	Z+1, r19	; 0x01
    2a2e:	20 83       	st	Z, r18
    2a30:	6c c0       	rjmp	.+216    	; 0x2b0a <main+0x17aa>
	else if (__tmp > 65535)
    2a32:	ce 01       	movw	r24, r28
    2a34:	8c 51       	subi	r24, 0x1C	; 28
    2a36:	9f 4f       	sbci	r25, 0xFF	; 255
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	3f ef       	ldi	r19, 0xFF	; 255
    2a3c:	4f e7       	ldi	r20, 0x7F	; 127
    2a3e:	57 e4       	ldi	r21, 0x47	; 71
    2a40:	fc 01       	movw	r30, r24
    2a42:	60 81       	ld	r22, Z
    2a44:	71 81       	ldd	r23, Z+1	; 0x01
    2a46:	82 81       	ldd	r24, Z+2	; 0x02
    2a48:	93 81       	ldd	r25, Z+3	; 0x03
    2a4a:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    2a4e:	18 16       	cp	r1, r24
    2a50:	0c f0       	brlt	.+2      	; 0x2a54 <main+0x16f4>
    2a52:	49 c0       	rjmp	.+146    	; 0x2ae6 <main+0x1786>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a54:	ce 01       	movw	r24, r28
    2a56:	ce 96       	adiw	r24, 0x3e	; 62
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e2       	ldi	r20, 0x20	; 32
    2a5e:	51 e4       	ldi	r21, 0x41	; 65
    2a60:	fc 01       	movw	r30, r24
    2a62:	60 81       	ld	r22, Z
    2a64:	71 81       	ldd	r23, Z+1	; 0x01
    2a66:	82 81       	ldd	r24, Z+2	; 0x02
    2a68:	93 81       	ldd	r25, Z+3	; 0x03
    2a6a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	8e 01       	movw	r16, r28
    2a74:	08 51       	subi	r16, 0x18	; 24
    2a76:	1f 4f       	sbci	r17, 0xFF	; 255
    2a78:	bc 01       	movw	r22, r24
    2a7a:	cd 01       	movw	r24, r26
    2a7c:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	f8 01       	movw	r30, r16
    2a86:	91 83       	std	Z+1, r25	; 0x01
    2a88:	80 83       	st	Z, r24
    2a8a:	24 c0       	rjmp	.+72     	; 0x2ad4 <main+0x1774>
    2a8c:	ce 01       	movw	r24, r28
    2a8e:	86 51       	subi	r24, 0x16	; 22
    2a90:	9f 4f       	sbci	r25, 0xFF	; 255
    2a92:	29 e1       	ldi	r18, 0x19	; 25
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	fc 01       	movw	r30, r24
    2a98:	31 83       	std	Z+1, r19	; 0x01
    2a9a:	20 83       	st	Z, r18
    2a9c:	ce 01       	movw	r24, r28
    2a9e:	86 51       	subi	r24, 0x16	; 22
    2aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	80 81       	ld	r24, Z
    2aa6:	91 81       	ldd	r25, Z+1	; 0x01
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <main+0x1748>
    2aac:	9e 01       	movw	r18, r28
    2aae:	26 51       	subi	r18, 0x16	; 22
    2ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab2:	f9 01       	movw	r30, r18
    2ab4:	91 83       	std	Z+1, r25	; 0x01
    2ab6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab8:	ce 01       	movw	r24, r28
    2aba:	88 51       	subi	r24, 0x18	; 24
    2abc:	9f 4f       	sbci	r25, 0xFF	; 255
    2abe:	9e 01       	movw	r18, r28
    2ac0:	28 51       	subi	r18, 0x18	; 24
    2ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac4:	f9 01       	movw	r30, r18
    2ac6:	20 81       	ld	r18, Z
    2ac8:	31 81       	ldd	r19, Z+1	; 0x01
    2aca:	21 50       	subi	r18, 0x01	; 1
    2acc:	31 09       	sbc	r19, r1
    2ace:	fc 01       	movw	r30, r24
    2ad0:	31 83       	std	Z+1, r19	; 0x01
    2ad2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	88 51       	subi	r24, 0x18	; 24
    2ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    2ada:	fc 01       	movw	r30, r24
    2adc:	80 81       	ld	r24, Z
    2ade:	91 81       	ldd	r25, Z+1	; 0x01
    2ae0:	89 2b       	or	r24, r25
    2ae2:	a1 f6       	brne	.-88     	; 0x2a8c <main+0x172c>
    2ae4:	2c c0       	rjmp	.+88     	; 0x2b3e <main+0x17de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae6:	8e 01       	movw	r16, r28
    2ae8:	08 51       	subi	r16, 0x18	; 24
    2aea:	1f 4f       	sbci	r17, 0xFF	; 255
    2aec:	ce 01       	movw	r24, r28
    2aee:	8c 51       	subi	r24, 0x1C	; 28
    2af0:	9f 4f       	sbci	r25, 0xFF	; 255
    2af2:	fc 01       	movw	r30, r24
    2af4:	60 81       	ld	r22, Z
    2af6:	71 81       	ldd	r23, Z+1	; 0x01
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	f8 01       	movw	r30, r16
    2b06:	91 83       	std	Z+1, r25	; 0x01
    2b08:	80 83       	st	Z, r24
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	84 51       	subi	r24, 0x14	; 20
    2b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b10:	9e 01       	movw	r18, r28
    2b12:	28 51       	subi	r18, 0x18	; 24
    2b14:	3f 4f       	sbci	r19, 0xFF	; 255
    2b16:	f9 01       	movw	r30, r18
    2b18:	20 81       	ld	r18, Z
    2b1a:	31 81       	ldd	r19, Z+1	; 0x01
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	31 83       	std	Z+1, r19	; 0x01
    2b20:	20 83       	st	Z, r18
    2b22:	ce 01       	movw	r24, r28
    2b24:	84 51       	subi	r24, 0x14	; 20
    2b26:	9f 4f       	sbci	r25, 0xFF	; 255
    2b28:	fc 01       	movw	r30, r24
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	f1 f7       	brne	.-4      	; 0x2b2e <main+0x17ce>
    2b32:	9e 01       	movw	r18, r28
    2b34:	24 51       	subi	r18, 0x14	; 20
    2b36:	3f 4f       	sbci	r19, 0xFF	; 255
    2b38:	f9 01       	movw	r30, r18
    2b3a:	91 83       	std	Z+1, r25	; 0x01
    2b3c:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    2b44:	82 e0       	ldi	r24, 0x02	; 2
    2b46:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    2b4a:	83 e0       	ldi	r24, 0x03	; 3
    2b4c:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    2b50:	84 e0       	ldi	r24, 0x04	; 4
    2b52:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_displayNo(EIGHT);
    2b56:	88 e0       	ldi	r24, 0x08	; 8
    2b58:	0e 94 a0 00 	call	0x140	; 0x140 <BCDSevegments_displayNo>
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	a8 e4       	ldi	r26, 0x48	; 72
    2b62:	b2 e4       	ldi	r27, 0x42	; 66
    2b64:	8a ab       	std	Y+50, r24	; 0x32
    2b66:	9b ab       	std	Y+51, r25	; 0x33
    2b68:	ac ab       	std	Y+52, r26	; 0x34
    2b6a:	bd ab       	std	Y+53, r27	; 0x35

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b6c:	8e 01       	movw	r16, r28
    2b6e:	06 52       	subi	r16, 0x26	; 38
    2b70:	1f 4f       	sbci	r17, 0xFF	; 255
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	4a e7       	ldi	r20, 0x7A	; 122
    2b78:	53 e4       	ldi	r21, 0x43	; 67
    2b7a:	6a a9       	ldd	r22, Y+50	; 0x32
    2b7c:	7b a9       	ldd	r23, Y+51	; 0x33
    2b7e:	8c a9       	ldd	r24, Y+52	; 0x34
    2b80:	9d a9       	ldd	r25, Y+53	; 0x35
    2b82:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	f8 01       	movw	r30, r16
    2b8c:	80 83       	st	Z, r24
    2b8e:	91 83       	std	Z+1, r25	; 0x01
    2b90:	a2 83       	std	Z+2, r26	; 0x02
    2b92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b94:	ce 01       	movw	r24, r28
    2b96:	86 52       	subi	r24, 0x26	; 38
    2b98:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e8       	ldi	r20, 0x80	; 128
    2ba0:	5f e3       	ldi	r21, 0x3F	; 63
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	60 81       	ld	r22, Z
    2ba6:	71 81       	ldd	r23, Z+1	; 0x01
    2ba8:	82 81       	ldd	r24, Z+2	; 0x02
    2baa:	93 81       	ldd	r25, Z+3	; 0x03
    2bac:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    2bb0:	88 23       	and	r24, r24
    2bb2:	4c f4       	brge	.+18     	; 0x2bc6 <main+0x1866>
		__ticks = 1;
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	82 52       	subi	r24, 0x22	; 34
    2bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bba:	21 e0       	ldi	r18, 0x01	; 1
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	31 83       	std	Z+1, r19	; 0x01
    2bc2:	20 83       	st	Z, r18
    2bc4:	69 c0       	rjmp	.+210    	; 0x2c98 <main+0x1938>
	else if (__tmp > 65535)
    2bc6:	ce 01       	movw	r24, r28
    2bc8:	86 52       	subi	r24, 0x26	; 38
    2bca:	9f 4f       	sbci	r25, 0xFF	; 255
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	3f ef       	ldi	r19, 0xFF	; 255
    2bd0:	4f e7       	ldi	r20, 0x7F	; 127
    2bd2:	57 e4       	ldi	r21, 0x47	; 71
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	60 81       	ld	r22, Z
    2bd8:	71 81       	ldd	r23, Z+1	; 0x01
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    2be2:	18 16       	cp	r1, r24
    2be4:	0c f0       	brlt	.+2      	; 0x2be8 <main+0x1888>
    2be6:	46 c0       	rjmp	.+140    	; 0x2c74 <main+0x1914>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e2       	ldi	r20, 0x20	; 32
    2bee:	51 e4       	ldi	r21, 0x41	; 65
    2bf0:	6a a9       	ldd	r22, Y+50	; 0x32
    2bf2:	7b a9       	ldd	r23, Y+51	; 0x33
    2bf4:	8c a9       	ldd	r24, Y+52	; 0x34
    2bf6:	9d a9       	ldd	r25, Y+53	; 0x35
    2bf8:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	8e 01       	movw	r16, r28
    2c02:	02 52       	subi	r16, 0x22	; 34
    2c04:	1f 4f       	sbci	r17, 0xFF	; 255
    2c06:	bc 01       	movw	r22, r24
    2c08:	cd 01       	movw	r24, r26
    2c0a:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	f8 01       	movw	r30, r16
    2c14:	91 83       	std	Z+1, r25	; 0x01
    2c16:	80 83       	st	Z, r24
    2c18:	24 c0       	rjmp	.+72     	; 0x2c62 <main+0x1902>
    2c1a:	ce 01       	movw	r24, r28
    2c1c:	80 52       	subi	r24, 0x20	; 32
    2c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c20:	29 e1       	ldi	r18, 0x19	; 25
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	fc 01       	movw	r30, r24
    2c26:	31 83       	std	Z+1, r19	; 0x01
    2c28:	20 83       	st	Z, r18
    2c2a:	ce 01       	movw	r24, r28
    2c2c:	80 52       	subi	r24, 0x20	; 32
    2c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c30:	fc 01       	movw	r30, r24
    2c32:	80 81       	ld	r24, Z
    2c34:	91 81       	ldd	r25, Z+1	; 0x01
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	f1 f7       	brne	.-4      	; 0x2c36 <main+0x18d6>
    2c3a:	9e 01       	movw	r18, r28
    2c3c:	20 52       	subi	r18, 0x20	; 32
    2c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c40:	f9 01       	movw	r30, r18
    2c42:	91 83       	std	Z+1, r25	; 0x01
    2c44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c46:	ce 01       	movw	r24, r28
    2c48:	82 52       	subi	r24, 0x22	; 34
    2c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c4c:	9e 01       	movw	r18, r28
    2c4e:	22 52       	subi	r18, 0x22	; 34
    2c50:	3f 4f       	sbci	r19, 0xFF	; 255
    2c52:	f9 01       	movw	r30, r18
    2c54:	20 81       	ld	r18, Z
    2c56:	31 81       	ldd	r19, Z+1	; 0x01
    2c58:	21 50       	subi	r18, 0x01	; 1
    2c5a:	31 09       	sbc	r19, r1
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	31 83       	std	Z+1, r19	; 0x01
    2c60:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c62:	ce 01       	movw	r24, r28
    2c64:	82 52       	subi	r24, 0x22	; 34
    2c66:	9f 4f       	sbci	r25, 0xFF	; 255
    2c68:	fc 01       	movw	r30, r24
    2c6a:	80 81       	ld	r24, Z
    2c6c:	91 81       	ldd	r25, Z+1	; 0x01
    2c6e:	89 2b       	or	r24, r25
    2c70:	a1 f6       	brne	.-88     	; 0x2c1a <main+0x18ba>
    2c72:	2c c0       	rjmp	.+88     	; 0x2ccc <main+0x196c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c74:	8e 01       	movw	r16, r28
    2c76:	02 52       	subi	r16, 0x22	; 34
    2c78:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7a:	ce 01       	movw	r24, r28
    2c7c:	86 52       	subi	r24, 0x26	; 38
    2c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c80:	fc 01       	movw	r30, r24
    2c82:	60 81       	ld	r22, Z
    2c84:	71 81       	ldd	r23, Z+1	; 0x01
    2c86:	82 81       	ldd	r24, Z+2	; 0x02
    2c88:	93 81       	ldd	r25, Z+3	; 0x03
    2c8a:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	f8 01       	movw	r30, r16
    2c94:	91 83       	std	Z+1, r25	; 0x01
    2c96:	80 83       	st	Z, r24
    2c98:	ce 01       	movw	r24, r28
    2c9a:	8e 51       	subi	r24, 0x1E	; 30
    2c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c9e:	9e 01       	movw	r18, r28
    2ca0:	22 52       	subi	r18, 0x22	; 34
    2ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca4:	f9 01       	movw	r30, r18
    2ca6:	20 81       	ld	r18, Z
    2ca8:	31 81       	ldd	r19, Z+1	; 0x01
    2caa:	fc 01       	movw	r30, r24
    2cac:	31 83       	std	Z+1, r19	; 0x01
    2cae:	20 83       	st	Z, r18
    2cb0:	ce 01       	movw	r24, r28
    2cb2:	8e 51       	subi	r24, 0x1E	; 30
    2cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	80 81       	ld	r24, Z
    2cba:	91 81       	ldd	r25, Z+1	; 0x01
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	f1 f7       	brne	.-4      	; 0x2cbc <main+0x195c>
    2cc0:	9e 01       	movw	r18, r28
    2cc2:	2e 51       	subi	r18, 0x1E	; 30
    2cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc6:	f9 01       	movw	r30, r18
    2cc8:	91 83       	std	Z+1, r25	; 0x01
    2cca:	80 83       	st	Z, r24
				_delay_ms(50);
				LCD_displayString(strr[key]);
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	88 2f       	mov	r24, r24
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	9e 01       	movw	r18, r28
    2cd4:	24 5f       	subi	r18, 0xF4	; 244
    2cd6:	3e 4f       	sbci	r19, 0xFE	; 254
    2cd8:	82 0f       	add	r24, r18
    2cda:	93 1f       	adc	r25, r19
    2cdc:	fc 01       	movw	r30, r24
    2cde:	80 81       	ld	r24, Z
    2ce0:	88 2f       	mov	r24, r24
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_displayString>
			}
			if(key == 9)
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	89 30       	cpi	r24, 0x09	; 9
    2cec:	09 f0       	breq	.+2      	; 0x2cf0 <main+0x1990>
    2cee:	96 c1       	rjmp	.+812    	; 0x301c <main+0x1cbc>
    2cf0:	9e 01       	movw	r18, r28
    2cf2:	2a 5b       	subi	r18, 0xBA	; 186
    2cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	a8 e4       	ldi	r26, 0x48	; 72
    2cfc:	b2 e4       	ldi	r27, 0x42	; 66
    2cfe:	f9 01       	movw	r30, r18
    2d00:	80 83       	st	Z, r24
    2d02:	91 83       	std	Z+1, r25	; 0x01
    2d04:	a2 83       	std	Z+2, r26	; 0x02
    2d06:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2d08:	8e 01       	movw	r16, r28
    2d0a:	08 50       	subi	r16, 0x08	; 8
    2d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d0e:	ce 01       	movw	r24, r28
    2d10:	8a 5b       	subi	r24, 0xBA	; 186
    2d12:	9f 4f       	sbci	r25, 0xFF	; 255
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	4a e7       	ldi	r20, 0x7A	; 122
    2d1a:	53 e4       	ldi	r21, 0x43	; 67
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	f8 01       	movw	r30, r16
    2d30:	80 83       	st	Z, r24
    2d32:	91 83       	std	Z+1, r25	; 0x01
    2d34:	a2 83       	std	Z+2, r26	; 0x02
    2d36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d38:	ce 01       	movw	r24, r28
    2d3a:	88 50       	subi	r24, 0x08	; 8
    2d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	40 e8       	ldi	r20, 0x80	; 128
    2d44:	5f e3       	ldi	r21, 0x3F	; 63
    2d46:	fc 01       	movw	r30, r24
    2d48:	60 81       	ld	r22, Z
    2d4a:	71 81       	ldd	r23, Z+1	; 0x01
    2d4c:	82 81       	ldd	r24, Z+2	; 0x02
    2d4e:	93 81       	ldd	r25, Z+3	; 0x03
    2d50:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    2d54:	88 23       	and	r24, r24
    2d56:	4c f4       	brge	.+18     	; 0x2d6a <main+0x1a0a>
		__ticks = 1;
    2d58:	ce 01       	movw	r24, r28
    2d5a:	84 50       	subi	r24, 0x04	; 4
    2d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d5e:	21 e0       	ldi	r18, 0x01	; 1
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	fc 01       	movw	r30, r24
    2d64:	31 83       	std	Z+1, r19	; 0x01
    2d66:	20 83       	st	Z, r18
    2d68:	6d c0       	rjmp	.+218    	; 0x2e44 <main+0x1ae4>
	else if (__tmp > 65535)
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	88 50       	subi	r24, 0x08	; 8
    2d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	3f ef       	ldi	r19, 0xFF	; 255
    2d74:	4f e7       	ldi	r20, 0x7F	; 127
    2d76:	57 e4       	ldi	r21, 0x47	; 71
    2d78:	fc 01       	movw	r30, r24
    2d7a:	60 81       	ld	r22, Z
    2d7c:	71 81       	ldd	r23, Z+1	; 0x01
    2d7e:	82 81       	ldd	r24, Z+2	; 0x02
    2d80:	93 81       	ldd	r25, Z+3	; 0x03
    2d82:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    2d86:	18 16       	cp	r1, r24
    2d88:	0c f0       	brlt	.+2      	; 0x2d8c <main+0x1a2c>
    2d8a:	4a c0       	rjmp	.+148    	; 0x2e20 <main+0x1ac0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8c:	ce 01       	movw	r24, r28
    2d8e:	8a 5b       	subi	r24, 0xBA	; 186
    2d90:	9f 4f       	sbci	r25, 0xFF	; 255
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e2       	ldi	r20, 0x20	; 32
    2d98:	51 e4       	ldi	r21, 0x41	; 65
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	60 81       	ld	r22, Z
    2d9e:	71 81       	ldd	r23, Z+1	; 0x01
    2da0:	82 81       	ldd	r24, Z+2	; 0x02
    2da2:	93 81       	ldd	r25, Z+3	; 0x03
    2da4:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	8e 01       	movw	r16, r28
    2dae:	04 50       	subi	r16, 0x04	; 4
    2db0:	1f 4f       	sbci	r17, 0xFF	; 255
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	f8 01       	movw	r30, r16
    2dc0:	91 83       	std	Z+1, r25	; 0x01
    2dc2:	80 83       	st	Z, r24
    2dc4:	24 c0       	rjmp	.+72     	; 0x2e0e <main+0x1aae>
    2dc6:	ce 01       	movw	r24, r28
    2dc8:	82 50       	subi	r24, 0x02	; 2
    2dca:	9f 4f       	sbci	r25, 0xFF	; 255
    2dcc:	29 e1       	ldi	r18, 0x19	; 25
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	31 83       	std	Z+1, r19	; 0x01
    2dd4:	20 83       	st	Z, r18
    2dd6:	ce 01       	movw	r24, r28
    2dd8:	82 50       	subi	r24, 0x02	; 2
    2dda:	9f 4f       	sbci	r25, 0xFF	; 255
    2ddc:	fc 01       	movw	r30, r24
    2dde:	80 81       	ld	r24, Z
    2de0:	91 81       	ldd	r25, Z+1	; 0x01
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	f1 f7       	brne	.-4      	; 0x2de2 <main+0x1a82>
    2de6:	9e 01       	movw	r18, r28
    2de8:	22 50       	subi	r18, 0x02	; 2
    2dea:	3f 4f       	sbci	r19, 0xFF	; 255
    2dec:	f9 01       	movw	r30, r18
    2dee:	91 83       	std	Z+1, r25	; 0x01
    2df0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df2:	ce 01       	movw	r24, r28
    2df4:	84 50       	subi	r24, 0x04	; 4
    2df6:	9f 4f       	sbci	r25, 0xFF	; 255
    2df8:	9e 01       	movw	r18, r28
    2dfa:	24 50       	subi	r18, 0x04	; 4
    2dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfe:	f9 01       	movw	r30, r18
    2e00:	20 81       	ld	r18, Z
    2e02:	31 81       	ldd	r19, Z+1	; 0x01
    2e04:	21 50       	subi	r18, 0x01	; 1
    2e06:	31 09       	sbc	r19, r1
    2e08:	fc 01       	movw	r30, r24
    2e0a:	31 83       	std	Z+1, r19	; 0x01
    2e0c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0e:	ce 01       	movw	r24, r28
    2e10:	84 50       	subi	r24, 0x04	; 4
    2e12:	9f 4f       	sbci	r25, 0xFF	; 255
    2e14:	fc 01       	movw	r30, r24
    2e16:	80 81       	ld	r24, Z
    2e18:	91 81       	ldd	r25, Z+1	; 0x01
    2e1a:	89 2b       	or	r24, r25
    2e1c:	a1 f6       	brne	.-88     	; 0x2dc6 <main+0x1a66>
    2e1e:	29 c0       	rjmp	.+82     	; 0x2e72 <main+0x1b12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e20:	8e 01       	movw	r16, r28
    2e22:	04 50       	subi	r16, 0x04	; 4
    2e24:	1f 4f       	sbci	r17, 0xFF	; 255
    2e26:	ce 01       	movw	r24, r28
    2e28:	88 50       	subi	r24, 0x08	; 8
    2e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	60 81       	ld	r22, Z
    2e30:	71 81       	ldd	r23, Z+1	; 0x01
    2e32:	82 81       	ldd	r24, Z+2	; 0x02
    2e34:	93 81       	ldd	r25, Z+3	; 0x03
    2e36:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	f8 01       	movw	r30, r16
    2e40:	91 83       	std	Z+1, r25	; 0x01
    2e42:	80 83       	st	Z, r24
    2e44:	ce 01       	movw	r24, r28
    2e46:	93 95       	inc	r25
    2e48:	9e 01       	movw	r18, r28
    2e4a:	24 50       	subi	r18, 0x04	; 4
    2e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e4e:	f9 01       	movw	r30, r18
    2e50:	20 81       	ld	r18, Z
    2e52:	31 81       	ldd	r19, Z+1	; 0x01
    2e54:	fc 01       	movw	r30, r24
    2e56:	31 83       	std	Z+1, r19	; 0x01
    2e58:	20 83       	st	Z, r18
    2e5a:	ce 01       	movw	r24, r28
    2e5c:	93 95       	inc	r25
    2e5e:	fc 01       	movw	r30, r24
    2e60:	80 81       	ld	r24, Z
    2e62:	91 81       	ldd	r25, Z+1	; 0x01
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	f1 f7       	brne	.-4      	; 0x2e64 <main+0x1b04>
    2e68:	9e 01       	movw	r18, r28
    2e6a:	33 95       	inc	r19
    2e6c:	f9 01       	movw	r30, r18
    2e6e:	91 83       	std	Z+1, r25	; 0x01
    2e70:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    2e78:	82 e0       	ldi	r24, 0x02	; 2
    2e7a:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    2e7e:	83 e0       	ldi	r24, 0x03	; 3
    2e80:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    2e84:	84 e0       	ldi	r24, 0x04	; 4
    2e86:	0e 94 79 00 	call	0xf2	; 0xf2 <BCDSevegments_enable>
				BCDSevegments_displayNo(NINE);
    2e8a:	89 e0       	ldi	r24, 0x09	; 9
    2e8c:	0e 94 a0 00 	call	0x140	; 0x140 <BCDSevegments_displayNo>
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	a8 e4       	ldi	r26, 0x48	; 72
    2e96:	b2 e4       	ldi	r27, 0x42	; 66
    2e98:	8a af       	std	Y+58, r24	; 0x3a
    2e9a:	9b af       	std	Y+59, r25	; 0x3b
    2e9c:	ac af       	std	Y+60, r26	; 0x3c
    2e9e:	bd af       	std	Y+61, r27	; 0x3d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ea0:	8e 01       	movw	r16, r28
    2ea2:	02 51       	subi	r16, 0x12	; 18
    2ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	4a e7       	ldi	r20, 0x7A	; 122
    2eac:	53 e4       	ldi	r21, 0x43	; 67
    2eae:	6a ad       	ldd	r22, Y+58	; 0x3a
    2eb0:	7b ad       	ldd	r23, Y+59	; 0x3b
    2eb2:	8c ad       	ldd	r24, Y+60	; 0x3c
    2eb4:	9d ad       	ldd	r25, Y+61	; 0x3d
    2eb6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	f8 01       	movw	r30, r16
    2ec0:	80 83       	st	Z, r24
    2ec2:	91 83       	std	Z+1, r25	; 0x01
    2ec4:	a2 83       	std	Z+2, r26	; 0x02
    2ec6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ec8:	ce 01       	movw	r24, r28
    2eca:	82 51       	subi	r24, 0x12	; 18
    2ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	40 e8       	ldi	r20, 0x80	; 128
    2ed4:	5f e3       	ldi	r21, 0x3F	; 63
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	60 81       	ld	r22, Z
    2eda:	71 81       	ldd	r23, Z+1	; 0x01
    2edc:	82 81       	ldd	r24, Z+2	; 0x02
    2ede:	93 81       	ldd	r25, Z+3	; 0x03
    2ee0:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    2ee4:	88 23       	and	r24, r24
    2ee6:	4c f4       	brge	.+18     	; 0x2efa <main+0x1b9a>
		__ticks = 1;
    2ee8:	ce 01       	movw	r24, r28
    2eea:	8e 50       	subi	r24, 0x0E	; 14
    2eec:	9f 4f       	sbci	r25, 0xFF	; 255
    2eee:	21 e0       	ldi	r18, 0x01	; 1
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	31 83       	std	Z+1, r19	; 0x01
    2ef6:	20 83       	st	Z, r18
    2ef8:	69 c0       	rjmp	.+210    	; 0x2fcc <main+0x1c6c>
	else if (__tmp > 65535)
    2efa:	ce 01       	movw	r24, r28
    2efc:	82 51       	subi	r24, 0x12	; 18
    2efe:	9f 4f       	sbci	r25, 0xFF	; 255
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	3f ef       	ldi	r19, 0xFF	; 255
    2f04:	4f e7       	ldi	r20, 0x7F	; 127
    2f06:	57 e4       	ldi	r21, 0x47	; 71
    2f08:	fc 01       	movw	r30, r24
    2f0a:	60 81       	ld	r22, Z
    2f0c:	71 81       	ldd	r23, Z+1	; 0x01
    2f0e:	82 81       	ldd	r24, Z+2	; 0x02
    2f10:	93 81       	ldd	r25, Z+3	; 0x03
    2f12:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    2f16:	18 16       	cp	r1, r24
    2f18:	0c f0       	brlt	.+2      	; 0x2f1c <main+0x1bbc>
    2f1a:	46 c0       	rjmp	.+140    	; 0x2fa8 <main+0x1c48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e2       	ldi	r20, 0x20	; 32
    2f22:	51 e4       	ldi	r21, 0x41	; 65
    2f24:	6a ad       	ldd	r22, Y+58	; 0x3a
    2f26:	7b ad       	ldd	r23, Y+59	; 0x3b
    2f28:	8c ad       	ldd	r24, Y+60	; 0x3c
    2f2a:	9d ad       	ldd	r25, Y+61	; 0x3d
    2f2c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	8e 01       	movw	r16, r28
    2f36:	0e 50       	subi	r16, 0x0E	; 14
    2f38:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	f8 01       	movw	r30, r16
    2f48:	91 83       	std	Z+1, r25	; 0x01
    2f4a:	80 83       	st	Z, r24
    2f4c:	24 c0       	rjmp	.+72     	; 0x2f96 <main+0x1c36>
    2f4e:	ce 01       	movw	r24, r28
    2f50:	8c 50       	subi	r24, 0x0C	; 12
    2f52:	9f 4f       	sbci	r25, 0xFF	; 255
    2f54:	29 e1       	ldi	r18, 0x19	; 25
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	fc 01       	movw	r30, r24
    2f5a:	31 83       	std	Z+1, r19	; 0x01
    2f5c:	20 83       	st	Z, r18
    2f5e:	ce 01       	movw	r24, r28
    2f60:	8c 50       	subi	r24, 0x0C	; 12
    2f62:	9f 4f       	sbci	r25, 0xFF	; 255
    2f64:	fc 01       	movw	r30, r24
    2f66:	80 81       	ld	r24, Z
    2f68:	91 81       	ldd	r25, Z+1	; 0x01
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	f1 f7       	brne	.-4      	; 0x2f6a <main+0x1c0a>
    2f6e:	9e 01       	movw	r18, r28
    2f70:	2c 50       	subi	r18, 0x0C	; 12
    2f72:	3f 4f       	sbci	r19, 0xFF	; 255
    2f74:	f9 01       	movw	r30, r18
    2f76:	91 83       	std	Z+1, r25	; 0x01
    2f78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	8e 50       	subi	r24, 0x0E	; 14
    2f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f80:	9e 01       	movw	r18, r28
    2f82:	2e 50       	subi	r18, 0x0E	; 14
    2f84:	3f 4f       	sbci	r19, 0xFF	; 255
    2f86:	f9 01       	movw	r30, r18
    2f88:	20 81       	ld	r18, Z
    2f8a:	31 81       	ldd	r19, Z+1	; 0x01
    2f8c:	21 50       	subi	r18, 0x01	; 1
    2f8e:	31 09       	sbc	r19, r1
    2f90:	fc 01       	movw	r30, r24
    2f92:	31 83       	std	Z+1, r19	; 0x01
    2f94:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f96:	ce 01       	movw	r24, r28
    2f98:	8e 50       	subi	r24, 0x0E	; 14
    2f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	80 81       	ld	r24, Z
    2fa0:	91 81       	ldd	r25, Z+1	; 0x01
    2fa2:	89 2b       	or	r24, r25
    2fa4:	a1 f6       	brne	.-88     	; 0x2f4e <main+0x1bee>
    2fa6:	2c c0       	rjmp	.+88     	; 0x3000 <main+0x1ca0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa8:	8e 01       	movw	r16, r28
    2faa:	0e 50       	subi	r16, 0x0E	; 14
    2fac:	1f 4f       	sbci	r17, 0xFF	; 255
    2fae:	ce 01       	movw	r24, r28
    2fb0:	82 51       	subi	r24, 0x12	; 18
    2fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	60 81       	ld	r22, Z
    2fb8:	71 81       	ldd	r23, Z+1	; 0x01
    2fba:	82 81       	ldd	r24, Z+2	; 0x02
    2fbc:	93 81       	ldd	r25, Z+3	; 0x03
    2fbe:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	f8 01       	movw	r30, r16
    2fc8:	91 83       	std	Z+1, r25	; 0x01
    2fca:	80 83       	st	Z, r24
    2fcc:	ce 01       	movw	r24, r28
    2fce:	8a 50       	subi	r24, 0x0A	; 10
    2fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd2:	9e 01       	movw	r18, r28
    2fd4:	2e 50       	subi	r18, 0x0E	; 14
    2fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd8:	f9 01       	movw	r30, r18
    2fda:	20 81       	ld	r18, Z
    2fdc:	31 81       	ldd	r19, Z+1	; 0x01
    2fde:	fc 01       	movw	r30, r24
    2fe0:	31 83       	std	Z+1, r19	; 0x01
    2fe2:	20 83       	st	Z, r18
    2fe4:	ce 01       	movw	r24, r28
    2fe6:	8a 50       	subi	r24, 0x0A	; 10
    2fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fea:	fc 01       	movw	r30, r24
    2fec:	80 81       	ld	r24, Z
    2fee:	91 81       	ldd	r25, Z+1	; 0x01
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	f1 f7       	brne	.-4      	; 0x2ff0 <main+0x1c90>
    2ff4:	9e 01       	movw	r18, r28
    2ff6:	2a 50       	subi	r18, 0x0A	; 10
    2ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffa:	f9 01       	movw	r30, r18
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	80 83       	st	Z, r24
				_delay_ms(50);
				LCD_displayString(strr[key]);
    3000:	89 81       	ldd	r24, Y+1	; 0x01
    3002:	88 2f       	mov	r24, r24
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	9e 01       	movw	r18, r28
    3008:	24 5f       	subi	r18, 0xF4	; 244
    300a:	3e 4f       	sbci	r19, 0xFE	; 254
    300c:	82 0f       	add	r24, r18
    300e:	93 1f       	adc	r25, r19
    3010:	fc 01       	movw	r30, r24
    3012:	80 81       	ld	r24, Z
    3014:	88 2f       	mov	r24, r24
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_displayString>
    301c:	9e 01       	movw	r18, r28
    301e:	2e 5b       	subi	r18, 0xBE	; 190
    3020:	3f 4f       	sbci	r19, 0xFF	; 255
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	aa e7       	ldi	r26, 0x7A	; 122
    3028:	b4 e4       	ldi	r27, 0x44	; 68
    302a:	f9 01       	movw	r30, r18
    302c:	80 83       	st	Z, r24
    302e:	91 83       	std	Z+1, r25	; 0x01
    3030:	a2 83       	std	Z+2, r26	; 0x02
    3032:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3034:	8e 01       	movw	r16, r28
    3036:	0e 5f       	subi	r16, 0xFE	; 254
    3038:	1e 4f       	sbci	r17, 0xFE	; 254
    303a:	ce 01       	movw	r24, r28
    303c:	8e 5b       	subi	r24, 0xBE	; 190
    303e:	9f 4f       	sbci	r25, 0xFF	; 255
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	4a e7       	ldi	r20, 0x7A	; 122
    3046:	53 e4       	ldi	r21, 0x43	; 67
    3048:	fc 01       	movw	r30, r24
    304a:	60 81       	ld	r22, Z
    304c:	71 81       	ldd	r23, Z+1	; 0x01
    304e:	82 81       	ldd	r24, Z+2	; 0x02
    3050:	93 81       	ldd	r25, Z+3	; 0x03
    3052:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	f8 01       	movw	r30, r16
    305c:	80 83       	st	Z, r24
    305e:	91 83       	std	Z+1, r25	; 0x01
    3060:	a2 83       	std	Z+2, r26	; 0x02
    3062:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3064:	ce 01       	movw	r24, r28
    3066:	8e 5f       	subi	r24, 0xFE	; 254
    3068:	9e 4f       	sbci	r25, 0xFE	; 254
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	40 e8       	ldi	r20, 0x80	; 128
    3070:	5f e3       	ldi	r21, 0x3F	; 63
    3072:	fc 01       	movw	r30, r24
    3074:	60 81       	ld	r22, Z
    3076:	71 81       	ldd	r23, Z+1	; 0x01
    3078:	82 81       	ldd	r24, Z+2	; 0x02
    307a:	93 81       	ldd	r25, Z+3	; 0x03
    307c:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__cmpsf2>
    3080:	88 23       	and	r24, r24
    3082:	4c f4       	brge	.+18     	; 0x3096 <main+0x1d36>
		__ticks = 1;
    3084:	ce 01       	movw	r24, r28
    3086:	8a 5f       	subi	r24, 0xFA	; 250
    3088:	9e 4f       	sbci	r25, 0xFE	; 254
    308a:	21 e0       	ldi	r18, 0x01	; 1
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	fc 01       	movw	r30, r24
    3090:	31 83       	std	Z+1, r19	; 0x01
    3092:	20 83       	st	Z, r18
    3094:	6d c0       	rjmp	.+218    	; 0x3170 <main+0x1e10>
	else if (__tmp > 65535)
    3096:	ce 01       	movw	r24, r28
    3098:	8e 5f       	subi	r24, 0xFE	; 254
    309a:	9e 4f       	sbci	r25, 0xFE	; 254
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	3f ef       	ldi	r19, 0xFF	; 255
    30a0:	4f e7       	ldi	r20, 0x7F	; 127
    30a2:	57 e4       	ldi	r21, 0x47	; 71
    30a4:	fc 01       	movw	r30, r24
    30a6:	60 81       	ld	r22, Z
    30a8:	71 81       	ldd	r23, Z+1	; 0x01
    30aa:	82 81       	ldd	r24, Z+2	; 0x02
    30ac:	93 81       	ldd	r25, Z+3	; 0x03
    30ae:	0e 94 ef 19 	call	0x33de	; 0x33de <__gesf2>
    30b2:	18 16       	cp	r1, r24
    30b4:	0c f0       	brlt	.+2      	; 0x30b8 <main+0x1d58>
    30b6:	4a c0       	rjmp	.+148    	; 0x314c <main+0x1dec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b8:	ce 01       	movw	r24, r28
    30ba:	8e 5b       	subi	r24, 0xBE	; 190
    30bc:	9f 4f       	sbci	r25, 0xFF	; 255
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e2       	ldi	r20, 0x20	; 32
    30c4:	51 e4       	ldi	r21, 0x41	; 65
    30c6:	fc 01       	movw	r30, r24
    30c8:	60 81       	ld	r22, Z
    30ca:	71 81       	ldd	r23, Z+1	; 0x01
    30cc:	82 81       	ldd	r24, Z+2	; 0x02
    30ce:	93 81       	ldd	r25, Z+3	; 0x03
    30d0:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsf3>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	8e 01       	movw	r16, r28
    30da:	0a 5f       	subi	r16, 0xFA	; 250
    30dc:	1e 4f       	sbci	r17, 0xFE	; 254
    30de:	bc 01       	movw	r22, r24
    30e0:	cd 01       	movw	r24, r26
    30e2:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	f8 01       	movw	r30, r16
    30ec:	91 83       	std	Z+1, r25	; 0x01
    30ee:	80 83       	st	Z, r24
    30f0:	24 c0       	rjmp	.+72     	; 0x313a <main+0x1dda>
    30f2:	ce 01       	movw	r24, r28
    30f4:	88 5f       	subi	r24, 0xF8	; 248
    30f6:	9e 4f       	sbci	r25, 0xFE	; 254
    30f8:	29 e1       	ldi	r18, 0x19	; 25
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	fc 01       	movw	r30, r24
    30fe:	31 83       	std	Z+1, r19	; 0x01
    3100:	20 83       	st	Z, r18
    3102:	ce 01       	movw	r24, r28
    3104:	88 5f       	subi	r24, 0xF8	; 248
    3106:	9e 4f       	sbci	r25, 0xFE	; 254
    3108:	fc 01       	movw	r30, r24
    310a:	80 81       	ld	r24, Z
    310c:	91 81       	ldd	r25, Z+1	; 0x01
    310e:	01 97       	sbiw	r24, 0x01	; 1
    3110:	f1 f7       	brne	.-4      	; 0x310e <main+0x1dae>
    3112:	9e 01       	movw	r18, r28
    3114:	28 5f       	subi	r18, 0xF8	; 248
    3116:	3e 4f       	sbci	r19, 0xFE	; 254
    3118:	f9 01       	movw	r30, r18
    311a:	91 83       	std	Z+1, r25	; 0x01
    311c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311e:	ce 01       	movw	r24, r28
    3120:	8a 5f       	subi	r24, 0xFA	; 250
    3122:	9e 4f       	sbci	r25, 0xFE	; 254
    3124:	9e 01       	movw	r18, r28
    3126:	2a 5f       	subi	r18, 0xFA	; 250
    3128:	3e 4f       	sbci	r19, 0xFE	; 254
    312a:	f9 01       	movw	r30, r18
    312c:	20 81       	ld	r18, Z
    312e:	31 81       	ldd	r19, Z+1	; 0x01
    3130:	21 50       	subi	r18, 0x01	; 1
    3132:	31 09       	sbc	r19, r1
    3134:	fc 01       	movw	r30, r24
    3136:	31 83       	std	Z+1, r19	; 0x01
    3138:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313a:	ce 01       	movw	r24, r28
    313c:	8a 5f       	subi	r24, 0xFA	; 250
    313e:	9e 4f       	sbci	r25, 0xFE	; 254
    3140:	fc 01       	movw	r30, r24
    3142:	80 81       	ld	r24, Z
    3144:	91 81       	ldd	r25, Z+1	; 0x01
    3146:	89 2b       	or	r24, r25
    3148:	a1 f6       	brne	.-88     	; 0x30f2 <main+0x1d92>
    314a:	2c c0       	rjmp	.+88     	; 0x31a4 <main+0x1e44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    314c:	8e 01       	movw	r16, r28
    314e:	0a 5f       	subi	r16, 0xFA	; 250
    3150:	1e 4f       	sbci	r17, 0xFE	; 254
    3152:	ce 01       	movw	r24, r28
    3154:	8e 5f       	subi	r24, 0xFE	; 254
    3156:	9e 4f       	sbci	r25, 0xFE	; 254
    3158:	fc 01       	movw	r30, r24
    315a:	60 81       	ld	r22, Z
    315c:	71 81       	ldd	r23, Z+1	; 0x01
    315e:	82 81       	ldd	r24, Z+2	; 0x02
    3160:	93 81       	ldd	r25, Z+3	; 0x03
    3162:	0e 94 4b 19 	call	0x3296	; 0x3296 <__fixunssfsi>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	f8 01       	movw	r30, r16
    316c:	91 83       	std	Z+1, r25	; 0x01
    316e:	80 83       	st	Z, r24
    3170:	ce 01       	movw	r24, r28
    3172:	86 5f       	subi	r24, 0xF6	; 246
    3174:	9e 4f       	sbci	r25, 0xFE	; 254
    3176:	9e 01       	movw	r18, r28
    3178:	2a 5f       	subi	r18, 0xFA	; 250
    317a:	3e 4f       	sbci	r19, 0xFE	; 254
    317c:	f9 01       	movw	r30, r18
    317e:	20 81       	ld	r18, Z
    3180:	31 81       	ldd	r19, Z+1	; 0x01
    3182:	fc 01       	movw	r30, r24
    3184:	31 83       	std	Z+1, r19	; 0x01
    3186:	20 83       	st	Z, r18
    3188:	ce 01       	movw	r24, r28
    318a:	86 5f       	subi	r24, 0xF6	; 246
    318c:	9e 4f       	sbci	r25, 0xFE	; 254
    318e:	fc 01       	movw	r30, r24
    3190:	80 81       	ld	r24, Z
    3192:	91 81       	ldd	r25, Z+1	; 0x01
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	f1 f7       	brne	.-4      	; 0x3194 <main+0x1e34>
    3198:	9e 01       	movw	r18, r28
    319a:	26 5f       	subi	r18, 0xF6	; 246
    319c:	3e 4f       	sbci	r19, 0xFE	; 254
    319e:	f9 01       	movw	r30, r18
    31a0:	91 83       	std	Z+1, r25	; 0x01
    31a2:	80 83       	st	Z, r24
			}
		_delay_ms(1000);
    }
    31a4:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <main+0x46>

000031a8 <__cmpsf2>:
    31a8:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <__fp_cmp>
    31ac:	08 f4       	brcc	.+2      	; 0x31b0 <__cmpsf2+0x8>
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	08 95       	ret

000031b2 <__divsf3>:
    31b2:	0e 94 ed 18 	call	0x31da	; 0x31da <__divsf3x>
    31b6:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__fp_round>
    31ba:	0e 94 ae 19 	call	0x335c	; 0x335c <__fp_pscB>
    31be:	58 f0       	brcs	.+22     	; 0x31d6 <__divsf3+0x24>
    31c0:	0e 94 a7 19 	call	0x334e	; 0x334e <__fp_pscA>
    31c4:	40 f0       	brcs	.+16     	; 0x31d6 <__divsf3+0x24>
    31c6:	29 f4       	brne	.+10     	; 0x31d2 <__divsf3+0x20>
    31c8:	5f 3f       	cpi	r21, 0xFF	; 255
    31ca:	29 f0       	breq	.+10     	; 0x31d6 <__divsf3+0x24>
    31cc:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__fp_inf>
    31d0:	51 11       	cpse	r21, r1
    31d2:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__fp_szero>
    31d6:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__fp_nan>

000031da <__divsf3x>:
    31da:	0e 94 c6 19 	call	0x338c	; 0x338c <__fp_split3>
    31de:	68 f3       	brcs	.-38     	; 0x31ba <__divsf3+0x8>

000031e0 <__divsf3_pse>:
    31e0:	99 23       	and	r25, r25
    31e2:	b1 f3       	breq	.-20     	; 0x31d0 <__divsf3+0x1e>
    31e4:	55 23       	and	r21, r21
    31e6:	91 f3       	breq	.-28     	; 0x31cc <__divsf3+0x1a>
    31e8:	95 1b       	sub	r25, r21
    31ea:	55 0b       	sbc	r21, r21
    31ec:	bb 27       	eor	r27, r27
    31ee:	aa 27       	eor	r26, r26
    31f0:	62 17       	cp	r22, r18
    31f2:	73 07       	cpc	r23, r19
    31f4:	84 07       	cpc	r24, r20
    31f6:	38 f0       	brcs	.+14     	; 0x3206 <__divsf3_pse+0x26>
    31f8:	9f 5f       	subi	r25, 0xFF	; 255
    31fa:	5f 4f       	sbci	r21, 0xFF	; 255
    31fc:	22 0f       	add	r18, r18
    31fe:	33 1f       	adc	r19, r19
    3200:	44 1f       	adc	r20, r20
    3202:	aa 1f       	adc	r26, r26
    3204:	a9 f3       	breq	.-22     	; 0x31f0 <__divsf3_pse+0x10>
    3206:	35 d0       	rcall	.+106    	; 0x3272 <__divsf3_pse+0x92>
    3208:	0e 2e       	mov	r0, r30
    320a:	3a f0       	brmi	.+14     	; 0x321a <__divsf3_pse+0x3a>
    320c:	e0 e8       	ldi	r30, 0x80	; 128
    320e:	32 d0       	rcall	.+100    	; 0x3274 <__divsf3_pse+0x94>
    3210:	91 50       	subi	r25, 0x01	; 1
    3212:	50 40       	sbci	r21, 0x00	; 0
    3214:	e6 95       	lsr	r30
    3216:	00 1c       	adc	r0, r0
    3218:	ca f7       	brpl	.-14     	; 0x320c <__divsf3_pse+0x2c>
    321a:	2b d0       	rcall	.+86     	; 0x3272 <__divsf3_pse+0x92>
    321c:	fe 2f       	mov	r31, r30
    321e:	29 d0       	rcall	.+82     	; 0x3272 <__divsf3_pse+0x92>
    3220:	66 0f       	add	r22, r22
    3222:	77 1f       	adc	r23, r23
    3224:	88 1f       	adc	r24, r24
    3226:	bb 1f       	adc	r27, r27
    3228:	26 17       	cp	r18, r22
    322a:	37 07       	cpc	r19, r23
    322c:	48 07       	cpc	r20, r24
    322e:	ab 07       	cpc	r26, r27
    3230:	b0 e8       	ldi	r27, 0x80	; 128
    3232:	09 f0       	breq	.+2      	; 0x3236 <__divsf3_pse+0x56>
    3234:	bb 0b       	sbc	r27, r27
    3236:	80 2d       	mov	r24, r0
    3238:	bf 01       	movw	r22, r30
    323a:	ff 27       	eor	r31, r31
    323c:	93 58       	subi	r25, 0x83	; 131
    323e:	5f 4f       	sbci	r21, 0xFF	; 255
    3240:	3a f0       	brmi	.+14     	; 0x3250 <__divsf3_pse+0x70>
    3242:	9e 3f       	cpi	r25, 0xFE	; 254
    3244:	51 05       	cpc	r21, r1
    3246:	78 f0       	brcs	.+30     	; 0x3266 <__divsf3_pse+0x86>
    3248:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__fp_inf>
    324c:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__fp_szero>
    3250:	5f 3f       	cpi	r21, 0xFF	; 255
    3252:	e4 f3       	brlt	.-8      	; 0x324c <__divsf3_pse+0x6c>
    3254:	98 3e       	cpi	r25, 0xE8	; 232
    3256:	d4 f3       	brlt	.-12     	; 0x324c <__divsf3_pse+0x6c>
    3258:	86 95       	lsr	r24
    325a:	77 95       	ror	r23
    325c:	67 95       	ror	r22
    325e:	b7 95       	ror	r27
    3260:	f7 95       	ror	r31
    3262:	9f 5f       	subi	r25, 0xFF	; 255
    3264:	c9 f7       	brne	.-14     	; 0x3258 <__divsf3_pse+0x78>
    3266:	88 0f       	add	r24, r24
    3268:	91 1d       	adc	r25, r1
    326a:	96 95       	lsr	r25
    326c:	87 95       	ror	r24
    326e:	97 f9       	bld	r25, 7
    3270:	08 95       	ret
    3272:	e1 e0       	ldi	r30, 0x01	; 1
    3274:	66 0f       	add	r22, r22
    3276:	77 1f       	adc	r23, r23
    3278:	88 1f       	adc	r24, r24
    327a:	bb 1f       	adc	r27, r27
    327c:	62 17       	cp	r22, r18
    327e:	73 07       	cpc	r23, r19
    3280:	84 07       	cpc	r24, r20
    3282:	ba 07       	cpc	r27, r26
    3284:	20 f0       	brcs	.+8      	; 0x328e <__divsf3_pse+0xae>
    3286:	62 1b       	sub	r22, r18
    3288:	73 0b       	sbc	r23, r19
    328a:	84 0b       	sbc	r24, r20
    328c:	ba 0b       	sbc	r27, r26
    328e:	ee 1f       	adc	r30, r30
    3290:	88 f7       	brcc	.-30     	; 0x3274 <__divsf3_pse+0x94>
    3292:	e0 95       	com	r30
    3294:	08 95       	ret

00003296 <__fixunssfsi>:
    3296:	0e 94 ce 19 	call	0x339c	; 0x339c <__fp_splitA>
    329a:	88 f0       	brcs	.+34     	; 0x32be <__fixunssfsi+0x28>
    329c:	9f 57       	subi	r25, 0x7F	; 127
    329e:	98 f0       	brcs	.+38     	; 0x32c6 <__fixunssfsi+0x30>
    32a0:	b9 2f       	mov	r27, r25
    32a2:	99 27       	eor	r25, r25
    32a4:	b7 51       	subi	r27, 0x17	; 23
    32a6:	b0 f0       	brcs	.+44     	; 0x32d4 <__fixunssfsi+0x3e>
    32a8:	e1 f0       	breq	.+56     	; 0x32e2 <__fixunssfsi+0x4c>
    32aa:	66 0f       	add	r22, r22
    32ac:	77 1f       	adc	r23, r23
    32ae:	88 1f       	adc	r24, r24
    32b0:	99 1f       	adc	r25, r25
    32b2:	1a f0       	brmi	.+6      	; 0x32ba <__fixunssfsi+0x24>
    32b4:	ba 95       	dec	r27
    32b6:	c9 f7       	brne	.-14     	; 0x32aa <__fixunssfsi+0x14>
    32b8:	14 c0       	rjmp	.+40     	; 0x32e2 <__fixunssfsi+0x4c>
    32ba:	b1 30       	cpi	r27, 0x01	; 1
    32bc:	91 f0       	breq	.+36     	; 0x32e2 <__fixunssfsi+0x4c>
    32be:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__fp_zero>
    32c2:	b1 e0       	ldi	r27, 0x01	; 1
    32c4:	08 95       	ret
    32c6:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__fp_zero>
    32ca:	67 2f       	mov	r22, r23
    32cc:	78 2f       	mov	r23, r24
    32ce:	88 27       	eor	r24, r24
    32d0:	b8 5f       	subi	r27, 0xF8	; 248
    32d2:	39 f0       	breq	.+14     	; 0x32e2 <__fixunssfsi+0x4c>
    32d4:	b9 3f       	cpi	r27, 0xF9	; 249
    32d6:	cc f3       	brlt	.-14     	; 0x32ca <__fixunssfsi+0x34>
    32d8:	86 95       	lsr	r24
    32da:	77 95       	ror	r23
    32dc:	67 95       	ror	r22
    32de:	b3 95       	inc	r27
    32e0:	d9 f7       	brne	.-10     	; 0x32d8 <__fixunssfsi+0x42>
    32e2:	3e f4       	brtc	.+14     	; 0x32f2 <__fixunssfsi+0x5c>
    32e4:	90 95       	com	r25
    32e6:	80 95       	com	r24
    32e8:	70 95       	com	r23
    32ea:	61 95       	neg	r22
    32ec:	7f 4f       	sbci	r23, 0xFF	; 255
    32ee:	8f 4f       	sbci	r24, 0xFF	; 255
    32f0:	9f 4f       	sbci	r25, 0xFF	; 255
    32f2:	08 95       	ret

000032f4 <__fp_cmp>:
    32f4:	99 0f       	add	r25, r25
    32f6:	00 08       	sbc	r0, r0
    32f8:	55 0f       	add	r21, r21
    32fa:	aa 0b       	sbc	r26, r26
    32fc:	e0 e8       	ldi	r30, 0x80	; 128
    32fe:	fe ef       	ldi	r31, 0xFE	; 254
    3300:	16 16       	cp	r1, r22
    3302:	17 06       	cpc	r1, r23
    3304:	e8 07       	cpc	r30, r24
    3306:	f9 07       	cpc	r31, r25
    3308:	c0 f0       	brcs	.+48     	; 0x333a <__fp_cmp+0x46>
    330a:	12 16       	cp	r1, r18
    330c:	13 06       	cpc	r1, r19
    330e:	e4 07       	cpc	r30, r20
    3310:	f5 07       	cpc	r31, r21
    3312:	98 f0       	brcs	.+38     	; 0x333a <__fp_cmp+0x46>
    3314:	62 1b       	sub	r22, r18
    3316:	73 0b       	sbc	r23, r19
    3318:	84 0b       	sbc	r24, r20
    331a:	95 0b       	sbc	r25, r21
    331c:	39 f4       	brne	.+14     	; 0x332c <__fp_cmp+0x38>
    331e:	0a 26       	eor	r0, r26
    3320:	61 f0       	breq	.+24     	; 0x333a <__fp_cmp+0x46>
    3322:	23 2b       	or	r18, r19
    3324:	24 2b       	or	r18, r20
    3326:	25 2b       	or	r18, r21
    3328:	21 f4       	brne	.+8      	; 0x3332 <__fp_cmp+0x3e>
    332a:	08 95       	ret
    332c:	0a 26       	eor	r0, r26
    332e:	09 f4       	brne	.+2      	; 0x3332 <__fp_cmp+0x3e>
    3330:	a1 40       	sbci	r26, 0x01	; 1
    3332:	a6 95       	lsr	r26
    3334:	8f ef       	ldi	r24, 0xFF	; 255
    3336:	81 1d       	adc	r24, r1
    3338:	81 1d       	adc	r24, r1
    333a:	08 95       	ret

0000333c <__fp_inf>:
    333c:	97 f9       	bld	r25, 7
    333e:	9f 67       	ori	r25, 0x7F	; 127
    3340:	80 e8       	ldi	r24, 0x80	; 128
    3342:	70 e0       	ldi	r23, 0x00	; 0
    3344:	60 e0       	ldi	r22, 0x00	; 0
    3346:	08 95       	ret

00003348 <__fp_nan>:
    3348:	9f ef       	ldi	r25, 0xFF	; 255
    334a:	80 ec       	ldi	r24, 0xC0	; 192
    334c:	08 95       	ret

0000334e <__fp_pscA>:
    334e:	00 24       	eor	r0, r0
    3350:	0a 94       	dec	r0
    3352:	16 16       	cp	r1, r22
    3354:	17 06       	cpc	r1, r23
    3356:	18 06       	cpc	r1, r24
    3358:	09 06       	cpc	r0, r25
    335a:	08 95       	ret

0000335c <__fp_pscB>:
    335c:	00 24       	eor	r0, r0
    335e:	0a 94       	dec	r0
    3360:	12 16       	cp	r1, r18
    3362:	13 06       	cpc	r1, r19
    3364:	14 06       	cpc	r1, r20
    3366:	05 06       	cpc	r0, r21
    3368:	08 95       	ret

0000336a <__fp_round>:
    336a:	09 2e       	mov	r0, r25
    336c:	03 94       	inc	r0
    336e:	00 0c       	add	r0, r0
    3370:	11 f4       	brne	.+4      	; 0x3376 <__fp_round+0xc>
    3372:	88 23       	and	r24, r24
    3374:	52 f0       	brmi	.+20     	; 0x338a <__fp_round+0x20>
    3376:	bb 0f       	add	r27, r27
    3378:	40 f4       	brcc	.+16     	; 0x338a <__fp_round+0x20>
    337a:	bf 2b       	or	r27, r31
    337c:	11 f4       	brne	.+4      	; 0x3382 <__fp_round+0x18>
    337e:	60 ff       	sbrs	r22, 0
    3380:	04 c0       	rjmp	.+8      	; 0x338a <__fp_round+0x20>
    3382:	6f 5f       	subi	r22, 0xFF	; 255
    3384:	7f 4f       	sbci	r23, 0xFF	; 255
    3386:	8f 4f       	sbci	r24, 0xFF	; 255
    3388:	9f 4f       	sbci	r25, 0xFF	; 255
    338a:	08 95       	ret

0000338c <__fp_split3>:
    338c:	57 fd       	sbrc	r21, 7
    338e:	90 58       	subi	r25, 0x80	; 128
    3390:	44 0f       	add	r20, r20
    3392:	55 1f       	adc	r21, r21
    3394:	59 f0       	breq	.+22     	; 0x33ac <__fp_splitA+0x10>
    3396:	5f 3f       	cpi	r21, 0xFF	; 255
    3398:	71 f0       	breq	.+28     	; 0x33b6 <__fp_splitA+0x1a>
    339a:	47 95       	ror	r20

0000339c <__fp_splitA>:
    339c:	88 0f       	add	r24, r24
    339e:	97 fb       	bst	r25, 7
    33a0:	99 1f       	adc	r25, r25
    33a2:	61 f0       	breq	.+24     	; 0x33bc <__fp_splitA+0x20>
    33a4:	9f 3f       	cpi	r25, 0xFF	; 255
    33a6:	79 f0       	breq	.+30     	; 0x33c6 <__fp_splitA+0x2a>
    33a8:	87 95       	ror	r24
    33aa:	08 95       	ret
    33ac:	12 16       	cp	r1, r18
    33ae:	13 06       	cpc	r1, r19
    33b0:	14 06       	cpc	r1, r20
    33b2:	55 1f       	adc	r21, r21
    33b4:	f2 cf       	rjmp	.-28     	; 0x339a <__fp_split3+0xe>
    33b6:	46 95       	lsr	r20
    33b8:	f1 df       	rcall	.-30     	; 0x339c <__fp_splitA>
    33ba:	08 c0       	rjmp	.+16     	; 0x33cc <__fp_splitA+0x30>
    33bc:	16 16       	cp	r1, r22
    33be:	17 06       	cpc	r1, r23
    33c0:	18 06       	cpc	r1, r24
    33c2:	99 1f       	adc	r25, r25
    33c4:	f1 cf       	rjmp	.-30     	; 0x33a8 <__fp_splitA+0xc>
    33c6:	86 95       	lsr	r24
    33c8:	71 05       	cpc	r23, r1
    33ca:	61 05       	cpc	r22, r1
    33cc:	08 94       	sec
    33ce:	08 95       	ret

000033d0 <__fp_zero>:
    33d0:	e8 94       	clt

000033d2 <__fp_szero>:
    33d2:	bb 27       	eor	r27, r27
    33d4:	66 27       	eor	r22, r22
    33d6:	77 27       	eor	r23, r23
    33d8:	cb 01       	movw	r24, r22
    33da:	97 f9       	bld	r25, 7
    33dc:	08 95       	ret

000033de <__gesf2>:
    33de:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <__fp_cmp>
    33e2:	08 f4       	brcc	.+2      	; 0x33e6 <__gesf2+0x8>
    33e4:	8f ef       	ldi	r24, 0xFF	; 255
    33e6:	08 95       	ret

000033e8 <__mulsf3>:
    33e8:	0e 94 07 1a 	call	0x340e	; 0x340e <__mulsf3x>
    33ec:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__fp_round>
    33f0:	0e 94 a7 19 	call	0x334e	; 0x334e <__fp_pscA>
    33f4:	38 f0       	brcs	.+14     	; 0x3404 <__mulsf3+0x1c>
    33f6:	0e 94 ae 19 	call	0x335c	; 0x335c <__fp_pscB>
    33fa:	20 f0       	brcs	.+8      	; 0x3404 <__mulsf3+0x1c>
    33fc:	95 23       	and	r25, r21
    33fe:	11 f0       	breq	.+4      	; 0x3404 <__mulsf3+0x1c>
    3400:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__fp_inf>
    3404:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__fp_nan>
    3408:	11 24       	eor	r1, r1
    340a:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__fp_szero>

0000340e <__mulsf3x>:
    340e:	0e 94 c6 19 	call	0x338c	; 0x338c <__fp_split3>
    3412:	70 f3       	brcs	.-36     	; 0x33f0 <__mulsf3+0x8>

00003414 <__mulsf3_pse>:
    3414:	95 9f       	mul	r25, r21
    3416:	c1 f3       	breq	.-16     	; 0x3408 <__mulsf3+0x20>
    3418:	95 0f       	add	r25, r21
    341a:	50 e0       	ldi	r21, 0x00	; 0
    341c:	55 1f       	adc	r21, r21
    341e:	62 9f       	mul	r22, r18
    3420:	f0 01       	movw	r30, r0
    3422:	72 9f       	mul	r23, r18
    3424:	bb 27       	eor	r27, r27
    3426:	f0 0d       	add	r31, r0
    3428:	b1 1d       	adc	r27, r1
    342a:	63 9f       	mul	r22, r19
    342c:	aa 27       	eor	r26, r26
    342e:	f0 0d       	add	r31, r0
    3430:	b1 1d       	adc	r27, r1
    3432:	aa 1f       	adc	r26, r26
    3434:	64 9f       	mul	r22, r20
    3436:	66 27       	eor	r22, r22
    3438:	b0 0d       	add	r27, r0
    343a:	a1 1d       	adc	r26, r1
    343c:	66 1f       	adc	r22, r22
    343e:	82 9f       	mul	r24, r18
    3440:	22 27       	eor	r18, r18
    3442:	b0 0d       	add	r27, r0
    3444:	a1 1d       	adc	r26, r1
    3446:	62 1f       	adc	r22, r18
    3448:	73 9f       	mul	r23, r19
    344a:	b0 0d       	add	r27, r0
    344c:	a1 1d       	adc	r26, r1
    344e:	62 1f       	adc	r22, r18
    3450:	83 9f       	mul	r24, r19
    3452:	a0 0d       	add	r26, r0
    3454:	61 1d       	adc	r22, r1
    3456:	22 1f       	adc	r18, r18
    3458:	74 9f       	mul	r23, r20
    345a:	33 27       	eor	r19, r19
    345c:	a0 0d       	add	r26, r0
    345e:	61 1d       	adc	r22, r1
    3460:	23 1f       	adc	r18, r19
    3462:	84 9f       	mul	r24, r20
    3464:	60 0d       	add	r22, r0
    3466:	21 1d       	adc	r18, r1
    3468:	82 2f       	mov	r24, r18
    346a:	76 2f       	mov	r23, r22
    346c:	6a 2f       	mov	r22, r26
    346e:	11 24       	eor	r1, r1
    3470:	9f 57       	subi	r25, 0x7F	; 127
    3472:	50 40       	sbci	r21, 0x00	; 0
    3474:	9a f0       	brmi	.+38     	; 0x349c <__mulsf3_pse+0x88>
    3476:	f1 f0       	breq	.+60     	; 0x34b4 <__mulsf3_pse+0xa0>
    3478:	88 23       	and	r24, r24
    347a:	4a f0       	brmi	.+18     	; 0x348e <__mulsf3_pse+0x7a>
    347c:	ee 0f       	add	r30, r30
    347e:	ff 1f       	adc	r31, r31
    3480:	bb 1f       	adc	r27, r27
    3482:	66 1f       	adc	r22, r22
    3484:	77 1f       	adc	r23, r23
    3486:	88 1f       	adc	r24, r24
    3488:	91 50       	subi	r25, 0x01	; 1
    348a:	50 40       	sbci	r21, 0x00	; 0
    348c:	a9 f7       	brne	.-22     	; 0x3478 <__mulsf3_pse+0x64>
    348e:	9e 3f       	cpi	r25, 0xFE	; 254
    3490:	51 05       	cpc	r21, r1
    3492:	80 f0       	brcs	.+32     	; 0x34b4 <__mulsf3_pse+0xa0>
    3494:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__fp_inf>
    3498:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__fp_szero>
    349c:	5f 3f       	cpi	r21, 0xFF	; 255
    349e:	e4 f3       	brlt	.-8      	; 0x3498 <__mulsf3_pse+0x84>
    34a0:	98 3e       	cpi	r25, 0xE8	; 232
    34a2:	d4 f3       	brlt	.-12     	; 0x3498 <__mulsf3_pse+0x84>
    34a4:	86 95       	lsr	r24
    34a6:	77 95       	ror	r23
    34a8:	67 95       	ror	r22
    34aa:	b7 95       	ror	r27
    34ac:	f7 95       	ror	r31
    34ae:	e7 95       	ror	r30
    34b0:	9f 5f       	subi	r25, 0xFF	; 255
    34b2:	c1 f7       	brne	.-16     	; 0x34a4 <__mulsf3_pse+0x90>
    34b4:	fe 2b       	or	r31, r30
    34b6:	88 0f       	add	r24, r24
    34b8:	91 1d       	adc	r25, r1
    34ba:	96 95       	lsr	r25
    34bc:	87 95       	ror	r24
    34be:	97 f9       	bld	r25, 7
    34c0:	08 95       	ret

000034c2 <_exit>:
    34c2:	f8 94       	cli

000034c4 <__stop_program>:
    34c4:	ff cf       	rjmp	.-2      	; 0x34c4 <__stop_program>
