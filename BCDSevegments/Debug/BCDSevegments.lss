
BCDSevegments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003482  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000034d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000034d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003508  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001671  00000000  00000000  00003644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000822  00000000  00000000  00004cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001498  00000000  00000000  000054d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  00006970  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000503  00000000  00000000  00006c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000486  00000000  00000000  00007103  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00007589  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61
      60:	0e 94 92 08 	call	0x1124	; 0x1124 <main>
      64:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <_exit>

00000068 <__bad_interrupt>:
      68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <BCDSevegments_Init>:
	}
	if(segment_Number == 4)
	{
		DIO_WritePin(BCDSEVSEGMENTS4_Enable_PIN,LOW);
	}
}
      6c:	cf 93       	push	r28
      6e:	df 93       	push	r29
      70:	cd b7       	in	r28, 0x3d	; 61
      72:	de b7       	in	r29, 0x3e	; 62
      74:	61 e0       	ldi	r22, 0x01	; 1
      76:	8a e1       	ldi	r24, 0x1A	; 26
      78:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      7c:	61 e0       	ldi	r22, 0x01	; 1
      7e:	8b e1       	ldi	r24, 0x1B	; 27
      80:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      84:	61 e0       	ldi	r22, 0x01	; 1
      86:	8e e1       	ldi	r24, 0x1E	; 30
      88:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      8c:	61 e0       	ldi	r22, 0x01	; 1
      8e:	8f e1       	ldi	r24, 0x1F	; 31
      90:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      94:	61 e0       	ldi	r22, 0x01	; 1
      96:	88 e0       	ldi	r24, 0x08	; 8
      98:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      9c:	61 e0       	ldi	r22, 0x01	; 1
      9e:	89 e0       	ldi	r24, 0x09	; 9
      a0:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      a4:	61 e0       	ldi	r22, 0x01	; 1
      a6:	8a e0       	ldi	r24, 0x0A	; 10
      a8:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      ac:	61 e0       	ldi	r22, 0x01	; 1
      ae:	8b e0       	ldi	r24, 0x0B	; 11
      b0:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      b4:	60 e0       	ldi	r22, 0x00	; 0
      b6:	8a e1       	ldi	r24, 0x1A	; 26
      b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      bc:	60 e0       	ldi	r22, 0x00	; 0
      be:	8b e1       	ldi	r24, 0x1B	; 27
      c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      c4:	60 e0       	ldi	r22, 0x00	; 0
      c6:	8e e1       	ldi	r24, 0x1E	; 30
      c8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	8f e1       	ldi	r24, 0x1F	; 31
      d0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      d4:	00 00       	nop
      d6:	df 91       	pop	r29
      d8:	cf 91       	pop	r28
      da:	08 95       	ret

000000dc <BCDSevegments_enable>:
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	1f 92       	push	r1
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
      e6:	89 83       	std	Y+1, r24	; 0x01
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	81 30       	cpi	r24, 0x01	; 1
      ec:	21 f4       	brne	.+8      	; 0xf6 <BCDSevegments_enable+0x1a>
      ee:	61 e0       	ldi	r22, 0x01	; 1
      f0:	8a e1       	ldi	r24, 0x1A	; 26
      f2:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      f6:	89 81       	ldd	r24, Y+1	; 0x01
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	21 f4       	brne	.+8      	; 0x104 <BCDSevegments_enable+0x28>
      fc:	61 e0       	ldi	r22, 0x01	; 1
      fe:	8b e1       	ldi	r24, 0x1B	; 27
     100:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	83 30       	cpi	r24, 0x03	; 3
     108:	21 f4       	brne	.+8      	; 0x112 <BCDSevegments_enable+0x36>
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	8e e1       	ldi	r24, 0x1E	; 30
     10e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	84 30       	cpi	r24, 0x04	; 4
     116:	21 f4       	brne	.+8      	; 0x120 <BCDSevegments_enable+0x44>
     118:	61 e0       	ldi	r22, 0x01	; 1
     11a:	8f e1       	ldi	r24, 0x1F	; 31
     11c:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     120:	00 00       	nop
     122:	0f 90       	pop	r0
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <BCDSevegments_displayNo>:
void BCDSevegments_displayNo(uint8 number)
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	1f 92       	push	r1
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	89 83       	std	Y+1, r24	; 0x01
	if (number == 0)
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	88 23       	and	r24, r24
     13a:	89 f4       	brne	.+34     	; 0x15e <BCDSevegments_displayNo+0x34>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	88 e0       	ldi	r24, 0x08	; 8
     140:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	89 e0       	ldi	r24, 0x09	; 9
     148:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	8a e0       	ldi	r24, 0x0A	; 10
     150:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	8b e0       	ldi	r24, 0x0B	; 11
     158:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     15c:	b3 c0       	rjmp	.+358    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 1)
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	89 f4       	brne	.+34     	; 0x186 <BCDSevegments_displayNo+0x5c>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	88 e0       	ldi	r24, 0x08	; 8
     168:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	89 e0       	ldi	r24, 0x09	; 9
     170:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	8a e0       	ldi	r24, 0x0A	; 10
     178:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	8b e0       	ldi	r24, 0x0B	; 11
     180:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     184:	9f c0       	rjmp	.+318    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 2)
     186:	89 81       	ldd	r24, Y+1	; 0x01
     188:	82 30       	cpi	r24, 0x02	; 2
     18a:	89 f4       	brne	.+34     	; 0x1ae <BCDSevegments_displayNo+0x84>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	88 e0       	ldi	r24, 0x08	; 8
     190:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	89 e0       	ldi	r24, 0x09	; 9
     198:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	8a e0       	ldi	r24, 0x0A	; 10
     1a0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1a4:	60 e0       	ldi	r22, 0x00	; 0
     1a6:	8b e0       	ldi	r24, 0x0B	; 11
     1a8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1ac:	8b c0       	rjmp	.+278    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 3)
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	83 30       	cpi	r24, 0x03	; 3
     1b2:	89 f4       	brne	.+34     	; 0x1d6 <BCDSevegments_displayNo+0xac>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     1b4:	61 e0       	ldi	r22, 0x01	; 1
     1b6:	88 e0       	ldi	r24, 0x08	; 8
     1b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     1bc:	61 e0       	ldi	r22, 0x01	; 1
     1be:	89 e0       	ldi	r24, 0x09	; 9
     1c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	8a e0       	ldi	r24, 0x0A	; 10
     1c8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1cc:	60 e0       	ldi	r22, 0x00	; 0
     1ce:	8b e0       	ldi	r24, 0x0B	; 11
     1d0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1d4:	77 c0       	rjmp	.+238    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if (number == 4)
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	84 30       	cpi	r24, 0x04	; 4
     1da:	89 f4       	brne	.+34     	; 0x1fe <BCDSevegments_displayNo+0xd4>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	88 e0       	ldi	r24, 0x08	; 8
     1e0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	89 e0       	ldi	r24, 0x09	; 9
     1e8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     1ec:	61 e0       	ldi	r22, 0x01	; 1
     1ee:	8a e0       	ldi	r24, 0x0A	; 10
     1f0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	8b e0       	ldi	r24, 0x0B	; 11
     1f8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1fc:	63 c0       	rjmp	.+198    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 5)
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	85 30       	cpi	r24, 0x05	; 5
     202:	89 f4       	brne	.+34     	; 0x226 <BCDSevegments_displayNo+0xfc>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     204:	61 e0       	ldi	r22, 0x01	; 1
     206:	88 e0       	ldi	r24, 0x08	; 8
     208:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	89 e0       	ldi	r24, 0x09	; 9
     210:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     214:	61 e0       	ldi	r22, 0x01	; 1
     216:	8a e0       	ldi	r24, 0x0A	; 10
     218:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	8b e0       	ldi	r24, 0x0B	; 11
     220:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     224:	4f c0       	rjmp	.+158    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 6)
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	86 30       	cpi	r24, 0x06	; 6
     22a:	89 f4       	brne	.+34     	; 0x24e <BCDSevegments_displayNo+0x124>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	88 e0       	ldi	r24, 0x08	; 8
     230:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	89 e0       	ldi	r24, 0x09	; 9
     238:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	8a e0       	ldi	r24, 0x0A	; 10
     240:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	8b e0       	ldi	r24, 0x0B	; 11
     248:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     24c:	3b c0       	rjmp	.+118    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 7)
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	87 30       	cpi	r24, 0x07	; 7
     252:	89 f4       	brne	.+34     	; 0x276 <BCDSevegments_displayNo+0x14c>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	88 e0       	ldi	r24, 0x08	; 8
     258:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	89 e0       	ldi	r24, 0x09	; 9
     260:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     264:	61 e0       	ldi	r22, 0x01	; 1
     266:	8a e0       	ldi	r24, 0x0A	; 10
     268:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	8b e0       	ldi	r24, 0x0B	; 11
     270:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     274:	27 c0       	rjmp	.+78     	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 8)
     276:	89 81       	ldd	r24, Y+1	; 0x01
     278:	88 30       	cpi	r24, 0x08	; 8
     27a:	89 f4       	brne	.+34     	; 0x29e <BCDSevegments_displayNo+0x174>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	88 e0       	ldi	r24, 0x08	; 8
     280:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	89 e0       	ldi	r24, 0x09	; 9
     288:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	8a e0       	ldi	r24, 0x0A	; 10
     290:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	8b e0       	ldi	r24, 0x0B	; 11
     298:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     29c:	13 c0       	rjmp	.+38     	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
	else if(number == 9)
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	89 30       	cpi	r24, 0x09	; 9
     2a2:	81 f4       	brne	.+32     	; 0x2c4 <BCDSevegments_displayNo+0x19a>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     2a4:	61 e0       	ldi	r22, 0x01	; 1
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	89 e0       	ldi	r24, 0x09	; 9
     2b0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	8a e0       	ldi	r24, 0x0A	; 10
     2b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	8b e0       	ldi	r24, 0x0B	; 11
     2c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	}
     2c4:	00 00       	nop
     2c6:	0f 90       	pop	r0
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <DIO_WritePin>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "BitwiseOperation.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <DIO_WritePin+0x6>
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	89 83       	std	Y+1, r24	; 0x01
     2da:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNum >= 0 && PinNum < 8 )
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	88 30       	cpi	r24, 0x08	; 8
     2e0:	78 f5       	brcc	.+94     	; 0x340 <DIO_WritePin+0x72>
	{
			if(PinValue == 1)
     2e2:	8a 81       	ldd	r24, Y+2	; 0x02
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	a1 f4       	brne	.+40     	; 0x310 <DIO_WritePin+0x42>
			{
				Set_Bit( PORTA , PinNum);
     2e8:	8b e3       	ldi	r24, 0x3B	; 59
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	2b e3       	ldi	r18, 0x3B	; 59
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	f9 01       	movw	r30, r18
     2f2:	20 81       	ld	r18, Z
     2f4:	62 2f       	mov	r22, r18
     2f6:	29 81       	ldd	r18, Y+1	; 0x01
     2f8:	42 2f       	mov	r20, r18
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	21 e0       	ldi	r18, 0x01	; 1
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_WritePin+0x38>
     302:	22 0f       	add	r18, r18
     304:	33 1f       	adc	r19, r19
     306:	4a 95       	dec	r20
     308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_WritePin+0x34>
     30a:	26 2b       	or	r18, r22
     30c:	fc 01       	movw	r30, r24
     30e:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	88 23       	and	r24, r24
     314:	a9 f4       	brne	.+42     	; 0x340 <DIO_WritePin+0x72>
			{
				Clear_Bit( PORTA , PinNum);
     316:	8b e3       	ldi	r24, 0x3B	; 59
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	2b e3       	ldi	r18, 0x3B	; 59
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	f9 01       	movw	r30, r18
     320:	20 81       	ld	r18, Z
     322:	62 2f       	mov	r22, r18
     324:	29 81       	ldd	r18, Y+1	; 0x01
     326:	42 2f       	mov	r20, r18
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	21 e0       	ldi	r18, 0x01	; 1
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_WritePin+0x66>
     330:	22 0f       	add	r18, r18
     332:	33 1f       	adc	r19, r19
     334:	4a 95       	dec	r20
     336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_WritePin+0x62>
     338:	20 95       	com	r18
     33a:	26 23       	and	r18, r22
     33c:	fc 01       	movw	r30, r24
     33e:	20 83       	st	Z, r18
			}
	}
	if(PinNum > 7 && PinNum < 16)
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	88 30       	cpi	r24, 0x08	; 8
     344:	c0 f1       	brcs	.+112    	; 0x3b6 <DIO_WritePin+0xe8>
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	80 31       	cpi	r24, 0x10	; 16
     34a:	a8 f5       	brcc	.+106    	; 0x3b6 <DIO_WritePin+0xe8>
	{
		if(PinValue == 1)
     34c:	8a 81       	ldd	r24, Y+2	; 0x02
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	b9 f4       	brne	.+46     	; 0x380 <DIO_WritePin+0xb2>
		{
			Set_Bit( PORTB , (PinNum-8));
     352:	88 e3       	ldi	r24, 0x38	; 56
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	28 e3       	ldi	r18, 0x38	; 56
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	f9 01       	movw	r30, r18
     35c:	20 81       	ld	r18, Z
     35e:	62 2f       	mov	r22, r18
     360:	29 81       	ldd	r18, Y+1	; 0x01
     362:	22 2f       	mov	r18, r18
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	a9 01       	movw	r20, r18
     368:	48 50       	subi	r20, 0x08	; 8
     36a:	51 09       	sbc	r21, r1
     36c:	21 e0       	ldi	r18, 0x01	; 1
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_WritePin+0xa8>
     372:	22 0f       	add	r18, r18
     374:	33 1f       	adc	r19, r19
     376:	4a 95       	dec	r20
     378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_WritePin+0xa4>
     37a:	26 2b       	or	r18, r22
     37c:	fc 01       	movw	r30, r24
     37e:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
     380:	8a 81       	ldd	r24, Y+2	; 0x02
     382:	88 23       	and	r24, r24
     384:	c1 f4       	brne	.+48     	; 0x3b6 <DIO_WritePin+0xe8>
		{
			Clear_Bit( PORTB , (PinNum-8));
     386:	88 e3       	ldi	r24, 0x38	; 56
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	28 e3       	ldi	r18, 0x38	; 56
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	f9 01       	movw	r30, r18
     390:	20 81       	ld	r18, Z
     392:	62 2f       	mov	r22, r18
     394:	29 81       	ldd	r18, Y+1	; 0x01
     396:	22 2f       	mov	r18, r18
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	a9 01       	movw	r20, r18
     39c:	48 50       	subi	r20, 0x08	; 8
     39e:	51 09       	sbc	r21, r1
     3a0:	21 e0       	ldi	r18, 0x01	; 1
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_WritePin+0xdc>
     3a6:	22 0f       	add	r18, r18
     3a8:	33 1f       	adc	r19, r19
     3aa:	4a 95       	dec	r20
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_WritePin+0xd8>
     3ae:	20 95       	com	r18
     3b0:	26 23       	and	r18, r22
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18
		}
	}
	if(PinNum > 15 && PinNum < 24)
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	80 31       	cpi	r24, 0x10	; 16
     3ba:	c0 f1       	brcs	.+112    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	88 31       	cpi	r24, 0x18	; 24
     3c0:	a8 f5       	brcc	.+106    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	{
		if(PinValue == 1)
     3c2:	8a 81       	ldd	r24, Y+2	; 0x02
     3c4:	81 30       	cpi	r24, 0x01	; 1
     3c6:	b9 f4       	brne	.+46     	; 0x3f6 <DIO_WritePin+0x128>
		{
			Set_Bit( PORTC , (PinNum-16));
     3c8:	85 e3       	ldi	r24, 0x35	; 53
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	25 e3       	ldi	r18, 0x35	; 53
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	f9 01       	movw	r30, r18
     3d2:	20 81       	ld	r18, Z
     3d4:	62 2f       	mov	r22, r18
     3d6:	29 81       	ldd	r18, Y+1	; 0x01
     3d8:	22 2f       	mov	r18, r18
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	a9 01       	movw	r20, r18
     3de:	40 51       	subi	r20, 0x10	; 16
     3e0:	51 09       	sbc	r21, r1
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_WritePin+0x11e>
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
     3ec:	4a 95       	dec	r20
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_WritePin+0x11a>
     3f0:	26 2b       	or	r18, r22
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
     3f6:	8a 81       	ldd	r24, Y+2	; 0x02
     3f8:	88 23       	and	r24, r24
     3fa:	c1 f4       	brne	.+48     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		{
			Clear_Bit( PORTC , (PinNum-16));
     3fc:	85 e3       	ldi	r24, 0x35	; 53
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	25 e3       	ldi	r18, 0x35	; 53
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	f9 01       	movw	r30, r18
     406:	20 81       	ld	r18, Z
     408:	62 2f       	mov	r22, r18
     40a:	29 81       	ldd	r18, Y+1	; 0x01
     40c:	22 2f       	mov	r18, r18
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	a9 01       	movw	r20, r18
     412:	40 51       	subi	r20, 0x10	; 16
     414:	51 09       	sbc	r21, r1
     416:	21 e0       	ldi	r18, 0x01	; 1
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41c:	22 0f       	add	r18, r18
     41e:	33 1f       	adc	r19, r19
     420:	4a 95       	dec	r20
     422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     424:	20 95       	com	r18
     426:	26 23       	and	r18, r22
     428:	fc 01       	movw	r30, r24
     42a:	20 83       	st	Z, r18
		}
	}
	
	if(PinNum > 24 && PinNum < 32)
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	89 31       	cpi	r24, 0x19	; 25
     430:	c0 f1       	brcs	.+112    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	80 32       	cpi	r24, 0x20	; 32
     436:	a8 f5       	brcc	.+106    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
	{
			if(PinValue == 1)
     438:	8a 81       	ldd	r24, Y+2	; 0x02
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	b9 f4       	brne	.+46     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			{
				Set_Bit( PORTD , (PinNum-24));
     43e:	82 e3       	ldi	r24, 0x32	; 50
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	22 e3       	ldi	r18, 0x32	; 50
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	f9 01       	movw	r30, r18
     448:	20 81       	ld	r18, Z
     44a:	62 2f       	mov	r22, r18
     44c:	29 81       	ldd	r18, Y+1	; 0x01
     44e:	22 2f       	mov	r18, r18
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	a9 01       	movw	r20, r18
     454:	48 51       	subi	r20, 0x18	; 24
     456:	51 09       	sbc	r21, r1
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45e:	22 0f       	add	r18, r18
     460:	33 1f       	adc	r19, r19
     462:	4a 95       	dec	r20
     464:	e2 f7       	brpl	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     466:	26 2b       	or	r18, r22
     468:	fc 01       	movw	r30, r24
     46a:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
     46c:	8a 81       	ldd	r24, Y+2	; 0x02
     46e:	88 23       	and	r24, r24
     470:	c1 f4       	brne	.+48     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			{
				Clear_Bit( PORTD , (PinNum-24));
     472:	82 e3       	ldi	r24, 0x32	; 50
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	22 e3       	ldi	r18, 0x32	; 50
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	f9 01       	movw	r30, r18
     47c:	20 81       	ld	r18, Z
     47e:	62 2f       	mov	r22, r18
     480:	29 81       	ldd	r18, Y+1	; 0x01
     482:	22 2f       	mov	r18, r18
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	a9 01       	movw	r20, r18
     488:	48 51       	subi	r20, 0x18	; 24
     48a:	51 09       	sbc	r21, r1
     48c:	21 e0       	ldi	r18, 0x01	; 1
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	02 c0       	rjmp	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     492:	22 0f       	add	r18, r18
     494:	33 1f       	adc	r19, r19
     496:	4a 95       	dec	r20
     498:	e2 f7       	brpl	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     49a:	20 95       	com	r18
     49c:	26 23       	and	r18, r22
     49e:	fc 01       	movw	r30, r24
     4a0:	20 83       	st	Z, r18
			}
	}
}
     4a2:	00 00       	nop
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <DIO_SetPinDirection>:
/*
pindirection = 1 output
pindirection = 0 input
*/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <DIO_SetPinDirection+0x6>
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	89 83       	std	Y+1, r24	; 0x01
     4ba:	6a 83       	std	Y+2, r22	; 0x02
		if(PinNum >= 0 && PinNum < 8 )
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	88 30       	cpi	r24, 0x08	; 8
     4c0:	78 f5       	brcc	.+94     	; 0x520 <DIO_SetPinDirection+0x72>
		{
			if(PinDirection== 1)
     4c2:	8a 81       	ldd	r24, Y+2	; 0x02
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	a1 f4       	brne	.+40     	; 0x4f0 <DIO_SetPinDirection+0x42>
			{
				Set_Bit( DDRA , PinNum);
     4c8:	8a e3       	ldi	r24, 0x3A	; 58
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	2a e3       	ldi	r18, 0x3A	; 58
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	f9 01       	movw	r30, r18
     4d2:	20 81       	ld	r18, Z
     4d4:	62 2f       	mov	r22, r18
     4d6:	29 81       	ldd	r18, Y+1	; 0x01
     4d8:	42 2f       	mov	r20, r18
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	21 e0       	ldi	r18, 0x01	; 1
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_SetPinDirection+0x38>
     4e2:	22 0f       	add	r18, r18
     4e4:	33 1f       	adc	r19, r19
     4e6:	4a 95       	dec	r20
     4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_SetPinDirection+0x34>
     4ea:	26 2b       	or	r18, r22
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     4f0:	8a 81       	ldd	r24, Y+2	; 0x02
     4f2:	88 23       	and	r24, r24
     4f4:	a9 f4       	brne	.+42     	; 0x520 <DIO_SetPinDirection+0x72>
			{
				Clear_Bit( DDRA , PinNum);
     4f6:	8a e3       	ldi	r24, 0x3A	; 58
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	2a e3       	ldi	r18, 0x3A	; 58
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	f9 01       	movw	r30, r18
     500:	20 81       	ld	r18, Z
     502:	62 2f       	mov	r22, r18
     504:	29 81       	ldd	r18, Y+1	; 0x01
     506:	42 2f       	mov	r20, r18
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	21 e0       	ldi	r18, 0x01	; 1
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_SetPinDirection+0x66>
     510:	22 0f       	add	r18, r18
     512:	33 1f       	adc	r19, r19
     514:	4a 95       	dec	r20
     516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_SetPinDirection+0x62>
     518:	20 95       	com	r18
     51a:	26 23       	and	r18, r22
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 7 && PinNum < 16)
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	88 30       	cpi	r24, 0x08	; 8
     524:	c0 f1       	brcs	.+112    	; 0x596 <DIO_SetPinDirection+0xe8>
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	80 31       	cpi	r24, 0x10	; 16
     52a:	a8 f5       	brcc	.+106    	; 0x596 <DIO_SetPinDirection+0xe8>
		{
			if(PinDirection== 1)
     52c:	8a 81       	ldd	r24, Y+2	; 0x02
     52e:	81 30       	cpi	r24, 0x01	; 1
     530:	b9 f4       	brne	.+46     	; 0x560 <DIO_SetPinDirection+0xb2>
			{
				Set_Bit( DDRB , (PinNum-8));
     532:	87 e3       	ldi	r24, 0x37	; 55
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	27 e3       	ldi	r18, 0x37	; 55
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	f9 01       	movw	r30, r18
     53c:	20 81       	ld	r18, Z
     53e:	62 2f       	mov	r22, r18
     540:	29 81       	ldd	r18, Y+1	; 0x01
     542:	22 2f       	mov	r18, r18
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	a9 01       	movw	r20, r18
     548:	48 50       	subi	r20, 0x08	; 8
     54a:	51 09       	sbc	r21, r1
     54c:	21 e0       	ldi	r18, 0x01	; 1
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_SetPinDirection+0xa8>
     552:	22 0f       	add	r18, r18
     554:	33 1f       	adc	r19, r19
     556:	4a 95       	dec	r20
     558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_SetPinDirection+0xa4>
     55a:	26 2b       	or	r18, r22
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	88 23       	and	r24, r24
     564:	c1 f4       	brne	.+48     	; 0x596 <DIO_SetPinDirection+0xe8>
			{
				Clear_Bit( DDRB , (PinNum-8));
     566:	87 e3       	ldi	r24, 0x37	; 55
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	27 e3       	ldi	r18, 0x37	; 55
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	62 2f       	mov	r22, r18
     574:	29 81       	ldd	r18, Y+1	; 0x01
     576:	22 2f       	mov	r18, r18
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	a9 01       	movw	r20, r18
     57c:	48 50       	subi	r20, 0x08	; 8
     57e:	51 09       	sbc	r21, r1
     580:	21 e0       	ldi	r18, 0x01	; 1
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_SetPinDirection+0xdc>
     586:	22 0f       	add	r18, r18
     588:	33 1f       	adc	r19, r19
     58a:	4a 95       	dec	r20
     58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_SetPinDirection+0xd8>
     58e:	20 95       	com	r18
     590:	26 23       	and	r18, r22
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 15 && PinNum < 24)
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	80 31       	cpi	r24, 0x10	; 16
     59a:	c0 f1       	brcs	.+112    	; 0x60c <DIO_SetPinDirection+0x15e>
     59c:	89 81       	ldd	r24, Y+1	; 0x01
     59e:	88 31       	cpi	r24, 0x18	; 24
     5a0:	a8 f5       	brcc	.+106    	; 0x60c <DIO_SetPinDirection+0x15e>
		{
			if(PinDirection== 1)
     5a2:	8a 81       	ldd	r24, Y+2	; 0x02
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	b9 f4       	brne	.+46     	; 0x5d6 <DIO_SetPinDirection+0x128>
			{
				Set_Bit( DDRC , (PinNum-16));
     5a8:	84 e3       	ldi	r24, 0x34	; 52
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	24 e3       	ldi	r18, 0x34	; 52
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	f9 01       	movw	r30, r18
     5b2:	20 81       	ld	r18, Z
     5b4:	62 2f       	mov	r22, r18
     5b6:	29 81       	ldd	r18, Y+1	; 0x01
     5b8:	22 2f       	mov	r18, r18
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	a9 01       	movw	r20, r18
     5be:	40 51       	subi	r20, 0x10	; 16
     5c0:	51 09       	sbc	r21, r1
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_SetPinDirection+0x11e>
     5c8:	22 0f       	add	r18, r18
     5ca:	33 1f       	adc	r19, r19
     5cc:	4a 95       	dec	r20
     5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_SetPinDirection+0x11a>
     5d0:	26 2b       	or	r18, r22
     5d2:	fc 01       	movw	r30, r24
     5d4:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     5d6:	8a 81       	ldd	r24, Y+2	; 0x02
     5d8:	88 23       	and	r24, r24
     5da:	c1 f4       	brne	.+48     	; 0x60c <DIO_SetPinDirection+0x15e>
			{
				Clear_Bit( DDRC , (PinNum-16));
     5dc:	84 e3       	ldi	r24, 0x34	; 52
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	24 e3       	ldi	r18, 0x34	; 52
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	f9 01       	movw	r30, r18
     5e6:	20 81       	ld	r18, Z
     5e8:	62 2f       	mov	r22, r18
     5ea:	29 81       	ldd	r18, Y+1	; 0x01
     5ec:	22 2f       	mov	r18, r18
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	a9 01       	movw	r20, r18
     5f2:	40 51       	subi	r20, 0x10	; 16
     5f4:	51 09       	sbc	r21, r1
     5f6:	21 e0       	ldi	r18, 0x01	; 1
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_SetPinDirection+0x152>
     5fc:	22 0f       	add	r18, r18
     5fe:	33 1f       	adc	r19, r19
     600:	4a 95       	dec	r20
     602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_SetPinDirection+0x14e>
     604:	20 95       	com	r18
     606:	26 23       	and	r18, r22
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
			}
		}
		
		if(PinNum > 24 && PinNum < 32)
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	89 31       	cpi	r24, 0x19	; 25
     610:	c0 f1       	brcs	.+112    	; 0x682 <DIO_SetPinDirection+0x1d4>
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	80 32       	cpi	r24, 0x20	; 32
     616:	a8 f5       	brcc	.+106    	; 0x682 <DIO_SetPinDirection+0x1d4>
		{
			if(PinDirection== 1)
     618:	8a 81       	ldd	r24, Y+2	; 0x02
     61a:	81 30       	cpi	r24, 0x01	; 1
     61c:	b9 f4       	brne	.+46     	; 0x64c <DIO_SetPinDirection+0x19e>
			{
				Set_Bit( DDRD , (PinNum-24));
     61e:	81 e3       	ldi	r24, 0x31	; 49
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	21 e3       	ldi	r18, 0x31	; 49
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	20 81       	ld	r18, Z
     62a:	62 2f       	mov	r22, r18
     62c:	29 81       	ldd	r18, Y+1	; 0x01
     62e:	22 2f       	mov	r18, r18
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	a9 01       	movw	r20, r18
     634:	48 51       	subi	r20, 0x18	; 24
     636:	51 09       	sbc	r21, r1
     638:	21 e0       	ldi	r18, 0x01	; 1
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_SetPinDirection+0x194>
     63e:	22 0f       	add	r18, r18
     640:	33 1f       	adc	r19, r19
     642:	4a 95       	dec	r20
     644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_SetPinDirection+0x190>
     646:	26 2b       	or	r18, r22
     648:	fc 01       	movw	r30, r24
     64a:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	88 23       	and	r24, r24
     650:	c1 f4       	brne	.+48     	; 0x682 <DIO_SetPinDirection+0x1d4>
			{
				Clear_Bit( DDRD , (PinNum-24));
     652:	81 e3       	ldi	r24, 0x31	; 49
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	21 e3       	ldi	r18, 0x31	; 49
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	f9 01       	movw	r30, r18
     65c:	20 81       	ld	r18, Z
     65e:	62 2f       	mov	r22, r18
     660:	29 81       	ldd	r18, Y+1	; 0x01
     662:	22 2f       	mov	r18, r18
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	a9 01       	movw	r20, r18
     668:	48 51       	subi	r20, 0x18	; 24
     66a:	51 09       	sbc	r21, r1
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_SetPinDirection+0x1c8>
     672:	22 0f       	add	r18, r18
     674:	33 1f       	adc	r19, r19
     676:	4a 95       	dec	r20
     678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_SetPinDirection+0x1c4>
     67a:	20 95       	com	r18
     67c:	26 23       	and	r18, r22
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
			}
		}
}
     682:	00 00       	nop
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	00 d0       	rcall	.+0      	; 0x694 <DIO_ReadPin+0x6>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	8a 83       	std	Y+2, r24	; 0x02
		uint8 return_value=0;
     69a:	19 82       	std	Y+1, r1	; 0x01
		if(PinNum >= 0 && PinNum < 8 )
     69c:	8a 81       	ldd	r24, Y+2	; 0x02
     69e:	88 30       	cpi	r24, 0x08	; 8
     6a0:	d8 f4       	brcc	.+54     	; 0x6d8 <DIO_ReadPin+0x4a>
		{
			return_value = Get_Bit(PINA , PinNum);
     6a2:	89 e3       	ldi	r24, 0x39	; 57
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	fc 01       	movw	r30, r24
     6a8:	80 81       	ld	r24, Z
     6aa:	28 2f       	mov	r18, r24
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	8a 81       	ldd	r24, Y+2	; 0x02
     6b0:	48 2f       	mov	r20, r24
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_ReadPin+0x30>
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	4a 95       	dec	r20
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_ReadPin+0x2c>
     6c2:	82 23       	and	r24, r18
     6c4:	93 23       	and	r25, r19
     6c6:	2a 81       	ldd	r18, Y+2	; 0x02
     6c8:	22 2f       	mov	r18, r18
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_ReadPin+0x44>
     6ce:	95 95       	asr	r25
     6d0:	87 95       	ror	r24
     6d2:	2a 95       	dec	r18
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_ReadPin+0x40>
     6d6:	89 83       	std	Y+1, r24	; 0x01
		}
		if(PinNum > 7 && PinNum < 16)
     6d8:	8a 81       	ldd	r24, Y+2	; 0x02
     6da:	88 30       	cpi	r24, 0x08	; 8
     6dc:	18 f1       	brcs	.+70     	; 0x724 <DIO_ReadPin+0x96>
     6de:	8a 81       	ldd	r24, Y+2	; 0x02
     6e0:	80 31       	cpi	r24, 0x10	; 16
     6e2:	00 f5       	brcc	.+64     	; 0x724 <DIO_ReadPin+0x96>
		{
			return_value = Get_Bit(PINB , (PinNum-8));
     6e4:	86 e3       	ldi	r24, 0x36	; 54
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	fc 01       	movw	r30, r24
     6ea:	80 81       	ld	r24, Z
     6ec:	28 2f       	mov	r18, r24
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	8a 81       	ldd	r24, Y+2	; 0x02
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	ac 01       	movw	r20, r24
     6f8:	48 50       	subi	r20, 0x08	; 8
     6fa:	51 09       	sbc	r21, r1
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_ReadPin+0x78>
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	4a 95       	dec	r20
     708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_ReadPin+0x74>
     70a:	82 23       	and	r24, r18
     70c:	93 23       	and	r25, r19
     70e:	2a 81       	ldd	r18, Y+2	; 0x02
     710:	22 2f       	mov	r18, r18
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	28 50       	subi	r18, 0x08	; 8
     716:	31 09       	sbc	r19, r1
     718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_ReadPin+0x90>
     71a:	95 95       	asr	r25
     71c:	87 95       	ror	r24
     71e:	2a 95       	dec	r18
     720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_ReadPin+0x8c>
     722:	89 83       	std	Y+1, r24	; 0x01
		}
		if(PinNum > 15 && PinNum < 24)
     724:	8a 81       	ldd	r24, Y+2	; 0x02
     726:	80 31       	cpi	r24, 0x10	; 16
     728:	18 f1       	brcs	.+70     	; 0x770 <DIO_ReadPin+0xe2>
     72a:	8a 81       	ldd	r24, Y+2	; 0x02
     72c:	88 31       	cpi	r24, 0x18	; 24
     72e:	00 f5       	brcc	.+64     	; 0x770 <DIO_ReadPin+0xe2>
		{
			return_value = Get_Bit(PINC , (PinNum-16));
     730:	83 e3       	ldi	r24, 0x33	; 51
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	fc 01       	movw	r30, r24
     736:	80 81       	ld	r24, Z
     738:	28 2f       	mov	r18, r24
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	8a 81       	ldd	r24, Y+2	; 0x02
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	ac 01       	movw	r20, r24
     744:	40 51       	subi	r20, 0x10	; 16
     746:	51 09       	sbc	r21, r1
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_ReadPin+0xc4>
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	4a 95       	dec	r20
     754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_ReadPin+0xc0>
     756:	82 23       	and	r24, r18
     758:	93 23       	and	r25, r19
     75a:	2a 81       	ldd	r18, Y+2	; 0x02
     75c:	22 2f       	mov	r18, r18
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	20 51       	subi	r18, 0x10	; 16
     762:	31 09       	sbc	r19, r1
     764:	02 c0       	rjmp	.+4      	; 0x76a <DIO_ReadPin+0xdc>
     766:	95 95       	asr	r25
     768:	87 95       	ror	r24
     76a:	2a 95       	dec	r18
     76c:	e2 f7       	brpl	.-8      	; 0x766 <DIO_ReadPin+0xd8>
     76e:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if(PinNum > 24 && PinNum < 32)
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	89 31       	cpi	r24, 0x19	; 25
     774:	18 f1       	brcs	.+70     	; 0x7bc <DIO_ReadPin+0x12e>
     776:	8a 81       	ldd	r24, Y+2	; 0x02
     778:	80 32       	cpi	r24, 0x20	; 32
     77a:	00 f5       	brcc	.+64     	; 0x7bc <DIO_ReadPin+0x12e>
		{
			return_value = Get_Bit(PIND , (PinNum-24));
     77c:	80 e3       	ldi	r24, 0x30	; 48
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	fc 01       	movw	r30, r24
     782:	80 81       	ld	r24, Z
     784:	28 2f       	mov	r18, r24
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	88 2f       	mov	r24, r24
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	ac 01       	movw	r20, r24
     790:	48 51       	subi	r20, 0x18	; 24
     792:	51 09       	sbc	r21, r1
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_ReadPin+0x110>
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	4a 95       	dec	r20
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <DIO_ReadPin+0x10c>
     7a2:	82 23       	and	r24, r18
     7a4:	93 23       	and	r25, r19
     7a6:	2a 81       	ldd	r18, Y+2	; 0x02
     7a8:	22 2f       	mov	r18, r18
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	28 51       	subi	r18, 0x18	; 24
     7ae:	31 09       	sbc	r19, r1
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_ReadPin+0x128>
     7b2:	95 95       	asr	r25
     7b4:	87 95       	ror	r24
     7b6:	2a 95       	dec	r18
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_ReadPin+0x124>
     7ba:	89 83       	std	Y+1, r24	; 0x01
		}
		return return_value;
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <Keypad_init>:

#include "Keypad.h"
#include "Keypad_cfg.h"

void Keypad_init()
{
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
	//Coloumns INPUT
	DIO_SetPinDirection(Keypad_Coloumn1_PIN,INPUT);
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	85 e1       	ldi	r24, 0x15	; 21
     7d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_Coloumn2_PIN,INPUT);
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	86 e1       	ldi	r24, 0x16	; 22
     7dc:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_Coloumn3_PIN,INPUT);
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	87 e1       	ldi	r24, 0x17	; 23
     7e4:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	
	//PUll UP Column
	DIO_WritePin(Keypad_Coloumn1_PIN,HIGH);
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	85 e1       	ldi	r24, 0x15	; 21
     7ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_Coloumn2_PIN,HIGH);
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	86 e1       	ldi	r24, 0x16	; 22
     7f4:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_Coloumn3_PIN,HIGH);
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	87 e1       	ldi	r24, 0x17	; 23
     7fc:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	
	//ROWS OUTPUT
	DIO_SetPinDirection(Keypad_ROW1_PIN,OUTPUT);
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	82 e1       	ldi	r24, 0x12	; 18
     804:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_ROW2_PIN,OUTPUT);
     808:	61 e0       	ldi	r22, 0x01	; 1
     80a:	83 e1       	ldi	r24, 0x13	; 19
     80c:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_ROW3_PIN,OUTPUT);
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	84 e1       	ldi	r24, 0x14	; 20
     814:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>

}
     818:	00 00       	nop
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <Keypad_getPressedKey>:

uint8 Keypad_getPressedKey()
{
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	1f 92       	push	r1
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
	uint8 Pushed_Button = 0 ;
     82a:	19 82       	std	Y+1, r1	; 0x01
	DIO_WritePin(Keypad_ROW1_PIN,LOW);
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	82 e1       	ldi	r24, 0x12	; 18
     830:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW2_PIN,HIGH);
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	83 e1       	ldi	r24, 0x13	; 19
     838:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW3_PIN,HIGH);
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	84 e1       	ldi	r24, 0x14	; 20
     840:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     844:	85 e1       	ldi	r24, 0x15	; 21
     846:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     84a:	88 23       	and	r24, r24
     84c:	19 f4       	brne	.+6      	; 0x854 <Keypad_getPressedKey+0x34>
	{
		Pushed_Button = 1;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	0f c0       	rjmp	.+30     	; 0x872 <__stack+0x13>
	}
	else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     854:	86 e1       	ldi	r24, 0x16	; 22
     856:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     85a:	88 23       	and	r24, r24
     85c:	19 f4       	brne	.+6      	; 0x864 <__stack+0x5>
	{
		Pushed_Button = 2;
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	89 83       	std	Y+1, r24	; 0x01
     862:	07 c0       	rjmp	.+14     	; 0x872 <__stack+0x13>
	}
	else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     864:	87 e1       	ldi	r24, 0x17	; 23
     866:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     86a:	88 23       	and	r24, r24
     86c:	11 f4       	brne	.+4      	; 0x872 <__stack+0x13>
	{
		Pushed_Button = 3;
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_WritePin(Keypad_ROW1_PIN,HIGH);
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	82 e1       	ldi	r24, 0x12	; 18
     876:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW2_PIN,LOW);
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	83 e1       	ldi	r24, 0x13	; 19
     87e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW3_PIN,HIGH);
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	84 e1       	ldi	r24, 0x14	; 20
     886:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     88a:	85 e1       	ldi	r24, 0x15	; 21
     88c:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     890:	88 23       	and	r24, r24
     892:	19 f4       	brne	.+6      	; 0x89a <__stack+0x3b>
	{
			Pushed_Button = 4;
     894:	84 e0       	ldi	r24, 0x04	; 4
     896:	89 83       	std	Y+1, r24	; 0x01
     898:	0f c0       	rjmp	.+30     	; 0x8b8 <__stack+0x59>
	}
	else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     89a:	86 e1       	ldi	r24, 0x16	; 22
     89c:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8a0:	88 23       	and	r24, r24
     8a2:	19 f4       	brne	.+6      	; 0x8aa <__stack+0x4b>
	{
			Pushed_Button = 5;
     8a4:	85 e0       	ldi	r24, 0x05	; 5
     8a6:	89 83       	std	Y+1, r24	; 0x01
     8a8:	07 c0       	rjmp	.+14     	; 0x8b8 <__stack+0x59>
	}
	else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     8aa:	87 e1       	ldi	r24, 0x17	; 23
     8ac:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8b0:	88 23       	and	r24, r24
     8b2:	11 f4       	brne	.+4      	; 0x8b8 <__stack+0x59>
	{
			Pushed_Button = 6;
     8b4:	86 e0       	ldi	r24, 0x06	; 6
     8b6:	89 83       	std	Y+1, r24	; 0x01
	}
		DIO_WritePin(Keypad_ROW1_PIN,HIGH);
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	82 e1       	ldi	r24, 0x12	; 18
     8bc:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(Keypad_ROW2_PIN,HIGH);
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	83 e1       	ldi	r24, 0x13	; 19
     8c4:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(Keypad_ROW3_PIN,LOW);
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	84 e1       	ldi	r24, 0x14	; 20
     8cc:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     8d0:	85 e1       	ldi	r24, 0x15	; 21
     8d2:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8d6:	88 23       	and	r24, r24
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__stack+0x81>
		{
			Pushed_Button = 7;
     8da:	87 e0       	ldi	r24, 0x07	; 7
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	0f c0       	rjmp	.+30     	; 0x8fe <__stack+0x9f>
		}
		else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     8e0:	86 e1       	ldi	r24, 0x16	; 22
     8e2:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8e6:	88 23       	and	r24, r24
     8e8:	19 f4       	brne	.+6      	; 0x8f0 <__stack+0x91>
		{
			Pushed_Button = 8;
     8ea:	88 e0       	ldi	r24, 0x08	; 8
     8ec:	89 83       	std	Y+1, r24	; 0x01
     8ee:	07 c0       	rjmp	.+14     	; 0x8fe <__stack+0x9f>
		}
		else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     8f0:	87 e1       	ldi	r24, 0x17	; 23
     8f2:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8f6:	88 23       	and	r24, r24
     8f8:	11 f4       	brne	.+4      	; 0x8fe <__stack+0x9f>
		{
			Pushed_Button = 9;
     8fa:	89 e0       	ldi	r24, 0x09	; 9
     8fc:	89 83       	std	Y+1, r24	; 0x01
		}
		return Pushed_Button;
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
	
     900:	0f 90       	pop	r0
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <LCD_init>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "avr/delay.h"

void LCD_init()
{
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
	#ifdef Bit_Mode4
	
	/*Data PINS*/
	DIO_SetPinDirection(LCD_D4 , OUTPUT);
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	84 e0       	ldi	r24, 0x04	; 4
     914:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D5 , OUTPUT);
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	85 e0       	ldi	r24, 0x05	; 5
     91c:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D6 , OUTPUT);
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	86 e0       	ldi	r24, 0x06	; 6
     924:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D7 , OUTPUT);
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	87 e0       	ldi	r24, 0x07	; 7
     92c:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	/*Command Pins*/
	DIO_SetPinDirection(LCD_RS , OUTPUT);
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW , OUTPUT);
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_ENABLE , OUTPUT);
     940:	61 e0       	ldi	r22, 0x01	; 1
     942:	83 e0       	ldi	r24, 0x03	; 3
     944:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	
	LCD_sendCommand(0x33);
     948:	83 e3       	ldi	r24, 0x33	; 51
     94a:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendCommand>
	LCD_sendCommand(0x32);
     94e:	82 e3       	ldi	r24, 0x32	; 50
     950:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendCommand>
	/*Send Command To Set 4-Bit Mode*/
	LCD_sendCommand(Function_Set_4Bit);
     954:	88 e2       	ldi	r24, 0x28	; 40
     956:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendCommand>
	/*Turn On Cyrser */
	LCD_sendCommand(Cyrser_On);
     95a:	8e e0       	ldi	r24, 0x0E	; 14
     95c:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendCommand>
	/*Clear Display*/
	LCD_sendCommand(Clear_Command);
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendCommand>
	/**/
	LCD_sendCommand(0x06);
     966:	86 e0       	ldi	r24, 0x06	; 6
     968:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendCommand>
	
	
	#endif
	*/
	
}
     96c:	00 00       	nop
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <LCD_sendCommand>:
void LCD_sendCommand(uint8 Cmd)
{
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	ab 97       	sbiw	r28, 0x2b	; 43
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
     988:	8b a7       	std	Y+43, r24	; 0x2b
	/*RS == 0 For Command Register*/
	DIO_WritePin(LCD_RS,LOW);
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	/*R/W == 0 For Writing */
	DIO_WritePin(LCD_RW , LOW);
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	
	/*LCD Enable Pin LOW For Latching*/
	DIO_WritePin(LCD_ENABLE,LOW);
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	83 e0       	ldi	r24, 0x03	; 3
     99e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	
	/* Send Command Sequance */
	LCD_PORT = ( LCD_PORT & Mask_First_4Bits ) | ( Cmd & Mask_Last_4Bits );
     9a2:	8b e3       	ldi	r24, 0x3B	; 59
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	2b e3       	ldi	r18, 0x3B	; 59
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	f9 01       	movw	r30, r18
     9ac:	20 81       	ld	r18, Z
     9ae:	32 2f       	mov	r19, r18
     9b0:	3f 70       	andi	r19, 0x0F	; 15
     9b2:	2b a5       	ldd	r18, Y+43	; 0x2b
     9b4:	20 7f       	andi	r18, 0xF0	; 240
     9b6:	23 2b       	or	r18, r19
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
	 
	/*Latching Sequance*/
	DIO_WritePin(LCD_ENABLE,HIGH);
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	83 e0       	ldi	r24, 0x03	; 3
     9c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	a0 e0       	ldi	r26, 0x00	; 0
     9ca:	b0 e4       	ldi	r27, 0x40	; 64
     9cc:	89 83       	std	Y+1, r24	; 0x01
     9ce:	9a 83       	std	Y+2, r25	; 0x02
     9d0:	ab 83       	std	Y+3, r26	; 0x03
     9d2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	4a e7       	ldi	r20, 0x7A	; 122
     9da:	53 e4       	ldi	r21, 0x43	; 67
     9dc:	69 81       	ldd	r22, Y+1	; 0x01
     9de:	7a 81       	ldd	r23, Y+2	; 0x02
     9e0:	8b 81       	ldd	r24, Y+3	; 0x03
     9e2:	9c 81       	ldd	r25, Y+4	; 0x04
     9e4:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
     9e8:	dc 01       	movw	r26, r24
     9ea:	cb 01       	movw	r24, r22
     9ec:	89 a3       	std	Y+33, r24	; 0x21
     9ee:	9a a3       	std	Y+34, r25	; 0x22
     9f0:	ab a3       	std	Y+35, r26	; 0x23
     9f2:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	40 e8       	ldi	r20, 0x80	; 128
     9fa:	5f e3       	ldi	r21, 0x3F	; 63
     9fc:	69 a1       	ldd	r22, Y+33	; 0x21
     9fe:	7a a1       	ldd	r23, Y+34	; 0x22
     a00:	8b a1       	ldd	r24, Y+35	; 0x23
     a02:	9c a1       	ldd	r25, Y+36	; 0x24
     a04:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
     a08:	88 23       	and	r24, r24
     a0a:	2c f4       	brge	.+10     	; 0xa16 <LCD_sendCommand+0xa2>
		__ticks = 1;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	9e a3       	std	Y+38, r25	; 0x26
     a12:	8d a3       	std	Y+37, r24	; 0x25
     a14:	3f c0       	rjmp	.+126    	; 0xa94 <LCD_sendCommand+0x120>
	else if (__tmp > 65535)
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	3f ef       	ldi	r19, 0xFF	; 255
     a1a:	4f e7       	ldi	r20, 0x7F	; 127
     a1c:	57 e4       	ldi	r21, 0x47	; 71
     a1e:	69 a1       	ldd	r22, Y+33	; 0x21
     a20:	7a a1       	ldd	r23, Y+34	; 0x22
     a22:	8b a1       	ldd	r24, Y+35	; 0x23
     a24:	9c a1       	ldd	r25, Y+36	; 0x24
     a26:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
     a2a:	18 16       	cp	r1, r24
     a2c:	4c f5       	brge	.+82     	; 0xa80 <LCD_sendCommand+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e2       	ldi	r20, 0x20	; 32
     a34:	51 e4       	ldi	r21, 0x41	; 65
     a36:	69 81       	ldd	r22, Y+1	; 0x01
     a38:	7a 81       	ldd	r23, Y+2	; 0x02
     a3a:	8b 81       	ldd	r24, Y+3	; 0x03
     a3c:	9c 81       	ldd	r25, Y+4	; 0x04
     a3e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	bc 01       	movw	r22, r24
     a48:	cd 01       	movw	r24, r26
     a4a:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
     a4e:	dc 01       	movw	r26, r24
     a50:	cb 01       	movw	r24, r22
     a52:	9e a3       	std	Y+38, r25	; 0x26
     a54:	8d a3       	std	Y+37, r24	; 0x25
     a56:	0f c0       	rjmp	.+30     	; 0xa76 <LCD_sendCommand+0x102>
     a58:	89 e1       	ldi	r24, 0x19	; 25
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	98 a7       	std	Y+40, r25	; 0x28
     a5e:	8f a3       	std	Y+39, r24	; 0x27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a60:	8f a1       	ldd	r24, Y+39	; 0x27
     a62:	98 a5       	ldd	r25, Y+40	; 0x28
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <LCD_sendCommand+0xf0>
     a68:	98 a7       	std	Y+40, r25	; 0x28
     a6a:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a6c:	8d a1       	ldd	r24, Y+37	; 0x25
     a6e:	9e a1       	ldd	r25, Y+38	; 0x26
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	9e a3       	std	Y+38, r25	; 0x26
     a74:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a76:	8d a1       	ldd	r24, Y+37	; 0x25
     a78:	9e a1       	ldd	r25, Y+38	; 0x26
     a7a:	89 2b       	or	r24, r25
     a7c:	69 f7       	brne	.-38     	; 0xa58 <LCD_sendCommand+0xe4>
     a7e:	14 c0       	rjmp	.+40     	; 0xaa8 <LCD_sendCommand+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a80:	69 a1       	ldd	r22, Y+33	; 0x21
     a82:	7a a1       	ldd	r23, Y+34	; 0x22
     a84:	8b a1       	ldd	r24, Y+35	; 0x23
     a86:	9c a1       	ldd	r25, Y+36	; 0x24
     a88:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
     a8c:	dc 01       	movw	r26, r24
     a8e:	cb 01       	movw	r24, r22
     a90:	9e a3       	std	Y+38, r25	; 0x26
     a92:	8d a3       	std	Y+37, r24	; 0x25
     a94:	8d a1       	ldd	r24, Y+37	; 0x25
     a96:	9e a1       	ldd	r25, Y+38	; 0x26
     a98:	9a a7       	std	Y+42, r25	; 0x2a
     a9a:	89 a7       	std	Y+41, r24	; 0x29
     a9c:	89 a5       	ldd	r24, Y+41	; 0x29
     a9e:	9a a5       	ldd	r25, Y+42	; 0x2a
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <LCD_sendCommand+0x12c>
     aa4:	9a a7       	std	Y+42, r25	; 0x2a
     aa6:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(2);
	/*LOW For Enable to Latch*/
	DIO_WritePin(LCD_ENABLE,LOW);
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	83 e0       	ldi	r24, 0x03	; 3
     aac:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	
	
	/*LCD Enable Pin LOW For Latching*/
	DIO_WritePin(LCD_ENABLE,LOW);
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	/*Send Command*/
	LCD_PORT = ( LCD_PORT & Mask_First_4Bits ) | ( Cmd << Number_Four ); 
     ab8:	8b e3       	ldi	r24, 0x3B	; 59
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	2b e3       	ldi	r18, 0x3B	; 59
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	f9 01       	movw	r30, r18
     ac2:	20 81       	ld	r18, Z
     ac4:	42 2f       	mov	r20, r18
     ac6:	4f 70       	andi	r20, 0x0F	; 15
     ac8:	2b a5       	ldd	r18, Y+43	; 0x2b
     aca:	22 2f       	mov	r18, r18
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	22 95       	swap	r18
     ad0:	32 95       	swap	r19
     ad2:	30 7f       	andi	r19, 0xF0	; 240
     ad4:	32 27       	eor	r19, r18
     ad6:	20 7f       	andi	r18, 0xF0	; 240
     ad8:	32 27       	eor	r19, r18
     ada:	24 2b       	or	r18, r20
     adc:	fc 01       	movw	r30, r24
     ade:	20 83       	st	Z, r18
	
	/*Latching Sequance*/
	DIO_WritePin(LCD_ENABLE,HIGH);
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	83 e0       	ldi	r24, 0x03	; 3
     ae4:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	b0 e4       	ldi	r27, 0x40	; 64
     af0:	8d 83       	std	Y+5, r24	; 0x05
     af2:	9e 83       	std	Y+6, r25	; 0x06
     af4:	af 83       	std	Y+7, r26	; 0x07
     af6:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	4a e7       	ldi	r20, 0x7A	; 122
     afe:	53 e4       	ldi	r21, 0x43	; 67
     b00:	6d 81       	ldd	r22, Y+5	; 0x05
     b02:	7e 81       	ldd	r23, Y+6	; 0x06
     b04:	8f 81       	ldd	r24, Y+7	; 0x07
     b06:	98 85       	ldd	r25, Y+8	; 0x08
     b08:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
     b0c:	dc 01       	movw	r26, r24
     b0e:	cb 01       	movw	r24, r22
     b10:	8f 8b       	std	Y+23, r24	; 0x17
     b12:	98 8f       	std	Y+24, r25	; 0x18
     b14:	a9 8f       	std	Y+25, r26	; 0x19
     b16:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e8       	ldi	r20, 0x80	; 128
     b1e:	5f e3       	ldi	r21, 0x3F	; 63
     b20:	6f 89       	ldd	r22, Y+23	; 0x17
     b22:	78 8d       	ldd	r23, Y+24	; 0x18
     b24:	89 8d       	ldd	r24, Y+25	; 0x19
     b26:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b28:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
     b2c:	88 23       	and	r24, r24
     b2e:	2c f4       	brge	.+10     	; 0xb3a <LCD_sendCommand+0x1c6>
		__ticks = 1;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	9c 8f       	std	Y+28, r25	; 0x1c
     b36:	8b 8f       	std	Y+27, r24	; 0x1b
     b38:	3f c0       	rjmp	.+126    	; 0xbb8 <LCD_sendCommand+0x244>
	else if (__tmp > 65535)
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	3f ef       	ldi	r19, 0xFF	; 255
     b3e:	4f e7       	ldi	r20, 0x7F	; 127
     b40:	57 e4       	ldi	r21, 0x47	; 71
     b42:	6f 89       	ldd	r22, Y+23	; 0x17
     b44:	78 8d       	ldd	r23, Y+24	; 0x18
     b46:	89 8d       	ldd	r24, Y+25	; 0x19
     b48:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b4a:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
     b4e:	18 16       	cp	r1, r24
     b50:	4c f5       	brge	.+82     	; 0xba4 <LCD_sendCommand+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	40 e2       	ldi	r20, 0x20	; 32
     b58:	51 e4       	ldi	r21, 0x41	; 65
     b5a:	6d 81       	ldd	r22, Y+5	; 0x05
     b5c:	7e 81       	ldd	r23, Y+6	; 0x06
     b5e:	8f 81       	ldd	r24, Y+7	; 0x07
     b60:	98 85       	ldd	r25, Y+8	; 0x08
     b62:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
     b66:	dc 01       	movw	r26, r24
     b68:	cb 01       	movw	r24, r22
     b6a:	bc 01       	movw	r22, r24
     b6c:	cd 01       	movw	r24, r26
     b6e:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
     b72:	dc 01       	movw	r26, r24
     b74:	cb 01       	movw	r24, r22
     b76:	9c 8f       	std	Y+28, r25	; 0x1c
     b78:	8b 8f       	std	Y+27, r24	; 0x1b
     b7a:	0f c0       	rjmp	.+30     	; 0xb9a <LCD_sendCommand+0x226>
     b7c:	89 e1       	ldi	r24, 0x19	; 25
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	9e 8f       	std	Y+30, r25	; 0x1e
     b82:	8d 8f       	std	Y+29, r24	; 0x1d
     b84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b86:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <LCD_sendCommand+0x214>
     b8c:	9e 8f       	std	Y+30, r25	; 0x1e
     b8e:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b90:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b92:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	9c 8f       	std	Y+28, r25	; 0x1c
     b98:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b9e:	89 2b       	or	r24, r25
     ba0:	69 f7       	brne	.-38     	; 0xb7c <LCD_sendCommand+0x208>
     ba2:	14 c0       	rjmp	.+40     	; 0xbcc <LCD_sendCommand+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ba4:	6f 89       	ldd	r22, Y+23	; 0x17
     ba6:	78 8d       	ldd	r23, Y+24	; 0x18
     ba8:	89 8d       	ldd	r24, Y+25	; 0x19
     baa:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bac:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
     bb0:	dc 01       	movw	r26, r24
     bb2:	cb 01       	movw	r24, r22
     bb4:	9c 8f       	std	Y+28, r25	; 0x1c
     bb6:	8b 8f       	std	Y+27, r24	; 0x1b
     bb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bba:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bbc:	98 a3       	std	Y+32, r25	; 0x20
     bbe:	8f 8f       	std	Y+31, r24	; 0x1f
     bc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bc2:	98 a1       	ldd	r25, Y+32	; 0x20
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	f1 f7       	brne	.-4      	; 0xbc4 <LCD_sendCommand+0x250>
     bc8:	98 a3       	std	Y+32, r25	; 0x20
     bca:	8f 8f       	std	Y+31, r24	; 0x1f
	_delay_ms(2);
	/*LOW For Enable to Latch*/
	DIO_WritePin(LCD_ENABLE,LOW);
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	a0 e0       	ldi	r26, 0x00	; 0
     bda:	b0 e4       	ldi	r27, 0x40	; 64
     bdc:	89 87       	std	Y+9, r24	; 0x09
     bde:	9a 87       	std	Y+10, r25	; 0x0a
     be0:	ab 87       	std	Y+11, r26	; 0x0b
     be2:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	4a e7       	ldi	r20, 0x7A	; 122
     bea:	53 e4       	ldi	r21, 0x43	; 67
     bec:	69 85       	ldd	r22, Y+9	; 0x09
     bee:	7a 85       	ldd	r23, Y+10	; 0x0a
     bf0:	8b 85       	ldd	r24, Y+11	; 0x0b
     bf2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bf4:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	8d 87       	std	Y+13, r24	; 0x0d
     bfe:	9e 87       	std	Y+14, r25	; 0x0e
     c00:	af 87       	std	Y+15, r26	; 0x0f
     c02:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e8       	ldi	r20, 0x80	; 128
     c0a:	5f e3       	ldi	r21, 0x3F	; 63
     c0c:	6d 85       	ldd	r22, Y+13	; 0x0d
     c0e:	7e 85       	ldd	r23, Y+14	; 0x0e
     c10:	8f 85       	ldd	r24, Y+15	; 0x0f
     c12:	98 89       	ldd	r25, Y+16	; 0x10
     c14:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
     c18:	88 23       	and	r24, r24
     c1a:	2c f4       	brge	.+10     	; 0xc26 <LCD_sendCommand+0x2b2>
		__ticks = 1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	9a 8b       	std	Y+18, r25	; 0x12
     c22:	89 8b       	std	Y+17, r24	; 0x11
     c24:	3f c0       	rjmp	.+126    	; 0xca4 <LCD_sendCommand+0x330>
	else if (__tmp > 65535)
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	3f ef       	ldi	r19, 0xFF	; 255
     c2a:	4f e7       	ldi	r20, 0x7F	; 127
     c2c:	57 e4       	ldi	r21, 0x47	; 71
     c2e:	6d 85       	ldd	r22, Y+13	; 0x0d
     c30:	7e 85       	ldd	r23, Y+14	; 0x0e
     c32:	8f 85       	ldd	r24, Y+15	; 0x0f
     c34:	98 89       	ldd	r25, Y+16	; 0x10
     c36:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
     c3a:	18 16       	cp	r1, r24
     c3c:	4c f5       	brge	.+82     	; 0xc90 <LCD_sendCommand+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	40 e2       	ldi	r20, 0x20	; 32
     c44:	51 e4       	ldi	r21, 0x41	; 65
     c46:	69 85       	ldd	r22, Y+9	; 0x09
     c48:	7a 85       	ldd	r23, Y+10	; 0x0a
     c4a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c4c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c4e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	bc 01       	movw	r22, r24
     c58:	cd 01       	movw	r24, r26
     c5a:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9a 8b       	std	Y+18, r25	; 0x12
     c64:	89 8b       	std	Y+17, r24	; 0x11
     c66:	0f c0       	rjmp	.+30     	; 0xc86 <LCD_sendCommand+0x312>
     c68:	89 e1       	ldi	r24, 0x19	; 25
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	9c 8b       	std	Y+20, r25	; 0x14
     c6e:	8b 8b       	std	Y+19, r24	; 0x13
     c70:	8b 89       	ldd	r24, Y+19	; 0x13
     c72:	9c 89       	ldd	r25, Y+20	; 0x14
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <LCD_sendCommand+0x300>
     c78:	9c 8b       	std	Y+20, r25	; 0x14
     c7a:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7c:	89 89       	ldd	r24, Y+17	; 0x11
     c7e:	9a 89       	ldd	r25, Y+18	; 0x12
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	9a 8b       	std	Y+18, r25	; 0x12
     c84:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c86:	89 89       	ldd	r24, Y+17	; 0x11
     c88:	9a 89       	ldd	r25, Y+18	; 0x12
     c8a:	89 2b       	or	r24, r25
     c8c:	69 f7       	brne	.-38     	; 0xc68 <LCD_sendCommand+0x2f4>
	_delay_ms(2);
}
     c8e:	14 c0       	rjmp	.+40     	; 0xcb8 <LCD_sendCommand+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c90:	6d 85       	ldd	r22, Y+13	; 0x0d
     c92:	7e 85       	ldd	r23, Y+14	; 0x0e
     c94:	8f 85       	ldd	r24, Y+15	; 0x0f
     c96:	98 89       	ldd	r25, Y+16	; 0x10
     c98:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	9a 8b       	std	Y+18, r25	; 0x12
     ca2:	89 8b       	std	Y+17, r24	; 0x11
     ca4:	89 89       	ldd	r24, Y+17	; 0x11
     ca6:	9a 89       	ldd	r25, Y+18	; 0x12
     ca8:	9e 8b       	std	Y+22, r25	; 0x16
     caa:	8d 8b       	std	Y+21, r24	; 0x15
     cac:	8d 89       	ldd	r24, Y+21	; 0x15
     cae:	9e 89       	ldd	r25, Y+22	; 0x16
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <LCD_sendCommand+0x33c>
     cb4:	9e 8b       	std	Y+22, r25	; 0x16
     cb6:	8d 8b       	std	Y+21, r24	; 0x15
     cb8:	00 00       	nop
     cba:	ab 96       	adiw	r28, 0x2b	; 43
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <LCD_displayChar>:

void LCD_displayChar(uint8 ch)
{
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	ed 97       	sbiw	r28, 0x3d	; 61
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	8d af       	std	Y+61, r24	; 0x3d
	/*RS == 1 For Data Register*/
	DIO_WritePin(LCD_RS,HIGH);
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	/*R/W == 0 For Writing */
	DIO_WritePin(LCD_RW , LOW);
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	
	/*Clear Display*/
	LCD_sendCommand(Clear_Command);
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendCommand>
	
	/*LCD Enable Pin LOW For Latching*/
	DIO_WritePin(LCD_ENABLE,LOW);
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	
	/* Send Command Sequance */
	LCD_PORT = ( LCD_PORT & Mask_First_4Bits ) | ( ch & Mask_Last_4Bits );
     d00:	8b e3       	ldi	r24, 0x3B	; 59
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	2b e3       	ldi	r18, 0x3B	; 59
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	f9 01       	movw	r30, r18
     d0a:	20 81       	ld	r18, Z
     d0c:	32 2f       	mov	r19, r18
     d0e:	3f 70       	andi	r19, 0x0F	; 15
     d10:	2d ad       	ldd	r18, Y+61	; 0x3d
     d12:	20 7f       	andi	r18, 0xF0	; 240
     d14:	23 2b       	or	r18, r19
     d16:	fc 01       	movw	r30, r24
     d18:	20 83       	st	Z, r18
	
	/*Latching Sequance*/
	DIO_WritePin(LCD_ENABLE,HIGH);
     d1a:	61 e0       	ldi	r22, 0x01	; 1
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a0 e0       	ldi	r26, 0x00	; 0
     d28:	b0 e4       	ldi	r27, 0x40	; 64
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	9a 83       	std	Y+2, r25	; 0x02
     d2e:	ab 83       	std	Y+3, r26	; 0x03
     d30:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	4a e7       	ldi	r20, 0x7A	; 122
     d38:	53 e4       	ldi	r21, 0x43	; 67
     d3a:	69 81       	ldd	r22, Y+1	; 0x01
     d3c:	7a 81       	ldd	r23, Y+2	; 0x02
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	9c 81       	ldd	r25, Y+4	; 0x04
     d42:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	8b ab       	std	Y+51, r24	; 0x33
     d4c:	9c ab       	std	Y+52, r25	; 0x34
     d4e:	ad ab       	std	Y+53, r26	; 0x35
     d50:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e8       	ldi	r20, 0x80	; 128
     d58:	5f e3       	ldi	r21, 0x3F	; 63
     d5a:	6b a9       	ldd	r22, Y+51	; 0x33
     d5c:	7c a9       	ldd	r23, Y+52	; 0x34
     d5e:	8d a9       	ldd	r24, Y+53	; 0x35
     d60:	9e a9       	ldd	r25, Y+54	; 0x36
     d62:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
     d66:	88 23       	and	r24, r24
     d68:	2c f4       	brge	.+10     	; 0xd74 <LCD_displayChar+0xa8>
		__ticks = 1;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	98 af       	std	Y+56, r25	; 0x38
     d70:	8f ab       	std	Y+55, r24	; 0x37
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <LCD_displayChar+0x126>
	else if (__tmp > 65535)
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	3f ef       	ldi	r19, 0xFF	; 255
     d78:	4f e7       	ldi	r20, 0x7F	; 127
     d7a:	57 e4       	ldi	r21, 0x47	; 71
     d7c:	6b a9       	ldd	r22, Y+51	; 0x33
     d7e:	7c a9       	ldd	r23, Y+52	; 0x34
     d80:	8d a9       	ldd	r24, Y+53	; 0x35
     d82:	9e a9       	ldd	r25, Y+54	; 0x36
     d84:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
     d88:	18 16       	cp	r1, r24
     d8a:	4c f5       	brge	.+82     	; 0xdde <LCD_displayChar+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	51 e4       	ldi	r21, 0x41	; 65
     d94:	69 81       	ldd	r22, Y+1	; 0x01
     d96:	7a 81       	ldd	r23, Y+2	; 0x02
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	bc 01       	movw	r22, r24
     da6:	cd 01       	movw	r24, r26
     da8:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	98 af       	std	Y+56, r25	; 0x38
     db2:	8f ab       	std	Y+55, r24	; 0x37
     db4:	0f c0       	rjmp	.+30     	; 0xdd4 <LCD_displayChar+0x108>
     db6:	89 e1       	ldi	r24, 0x19	; 25
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	9a af       	std	Y+58, r25	; 0x3a
     dbc:	89 af       	std	Y+57, r24	; 0x39
     dbe:	89 ad       	ldd	r24, Y+57	; 0x39
     dc0:	9a ad       	ldd	r25, Y+58	; 0x3a
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <LCD_displayChar+0xf6>
     dc6:	9a af       	std	Y+58, r25	; 0x3a
     dc8:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dca:	8f a9       	ldd	r24, Y+55	; 0x37
     dcc:	98 ad       	ldd	r25, Y+56	; 0x38
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	98 af       	std	Y+56, r25	; 0x38
     dd2:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd4:	8f a9       	ldd	r24, Y+55	; 0x37
     dd6:	98 ad       	ldd	r25, Y+56	; 0x38
     dd8:	89 2b       	or	r24, r25
     dda:	69 f7       	brne	.-38     	; 0xdb6 <LCD_displayChar+0xea>
     ddc:	14 c0       	rjmp	.+40     	; 0xe06 <LCD_displayChar+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dde:	6b a9       	ldd	r22, Y+51	; 0x33
     de0:	7c a9       	ldd	r23, Y+52	; 0x34
     de2:	8d a9       	ldd	r24, Y+53	; 0x35
     de4:	9e a9       	ldd	r25, Y+54	; 0x36
     de6:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	98 af       	std	Y+56, r25	; 0x38
     df0:	8f ab       	std	Y+55, r24	; 0x37
     df2:	8f a9       	ldd	r24, Y+55	; 0x37
     df4:	98 ad       	ldd	r25, Y+56	; 0x38
     df6:	9c af       	std	Y+60, r25	; 0x3c
     df8:	8b af       	std	Y+59, r24	; 0x3b
     dfa:	8b ad       	ldd	r24, Y+59	; 0x3b
     dfc:	9c ad       	ldd	r25, Y+60	; 0x3c
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <LCD_displayChar+0x132>
     e02:	9c af       	std	Y+60, r25	; 0x3c
     e04:	8b af       	std	Y+59, r24	; 0x3b
	_delay_ms(2);
	/*LOW For Enable to Latch*/
	DIO_WritePin(LCD_ENABLE,LOW);
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	
	
	/*LCD Enable Pin LOW For Latching*/
	DIO_WritePin(LCD_ENABLE,LOW);
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	/*Send Command*/
	LCD_PORT = ( LCD_PORT & Mask_First_4Bits ) | ( ch << Number_Four );
     e16:	8b e3       	ldi	r24, 0x3B	; 59
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	2b e3       	ldi	r18, 0x3B	; 59
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	f9 01       	movw	r30, r18
     e20:	20 81       	ld	r18, Z
     e22:	42 2f       	mov	r20, r18
     e24:	4f 70       	andi	r20, 0x0F	; 15
     e26:	2d ad       	ldd	r18, Y+61	; 0x3d
     e28:	22 2f       	mov	r18, r18
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	22 95       	swap	r18
     e2e:	32 95       	swap	r19
     e30:	30 7f       	andi	r19, 0xF0	; 240
     e32:	32 27       	eor	r19, r18
     e34:	20 7f       	andi	r18, 0xF0	; 240
     e36:	32 27       	eor	r19, r18
     e38:	24 2b       	or	r18, r20
     e3a:	fc 01       	movw	r30, r24
     e3c:	20 83       	st	Z, r18
	
	/*Latching Sequance*/
	DIO_WritePin(LCD_ENABLE,HIGH);
     e3e:	61 e0       	ldi	r22, 0x01	; 1
     e40:	83 e0       	ldi	r24, 0x03	; 3
     e42:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	a0 e0       	ldi	r26, 0x00	; 0
     e4c:	b0 e4       	ldi	r27, 0x40	; 64
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	9e 83       	std	Y+6, r25	; 0x06
     e52:	af 83       	std	Y+7, r26	; 0x07
     e54:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	4a e7       	ldi	r20, 0x7A	; 122
     e5c:	53 e4       	ldi	r21, 0x43	; 67
     e5e:	6d 81       	ldd	r22, Y+5	; 0x05
     e60:	7e 81       	ldd	r23, Y+6	; 0x06
     e62:	8f 81       	ldd	r24, Y+7	; 0x07
     e64:	98 85       	ldd	r25, Y+8	; 0x08
     e66:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	89 a7       	std	Y+41, r24	; 0x29
     e70:	9a a7       	std	Y+42, r25	; 0x2a
     e72:	ab a7       	std	Y+43, r26	; 0x2b
     e74:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e8       	ldi	r20, 0x80	; 128
     e7c:	5f e3       	ldi	r21, 0x3F	; 63
     e7e:	69 a5       	ldd	r22, Y+41	; 0x29
     e80:	7a a5       	ldd	r23, Y+42	; 0x2a
     e82:	8b a5       	ldd	r24, Y+43	; 0x2b
     e84:	9c a5       	ldd	r25, Y+44	; 0x2c
     e86:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
     e8a:	88 23       	and	r24, r24
     e8c:	2c f4       	brge	.+10     	; 0xe98 <LCD_displayChar+0x1cc>
		__ticks = 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9e a7       	std	Y+46, r25	; 0x2e
     e94:	8d a7       	std	Y+45, r24	; 0x2d
     e96:	3f c0       	rjmp	.+126    	; 0xf16 <LCD_displayChar+0x24a>
	else if (__tmp > 65535)
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	3f ef       	ldi	r19, 0xFF	; 255
     e9c:	4f e7       	ldi	r20, 0x7F	; 127
     e9e:	57 e4       	ldi	r21, 0x47	; 71
     ea0:	69 a5       	ldd	r22, Y+41	; 0x29
     ea2:	7a a5       	ldd	r23, Y+42	; 0x2a
     ea4:	8b a5       	ldd	r24, Y+43	; 0x2b
     ea6:	9c a5       	ldd	r25, Y+44	; 0x2c
     ea8:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
     eac:	18 16       	cp	r1, r24
     eae:	4c f5       	brge	.+82     	; 0xf02 <LCD_displayChar+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e2       	ldi	r20, 0x20	; 32
     eb6:	51 e4       	ldi	r21, 0x41	; 65
     eb8:	6d 81       	ldd	r22, Y+5	; 0x05
     eba:	7e 81       	ldd	r23, Y+6	; 0x06
     ebc:	8f 81       	ldd	r24, Y+7	; 0x07
     ebe:	98 85       	ldd	r25, Y+8	; 0x08
     ec0:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	bc 01       	movw	r22, r24
     eca:	cd 01       	movw	r24, r26
     ecc:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	9e a7       	std	Y+46, r25	; 0x2e
     ed6:	8d a7       	std	Y+45, r24	; 0x2d
     ed8:	0f c0       	rjmp	.+30     	; 0xef8 <LCD_displayChar+0x22c>
     eda:	89 e1       	ldi	r24, 0x19	; 25
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	98 ab       	std	Y+48, r25	; 0x30
     ee0:	8f a7       	std	Y+47, r24	; 0x2f
     ee2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ee4:	98 a9       	ldd	r25, Y+48	; 0x30
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <LCD_displayChar+0x21a>
     eea:	98 ab       	std	Y+48, r25	; 0x30
     eec:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eee:	8d a5       	ldd	r24, Y+45	; 0x2d
     ef0:	9e a5       	ldd	r25, Y+46	; 0x2e
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	9e a7       	std	Y+46, r25	; 0x2e
     ef6:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef8:	8d a5       	ldd	r24, Y+45	; 0x2d
     efa:	9e a5       	ldd	r25, Y+46	; 0x2e
     efc:	89 2b       	or	r24, r25
     efe:	69 f7       	brne	.-38     	; 0xeda <LCD_displayChar+0x20e>
     f00:	14 c0       	rjmp	.+40     	; 0xf2a <LCD_displayChar+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f02:	69 a5       	ldd	r22, Y+41	; 0x29
     f04:	7a a5       	ldd	r23, Y+42	; 0x2a
     f06:	8b a5       	ldd	r24, Y+43	; 0x2b
     f08:	9c a5       	ldd	r25, Y+44	; 0x2c
     f0a:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	9e a7       	std	Y+46, r25	; 0x2e
     f14:	8d a7       	std	Y+45, r24	; 0x2d
     f16:	8d a5       	ldd	r24, Y+45	; 0x2d
     f18:	9e a5       	ldd	r25, Y+46	; 0x2e
     f1a:	9a ab       	std	Y+50, r25	; 0x32
     f1c:	89 ab       	std	Y+49, r24	; 0x31
     f1e:	89 a9       	ldd	r24, Y+49	; 0x31
     f20:	9a a9       	ldd	r25, Y+50	; 0x32
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <LCD_displayChar+0x256>
     f26:	9a ab       	std	Y+50, r25	; 0x32
     f28:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(2);
	/*LOW For Enable to Latch*/
	DIO_WritePin(LCD_ENABLE,LOW);
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	a8 ec       	ldi	r26, 0xC8	; 200
     f38:	b2 e4       	ldi	r27, 0x42	; 66
     f3a:	89 87       	std	Y+9, r24	; 0x09
     f3c:	9a 87       	std	Y+10, r25	; 0x0a
     f3e:	ab 87       	std	Y+11, r26	; 0x0b
     f40:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     f42:	2b ea       	ldi	r18, 0xAB	; 171
     f44:	3a ea       	ldi	r19, 0xAA	; 170
     f46:	4a ea       	ldi	r20, 0xAA	; 170
     f48:	5e e3       	ldi	r21, 0x3E	; 62
     f4a:	69 85       	ldd	r22, Y+9	; 0x09
     f4c:	7a 85       	ldd	r23, Y+10	; 0x0a
     f4e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f50:	9c 85       	ldd	r25, Y+12	; 0x0c
     f52:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	8d 87       	std	Y+13, r24	; 0x0d
     f5c:	9e 87       	std	Y+14, r25	; 0x0e
     f5e:	af 87       	std	Y+15, r26	; 0x0f
     f60:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e8       	ldi	r20, 0x80	; 128
     f68:	5e e3       	ldi	r21, 0x3E	; 62
     f6a:	69 85       	ldd	r22, Y+9	; 0x09
     f6c:	7a 85       	ldd	r23, Y+10	; 0x0a
     f6e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f70:	9c 85       	ldd	r25, Y+12	; 0x0c
     f72:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	89 8b       	std	Y+17, r24	; 0x11
     f7c:	9a 8b       	std	Y+18, r25	; 0x12
     f7e:	ab 8b       	std	Y+19, r26	; 0x13
     f80:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	40 e8       	ldi	r20, 0x80	; 128
     f88:	5f e3       	ldi	r21, 0x3F	; 63
     f8a:	6d 85       	ldd	r22, Y+13	; 0x0d
     f8c:	7e 85       	ldd	r23, Y+14	; 0x0e
     f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f90:	98 89       	ldd	r25, Y+16	; 0x10
     f92:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
     f96:	88 23       	and	r24, r24
     f98:	1c f4       	brge	.+6      	; 0xfa0 <LCD_displayChar+0x2d4>
		__ticks = 1;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	8d 8b       	std	Y+21, r24	; 0x15
     f9e:	b2 c0       	rjmp	.+356    	; 0x1104 <LCD_displayChar+0x438>
	else if (__tmp2 > 65535)
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	3f ef       	ldi	r19, 0xFF	; 255
     fa4:	4f e7       	ldi	r20, 0x7F	; 127
     fa6:	57 e4       	ldi	r21, 0x47	; 71
     fa8:	69 89       	ldd	r22, Y+17	; 0x11
     faa:	7a 89       	ldd	r23, Y+18	; 0x12
     fac:	8b 89       	ldd	r24, Y+19	; 0x13
     fae:	9c 89       	ldd	r25, Y+20	; 0x14
     fb0:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
     fb4:	18 16       	cp	r1, r24
     fb6:	0c f0       	brlt	.+2      	; 0xfba <LCD_displayChar+0x2ee>
     fb8:	7b c0       	rjmp	.+246    	; 0x10b0 <LCD_displayChar+0x3e4>
	{
		_delay_ms(__us / 1000.0);
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	4a e7       	ldi	r20, 0x7A	; 122
     fc0:	54 e4       	ldi	r21, 0x44	; 68
     fc2:	69 85       	ldd	r22, Y+9	; 0x09
     fc4:	7a 85       	ldd	r23, Y+10	; 0x0a
     fc6:	8b 85       	ldd	r24, Y+11	; 0x0b
     fc8:	9c 85       	ldd	r25, Y+12	; 0x0c
     fca:	0e 94 b7 18 	call	0x316e	; 0x316e <__divsf3>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	8e 8b       	std	Y+22, r24	; 0x16
     fd4:	9f 8b       	std	Y+23, r25	; 0x17
     fd6:	a8 8f       	std	Y+24, r26	; 0x18
     fd8:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	4a e7       	ldi	r20, 0x7A	; 122
     fe0:	53 e4       	ldi	r21, 0x43	; 67
     fe2:	6e 89       	ldd	r22, Y+22	; 0x16
     fe4:	7f 89       	ldd	r23, Y+23	; 0x17
     fe6:	88 8d       	ldd	r24, Y+24	; 0x18
     fe8:	99 8d       	ldd	r25, Y+25	; 0x19
     fea:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	8a 8f       	std	Y+26, r24	; 0x1a
     ff4:	9b 8f       	std	Y+27, r25	; 0x1b
     ff6:	ac 8f       	std	Y+28, r26	; 0x1c
     ff8:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e8       	ldi	r20, 0x80	; 128
    1000:	5f e3       	ldi	r21, 0x3F	; 63
    1002:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1004:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1006:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1008:	9d 8d       	ldd	r25, Y+29	; 0x1d
    100a:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    100e:	88 23       	and	r24, r24
    1010:	2c f4       	brge	.+10     	; 0x101c <LCD_displayChar+0x350>
		__ticks = 1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9f 8f       	std	Y+31, r25	; 0x1f
    1018:	8e 8f       	std	Y+30, r24	; 0x1e
    101a:	3f c0       	rjmp	.+126    	; 0x109a <LCD_displayChar+0x3ce>
	else if (__tmp > 65535)
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	3f ef       	ldi	r19, 0xFF	; 255
    1020:	4f e7       	ldi	r20, 0x7F	; 127
    1022:	57 e4       	ldi	r21, 0x47	; 71
    1024:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1026:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1028:	8c 8d       	ldd	r24, Y+28	; 0x1c
    102a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    102c:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    1030:	18 16       	cp	r1, r24
    1032:	4c f5       	brge	.+82     	; 0x1086 <LCD_displayChar+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e2       	ldi	r20, 0x20	; 32
    103a:	51 e4       	ldi	r21, 0x41	; 65
    103c:	6e 89       	ldd	r22, Y+22	; 0x16
    103e:	7f 89       	ldd	r23, Y+23	; 0x17
    1040:	88 8d       	ldd	r24, Y+24	; 0x18
    1042:	99 8d       	ldd	r25, Y+25	; 0x19
    1044:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9f 8f       	std	Y+31, r25	; 0x1f
    105a:	8e 8f       	std	Y+30, r24	; 0x1e
    105c:	0f c0       	rjmp	.+30     	; 0x107c <LCD_displayChar+0x3b0>
    105e:	89 e1       	ldi	r24, 0x19	; 25
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	99 a3       	std	Y+33, r25	; 0x21
    1064:	88 a3       	std	Y+32, r24	; 0x20
    1066:	88 a1       	ldd	r24, Y+32	; 0x20
    1068:	99 a1       	ldd	r25, Y+33	; 0x21
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <LCD_displayChar+0x39e>
    106e:	99 a3       	std	Y+33, r25	; 0x21
    1070:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1072:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1074:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	9f 8f       	std	Y+31, r25	; 0x1f
    107a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    107e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1080:	89 2b       	or	r24, r25
    1082:	69 f7       	brne	.-38     	; 0x105e <LCD_displayChar+0x392>
    1084:	3f c0       	rjmp	.+126    	; 0x1104 <LCD_displayChar+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1086:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1088:	7b 8d       	ldd	r23, Y+27	; 0x1b
    108a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    108c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    108e:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	9f 8f       	std	Y+31, r25	; 0x1f
    1098:	8e 8f       	std	Y+30, r24	; 0x1e
    109a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    109c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    109e:	9b a3       	std	Y+35, r25	; 0x23
    10a0:	8a a3       	std	Y+34, r24	; 0x22
    10a2:	8a a1       	ldd	r24, Y+34	; 0x22
    10a4:	9b a1       	ldd	r25, Y+35	; 0x23
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <LCD_displayChar+0x3da>
    10aa:	9b a3       	std	Y+35, r25	; 0x23
    10ac:	8a a3       	std	Y+34, r24	; 0x22
    10ae:	2a c0       	rjmp	.+84     	; 0x1104 <LCD_displayChar+0x438>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	4f e7       	ldi	r20, 0x7F	; 127
    10b6:	53 e4       	ldi	r21, 0x43	; 67
    10b8:	6d 85       	ldd	r22, Y+13	; 0x0d
    10ba:	7e 85       	ldd	r23, Y+14	; 0x0e
    10bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    10be:	98 89       	ldd	r25, Y+16	; 0x10
    10c0:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    10c4:	18 16       	cp	r1, r24
    10c6:	ac f4       	brge	.+42     	; 0x10f2 <LCD_displayChar+0x426>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    10c8:	69 89       	ldd	r22, Y+17	; 0x11
    10ca:	7a 89       	ldd	r23, Y+18	; 0x12
    10cc:	8b 89       	ldd	r24, Y+19	; 0x13
    10ce:	9c 89       	ldd	r25, Y+20	; 0x14
    10d0:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	9d a3       	std	Y+37, r25	; 0x25
    10da:	8c a3       	std	Y+36, r24	; 0x24
    10dc:	8c a1       	ldd	r24, Y+36	; 0x24
    10de:	9d a1       	ldd	r25, Y+37	; 0x25
    10e0:	9f a3       	std	Y+39, r25	; 0x27
    10e2:	8e a3       	std	Y+38, r24	; 0x26
    10e4:	8e a1       	ldd	r24, Y+38	; 0x26
    10e6:	9f a1       	ldd	r25, Y+39	; 0x27
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	f1 f7       	brne	.-4      	; 0x10e8 <LCD_displayChar+0x41c>
    10ec:	9f a3       	std	Y+39, r25	; 0x27
    10ee:	8e a3       	std	Y+38, r24	; 0x26
	
	
	_delay_us(100);
	
}
    10f0:	0f c0       	rjmp	.+30     	; 0x1110 <LCD_displayChar+0x444>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    10f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    10f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    10f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10f8:	98 89       	ldd	r25, Y+16	; 0x10
    10fa:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	8d 8b       	std	Y+21, r24	; 0x15
    1104:	8d 89       	ldd	r24, Y+21	; 0x15
    1106:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1108:	88 a5       	ldd	r24, Y+40	; 0x28
    110a:	8a 95       	dec	r24
    110c:	f1 f7       	brne	.-4      	; 0x110a <LCD_displayChar+0x43e>
    110e:	88 a7       	std	Y+40, r24	; 0x28
    1110:	00 00       	nop
    1112:	ed 96       	adiw	r28, 0x3d	; 61
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <main>:
#include "avr/delay.h"
#include "LCD.h"
#include "LCD_Cfg.h"

int main(void)
{
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	c7 52       	subi	r28, 0x27	; 39
    1132:	d1 40       	sbci	r29, 0x01	; 1
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	BCDSevegments_Init();
    113e:	0e 94 36 00 	call	0x6c	; 0x6c <BCDSevegments_Init>
	Keypad_init();
    1142:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <Keypad_init>
	LCD_init();
    1146:	0e 94 84 04 	call	0x908	; 0x908 <LCD_init>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a0 ea       	ldi	r26, 0xA0	; 160
    1150:	b0 e4       	ldi	r27, 0x40	; 64
    1152:	8d 83       	std	Y+5, r24	; 0x05
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	af 83       	std	Y+7, r26	; 0x07
    1158:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    115a:	8e 01       	movw	r16, r28
    115c:	00 5a       	subi	r16, 0xA0	; 160
    115e:	1f 4f       	sbci	r17, 0xFF	; 255
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	4a e7       	ldi	r20, 0x7A	; 122
    1166:	53 e4       	ldi	r21, 0x43	; 67
    1168:	6d 81       	ldd	r22, Y+5	; 0x05
    116a:	7e 81       	ldd	r23, Y+6	; 0x06
    116c:	8f 81       	ldd	r24, Y+7	; 0x07
    116e:	98 85       	ldd	r25, Y+8	; 0x08
    1170:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	f8 01       	movw	r30, r16
    117a:	80 83       	st	Z, r24
    117c:	91 83       	std	Z+1, r25	; 0x01
    117e:	a2 83       	std	Z+2, r26	; 0x02
    1180:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1182:	ce 01       	movw	r24, r28
    1184:	80 5a       	subi	r24, 0xA0	; 160
    1186:	9f 4f       	sbci	r25, 0xFF	; 255
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 e8       	ldi	r20, 0x80	; 128
    118e:	5f e3       	ldi	r21, 0x3F	; 63
    1190:	fc 01       	movw	r30, r24
    1192:	60 81       	ld	r22, Z
    1194:	71 81       	ldd	r23, Z+1	; 0x01
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    119e:	88 23       	and	r24, r24
    11a0:	4c f4       	brge	.+18     	; 0x11b4 <main+0x90>
		__ticks = 1;
    11a2:	ce 01       	movw	r24, r28
    11a4:	8c 59       	subi	r24, 0x9C	; 156
    11a6:	9f 4f       	sbci	r25, 0xFF	; 255
    11a8:	21 e0       	ldi	r18, 0x01	; 1
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	fc 01       	movw	r30, r24
    11ae:	31 83       	std	Z+1, r19	; 0x01
    11b0:	20 83       	st	Z, r18
    11b2:	69 c0       	rjmp	.+210    	; 0x1286 <main+0x162>
	else if (__tmp > 65535)
    11b4:	ce 01       	movw	r24, r28
    11b6:	80 5a       	subi	r24, 0xA0	; 160
    11b8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	3f ef       	ldi	r19, 0xFF	; 255
    11be:	4f e7       	ldi	r20, 0x7F	; 127
    11c0:	57 e4       	ldi	r21, 0x47	; 71
    11c2:	fc 01       	movw	r30, r24
    11c4:	60 81       	ld	r22, Z
    11c6:	71 81       	ldd	r23, Z+1	; 0x01
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    11d0:	18 16       	cp	r1, r24
    11d2:	0c f0       	brlt	.+2      	; 0x11d6 <main+0xb2>
    11d4:	46 c0       	rjmp	.+140    	; 0x1262 <main+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e2       	ldi	r20, 0x20	; 32
    11dc:	51 e4       	ldi	r21, 0x41	; 65
    11de:	6d 81       	ldd	r22, Y+5	; 0x05
    11e0:	7e 81       	ldd	r23, Y+6	; 0x06
    11e2:	8f 81       	ldd	r24, Y+7	; 0x07
    11e4:	98 85       	ldd	r25, Y+8	; 0x08
    11e6:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	8e 01       	movw	r16, r28
    11f0:	0c 59       	subi	r16, 0x9C	; 156
    11f2:	1f 4f       	sbci	r17, 0xFF	; 255
    11f4:	bc 01       	movw	r22, r24
    11f6:	cd 01       	movw	r24, r26
    11f8:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	f8 01       	movw	r30, r16
    1202:	91 83       	std	Z+1, r25	; 0x01
    1204:	80 83       	st	Z, r24
    1206:	24 c0       	rjmp	.+72     	; 0x1250 <main+0x12c>
    1208:	ce 01       	movw	r24, r28
    120a:	8a 59       	subi	r24, 0x9A	; 154
    120c:	9f 4f       	sbci	r25, 0xFF	; 255
    120e:	29 e1       	ldi	r18, 0x19	; 25
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	fc 01       	movw	r30, r24
    1214:	31 83       	std	Z+1, r19	; 0x01
    1216:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1218:	ce 01       	movw	r24, r28
    121a:	8a 59       	subi	r24, 0x9A	; 154
    121c:	9f 4f       	sbci	r25, 0xFF	; 255
    121e:	fc 01       	movw	r30, r24
    1220:	80 81       	ld	r24, Z
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <main+0x100>
    1228:	9e 01       	movw	r18, r28
    122a:	2a 59       	subi	r18, 0x9A	; 154
    122c:	3f 4f       	sbci	r19, 0xFF	; 255
    122e:	f9 01       	movw	r30, r18
    1230:	91 83       	std	Z+1, r25	; 0x01
    1232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1234:	ce 01       	movw	r24, r28
    1236:	8c 59       	subi	r24, 0x9C	; 156
    1238:	9f 4f       	sbci	r25, 0xFF	; 255
    123a:	9e 01       	movw	r18, r28
    123c:	2c 59       	subi	r18, 0x9C	; 156
    123e:	3f 4f       	sbci	r19, 0xFF	; 255
    1240:	f9 01       	movw	r30, r18
    1242:	20 81       	ld	r18, Z
    1244:	31 81       	ldd	r19, Z+1	; 0x01
    1246:	21 50       	subi	r18, 0x01	; 1
    1248:	31 09       	sbc	r19, r1
    124a:	fc 01       	movw	r30, r24
    124c:	31 83       	std	Z+1, r19	; 0x01
    124e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1250:	ce 01       	movw	r24, r28
    1252:	8c 59       	subi	r24, 0x9C	; 156
    1254:	9f 4f       	sbci	r25, 0xFF	; 255
    1256:	fc 01       	movw	r30, r24
    1258:	80 81       	ld	r24, Z
    125a:	91 81       	ldd	r25, Z+1	; 0x01
    125c:	89 2b       	or	r24, r25
    125e:	a1 f6       	brne	.-88     	; 0x1208 <main+0xe4>
    1260:	2c c0       	rjmp	.+88     	; 0x12ba <main+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1262:	8e 01       	movw	r16, r28
    1264:	0c 59       	subi	r16, 0x9C	; 156
    1266:	1f 4f       	sbci	r17, 0xFF	; 255
    1268:	ce 01       	movw	r24, r28
    126a:	80 5a       	subi	r24, 0xA0	; 160
    126c:	9f 4f       	sbci	r25, 0xFF	; 255
    126e:	fc 01       	movw	r30, r24
    1270:	60 81       	ld	r22, Z
    1272:	71 81       	ldd	r23, Z+1	; 0x01
    1274:	82 81       	ldd	r24, Z+2	; 0x02
    1276:	93 81       	ldd	r25, Z+3	; 0x03
    1278:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	f8 01       	movw	r30, r16
    1282:	91 83       	std	Z+1, r25	; 0x01
    1284:	80 83       	st	Z, r24
    1286:	ce 01       	movw	r24, r28
    1288:	88 59       	subi	r24, 0x98	; 152
    128a:	9f 4f       	sbci	r25, 0xFF	; 255
    128c:	9e 01       	movw	r18, r28
    128e:	2c 59       	subi	r18, 0x9C	; 156
    1290:	3f 4f       	sbci	r19, 0xFF	; 255
    1292:	f9 01       	movw	r30, r18
    1294:	20 81       	ld	r18, Z
    1296:	31 81       	ldd	r19, Z+1	; 0x01
    1298:	fc 01       	movw	r30, r24
    129a:	31 83       	std	Z+1, r19	; 0x01
    129c:	20 83       	st	Z, r18
    129e:	ce 01       	movw	r24, r28
    12a0:	88 59       	subi	r24, 0x98	; 152
    12a2:	9f 4f       	sbci	r25, 0xFF	; 255
    12a4:	fc 01       	movw	r30, r24
    12a6:	80 81       	ld	r24, Z
    12a8:	91 81       	ldd	r25, Z+1	; 0x01
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <main+0x186>
    12ae:	9e 01       	movw	r18, r28
    12b0:	28 59       	subi	r18, 0x98	; 152
    12b2:	3f 4f       	sbci	r19, 0xFF	; 255
    12b4:	f9 01       	movw	r30, r18
    12b6:	91 83       	std	Z+1, r25	; 0x01
    12b8:	80 83       	st	Z, r24

	
    while (1) 
    {
		_delay_ms(5);
		LCD_displayChar('A');
    12ba:	81 e4       	ldi	r24, 0x41	; 65
    12bc:	0e 94 66 06 	call	0xccc	; 0xccc <LCD_displayChar>
    12c0:	9e 01       	movw	r18, r28
    12c2:	2e 5a       	subi	r18, 0xAE	; 174
    12c4:	3f 4f       	sbci	r19, 0xFF	; 255
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a0 ea       	ldi	r26, 0xA0	; 160
    12cc:	b0 e4       	ldi	r27, 0x40	; 64
    12ce:	f9 01       	movw	r30, r18
    12d0:	80 83       	st	Z, r24
    12d2:	91 83       	std	Z+1, r25	; 0x01
    12d4:	a2 83       	std	Z+2, r26	; 0x02
    12d6:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12d8:	8e 01       	movw	r16, r28
    12da:	0a 5a       	subi	r16, 0xAA	; 170
    12dc:	1f 4f       	sbci	r17, 0xFF	; 255
    12de:	ce 01       	movw	r24, r28
    12e0:	8e 5a       	subi	r24, 0xAE	; 174
    12e2:	9f 4f       	sbci	r25, 0xFF	; 255
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	4a e7       	ldi	r20, 0x7A	; 122
    12ea:	53 e4       	ldi	r21, 0x43	; 67
    12ec:	fc 01       	movw	r30, r24
    12ee:	60 81       	ld	r22, Z
    12f0:	71 81       	ldd	r23, Z+1	; 0x01
    12f2:	82 81       	ldd	r24, Z+2	; 0x02
    12f4:	93 81       	ldd	r25, Z+3	; 0x03
    12f6:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	f8 01       	movw	r30, r16
    1300:	80 83       	st	Z, r24
    1302:	91 83       	std	Z+1, r25	; 0x01
    1304:	a2 83       	std	Z+2, r26	; 0x02
    1306:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1308:	ce 01       	movw	r24, r28
    130a:	8a 5a       	subi	r24, 0xAA	; 170
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e8       	ldi	r20, 0x80	; 128
    1314:	5f e3       	ldi	r21, 0x3F	; 63
    1316:	fc 01       	movw	r30, r24
    1318:	60 81       	ld	r22, Z
    131a:	71 81       	ldd	r23, Z+1	; 0x01
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	93 81       	ldd	r25, Z+3	; 0x03
    1320:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    1324:	88 23       	and	r24, r24
    1326:	4c f4       	brge	.+18     	; 0x133a <main+0x216>
		__ticks = 1;
    1328:	ce 01       	movw	r24, r28
    132a:	86 5a       	subi	r24, 0xA6	; 166
    132c:	9f 4f       	sbci	r25, 0xFF	; 255
    132e:	21 e0       	ldi	r18, 0x01	; 1
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	fc 01       	movw	r30, r24
    1334:	31 83       	std	Z+1, r19	; 0x01
    1336:	20 83       	st	Z, r18
    1338:	6d c0       	rjmp	.+218    	; 0x1414 <main+0x2f0>
	else if (__tmp > 65535)
    133a:	ce 01       	movw	r24, r28
    133c:	8a 5a       	subi	r24, 0xAA	; 170
    133e:	9f 4f       	sbci	r25, 0xFF	; 255
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	3f ef       	ldi	r19, 0xFF	; 255
    1344:	4f e7       	ldi	r20, 0x7F	; 127
    1346:	57 e4       	ldi	r21, 0x47	; 71
    1348:	fc 01       	movw	r30, r24
    134a:	60 81       	ld	r22, Z
    134c:	71 81       	ldd	r23, Z+1	; 0x01
    134e:	82 81       	ldd	r24, Z+2	; 0x02
    1350:	93 81       	ldd	r25, Z+3	; 0x03
    1352:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    1356:	18 16       	cp	r1, r24
    1358:	0c f0       	brlt	.+2      	; 0x135c <main+0x238>
    135a:	4a c0       	rjmp	.+148    	; 0x13f0 <main+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    135c:	ce 01       	movw	r24, r28
    135e:	8e 5a       	subi	r24, 0xAE	; 174
    1360:	9f 4f       	sbci	r25, 0xFF	; 255
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e2       	ldi	r20, 0x20	; 32
    1368:	51 e4       	ldi	r21, 0x41	; 65
    136a:	fc 01       	movw	r30, r24
    136c:	60 81       	ld	r22, Z
    136e:	71 81       	ldd	r23, Z+1	; 0x01
    1370:	82 81       	ldd	r24, Z+2	; 0x02
    1372:	93 81       	ldd	r25, Z+3	; 0x03
    1374:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	8e 01       	movw	r16, r28
    137e:	06 5a       	subi	r16, 0xA6	; 166
    1380:	1f 4f       	sbci	r17, 0xFF	; 255
    1382:	bc 01       	movw	r22, r24
    1384:	cd 01       	movw	r24, r26
    1386:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	f8 01       	movw	r30, r16
    1390:	91 83       	std	Z+1, r25	; 0x01
    1392:	80 83       	st	Z, r24
    1394:	24 c0       	rjmp	.+72     	; 0x13de <main+0x2ba>
    1396:	ce 01       	movw	r24, r28
    1398:	84 5a       	subi	r24, 0xA4	; 164
    139a:	9f 4f       	sbci	r25, 0xFF	; 255
    139c:	29 e1       	ldi	r18, 0x19	; 25
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	fc 01       	movw	r30, r24
    13a2:	31 83       	std	Z+1, r19	; 0x01
    13a4:	20 83       	st	Z, r18
    13a6:	ce 01       	movw	r24, r28
    13a8:	84 5a       	subi	r24, 0xA4	; 164
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	fc 01       	movw	r30, r24
    13ae:	80 81       	ld	r24, Z
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <main+0x28e>
    13b6:	9e 01       	movw	r18, r28
    13b8:	24 5a       	subi	r18, 0xA4	; 164
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    13bc:	f9 01       	movw	r30, r18
    13be:	91 83       	std	Z+1, r25	; 0x01
    13c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c2:	ce 01       	movw	r24, r28
    13c4:	86 5a       	subi	r24, 0xA6	; 166
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	9e 01       	movw	r18, r28
    13ca:	26 5a       	subi	r18, 0xA6	; 166
    13cc:	3f 4f       	sbci	r19, 0xFF	; 255
    13ce:	f9 01       	movw	r30, r18
    13d0:	20 81       	ld	r18, Z
    13d2:	31 81       	ldd	r19, Z+1	; 0x01
    13d4:	21 50       	subi	r18, 0x01	; 1
    13d6:	31 09       	sbc	r19, r1
    13d8:	fc 01       	movw	r30, r24
    13da:	31 83       	std	Z+1, r19	; 0x01
    13dc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13de:	ce 01       	movw	r24, r28
    13e0:	86 5a       	subi	r24, 0xA6	; 166
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	fc 01       	movw	r30, r24
    13e6:	80 81       	ld	r24, Z
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	89 2b       	or	r24, r25
    13ec:	a1 f6       	brne	.-88     	; 0x1396 <main+0x272>
    13ee:	2c c0       	rjmp	.+88     	; 0x1448 <main+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f0:	8e 01       	movw	r16, r28
    13f2:	06 5a       	subi	r16, 0xA6	; 166
    13f4:	1f 4f       	sbci	r17, 0xFF	; 255
    13f6:	ce 01       	movw	r24, r28
    13f8:	8a 5a       	subi	r24, 0xAA	; 170
    13fa:	9f 4f       	sbci	r25, 0xFF	; 255
    13fc:	fc 01       	movw	r30, r24
    13fe:	60 81       	ld	r22, Z
    1400:	71 81       	ldd	r23, Z+1	; 0x01
    1402:	82 81       	ldd	r24, Z+2	; 0x02
    1404:	93 81       	ldd	r25, Z+3	; 0x03
    1406:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	f8 01       	movw	r30, r16
    1410:	91 83       	std	Z+1, r25	; 0x01
    1412:	80 83       	st	Z, r24
    1414:	ce 01       	movw	r24, r28
    1416:	82 5a       	subi	r24, 0xA2	; 162
    1418:	9f 4f       	sbci	r25, 0xFF	; 255
    141a:	9e 01       	movw	r18, r28
    141c:	26 5a       	subi	r18, 0xA6	; 166
    141e:	3f 4f       	sbci	r19, 0xFF	; 255
    1420:	f9 01       	movw	r30, r18
    1422:	20 81       	ld	r18, Z
    1424:	31 81       	ldd	r19, Z+1	; 0x01
    1426:	fc 01       	movw	r30, r24
    1428:	31 83       	std	Z+1, r19	; 0x01
    142a:	20 83       	st	Z, r18
    142c:	ce 01       	movw	r24, r28
    142e:	82 5a       	subi	r24, 0xA2	; 162
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	fc 01       	movw	r30, r24
    1434:	80 81       	ld	r24, Z
    1436:	91 81       	ldd	r25, Z+1	; 0x01
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <main+0x314>
    143c:	9e 01       	movw	r18, r28
    143e:	22 5a       	subi	r18, 0xA2	; 162
    1440:	3f 4f       	sbci	r19, 0xFF	; 255
    1442:	f9 01       	movw	r30, r18
    1444:	91 83       	std	Z+1, r25	; 0x01
    1446:	80 83       	st	Z, r24
		_delay_ms(5);
		uint8 key = Keypad_getPressedKey();
    1448:	0e 94 10 04 	call	0x820	; 0x820 <Keypad_getPressedKey>
    144c:	89 87       	std	Y+9, r24	; 0x09
		if (key == 1)
    144e:	89 85       	ldd	r24, Y+9	; 0x09
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	09 f0       	breq	.+2      	; 0x1456 <main+0x332>
    1454:	7f c1       	rjmp	.+766    	; 0x1754 <main+0x630>
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	a8 e4       	ldi	r26, 0x48	; 72
    145c:	b2 e4       	ldi	r27, 0x42	; 66
    145e:	8e 87       	std	Y+14, r24	; 0x0e
    1460:	9f 87       	std	Y+15, r25	; 0x0f
    1462:	a8 8b       	std	Y+16, r26	; 0x10
    1464:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1466:	8e 01       	movw	r16, r28
    1468:	0c 58       	subi	r16, 0x8C	; 140
    146a:	1f 4f       	sbci	r17, 0xFF	; 255
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	4a e7       	ldi	r20, 0x7A	; 122
    1472:	53 e4       	ldi	r21, 0x43	; 67
    1474:	6e 85       	ldd	r22, Y+14	; 0x0e
    1476:	7f 85       	ldd	r23, Y+15	; 0x0f
    1478:	88 89       	ldd	r24, Y+16	; 0x10
    147a:	99 89       	ldd	r25, Y+17	; 0x11
    147c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	f8 01       	movw	r30, r16
    1486:	80 83       	st	Z, r24
    1488:	91 83       	std	Z+1, r25	; 0x01
    148a:	a2 83       	std	Z+2, r26	; 0x02
    148c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    148e:	ce 01       	movw	r24, r28
    1490:	8c 58       	subi	r24, 0x8C	; 140
    1492:	9f 4f       	sbci	r25, 0xFF	; 255
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	5f e3       	ldi	r21, 0x3F	; 63
    149c:	fc 01       	movw	r30, r24
    149e:	60 81       	ld	r22, Z
    14a0:	71 81       	ldd	r23, Z+1	; 0x01
    14a2:	82 81       	ldd	r24, Z+2	; 0x02
    14a4:	93 81       	ldd	r25, Z+3	; 0x03
    14a6:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    14aa:	88 23       	and	r24, r24
    14ac:	4c f4       	brge	.+18     	; 0x14c0 <main+0x39c>
		__ticks = 1;
    14ae:	ce 01       	movw	r24, r28
    14b0:	88 58       	subi	r24, 0x88	; 136
    14b2:	9f 4f       	sbci	r25, 0xFF	; 255
    14b4:	21 e0       	ldi	r18, 0x01	; 1
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	fc 01       	movw	r30, r24
    14ba:	31 83       	std	Z+1, r19	; 0x01
    14bc:	20 83       	st	Z, r18
    14be:	69 c0       	rjmp	.+210    	; 0x1592 <main+0x46e>
	else if (__tmp > 65535)
    14c0:	ce 01       	movw	r24, r28
    14c2:	8c 58       	subi	r24, 0x8C	; 140
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	4f e7       	ldi	r20, 0x7F	; 127
    14cc:	57 e4       	ldi	r21, 0x47	; 71
    14ce:	fc 01       	movw	r30, r24
    14d0:	60 81       	ld	r22, Z
    14d2:	71 81       	ldd	r23, Z+1	; 0x01
    14d4:	82 81       	ldd	r24, Z+2	; 0x02
    14d6:	93 81       	ldd	r25, Z+3	; 0x03
    14d8:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    14dc:	18 16       	cp	r1, r24
    14de:	0c f0       	brlt	.+2      	; 0x14e2 <main+0x3be>
    14e0:	46 c0       	rjmp	.+140    	; 0x156e <main+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e2       	ldi	r20, 0x20	; 32
    14e8:	51 e4       	ldi	r21, 0x41	; 65
    14ea:	6e 85       	ldd	r22, Y+14	; 0x0e
    14ec:	7f 85       	ldd	r23, Y+15	; 0x0f
    14ee:	88 89       	ldd	r24, Y+16	; 0x10
    14f0:	99 89       	ldd	r25, Y+17	; 0x11
    14f2:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	8e 01       	movw	r16, r28
    14fc:	08 58       	subi	r16, 0x88	; 136
    14fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1500:	bc 01       	movw	r22, r24
    1502:	cd 01       	movw	r24, r26
    1504:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	f8 01       	movw	r30, r16
    150e:	91 83       	std	Z+1, r25	; 0x01
    1510:	80 83       	st	Z, r24
    1512:	24 c0       	rjmp	.+72     	; 0x155c <main+0x438>
    1514:	ce 01       	movw	r24, r28
    1516:	86 58       	subi	r24, 0x86	; 134
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	29 e1       	ldi	r18, 0x19	; 25
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	fc 01       	movw	r30, r24
    1520:	31 83       	std	Z+1, r19	; 0x01
    1522:	20 83       	st	Z, r18
    1524:	ce 01       	movw	r24, r28
    1526:	86 58       	subi	r24, 0x86	; 134
    1528:	9f 4f       	sbci	r25, 0xFF	; 255
    152a:	fc 01       	movw	r30, r24
    152c:	80 81       	ld	r24, Z
    152e:	91 81       	ldd	r25, Z+1	; 0x01
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	f1 f7       	brne	.-4      	; 0x1530 <main+0x40c>
    1534:	9e 01       	movw	r18, r28
    1536:	26 58       	subi	r18, 0x86	; 134
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	f9 01       	movw	r30, r18
    153c:	91 83       	std	Z+1, r25	; 0x01
    153e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1540:	ce 01       	movw	r24, r28
    1542:	88 58       	subi	r24, 0x88	; 136
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	9e 01       	movw	r18, r28
    1548:	28 58       	subi	r18, 0x88	; 136
    154a:	3f 4f       	sbci	r19, 0xFF	; 255
    154c:	f9 01       	movw	r30, r18
    154e:	20 81       	ld	r18, Z
    1550:	31 81       	ldd	r19, Z+1	; 0x01
    1552:	21 50       	subi	r18, 0x01	; 1
    1554:	31 09       	sbc	r19, r1
    1556:	fc 01       	movw	r30, r24
    1558:	31 83       	std	Z+1, r19	; 0x01
    155a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155c:	ce 01       	movw	r24, r28
    155e:	88 58       	subi	r24, 0x88	; 136
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	fc 01       	movw	r30, r24
    1564:	80 81       	ld	r24, Z
    1566:	91 81       	ldd	r25, Z+1	; 0x01
    1568:	89 2b       	or	r24, r25
    156a:	a1 f6       	brne	.-88     	; 0x1514 <main+0x3f0>
    156c:	2c c0       	rjmp	.+88     	; 0x15c6 <main+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156e:	8e 01       	movw	r16, r28
    1570:	08 58       	subi	r16, 0x88	; 136
    1572:	1f 4f       	sbci	r17, 0xFF	; 255
    1574:	ce 01       	movw	r24, r28
    1576:	8c 58       	subi	r24, 0x8C	; 140
    1578:	9f 4f       	sbci	r25, 0xFF	; 255
    157a:	fc 01       	movw	r30, r24
    157c:	60 81       	ld	r22, Z
    157e:	71 81       	ldd	r23, Z+1	; 0x01
    1580:	82 81       	ldd	r24, Z+2	; 0x02
    1582:	93 81       	ldd	r25, Z+3	; 0x03
    1584:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	f8 01       	movw	r30, r16
    158e:	91 83       	std	Z+1, r25	; 0x01
    1590:	80 83       	st	Z, r24
    1592:	ce 01       	movw	r24, r28
    1594:	84 58       	subi	r24, 0x84	; 132
    1596:	9f 4f       	sbci	r25, 0xFF	; 255
    1598:	9e 01       	movw	r18, r28
    159a:	28 58       	subi	r18, 0x88	; 136
    159c:	3f 4f       	sbci	r19, 0xFF	; 255
    159e:	f9 01       	movw	r30, r18
    15a0:	20 81       	ld	r18, Z
    15a2:	31 81       	ldd	r19, Z+1	; 0x01
    15a4:	fc 01       	movw	r30, r24
    15a6:	31 83       	std	Z+1, r19	; 0x01
    15a8:	20 83       	st	Z, r18
    15aa:	ce 01       	movw	r24, r28
    15ac:	84 58       	subi	r24, 0x84	; 132
    15ae:	9f 4f       	sbci	r25, 0xFF	; 255
    15b0:	fc 01       	movw	r30, r24
    15b2:	80 81       	ld	r24, Z
    15b4:	91 81       	ldd	r25, Z+1	; 0x01
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <main+0x492>
    15ba:	9e 01       	movw	r18, r28
    15bc:	24 58       	subi	r18, 0x84	; 132
    15be:	3f 4f       	sbci	r19, 0xFF	; 255
    15c0:	f9 01       	movw	r30, r18
    15c2:	91 83       	std	Z+1, r25	; 0x01
    15c4:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(ONE);
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(TWO);
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(THREE);
    15d2:	83 e0       	ldi	r24, 0x03	; 3
    15d4:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(FOUR);
    15d8:	84 e0       	ldi	r24, 0x04	; 4
    15da:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			/*display one*/
			BCDSevegments_displayNo(ONE);
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a8 e4       	ldi	r26, 0x48	; 72
    15ea:	b2 e4       	ldi	r27, 0x42	; 66
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	9a 83       	std	Y+2, r25	; 0x02
    15f0:	ab 83       	std	Y+3, r26	; 0x03
    15f2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15f4:	8e 01       	movw	r16, r28
    15f6:	06 59       	subi	r16, 0x96	; 150
    15f8:	1f 4f       	sbci	r17, 0xFF	; 255
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	4a e7       	ldi	r20, 0x7A	; 122
    1600:	53 e4       	ldi	r21, 0x43	; 67
    1602:	69 81       	ldd	r22, Y+1	; 0x01
    1604:	7a 81       	ldd	r23, Y+2	; 0x02
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	f8 01       	movw	r30, r16
    1614:	80 83       	st	Z, r24
    1616:	91 83       	std	Z+1, r25	; 0x01
    1618:	a2 83       	std	Z+2, r26	; 0x02
    161a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    161c:	ce 01       	movw	r24, r28
    161e:	86 59       	subi	r24, 0x96	; 150
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e8       	ldi	r20, 0x80	; 128
    1628:	5f e3       	ldi	r21, 0x3F	; 63
    162a:	fc 01       	movw	r30, r24
    162c:	60 81       	ld	r22, Z
    162e:	71 81       	ldd	r23, Z+1	; 0x01
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    1638:	88 23       	and	r24, r24
    163a:	4c f4       	brge	.+18     	; 0x164e <main+0x52a>
		__ticks = 1;
    163c:	ce 01       	movw	r24, r28
    163e:	82 59       	subi	r24, 0x92	; 146
    1640:	9f 4f       	sbci	r25, 0xFF	; 255
    1642:	21 e0       	ldi	r18, 0x01	; 1
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	fc 01       	movw	r30, r24
    1648:	31 83       	std	Z+1, r19	; 0x01
    164a:	20 83       	st	Z, r18
    164c:	69 c0       	rjmp	.+210    	; 0x1720 <main+0x5fc>
	else if (__tmp > 65535)
    164e:	ce 01       	movw	r24, r28
    1650:	86 59       	subi	r24, 0x96	; 150
    1652:	9f 4f       	sbci	r25, 0xFF	; 255
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	3f ef       	ldi	r19, 0xFF	; 255
    1658:	4f e7       	ldi	r20, 0x7F	; 127
    165a:	57 e4       	ldi	r21, 0x47	; 71
    165c:	fc 01       	movw	r30, r24
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    166a:	18 16       	cp	r1, r24
    166c:	0c f0       	brlt	.+2      	; 0x1670 <main+0x54c>
    166e:	46 c0       	rjmp	.+140    	; 0x16fc <main+0x5d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e2       	ldi	r20, 0x20	; 32
    1676:	51 e4       	ldi	r21, 0x41	; 65
    1678:	69 81       	ldd	r22, Y+1	; 0x01
    167a:	7a 81       	ldd	r23, Y+2	; 0x02
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	8e 01       	movw	r16, r28
    168a:	02 59       	subi	r16, 0x92	; 146
    168c:	1f 4f       	sbci	r17, 0xFF	; 255
    168e:	bc 01       	movw	r22, r24
    1690:	cd 01       	movw	r24, r26
    1692:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	f8 01       	movw	r30, r16
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	80 83       	st	Z, r24
    16a0:	24 c0       	rjmp	.+72     	; 0x16ea <main+0x5c6>
    16a2:	ce 01       	movw	r24, r28
    16a4:	80 59       	subi	r24, 0x90	; 144
    16a6:	9f 4f       	sbci	r25, 0xFF	; 255
    16a8:	29 e1       	ldi	r18, 0x19	; 25
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	fc 01       	movw	r30, r24
    16ae:	31 83       	std	Z+1, r19	; 0x01
    16b0:	20 83       	st	Z, r18
    16b2:	ce 01       	movw	r24, r28
    16b4:	80 59       	subi	r24, 0x90	; 144
    16b6:	9f 4f       	sbci	r25, 0xFF	; 255
    16b8:	fc 01       	movw	r30, r24
    16ba:	80 81       	ld	r24, Z
    16bc:	91 81       	ldd	r25, Z+1	; 0x01
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <main+0x59a>
    16c2:	9e 01       	movw	r18, r28
    16c4:	20 59       	subi	r18, 0x90	; 144
    16c6:	3f 4f       	sbci	r19, 0xFF	; 255
    16c8:	f9 01       	movw	r30, r18
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ce:	ce 01       	movw	r24, r28
    16d0:	82 59       	subi	r24, 0x92	; 146
    16d2:	9f 4f       	sbci	r25, 0xFF	; 255
    16d4:	9e 01       	movw	r18, r28
    16d6:	22 59       	subi	r18, 0x92	; 146
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	f9 01       	movw	r30, r18
    16dc:	20 81       	ld	r18, Z
    16de:	31 81       	ldd	r19, Z+1	; 0x01
    16e0:	21 50       	subi	r18, 0x01	; 1
    16e2:	31 09       	sbc	r19, r1
    16e4:	fc 01       	movw	r30, r24
    16e6:	31 83       	std	Z+1, r19	; 0x01
    16e8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ea:	ce 01       	movw	r24, r28
    16ec:	82 59       	subi	r24, 0x92	; 146
    16ee:	9f 4f       	sbci	r25, 0xFF	; 255
    16f0:	fc 01       	movw	r30, r24
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	89 2b       	or	r24, r25
    16f8:	a1 f6       	brne	.-88     	; 0x16a2 <main+0x57e>
    16fa:	2c c0       	rjmp	.+88     	; 0x1754 <main+0x630>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fc:	8e 01       	movw	r16, r28
    16fe:	02 59       	subi	r16, 0x92	; 146
    1700:	1f 4f       	sbci	r17, 0xFF	; 255
    1702:	ce 01       	movw	r24, r28
    1704:	86 59       	subi	r24, 0x96	; 150
    1706:	9f 4f       	sbci	r25, 0xFF	; 255
    1708:	fc 01       	movw	r30, r24
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	f8 01       	movw	r30, r16
    171c:	91 83       	std	Z+1, r25	; 0x01
    171e:	80 83       	st	Z, r24
    1720:	ce 01       	movw	r24, r28
    1722:	8e 58       	subi	r24, 0x8E	; 142
    1724:	9f 4f       	sbci	r25, 0xFF	; 255
    1726:	9e 01       	movw	r18, r28
    1728:	22 59       	subi	r18, 0x92	; 146
    172a:	3f 4f       	sbci	r19, 0xFF	; 255
    172c:	f9 01       	movw	r30, r18
    172e:	20 81       	ld	r18, Z
    1730:	31 81       	ldd	r19, Z+1	; 0x01
    1732:	fc 01       	movw	r30, r24
    1734:	31 83       	std	Z+1, r19	; 0x01
    1736:	20 83       	st	Z, r18
    1738:	ce 01       	movw	r24, r28
    173a:	8e 58       	subi	r24, 0x8E	; 142
    173c:	9f 4f       	sbci	r25, 0xFF	; 255
    173e:	fc 01       	movw	r30, r24
    1740:	80 81       	ld	r24, Z
    1742:	91 81       	ldd	r25, Z+1	; 0x01
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <main+0x620>
    1748:	9e 01       	movw	r18, r28
    174a:	2e 58       	subi	r18, 0x8E	; 142
    174c:	3f 4f       	sbci	r19, 0xFF	; 255
    174e:	f9 01       	movw	r30, r18
    1750:	91 83       	std	Z+1, r25	; 0x01
    1752:	80 83       	st	Z, r24
			_delay_ms(50);
		}
		if(key == 2)
    1754:	89 85       	ldd	r24, Y+9	; 0x09
    1756:	82 30       	cpi	r24, 0x02	; 2
    1758:	09 f0       	breq	.+2      	; 0x175c <main+0x638>
    175a:	7f c1       	rjmp	.+766    	; 0x1a5a <main+0x936>
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a8 e4       	ldi	r26, 0x48	; 72
    1762:	b2 e4       	ldi	r27, 0x42	; 66
    1764:	8e 8b       	std	Y+22, r24	; 0x16
    1766:	9f 8b       	std	Y+23, r25	; 0x17
    1768:	a8 8f       	std	Y+24, r26	; 0x18
    176a:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    176c:	8e 01       	movw	r16, r28
    176e:	08 57       	subi	r16, 0x78	; 120
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	4a e7       	ldi	r20, 0x7A	; 122
    1778:	53 e4       	ldi	r21, 0x43	; 67
    177a:	6e 89       	ldd	r22, Y+22	; 0x16
    177c:	7f 89       	ldd	r23, Y+23	; 0x17
    177e:	88 8d       	ldd	r24, Y+24	; 0x18
    1780:	99 8d       	ldd	r25, Y+25	; 0x19
    1782:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	f8 01       	movw	r30, r16
    178c:	80 83       	st	Z, r24
    178e:	91 83       	std	Z+1, r25	; 0x01
    1790:	a2 83       	std	Z+2, r26	; 0x02
    1792:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1794:	ce 01       	movw	r24, r28
    1796:	88 57       	subi	r24, 0x78	; 120
    1798:	9f 4f       	sbci	r25, 0xFF	; 255
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e8       	ldi	r20, 0x80	; 128
    17a0:	5f e3       	ldi	r21, 0x3F	; 63
    17a2:	fc 01       	movw	r30, r24
    17a4:	60 81       	ld	r22, Z
    17a6:	71 81       	ldd	r23, Z+1	; 0x01
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	93 81       	ldd	r25, Z+3	; 0x03
    17ac:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	4c f4       	brge	.+18     	; 0x17c6 <main+0x6a2>
		__ticks = 1;
    17b4:	ce 01       	movw	r24, r28
    17b6:	84 57       	subi	r24, 0x74	; 116
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	21 e0       	ldi	r18, 0x01	; 1
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	fc 01       	movw	r30, r24
    17c0:	31 83       	std	Z+1, r19	; 0x01
    17c2:	20 83       	st	Z, r18
    17c4:	69 c0       	rjmp	.+210    	; 0x1898 <main+0x774>
	else if (__tmp > 65535)
    17c6:	ce 01       	movw	r24, r28
    17c8:	88 57       	subi	r24, 0x78	; 120
    17ca:	9f 4f       	sbci	r25, 0xFF	; 255
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
    17d0:	4f e7       	ldi	r20, 0x7F	; 127
    17d2:	57 e4       	ldi	r21, 0x47	; 71
    17d4:	fc 01       	movw	r30, r24
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	0c f0       	brlt	.+2      	; 0x17e8 <main+0x6c4>
    17e6:	46 c0       	rjmp	.+140    	; 0x1874 <main+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e2       	ldi	r20, 0x20	; 32
    17ee:	51 e4       	ldi	r21, 0x41	; 65
    17f0:	6e 89       	ldd	r22, Y+22	; 0x16
    17f2:	7f 89       	ldd	r23, Y+23	; 0x17
    17f4:	88 8d       	ldd	r24, Y+24	; 0x18
    17f6:	99 8d       	ldd	r25, Y+25	; 0x19
    17f8:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	8e 01       	movw	r16, r28
    1802:	04 57       	subi	r16, 0x74	; 116
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	bc 01       	movw	r22, r24
    1808:	cd 01       	movw	r24, r26
    180a:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	f8 01       	movw	r30, r16
    1814:	91 83       	std	Z+1, r25	; 0x01
    1816:	80 83       	st	Z, r24
    1818:	24 c0       	rjmp	.+72     	; 0x1862 <main+0x73e>
    181a:	ce 01       	movw	r24, r28
    181c:	82 57       	subi	r24, 0x72	; 114
    181e:	9f 4f       	sbci	r25, 0xFF	; 255
    1820:	29 e1       	ldi	r18, 0x19	; 25
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	fc 01       	movw	r30, r24
    1826:	31 83       	std	Z+1, r19	; 0x01
    1828:	20 83       	st	Z, r18
    182a:	ce 01       	movw	r24, r28
    182c:	82 57       	subi	r24, 0x72	; 114
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	fc 01       	movw	r30, r24
    1832:	80 81       	ld	r24, Z
    1834:	91 81       	ldd	r25, Z+1	; 0x01
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	f1 f7       	brne	.-4      	; 0x1836 <main+0x712>
    183a:	9e 01       	movw	r18, r28
    183c:	22 57       	subi	r18, 0x72	; 114
    183e:	3f 4f       	sbci	r19, 0xFF	; 255
    1840:	f9 01       	movw	r30, r18
    1842:	91 83       	std	Z+1, r25	; 0x01
    1844:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1846:	ce 01       	movw	r24, r28
    1848:	84 57       	subi	r24, 0x74	; 116
    184a:	9f 4f       	sbci	r25, 0xFF	; 255
    184c:	9e 01       	movw	r18, r28
    184e:	24 57       	subi	r18, 0x74	; 116
    1850:	3f 4f       	sbci	r19, 0xFF	; 255
    1852:	f9 01       	movw	r30, r18
    1854:	20 81       	ld	r18, Z
    1856:	31 81       	ldd	r19, Z+1	; 0x01
    1858:	21 50       	subi	r18, 0x01	; 1
    185a:	31 09       	sbc	r19, r1
    185c:	fc 01       	movw	r30, r24
    185e:	31 83       	std	Z+1, r19	; 0x01
    1860:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1862:	ce 01       	movw	r24, r28
    1864:	84 57       	subi	r24, 0x74	; 116
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	fc 01       	movw	r30, r24
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
    186e:	89 2b       	or	r24, r25
    1870:	a1 f6       	brne	.-88     	; 0x181a <main+0x6f6>
    1872:	2c c0       	rjmp	.+88     	; 0x18cc <main+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1874:	8e 01       	movw	r16, r28
    1876:	04 57       	subi	r16, 0x74	; 116
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	ce 01       	movw	r24, r28
    187c:	88 57       	subi	r24, 0x78	; 120
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	fc 01       	movw	r30, r24
    1882:	60 81       	ld	r22, Z
    1884:	71 81       	ldd	r23, Z+1	; 0x01
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	f8 01       	movw	r30, r16
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24
    1898:	ce 01       	movw	r24, r28
    189a:	80 57       	subi	r24, 0x70	; 112
    189c:	9f 4f       	sbci	r25, 0xFF	; 255
    189e:	9e 01       	movw	r18, r28
    18a0:	24 57       	subi	r18, 0x74	; 116
    18a2:	3f 4f       	sbci	r19, 0xFF	; 255
    18a4:	f9 01       	movw	r30, r18
    18a6:	20 81       	ld	r18, Z
    18a8:	31 81       	ldd	r19, Z+1	; 0x01
    18aa:	fc 01       	movw	r30, r24
    18ac:	31 83       	std	Z+1, r19	; 0x01
    18ae:	20 83       	st	Z, r18
    18b0:	ce 01       	movw	r24, r28
    18b2:	80 57       	subi	r24, 0x70	; 112
    18b4:	9f 4f       	sbci	r25, 0xFF	; 255
    18b6:	fc 01       	movw	r30, r24
    18b8:	80 81       	ld	r24, Z
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <main+0x798>
    18c0:	9e 01       	movw	r18, r28
    18c2:	20 57       	subi	r18, 0x70	; 112
    18c4:	3f 4f       	sbci	r19, 0xFF	; 255
    18c6:	f9 01       	movw	r30, r18
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24
		{
			_delay_ms(50);
		BCDSevegments_enable(ONE);
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(TWO);
    18d2:	82 e0       	ldi	r24, 0x02	; 2
    18d4:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(THREE);
    18d8:	83 e0       	ldi	r24, 0x03	; 3
    18da:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(FOUR);
    18de:	84 e0       	ldi	r24, 0x04	; 4
    18e0:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_displayNo(TWO);
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a8 e4       	ldi	r26, 0x48	; 72
    18f0:	b2 e4       	ldi	r27, 0x42	; 66
    18f2:	8a 87       	std	Y+10, r24	; 0x0a
    18f4:	9b 87       	std	Y+11, r25	; 0x0b
    18f6:	ac 87       	std	Y+12, r26	; 0x0c
    18f8:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18fa:	8e 01       	movw	r16, r28
    18fc:	02 58       	subi	r16, 0x82	; 130
    18fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	4a e7       	ldi	r20, 0x7A	; 122
    1906:	53 e4       	ldi	r21, 0x43	; 67
    1908:	6a 85       	ldd	r22, Y+10	; 0x0a
    190a:	7b 85       	ldd	r23, Y+11	; 0x0b
    190c:	8c 85       	ldd	r24, Y+12	; 0x0c
    190e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1910:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	f8 01       	movw	r30, r16
    191a:	80 83       	st	Z, r24
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	a2 83       	std	Z+2, r26	; 0x02
    1920:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1922:	ce 01       	movw	r24, r28
    1924:	82 58       	subi	r24, 0x82	; 130
    1926:	9f 4f       	sbci	r25, 0xFF	; 255
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	fc 01       	movw	r30, r24
    1932:	60 81       	ld	r22, Z
    1934:	71 81       	ldd	r23, Z+1	; 0x01
    1936:	82 81       	ldd	r24, Z+2	; 0x02
    1938:	93 81       	ldd	r25, Z+3	; 0x03
    193a:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    193e:	88 23       	and	r24, r24
    1940:	4c f4       	brge	.+18     	; 0x1954 <main+0x830>
		__ticks = 1;
    1942:	ce 01       	movw	r24, r28
    1944:	8e 57       	subi	r24, 0x7E	; 126
    1946:	9f 4f       	sbci	r25, 0xFF	; 255
    1948:	21 e0       	ldi	r18, 0x01	; 1
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	fc 01       	movw	r30, r24
    194e:	31 83       	std	Z+1, r19	; 0x01
    1950:	20 83       	st	Z, r18
    1952:	69 c0       	rjmp	.+210    	; 0x1a26 <main+0x902>
	else if (__tmp > 65535)
    1954:	ce 01       	movw	r24, r28
    1956:	82 58       	subi	r24, 0x82	; 130
    1958:	9f 4f       	sbci	r25, 0xFF	; 255
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	3f ef       	ldi	r19, 0xFF	; 255
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	57 e4       	ldi	r21, 0x47	; 71
    1962:	fc 01       	movw	r30, r24
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	82 81       	ldd	r24, Z+2	; 0x02
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    1970:	18 16       	cp	r1, r24
    1972:	0c f0       	brlt	.+2      	; 0x1976 <main+0x852>
    1974:	46 c0       	rjmp	.+140    	; 0x1a02 <main+0x8de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	51 e4       	ldi	r21, 0x41	; 65
    197e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1980:	7b 85       	ldd	r23, Y+11	; 0x0b
    1982:	8c 85       	ldd	r24, Y+12	; 0x0c
    1984:	9d 85       	ldd	r25, Y+13	; 0x0d
    1986:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	8e 01       	movw	r16, r28
    1990:	0e 57       	subi	r16, 0x7E	; 126
    1992:	1f 4f       	sbci	r17, 0xFF	; 255
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	f8 01       	movw	r30, r16
    19a2:	91 83       	std	Z+1, r25	; 0x01
    19a4:	80 83       	st	Z, r24
    19a6:	24 c0       	rjmp	.+72     	; 0x19f0 <main+0x8cc>
    19a8:	ce 01       	movw	r24, r28
    19aa:	8c 57       	subi	r24, 0x7C	; 124
    19ac:	9f 4f       	sbci	r25, 0xFF	; 255
    19ae:	29 e1       	ldi	r18, 0x19	; 25
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	fc 01       	movw	r30, r24
    19b4:	31 83       	std	Z+1, r19	; 0x01
    19b6:	20 83       	st	Z, r18
    19b8:	ce 01       	movw	r24, r28
    19ba:	8c 57       	subi	r24, 0x7C	; 124
    19bc:	9f 4f       	sbci	r25, 0xFF	; 255
    19be:	fc 01       	movw	r30, r24
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <main+0x8a0>
    19c8:	9e 01       	movw	r18, r28
    19ca:	2c 57       	subi	r18, 0x7C	; 124
    19cc:	3f 4f       	sbci	r19, 0xFF	; 255
    19ce:	f9 01       	movw	r30, r18
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d4:	ce 01       	movw	r24, r28
    19d6:	8e 57       	subi	r24, 0x7E	; 126
    19d8:	9f 4f       	sbci	r25, 0xFF	; 255
    19da:	9e 01       	movw	r18, r28
    19dc:	2e 57       	subi	r18, 0x7E	; 126
    19de:	3f 4f       	sbci	r19, 0xFF	; 255
    19e0:	f9 01       	movw	r30, r18
    19e2:	20 81       	ld	r18, Z
    19e4:	31 81       	ldd	r19, Z+1	; 0x01
    19e6:	21 50       	subi	r18, 0x01	; 1
    19e8:	31 09       	sbc	r19, r1
    19ea:	fc 01       	movw	r30, r24
    19ec:	31 83       	std	Z+1, r19	; 0x01
    19ee:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f0:	ce 01       	movw	r24, r28
    19f2:	8e 57       	subi	r24, 0x7E	; 126
    19f4:	9f 4f       	sbci	r25, 0xFF	; 255
    19f6:	fc 01       	movw	r30, r24
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	89 2b       	or	r24, r25
    19fe:	a1 f6       	brne	.-88     	; 0x19a8 <main+0x884>
    1a00:	2c c0       	rjmp	.+88     	; 0x1a5a <main+0x936>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a02:	8e 01       	movw	r16, r28
    1a04:	0e 57       	subi	r16, 0x7E	; 126
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	ce 01       	movw	r24, r28
    1a0a:	82 58       	subi	r24, 0x82	; 130
    1a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0e:	fc 01       	movw	r30, r24
    1a10:	60 81       	ld	r22, Z
    1a12:	71 81       	ldd	r23, Z+1	; 0x01
    1a14:	82 81       	ldd	r24, Z+2	; 0x02
    1a16:	93 81       	ldd	r25, Z+3	; 0x03
    1a18:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	f8 01       	movw	r30, r16
    1a22:	91 83       	std	Z+1, r25	; 0x01
    1a24:	80 83       	st	Z, r24
    1a26:	ce 01       	movw	r24, r28
    1a28:	8a 57       	subi	r24, 0x7A	; 122
    1a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2c:	9e 01       	movw	r18, r28
    1a2e:	2e 57       	subi	r18, 0x7E	; 126
    1a30:	3f 4f       	sbci	r19, 0xFF	; 255
    1a32:	f9 01       	movw	r30, r18
    1a34:	20 81       	ld	r18, Z
    1a36:	31 81       	ldd	r19, Z+1	; 0x01
    1a38:	fc 01       	movw	r30, r24
    1a3a:	31 83       	std	Z+1, r19	; 0x01
    1a3c:	20 83       	st	Z, r18
    1a3e:	ce 01       	movw	r24, r28
    1a40:	8a 57       	subi	r24, 0x7A	; 122
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	fc 01       	movw	r30, r24
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <main+0x926>
    1a4e:	9e 01       	movw	r18, r28
    1a50:	2a 57       	subi	r18, 0x7A	; 122
    1a52:	3f 4f       	sbci	r19, 0xFF	; 255
    1a54:	f9 01       	movw	r30, r18
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	80 83       	st	Z, r24
			_delay_ms(50);
		}
		if(key == 3)
    1a5a:	89 85       	ldd	r24, Y+9	; 0x09
    1a5c:	83 30       	cpi	r24, 0x03	; 3
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <main+0x93e>
    1a60:	7f c1       	rjmp	.+766    	; 0x1d60 <main+0xc3c>
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a8 e4       	ldi	r26, 0x48	; 72
    1a68:	b2 e4       	ldi	r27, 0x42	; 66
    1a6a:	8e 8f       	std	Y+30, r24	; 0x1e
    1a6c:	9f 8f       	std	Y+31, r25	; 0x1f
    1a6e:	a8 a3       	std	Y+32, r26	; 0x20
    1a70:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a72:	8e 01       	movw	r16, r28
    1a74:	04 56       	subi	r16, 0x64	; 100
    1a76:	1f 4f       	sbci	r17, 0xFF	; 255
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	4a e7       	ldi	r20, 0x7A	; 122
    1a7e:	53 e4       	ldi	r21, 0x43	; 67
    1a80:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1a82:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1a84:	88 a1       	ldd	r24, Y+32	; 0x20
    1a86:	99 a1       	ldd	r25, Y+33	; 0x21
    1a88:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	f8 01       	movw	r30, r16
    1a92:	80 83       	st	Z, r24
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	a2 83       	std	Z+2, r26	; 0x02
    1a98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	84 56       	subi	r24, 0x64	; 100
    1a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e8       	ldi	r20, 0x80	; 128
    1aa6:	5f e3       	ldi	r21, 0x3F	; 63
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	60 81       	ld	r22, Z
    1aac:	71 81       	ldd	r23, Z+1	; 0x01
    1aae:	82 81       	ldd	r24, Z+2	; 0x02
    1ab0:	93 81       	ldd	r25, Z+3	; 0x03
    1ab2:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    1ab6:	88 23       	and	r24, r24
    1ab8:	4c f4       	brge	.+18     	; 0x1acc <main+0x9a8>
		__ticks = 1;
    1aba:	ce 01       	movw	r24, r28
    1abc:	80 56       	subi	r24, 0x60	; 96
    1abe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac0:	21 e0       	ldi	r18, 0x01	; 1
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	31 83       	std	Z+1, r19	; 0x01
    1ac8:	20 83       	st	Z, r18
    1aca:	69 c0       	rjmp	.+210    	; 0x1b9e <main+0xa7a>
	else if (__tmp > 65535)
    1acc:	ce 01       	movw	r24, r28
    1ace:	84 56       	subi	r24, 0x64	; 100
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	fc 01       	movw	r30, r24
    1adc:	60 81       	ld	r22, Z
    1ade:	71 81       	ldd	r23, Z+1	; 0x01
    1ae0:	82 81       	ldd	r24, Z+2	; 0x02
    1ae2:	93 81       	ldd	r25, Z+3	; 0x03
    1ae4:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    1ae8:	18 16       	cp	r1, r24
    1aea:	0c f0       	brlt	.+2      	; 0x1aee <main+0x9ca>
    1aec:	46 c0       	rjmp	.+140    	; 0x1b7a <main+0xa56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e2       	ldi	r20, 0x20	; 32
    1af4:	51 e4       	ldi	r21, 0x41	; 65
    1af6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1af8:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1afa:	88 a1       	ldd	r24, Y+32	; 0x20
    1afc:	99 a1       	ldd	r25, Y+33	; 0x21
    1afe:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	8e 01       	movw	r16, r28
    1b08:	00 56       	subi	r16, 0x60	; 96
    1b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	f8 01       	movw	r30, r16
    1b1a:	91 83       	std	Z+1, r25	; 0x01
    1b1c:	80 83       	st	Z, r24
    1b1e:	24 c0       	rjmp	.+72     	; 0x1b68 <main+0xa44>
    1b20:	ce 01       	movw	r24, r28
    1b22:	8e 55       	subi	r24, 0x5E	; 94
    1b24:	9f 4f       	sbci	r25, 0xFF	; 255
    1b26:	29 e1       	ldi	r18, 0x19	; 25
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	31 83       	std	Z+1, r19	; 0x01
    1b2e:	20 83       	st	Z, r18
    1b30:	ce 01       	movw	r24, r28
    1b32:	8e 55       	subi	r24, 0x5E	; 94
    1b34:	9f 4f       	sbci	r25, 0xFF	; 255
    1b36:	fc 01       	movw	r30, r24
    1b38:	80 81       	ld	r24, Z
    1b3a:	91 81       	ldd	r25, Z+1	; 0x01
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <main+0xa18>
    1b40:	9e 01       	movw	r18, r28
    1b42:	2e 55       	subi	r18, 0x5E	; 94
    1b44:	3f 4f       	sbci	r19, 0xFF	; 255
    1b46:	f9 01       	movw	r30, r18
    1b48:	91 83       	std	Z+1, r25	; 0x01
    1b4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	80 56       	subi	r24, 0x60	; 96
    1b50:	9f 4f       	sbci	r25, 0xFF	; 255
    1b52:	9e 01       	movw	r18, r28
    1b54:	20 56       	subi	r18, 0x60	; 96
    1b56:	3f 4f       	sbci	r19, 0xFF	; 255
    1b58:	f9 01       	movw	r30, r18
    1b5a:	20 81       	ld	r18, Z
    1b5c:	31 81       	ldd	r19, Z+1	; 0x01
    1b5e:	21 50       	subi	r18, 0x01	; 1
    1b60:	31 09       	sbc	r19, r1
    1b62:	fc 01       	movw	r30, r24
    1b64:	31 83       	std	Z+1, r19	; 0x01
    1b66:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b68:	ce 01       	movw	r24, r28
    1b6a:	80 56       	subi	r24, 0x60	; 96
    1b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6e:	fc 01       	movw	r30, r24
    1b70:	80 81       	ld	r24, Z
    1b72:	91 81       	ldd	r25, Z+1	; 0x01
    1b74:	89 2b       	or	r24, r25
    1b76:	a1 f6       	brne	.-88     	; 0x1b20 <main+0x9fc>
    1b78:	2c c0       	rjmp	.+88     	; 0x1bd2 <main+0xaae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7a:	8e 01       	movw	r16, r28
    1b7c:	00 56       	subi	r16, 0x60	; 96
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	ce 01       	movw	r24, r28
    1b82:	84 56       	subi	r24, 0x64	; 100
    1b84:	9f 4f       	sbci	r25, 0xFF	; 255
    1b86:	fc 01       	movw	r30, r24
    1b88:	60 81       	ld	r22, Z
    1b8a:	71 81       	ldd	r23, Z+1	; 0x01
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	93 81       	ldd	r25, Z+3	; 0x03
    1b90:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	f8 01       	movw	r30, r16
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	80 83       	st	Z, r24
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	8c 55       	subi	r24, 0x5C	; 92
    1ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba4:	9e 01       	movw	r18, r28
    1ba6:	20 56       	subi	r18, 0x60	; 96
    1ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    1baa:	f9 01       	movw	r30, r18
    1bac:	20 81       	ld	r18, Z
    1bae:	31 81       	ldd	r19, Z+1	; 0x01
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	31 83       	std	Z+1, r19	; 0x01
    1bb4:	20 83       	st	Z, r18
    1bb6:	ce 01       	movw	r24, r28
    1bb8:	8c 55       	subi	r24, 0x5C	; 92
    1bba:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	80 81       	ld	r24, Z
    1bc0:	91 81       	ldd	r25, Z+1	; 0x01
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <main+0xa9e>
    1bc6:	9e 01       	movw	r18, r28
    1bc8:	2c 55       	subi	r18, 0x5C	; 92
    1bca:	3f 4f       	sbci	r19, 0xFF	; 255
    1bcc:	f9 01       	movw	r30, r18
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(ONE);
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(TWO);
    1bd8:	82 e0       	ldi	r24, 0x02	; 2
    1bda:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(THREE);
    1bde:	83 e0       	ldi	r24, 0x03	; 3
    1be0:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(FOUR);
    1be4:	84 e0       	ldi	r24, 0x04	; 4
    1be6:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_displayNo(THREE);
    1bea:	83 e0       	ldi	r24, 0x03	; 3
    1bec:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a8 e4       	ldi	r26, 0x48	; 72
    1bf6:	b2 e4       	ldi	r27, 0x42	; 66
    1bf8:	8a 8b       	std	Y+18, r24	; 0x12
    1bfa:	9b 8b       	std	Y+19, r25	; 0x13
    1bfc:	ac 8b       	std	Y+20, r26	; 0x14
    1bfe:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c00:	8e 01       	movw	r16, r28
    1c02:	0e 56       	subi	r16, 0x6E	; 110
    1c04:	1f 4f       	sbci	r17, 0xFF	; 255
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4a e7       	ldi	r20, 0x7A	; 122
    1c0c:	53 e4       	ldi	r21, 0x43	; 67
    1c0e:	6a 89       	ldd	r22, Y+18	; 0x12
    1c10:	7b 89       	ldd	r23, Y+19	; 0x13
    1c12:	8c 89       	ldd	r24, Y+20	; 0x14
    1c14:	9d 89       	ldd	r25, Y+21	; 0x15
    1c16:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	f8 01       	movw	r30, r16
    1c20:	80 83       	st	Z, r24
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	a2 83       	std	Z+2, r26	; 0x02
    1c26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c28:	ce 01       	movw	r24, r28
    1c2a:	8e 56       	subi	r24, 0x6E	; 110
    1c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e8       	ldi	r20, 0x80	; 128
    1c34:	5f e3       	ldi	r21, 0x3F	; 63
    1c36:	fc 01       	movw	r30, r24
    1c38:	60 81       	ld	r22, Z
    1c3a:	71 81       	ldd	r23, Z+1	; 0x01
    1c3c:	82 81       	ldd	r24, Z+2	; 0x02
    1c3e:	93 81       	ldd	r25, Z+3	; 0x03
    1c40:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    1c44:	88 23       	and	r24, r24
    1c46:	4c f4       	brge	.+18     	; 0x1c5a <main+0xb36>
		__ticks = 1;
    1c48:	ce 01       	movw	r24, r28
    1c4a:	8a 56       	subi	r24, 0x6A	; 106
    1c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4e:	21 e0       	ldi	r18, 0x01	; 1
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	fc 01       	movw	r30, r24
    1c54:	31 83       	std	Z+1, r19	; 0x01
    1c56:	20 83       	st	Z, r18
    1c58:	69 c0       	rjmp	.+210    	; 0x1d2c <main+0xc08>
	else if (__tmp > 65535)
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	8e 56       	subi	r24, 0x6E	; 110
    1c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	3f ef       	ldi	r19, 0xFF	; 255
    1c64:	4f e7       	ldi	r20, 0x7F	; 127
    1c66:	57 e4       	ldi	r21, 0x47	; 71
    1c68:	fc 01       	movw	r30, r24
    1c6a:	60 81       	ld	r22, Z
    1c6c:	71 81       	ldd	r23, Z+1	; 0x01
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	93 81       	ldd	r25, Z+3	; 0x03
    1c72:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	0c f0       	brlt	.+2      	; 0x1c7c <main+0xb58>
    1c7a:	46 c0       	rjmp	.+140    	; 0x1d08 <main+0xbe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e2       	ldi	r20, 0x20	; 32
    1c82:	51 e4       	ldi	r21, 0x41	; 65
    1c84:	6a 89       	ldd	r22, Y+18	; 0x12
    1c86:	7b 89       	ldd	r23, Y+19	; 0x13
    1c88:	8c 89       	ldd	r24, Y+20	; 0x14
    1c8a:	9d 89       	ldd	r25, Y+21	; 0x15
    1c8c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	8e 01       	movw	r16, r28
    1c96:	0a 56       	subi	r16, 0x6A	; 106
    1c98:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	f8 01       	movw	r30, r16
    1ca8:	91 83       	std	Z+1, r25	; 0x01
    1caa:	80 83       	st	Z, r24
    1cac:	24 c0       	rjmp	.+72     	; 0x1cf6 <main+0xbd2>
    1cae:	ce 01       	movw	r24, r28
    1cb0:	88 56       	subi	r24, 0x68	; 104
    1cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb4:	29 e1       	ldi	r18, 0x19	; 25
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	fc 01       	movw	r30, r24
    1cba:	31 83       	std	Z+1, r19	; 0x01
    1cbc:	20 83       	st	Z, r18
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	88 56       	subi	r24, 0x68	; 104
    1cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	80 81       	ld	r24, Z
    1cc8:	91 81       	ldd	r25, Z+1	; 0x01
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <main+0xba6>
    1cce:	9e 01       	movw	r18, r28
    1cd0:	28 56       	subi	r18, 0x68	; 104
    1cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd4:	f9 01       	movw	r30, r18
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cda:	ce 01       	movw	r24, r28
    1cdc:	8a 56       	subi	r24, 0x6A	; 106
    1cde:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce0:	9e 01       	movw	r18, r28
    1ce2:	2a 56       	subi	r18, 0x6A	; 106
    1ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce6:	f9 01       	movw	r30, r18
    1ce8:	20 81       	ld	r18, Z
    1cea:	31 81       	ldd	r19, Z+1	; 0x01
    1cec:	21 50       	subi	r18, 0x01	; 1
    1cee:	31 09       	sbc	r19, r1
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	31 83       	std	Z+1, r19	; 0x01
    1cf4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	8a 56       	subi	r24, 0x6A	; 106
    1cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	80 81       	ld	r24, Z
    1d00:	91 81       	ldd	r25, Z+1	; 0x01
    1d02:	89 2b       	or	r24, r25
    1d04:	a1 f6       	brne	.-88     	; 0x1cae <main+0xb8a>
    1d06:	2c c0       	rjmp	.+88     	; 0x1d60 <main+0xc3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d08:	8e 01       	movw	r16, r28
    1d0a:	0a 56       	subi	r16, 0x6A	; 106
    1d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0e:	ce 01       	movw	r24, r28
    1d10:	8e 56       	subi	r24, 0x6E	; 110
    1d12:	9f 4f       	sbci	r25, 0xFF	; 255
    1d14:	fc 01       	movw	r30, r24
    1d16:	60 81       	ld	r22, Z
    1d18:	71 81       	ldd	r23, Z+1	; 0x01
    1d1a:	82 81       	ldd	r24, Z+2	; 0x02
    1d1c:	93 81       	ldd	r25, Z+3	; 0x03
    1d1e:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	f8 01       	movw	r30, r16
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	86 56       	subi	r24, 0x66	; 102
    1d30:	9f 4f       	sbci	r25, 0xFF	; 255
    1d32:	9e 01       	movw	r18, r28
    1d34:	2a 56       	subi	r18, 0x6A	; 106
    1d36:	3f 4f       	sbci	r19, 0xFF	; 255
    1d38:	f9 01       	movw	r30, r18
    1d3a:	20 81       	ld	r18, Z
    1d3c:	31 81       	ldd	r19, Z+1	; 0x01
    1d3e:	fc 01       	movw	r30, r24
    1d40:	31 83       	std	Z+1, r19	; 0x01
    1d42:	20 83       	st	Z, r18
    1d44:	ce 01       	movw	r24, r28
    1d46:	86 56       	subi	r24, 0x66	; 102
    1d48:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	80 81       	ld	r24, Z
    1d4e:	91 81       	ldd	r25, Z+1	; 0x01
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <main+0xc2c>
    1d54:	9e 01       	movw	r18, r28
    1d56:	26 56       	subi	r18, 0x66	; 102
    1d58:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5a:	f9 01       	movw	r30, r18
    1d5c:	91 83       	std	Z+1, r25	; 0x01
    1d5e:	80 83       	st	Z, r24
			_delay_ms(50);
		}
		if(key == 4)
    1d60:	89 85       	ldd	r24, Y+9	; 0x09
    1d62:	84 30       	cpi	r24, 0x04	; 4
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <main+0xc44>
    1d66:	7f c1       	rjmp	.+766    	; 0x2066 <main+0xf42>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a8 e4       	ldi	r26, 0x48	; 72
    1d6e:	b2 e4       	ldi	r27, 0x42	; 66
    1d70:	8e a3       	std	Y+38, r24	; 0x26
    1d72:	9f a3       	std	Y+39, r25	; 0x27
    1d74:	a8 a7       	std	Y+40, r26	; 0x28
    1d76:	b9 a7       	std	Y+41, r27	; 0x29

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	8e 01       	movw	r16, r28
    1d7a:	00 55       	subi	r16, 0x50	; 80
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	4a e7       	ldi	r20, 0x7A	; 122
    1d84:	53 e4       	ldi	r21, 0x43	; 67
    1d86:	6e a1       	ldd	r22, Y+38	; 0x26
    1d88:	7f a1       	ldd	r23, Y+39	; 0x27
    1d8a:	88 a5       	ldd	r24, Y+40	; 0x28
    1d8c:	99 a5       	ldd	r25, Y+41	; 0x29
    1d8e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	f8 01       	movw	r30, r16
    1d98:	80 83       	st	Z, r24
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	a2 83       	std	Z+2, r26	; 0x02
    1d9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da0:	ce 01       	movw	r24, r28
    1da2:	80 55       	subi	r24, 0x50	; 80
    1da4:	9f 4f       	sbci	r25, 0xFF	; 255
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e8       	ldi	r20, 0x80	; 128
    1dac:	5f e3       	ldi	r21, 0x3F	; 63
    1dae:	fc 01       	movw	r30, r24
    1db0:	60 81       	ld	r22, Z
    1db2:	71 81       	ldd	r23, Z+1	; 0x01
    1db4:	82 81       	ldd	r24, Z+2	; 0x02
    1db6:	93 81       	ldd	r25, Z+3	; 0x03
    1db8:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	4c f4       	brge	.+18     	; 0x1dd2 <main+0xcae>
		__ticks = 1;
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	8c 54       	subi	r24, 0x4C	; 76
    1dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc6:	21 e0       	ldi	r18, 0x01	; 1
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	fc 01       	movw	r30, r24
    1dcc:	31 83       	std	Z+1, r19	; 0x01
    1dce:	20 83       	st	Z, r18
    1dd0:	69 c0       	rjmp	.+210    	; 0x1ea4 <main+0xd80>
	else if (__tmp > 65535)
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	80 55       	subi	r24, 0x50	; 80
    1dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	3f ef       	ldi	r19, 0xFF	; 255
    1ddc:	4f e7       	ldi	r20, 0x7F	; 127
    1dde:	57 e4       	ldi	r21, 0x47	; 71
    1de0:	fc 01       	movw	r30, r24
    1de2:	60 81       	ld	r22, Z
    1de4:	71 81       	ldd	r23, Z+1	; 0x01
    1de6:	82 81       	ldd	r24, Z+2	; 0x02
    1de8:	93 81       	ldd	r25, Z+3	; 0x03
    1dea:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    1dee:	18 16       	cp	r1, r24
    1df0:	0c f0       	brlt	.+2      	; 0x1df4 <main+0xcd0>
    1df2:	46 c0       	rjmp	.+140    	; 0x1e80 <main+0xd5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	6e a1       	ldd	r22, Y+38	; 0x26
    1dfe:	7f a1       	ldd	r23, Y+39	; 0x27
    1e00:	88 a5       	ldd	r24, Y+40	; 0x28
    1e02:	99 a5       	ldd	r25, Y+41	; 0x29
    1e04:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	8e 01       	movw	r16, r28
    1e0e:	0c 54       	subi	r16, 0x4C	; 76
    1e10:	1f 4f       	sbci	r17, 0xFF	; 255
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	f8 01       	movw	r30, r16
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
    1e24:	24 c0       	rjmp	.+72     	; 0x1e6e <main+0xd4a>
    1e26:	ce 01       	movw	r24, r28
    1e28:	8a 54       	subi	r24, 0x4A	; 74
    1e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2c:	29 e1       	ldi	r18, 0x19	; 25
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	fc 01       	movw	r30, r24
    1e32:	31 83       	std	Z+1, r19	; 0x01
    1e34:	20 83       	st	Z, r18
    1e36:	ce 01       	movw	r24, r28
    1e38:	8a 54       	subi	r24, 0x4A	; 74
    1e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	80 81       	ld	r24, Z
    1e40:	91 81       	ldd	r25, Z+1	; 0x01
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <main+0xd1e>
    1e46:	9e 01       	movw	r18, r28
    1e48:	2a 54       	subi	r18, 0x4A	; 74
    1e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4c:	f9 01       	movw	r30, r18
    1e4e:	91 83       	std	Z+1, r25	; 0x01
    1e50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e52:	ce 01       	movw	r24, r28
    1e54:	8c 54       	subi	r24, 0x4C	; 76
    1e56:	9f 4f       	sbci	r25, 0xFF	; 255
    1e58:	9e 01       	movw	r18, r28
    1e5a:	2c 54       	subi	r18, 0x4C	; 76
    1e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5e:	f9 01       	movw	r30, r18
    1e60:	20 81       	ld	r18, Z
    1e62:	31 81       	ldd	r19, Z+1	; 0x01
    1e64:	21 50       	subi	r18, 0x01	; 1
    1e66:	31 09       	sbc	r19, r1
    1e68:	fc 01       	movw	r30, r24
    1e6a:	31 83       	std	Z+1, r19	; 0x01
    1e6c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6e:	ce 01       	movw	r24, r28
    1e70:	8c 54       	subi	r24, 0x4C	; 76
    1e72:	9f 4f       	sbci	r25, 0xFF	; 255
    1e74:	fc 01       	movw	r30, r24
    1e76:	80 81       	ld	r24, Z
    1e78:	91 81       	ldd	r25, Z+1	; 0x01
    1e7a:	89 2b       	or	r24, r25
    1e7c:	a1 f6       	brne	.-88     	; 0x1e26 <main+0xd02>
    1e7e:	2c c0       	rjmp	.+88     	; 0x1ed8 <main+0xdb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e80:	8e 01       	movw	r16, r28
    1e82:	0c 54       	subi	r16, 0x4C	; 76
    1e84:	1f 4f       	sbci	r17, 0xFF	; 255
    1e86:	ce 01       	movw	r24, r28
    1e88:	80 55       	subi	r24, 0x50	; 80
    1e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	60 81       	ld	r22, Z
    1e90:	71 81       	ldd	r23, Z+1	; 0x01
    1e92:	82 81       	ldd	r24, Z+2	; 0x02
    1e94:	93 81       	ldd	r25, Z+3	; 0x03
    1e96:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	91 83       	std	Z+1, r25	; 0x01
    1ea2:	80 83       	st	Z, r24
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	88 54       	subi	r24, 0x48	; 72
    1ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eaa:	9e 01       	movw	r18, r28
    1eac:	2c 54       	subi	r18, 0x4C	; 76
    1eae:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb0:	f9 01       	movw	r30, r18
    1eb2:	20 81       	ld	r18, Z
    1eb4:	31 81       	ldd	r19, Z+1	; 0x01
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	31 83       	std	Z+1, r19	; 0x01
    1eba:	20 83       	st	Z, r18
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	88 54       	subi	r24, 0x48	; 72
    1ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	80 81       	ld	r24, Z
    1ec6:	91 81       	ldd	r25, Z+1	; 0x01
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <main+0xda4>
    1ecc:	9e 01       	movw	r18, r28
    1ece:	28 54       	subi	r18, 0x48	; 72
    1ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed2:	f9 01       	movw	r30, r18
    1ed4:	91 83       	std	Z+1, r25	; 0x01
    1ed6:	80 83       	st	Z, r24
		{
		_delay_ms(50);
		BCDSevegments_enable(ONE);
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(TWO);
    1ede:	82 e0       	ldi	r24, 0x02	; 2
    1ee0:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(THREE);
    1ee4:	83 e0       	ldi	r24, 0x03	; 3
    1ee6:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(FOUR);
    1eea:	84 e0       	ldi	r24, 0x04	; 4
    1eec:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_displayNo(FOUR);
    1ef0:	84 e0       	ldi	r24, 0x04	; 4
    1ef2:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	a8 e4       	ldi	r26, 0x48	; 72
    1efc:	b2 e4       	ldi	r27, 0x42	; 66
    1efe:	8a 8f       	std	Y+26, r24	; 0x1a
    1f00:	9b 8f       	std	Y+27, r25	; 0x1b
    1f02:	ac 8f       	std	Y+28, r26	; 0x1c
    1f04:	bd 8f       	std	Y+29, r27	; 0x1d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f06:	8e 01       	movw	r16, r28
    1f08:	0a 55       	subi	r16, 0x5A	; 90
    1f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	4a e7       	ldi	r20, 0x7A	; 122
    1f12:	53 e4       	ldi	r21, 0x43	; 67
    1f14:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f16:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f18:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f1a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f1c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	f8 01       	movw	r30, r16
    1f26:	80 83       	st	Z, r24
    1f28:	91 83       	std	Z+1, r25	; 0x01
    1f2a:	a2 83       	std	Z+2, r26	; 0x02
    1f2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f2e:	ce 01       	movw	r24, r28
    1f30:	8a 55       	subi	r24, 0x5A	; 90
    1f32:	9f 4f       	sbci	r25, 0xFF	; 255
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e8       	ldi	r20, 0x80	; 128
    1f3a:	5f e3       	ldi	r21, 0x3F	; 63
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	60 81       	ld	r22, Z
    1f40:	71 81       	ldd	r23, Z+1	; 0x01
    1f42:	82 81       	ldd	r24, Z+2	; 0x02
    1f44:	93 81       	ldd	r25, Z+3	; 0x03
    1f46:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    1f4a:	88 23       	and	r24, r24
    1f4c:	4c f4       	brge	.+18     	; 0x1f60 <main+0xe3c>
		__ticks = 1;
    1f4e:	ce 01       	movw	r24, r28
    1f50:	86 55       	subi	r24, 0x56	; 86
    1f52:	9f 4f       	sbci	r25, 0xFF	; 255
    1f54:	21 e0       	ldi	r18, 0x01	; 1
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	fc 01       	movw	r30, r24
    1f5a:	31 83       	std	Z+1, r19	; 0x01
    1f5c:	20 83       	st	Z, r18
    1f5e:	69 c0       	rjmp	.+210    	; 0x2032 <main+0xf0e>
	else if (__tmp > 65535)
    1f60:	ce 01       	movw	r24, r28
    1f62:	8a 55       	subi	r24, 0x5A	; 90
    1f64:	9f 4f       	sbci	r25, 0xFF	; 255
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	3f ef       	ldi	r19, 0xFF	; 255
    1f6a:	4f e7       	ldi	r20, 0x7F	; 127
    1f6c:	57 e4       	ldi	r21, 0x47	; 71
    1f6e:	fc 01       	movw	r30, r24
    1f70:	60 81       	ld	r22, Z
    1f72:	71 81       	ldd	r23, Z+1	; 0x01
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    1f7c:	18 16       	cp	r1, r24
    1f7e:	0c f0       	brlt	.+2      	; 0x1f82 <main+0xe5e>
    1f80:	46 c0       	rjmp	.+140    	; 0x200e <main+0xeea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e2       	ldi	r20, 0x20	; 32
    1f88:	51 e4       	ldi	r21, 0x41	; 65
    1f8a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f8c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f8e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f90:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f92:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	8e 01       	movw	r16, r28
    1f9c:	06 55       	subi	r16, 0x56	; 86
    1f9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	f8 01       	movw	r30, r16
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	80 83       	st	Z, r24
    1fb2:	24 c0       	rjmp	.+72     	; 0x1ffc <main+0xed8>
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	84 55       	subi	r24, 0x54	; 84
    1fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fba:	29 e1       	ldi	r18, 0x19	; 25
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	31 83       	std	Z+1, r19	; 0x01
    1fc2:	20 83       	st	Z, r18
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	84 55       	subi	r24, 0x54	; 84
    1fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fca:	fc 01       	movw	r30, r24
    1fcc:	80 81       	ld	r24, Z
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <main+0xeac>
    1fd4:	9e 01       	movw	r18, r28
    1fd6:	24 55       	subi	r18, 0x54	; 84
    1fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fda:	f9 01       	movw	r30, r18
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe0:	ce 01       	movw	r24, r28
    1fe2:	86 55       	subi	r24, 0x56	; 86
    1fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe6:	9e 01       	movw	r18, r28
    1fe8:	26 55       	subi	r18, 0x56	; 86
    1fea:	3f 4f       	sbci	r19, 0xFF	; 255
    1fec:	f9 01       	movw	r30, r18
    1fee:	20 81       	ld	r18, Z
    1ff0:	31 81       	ldd	r19, Z+1	; 0x01
    1ff2:	21 50       	subi	r18, 0x01	; 1
    1ff4:	31 09       	sbc	r19, r1
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	31 83       	std	Z+1, r19	; 0x01
    1ffa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	86 55       	subi	r24, 0x56	; 86
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	fc 01       	movw	r30, r24
    2004:	80 81       	ld	r24, Z
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	89 2b       	or	r24, r25
    200a:	a1 f6       	brne	.-88     	; 0x1fb4 <main+0xe90>
    200c:	2c c0       	rjmp	.+88     	; 0x2066 <main+0xf42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200e:	8e 01       	movw	r16, r28
    2010:	06 55       	subi	r16, 0x56	; 86
    2012:	1f 4f       	sbci	r17, 0xFF	; 255
    2014:	ce 01       	movw	r24, r28
    2016:	8a 55       	subi	r24, 0x5A	; 90
    2018:	9f 4f       	sbci	r25, 0xFF	; 255
    201a:	fc 01       	movw	r30, r24
    201c:	60 81       	ld	r22, Z
    201e:	71 81       	ldd	r23, Z+1	; 0x01
    2020:	82 81       	ldd	r24, Z+2	; 0x02
    2022:	93 81       	ldd	r25, Z+3	; 0x03
    2024:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	f8 01       	movw	r30, r16
    202e:	91 83       	std	Z+1, r25	; 0x01
    2030:	80 83       	st	Z, r24
    2032:	ce 01       	movw	r24, r28
    2034:	82 55       	subi	r24, 0x52	; 82
    2036:	9f 4f       	sbci	r25, 0xFF	; 255
    2038:	9e 01       	movw	r18, r28
    203a:	26 55       	subi	r18, 0x56	; 86
    203c:	3f 4f       	sbci	r19, 0xFF	; 255
    203e:	f9 01       	movw	r30, r18
    2040:	20 81       	ld	r18, Z
    2042:	31 81       	ldd	r19, Z+1	; 0x01
    2044:	fc 01       	movw	r30, r24
    2046:	31 83       	std	Z+1, r19	; 0x01
    2048:	20 83       	st	Z, r18
    204a:	ce 01       	movw	r24, r28
    204c:	82 55       	subi	r24, 0x52	; 82
    204e:	9f 4f       	sbci	r25, 0xFF	; 255
    2050:	fc 01       	movw	r30, r24
    2052:	80 81       	ld	r24, Z
    2054:	91 81       	ldd	r25, Z+1	; 0x01
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <main+0xf32>
    205a:	9e 01       	movw	r18, r28
    205c:	22 55       	subi	r18, 0x52	; 82
    205e:	3f 4f       	sbci	r19, 0xFF	; 255
    2060:	f9 01       	movw	r30, r18
    2062:	91 83       	std	Z+1, r25	; 0x01
    2064:	80 83       	st	Z, r24
		_delay_ms(50);
		}
		if(key == 5)
    2066:	89 85       	ldd	r24, Y+9	; 0x09
    2068:	85 30       	cpi	r24, 0x05	; 5
    206a:	09 f0       	breq	.+2      	; 0x206e <main+0xf4a>
    206c:	7f c1       	rjmp	.+766    	; 0x236c <main+0x1248>
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a8 e4       	ldi	r26, 0x48	; 72
    2074:	b2 e4       	ldi	r27, 0x42	; 66
    2076:	8e a7       	std	Y+46, r24	; 0x2e
    2078:	9f a7       	std	Y+47, r25	; 0x2f
    207a:	a8 ab       	std	Y+48, r26	; 0x30
    207c:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    207e:	8e 01       	movw	r16, r28
    2080:	0c 53       	subi	r16, 0x3C	; 60
    2082:	1f 4f       	sbci	r17, 0xFF	; 255
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a e7       	ldi	r20, 0x7A	; 122
    208a:	53 e4       	ldi	r21, 0x43	; 67
    208c:	6e a5       	ldd	r22, Y+46	; 0x2e
    208e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2090:	88 a9       	ldd	r24, Y+48	; 0x30
    2092:	99 a9       	ldd	r25, Y+49	; 0x31
    2094:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	f8 01       	movw	r30, r16
    209e:	80 83       	st	Z, r24
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	a2 83       	std	Z+2, r26	; 0x02
    20a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20a6:	ce 01       	movw	r24, r28
    20a8:	8c 53       	subi	r24, 0x3C	; 60
    20aa:	9f 4f       	sbci	r25, 0xFF	; 255
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e8       	ldi	r20, 0x80	; 128
    20b2:	5f e3       	ldi	r21, 0x3F	; 63
    20b4:	fc 01       	movw	r30, r24
    20b6:	60 81       	ld	r22, Z
    20b8:	71 81       	ldd	r23, Z+1	; 0x01
    20ba:	82 81       	ldd	r24, Z+2	; 0x02
    20bc:	93 81       	ldd	r25, Z+3	; 0x03
    20be:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    20c2:	88 23       	and	r24, r24
    20c4:	4c f4       	brge	.+18     	; 0x20d8 <main+0xfb4>
		__ticks = 1;
    20c6:	ce 01       	movw	r24, r28
    20c8:	88 53       	subi	r24, 0x38	; 56
    20ca:	9f 4f       	sbci	r25, 0xFF	; 255
    20cc:	21 e0       	ldi	r18, 0x01	; 1
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	fc 01       	movw	r30, r24
    20d2:	31 83       	std	Z+1, r19	; 0x01
    20d4:	20 83       	st	Z, r18
    20d6:	69 c0       	rjmp	.+210    	; 0x21aa <main+0x1086>
	else if (__tmp > 65535)
    20d8:	ce 01       	movw	r24, r28
    20da:	8c 53       	subi	r24, 0x3C	; 60
    20dc:	9f 4f       	sbci	r25, 0xFF	; 255
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	3f ef       	ldi	r19, 0xFF	; 255
    20e2:	4f e7       	ldi	r20, 0x7F	; 127
    20e4:	57 e4       	ldi	r21, 0x47	; 71
    20e6:	fc 01       	movw	r30, r24
    20e8:	60 81       	ld	r22, Z
    20ea:	71 81       	ldd	r23, Z+1	; 0x01
    20ec:	82 81       	ldd	r24, Z+2	; 0x02
    20ee:	93 81       	ldd	r25, Z+3	; 0x03
    20f0:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    20f4:	18 16       	cp	r1, r24
    20f6:	0c f0       	brlt	.+2      	; 0x20fa <main+0xfd6>
    20f8:	46 c0       	rjmp	.+140    	; 0x2186 <main+0x1062>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e2       	ldi	r20, 0x20	; 32
    2100:	51 e4       	ldi	r21, 0x41	; 65
    2102:	6e a5       	ldd	r22, Y+46	; 0x2e
    2104:	7f a5       	ldd	r23, Y+47	; 0x2f
    2106:	88 a9       	ldd	r24, Y+48	; 0x30
    2108:	99 a9       	ldd	r25, Y+49	; 0x31
    210a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	8e 01       	movw	r16, r28
    2114:	08 53       	subi	r16, 0x38	; 56
    2116:	1f 4f       	sbci	r17, 0xFF	; 255
    2118:	bc 01       	movw	r22, r24
    211a:	cd 01       	movw	r24, r26
    211c:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	f8 01       	movw	r30, r16
    2126:	91 83       	std	Z+1, r25	; 0x01
    2128:	80 83       	st	Z, r24
    212a:	24 c0       	rjmp	.+72     	; 0x2174 <main+0x1050>
    212c:	ce 01       	movw	r24, r28
    212e:	86 53       	subi	r24, 0x36	; 54
    2130:	9f 4f       	sbci	r25, 0xFF	; 255
    2132:	29 e1       	ldi	r18, 0x19	; 25
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	fc 01       	movw	r30, r24
    2138:	31 83       	std	Z+1, r19	; 0x01
    213a:	20 83       	st	Z, r18
    213c:	ce 01       	movw	r24, r28
    213e:	86 53       	subi	r24, 0x36	; 54
    2140:	9f 4f       	sbci	r25, 0xFF	; 255
    2142:	fc 01       	movw	r30, r24
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <main+0x1024>
    214c:	9e 01       	movw	r18, r28
    214e:	26 53       	subi	r18, 0x36	; 54
    2150:	3f 4f       	sbci	r19, 0xFF	; 255
    2152:	f9 01       	movw	r30, r18
    2154:	91 83       	std	Z+1, r25	; 0x01
    2156:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2158:	ce 01       	movw	r24, r28
    215a:	88 53       	subi	r24, 0x38	; 56
    215c:	9f 4f       	sbci	r25, 0xFF	; 255
    215e:	9e 01       	movw	r18, r28
    2160:	28 53       	subi	r18, 0x38	; 56
    2162:	3f 4f       	sbci	r19, 0xFF	; 255
    2164:	f9 01       	movw	r30, r18
    2166:	20 81       	ld	r18, Z
    2168:	31 81       	ldd	r19, Z+1	; 0x01
    216a:	21 50       	subi	r18, 0x01	; 1
    216c:	31 09       	sbc	r19, r1
    216e:	fc 01       	movw	r30, r24
    2170:	31 83       	std	Z+1, r19	; 0x01
    2172:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2174:	ce 01       	movw	r24, r28
    2176:	88 53       	subi	r24, 0x38	; 56
    2178:	9f 4f       	sbci	r25, 0xFF	; 255
    217a:	fc 01       	movw	r30, r24
    217c:	80 81       	ld	r24, Z
    217e:	91 81       	ldd	r25, Z+1	; 0x01
    2180:	89 2b       	or	r24, r25
    2182:	a1 f6       	brne	.-88     	; 0x212c <main+0x1008>
    2184:	2c c0       	rjmp	.+88     	; 0x21de <main+0x10ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2186:	8e 01       	movw	r16, r28
    2188:	08 53       	subi	r16, 0x38	; 56
    218a:	1f 4f       	sbci	r17, 0xFF	; 255
    218c:	ce 01       	movw	r24, r28
    218e:	8c 53       	subi	r24, 0x3C	; 60
    2190:	9f 4f       	sbci	r25, 0xFF	; 255
    2192:	fc 01       	movw	r30, r24
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	82 81       	ldd	r24, Z+2	; 0x02
    219a:	93 81       	ldd	r25, Z+3	; 0x03
    219c:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	f8 01       	movw	r30, r16
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	80 83       	st	Z, r24
    21aa:	ce 01       	movw	r24, r28
    21ac:	84 53       	subi	r24, 0x34	; 52
    21ae:	9f 4f       	sbci	r25, 0xFF	; 255
    21b0:	9e 01       	movw	r18, r28
    21b2:	28 53       	subi	r18, 0x38	; 56
    21b4:	3f 4f       	sbci	r19, 0xFF	; 255
    21b6:	f9 01       	movw	r30, r18
    21b8:	20 81       	ld	r18, Z
    21ba:	31 81       	ldd	r19, Z+1	; 0x01
    21bc:	fc 01       	movw	r30, r24
    21be:	31 83       	std	Z+1, r19	; 0x01
    21c0:	20 83       	st	Z, r18
    21c2:	ce 01       	movw	r24, r28
    21c4:	84 53       	subi	r24, 0x34	; 52
    21c6:	9f 4f       	sbci	r25, 0xFF	; 255
    21c8:	fc 01       	movw	r30, r24
    21ca:	80 81       	ld	r24, Z
    21cc:	91 81       	ldd	r25, Z+1	; 0x01
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <main+0x10aa>
    21d2:	9e 01       	movw	r18, r28
    21d4:	24 53       	subi	r18, 0x34	; 52
    21d6:	3f 4f       	sbci	r19, 0xFF	; 255
    21d8:	f9 01       	movw	r30, r18
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(ONE);
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(TWO);
    21e4:	82 e0       	ldi	r24, 0x02	; 2
    21e6:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(THREE);
    21ea:	83 e0       	ldi	r24, 0x03	; 3
    21ec:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(FOUR);
    21f0:	84 e0       	ldi	r24, 0x04	; 4
    21f2:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_displayNo(FIVE);
    21f6:	85 e0       	ldi	r24, 0x05	; 5
    21f8:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	a8 e4       	ldi	r26, 0x48	; 72
    2202:	b2 e4       	ldi	r27, 0x42	; 66
    2204:	8a a3       	std	Y+34, r24	; 0x22
    2206:	9b a3       	std	Y+35, r25	; 0x23
    2208:	ac a3       	std	Y+36, r26	; 0x24
    220a:	bd a3       	std	Y+37, r27	; 0x25

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    220c:	8e 01       	movw	r16, r28
    220e:	06 54       	subi	r16, 0x46	; 70
    2210:	1f 4f       	sbci	r17, 0xFF	; 255
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	4a e7       	ldi	r20, 0x7A	; 122
    2218:	53 e4       	ldi	r21, 0x43	; 67
    221a:	6a a1       	ldd	r22, Y+34	; 0x22
    221c:	7b a1       	ldd	r23, Y+35	; 0x23
    221e:	8c a1       	ldd	r24, Y+36	; 0x24
    2220:	9d a1       	ldd	r25, Y+37	; 0x25
    2222:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	f8 01       	movw	r30, r16
    222c:	80 83       	st	Z, r24
    222e:	91 83       	std	Z+1, r25	; 0x01
    2230:	a2 83       	std	Z+2, r26	; 0x02
    2232:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2234:	ce 01       	movw	r24, r28
    2236:	86 54       	subi	r24, 0x46	; 70
    2238:	9f 4f       	sbci	r25, 0xFF	; 255
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e8       	ldi	r20, 0x80	; 128
    2240:	5f e3       	ldi	r21, 0x3F	; 63
    2242:	fc 01       	movw	r30, r24
    2244:	60 81       	ld	r22, Z
    2246:	71 81       	ldd	r23, Z+1	; 0x01
    2248:	82 81       	ldd	r24, Z+2	; 0x02
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    2250:	88 23       	and	r24, r24
    2252:	4c f4       	brge	.+18     	; 0x2266 <main+0x1142>
		__ticks = 1;
    2254:	ce 01       	movw	r24, r28
    2256:	82 54       	subi	r24, 0x42	; 66
    2258:	9f 4f       	sbci	r25, 0xFF	; 255
    225a:	21 e0       	ldi	r18, 0x01	; 1
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	fc 01       	movw	r30, r24
    2260:	31 83       	std	Z+1, r19	; 0x01
    2262:	20 83       	st	Z, r18
    2264:	69 c0       	rjmp	.+210    	; 0x2338 <main+0x1214>
	else if (__tmp > 65535)
    2266:	ce 01       	movw	r24, r28
    2268:	86 54       	subi	r24, 0x46	; 70
    226a:	9f 4f       	sbci	r25, 0xFF	; 255
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	3f ef       	ldi	r19, 0xFF	; 255
    2270:	4f e7       	ldi	r20, 0x7F	; 127
    2272:	57 e4       	ldi	r21, 0x47	; 71
    2274:	fc 01       	movw	r30, r24
    2276:	60 81       	ld	r22, Z
    2278:	71 81       	ldd	r23, Z+1	; 0x01
    227a:	82 81       	ldd	r24, Z+2	; 0x02
    227c:	93 81       	ldd	r25, Z+3	; 0x03
    227e:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    2282:	18 16       	cp	r1, r24
    2284:	0c f0       	brlt	.+2      	; 0x2288 <main+0x1164>
    2286:	46 c0       	rjmp	.+140    	; 0x2314 <main+0x11f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e2       	ldi	r20, 0x20	; 32
    228e:	51 e4       	ldi	r21, 0x41	; 65
    2290:	6a a1       	ldd	r22, Y+34	; 0x22
    2292:	7b a1       	ldd	r23, Y+35	; 0x23
    2294:	8c a1       	ldd	r24, Y+36	; 0x24
    2296:	9d a1       	ldd	r25, Y+37	; 0x25
    2298:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	8e 01       	movw	r16, r28
    22a2:	02 54       	subi	r16, 0x42	; 66
    22a4:	1f 4f       	sbci	r17, 0xFF	; 255
    22a6:	bc 01       	movw	r22, r24
    22a8:	cd 01       	movw	r24, r26
    22aa:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	f8 01       	movw	r30, r16
    22b4:	91 83       	std	Z+1, r25	; 0x01
    22b6:	80 83       	st	Z, r24
    22b8:	24 c0       	rjmp	.+72     	; 0x2302 <main+0x11de>
    22ba:	ce 01       	movw	r24, r28
    22bc:	80 54       	subi	r24, 0x40	; 64
    22be:	9f 4f       	sbci	r25, 0xFF	; 255
    22c0:	29 e1       	ldi	r18, 0x19	; 25
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	fc 01       	movw	r30, r24
    22c6:	31 83       	std	Z+1, r19	; 0x01
    22c8:	20 83       	st	Z, r18
    22ca:	ce 01       	movw	r24, r28
    22cc:	80 54       	subi	r24, 0x40	; 64
    22ce:	9f 4f       	sbci	r25, 0xFF	; 255
    22d0:	fc 01       	movw	r30, r24
    22d2:	80 81       	ld	r24, Z
    22d4:	91 81       	ldd	r25, Z+1	; 0x01
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <main+0x11b2>
    22da:	9e 01       	movw	r18, r28
    22dc:	20 54       	subi	r18, 0x40	; 64
    22de:	3f 4f       	sbci	r19, 0xFF	; 255
    22e0:	f9 01       	movw	r30, r18
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e6:	ce 01       	movw	r24, r28
    22e8:	82 54       	subi	r24, 0x42	; 66
    22ea:	9f 4f       	sbci	r25, 0xFF	; 255
    22ec:	9e 01       	movw	r18, r28
    22ee:	22 54       	subi	r18, 0x42	; 66
    22f0:	3f 4f       	sbci	r19, 0xFF	; 255
    22f2:	f9 01       	movw	r30, r18
    22f4:	20 81       	ld	r18, Z
    22f6:	31 81       	ldd	r19, Z+1	; 0x01
    22f8:	21 50       	subi	r18, 0x01	; 1
    22fa:	31 09       	sbc	r19, r1
    22fc:	fc 01       	movw	r30, r24
    22fe:	31 83       	std	Z+1, r19	; 0x01
    2300:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2302:	ce 01       	movw	r24, r28
    2304:	82 54       	subi	r24, 0x42	; 66
    2306:	9f 4f       	sbci	r25, 0xFF	; 255
    2308:	fc 01       	movw	r30, r24
    230a:	80 81       	ld	r24, Z
    230c:	91 81       	ldd	r25, Z+1	; 0x01
    230e:	89 2b       	or	r24, r25
    2310:	a1 f6       	brne	.-88     	; 0x22ba <main+0x1196>
    2312:	2c c0       	rjmp	.+88     	; 0x236c <main+0x1248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2314:	8e 01       	movw	r16, r28
    2316:	02 54       	subi	r16, 0x42	; 66
    2318:	1f 4f       	sbci	r17, 0xFF	; 255
    231a:	ce 01       	movw	r24, r28
    231c:	86 54       	subi	r24, 0x46	; 70
    231e:	9f 4f       	sbci	r25, 0xFF	; 255
    2320:	fc 01       	movw	r30, r24
    2322:	60 81       	ld	r22, Z
    2324:	71 81       	ldd	r23, Z+1	; 0x01
    2326:	82 81       	ldd	r24, Z+2	; 0x02
    2328:	93 81       	ldd	r25, Z+3	; 0x03
    232a:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	f8 01       	movw	r30, r16
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	80 83       	st	Z, r24
    2338:	ce 01       	movw	r24, r28
    233a:	8e 53       	subi	r24, 0x3E	; 62
    233c:	9f 4f       	sbci	r25, 0xFF	; 255
    233e:	9e 01       	movw	r18, r28
    2340:	22 54       	subi	r18, 0x42	; 66
    2342:	3f 4f       	sbci	r19, 0xFF	; 255
    2344:	f9 01       	movw	r30, r18
    2346:	20 81       	ld	r18, Z
    2348:	31 81       	ldd	r19, Z+1	; 0x01
    234a:	fc 01       	movw	r30, r24
    234c:	31 83       	std	Z+1, r19	; 0x01
    234e:	20 83       	st	Z, r18
    2350:	ce 01       	movw	r24, r28
    2352:	8e 53       	subi	r24, 0x3E	; 62
    2354:	9f 4f       	sbci	r25, 0xFF	; 255
    2356:	fc 01       	movw	r30, r24
    2358:	80 81       	ld	r24, Z
    235a:	91 81       	ldd	r25, Z+1	; 0x01
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <main+0x1238>
    2360:	9e 01       	movw	r18, r28
    2362:	2e 53       	subi	r18, 0x3E	; 62
    2364:	3f 4f       	sbci	r19, 0xFF	; 255
    2366:	f9 01       	movw	r30, r18
    2368:	91 83       	std	Z+1, r25	; 0x01
    236a:	80 83       	st	Z, r24
			_delay_ms(50);
		}
			if(key == 6)
    236c:	89 85       	ldd	r24, Y+9	; 0x09
    236e:	86 30       	cpi	r24, 0x06	; 6
    2370:	09 f0       	breq	.+2      	; 0x2374 <main+0x1250>
    2372:	7f c1       	rjmp	.+766    	; 0x2672 <main+0x154e>
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a8 e4       	ldi	r26, 0x48	; 72
    237a:	b2 e4       	ldi	r27, 0x42	; 66
    237c:	8e ab       	std	Y+54, r24	; 0x36
    237e:	9f ab       	std	Y+55, r25	; 0x37
    2380:	a8 af       	std	Y+56, r26	; 0x38
    2382:	b9 af       	std	Y+57, r27	; 0x39

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2384:	8e 01       	movw	r16, r28
    2386:	08 52       	subi	r16, 0x28	; 40
    2388:	1f 4f       	sbci	r17, 0xFF	; 255
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	4a e7       	ldi	r20, 0x7A	; 122
    2390:	53 e4       	ldi	r21, 0x43	; 67
    2392:	6e a9       	ldd	r22, Y+54	; 0x36
    2394:	7f a9       	ldd	r23, Y+55	; 0x37
    2396:	88 ad       	ldd	r24, Y+56	; 0x38
    2398:	99 ad       	ldd	r25, Y+57	; 0x39
    239a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	f8 01       	movw	r30, r16
    23a4:	80 83       	st	Z, r24
    23a6:	91 83       	std	Z+1, r25	; 0x01
    23a8:	a2 83       	std	Z+2, r26	; 0x02
    23aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ac:	ce 01       	movw	r24, r28
    23ae:	88 52       	subi	r24, 0x28	; 40
    23b0:	9f 4f       	sbci	r25, 0xFF	; 255
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	fc 01       	movw	r30, r24
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	4c f4       	brge	.+18     	; 0x23de <main+0x12ba>
		__ticks = 1;
    23cc:	ce 01       	movw	r24, r28
    23ce:	84 52       	subi	r24, 0x24	; 36
    23d0:	9f 4f       	sbci	r25, 0xFF	; 255
    23d2:	21 e0       	ldi	r18, 0x01	; 1
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	fc 01       	movw	r30, r24
    23d8:	31 83       	std	Z+1, r19	; 0x01
    23da:	20 83       	st	Z, r18
    23dc:	69 c0       	rjmp	.+210    	; 0x24b0 <main+0x138c>
	else if (__tmp > 65535)
    23de:	ce 01       	movw	r24, r28
    23e0:	88 52       	subi	r24, 0x28	; 40
    23e2:	9f 4f       	sbci	r25, 0xFF	; 255
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	3f ef       	ldi	r19, 0xFF	; 255
    23e8:	4f e7       	ldi	r20, 0x7F	; 127
    23ea:	57 e4       	ldi	r21, 0x47	; 71
    23ec:	fc 01       	movw	r30, r24
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    23fa:	18 16       	cp	r1, r24
    23fc:	0c f0       	brlt	.+2      	; 0x2400 <main+0x12dc>
    23fe:	46 c0       	rjmp	.+140    	; 0x248c <main+0x1368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e2       	ldi	r20, 0x20	; 32
    2406:	51 e4       	ldi	r21, 0x41	; 65
    2408:	6e a9       	ldd	r22, Y+54	; 0x36
    240a:	7f a9       	ldd	r23, Y+55	; 0x37
    240c:	88 ad       	ldd	r24, Y+56	; 0x38
    240e:	99 ad       	ldd	r25, Y+57	; 0x39
    2410:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	8e 01       	movw	r16, r28
    241a:	04 52       	subi	r16, 0x24	; 36
    241c:	1f 4f       	sbci	r17, 0xFF	; 255
    241e:	bc 01       	movw	r22, r24
    2420:	cd 01       	movw	r24, r26
    2422:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	f8 01       	movw	r30, r16
    242c:	91 83       	std	Z+1, r25	; 0x01
    242e:	80 83       	st	Z, r24
    2430:	24 c0       	rjmp	.+72     	; 0x247a <main+0x1356>
    2432:	ce 01       	movw	r24, r28
    2434:	82 52       	subi	r24, 0x22	; 34
    2436:	9f 4f       	sbci	r25, 0xFF	; 255
    2438:	29 e1       	ldi	r18, 0x19	; 25
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	fc 01       	movw	r30, r24
    243e:	31 83       	std	Z+1, r19	; 0x01
    2440:	20 83       	st	Z, r18
    2442:	ce 01       	movw	r24, r28
    2444:	82 52       	subi	r24, 0x22	; 34
    2446:	9f 4f       	sbci	r25, 0xFF	; 255
    2448:	fc 01       	movw	r30, r24
    244a:	80 81       	ld	r24, Z
    244c:	91 81       	ldd	r25, Z+1	; 0x01
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <main+0x132a>
    2452:	9e 01       	movw	r18, r28
    2454:	22 52       	subi	r18, 0x22	; 34
    2456:	3f 4f       	sbci	r19, 0xFF	; 255
    2458:	f9 01       	movw	r30, r18
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245e:	ce 01       	movw	r24, r28
    2460:	84 52       	subi	r24, 0x24	; 36
    2462:	9f 4f       	sbci	r25, 0xFF	; 255
    2464:	9e 01       	movw	r18, r28
    2466:	24 52       	subi	r18, 0x24	; 36
    2468:	3f 4f       	sbci	r19, 0xFF	; 255
    246a:	f9 01       	movw	r30, r18
    246c:	20 81       	ld	r18, Z
    246e:	31 81       	ldd	r19, Z+1	; 0x01
    2470:	21 50       	subi	r18, 0x01	; 1
    2472:	31 09       	sbc	r19, r1
    2474:	fc 01       	movw	r30, r24
    2476:	31 83       	std	Z+1, r19	; 0x01
    2478:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247a:	ce 01       	movw	r24, r28
    247c:	84 52       	subi	r24, 0x24	; 36
    247e:	9f 4f       	sbci	r25, 0xFF	; 255
    2480:	fc 01       	movw	r30, r24
    2482:	80 81       	ld	r24, Z
    2484:	91 81       	ldd	r25, Z+1	; 0x01
    2486:	89 2b       	or	r24, r25
    2488:	a1 f6       	brne	.-88     	; 0x2432 <main+0x130e>
    248a:	2c c0       	rjmp	.+88     	; 0x24e4 <main+0x13c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248c:	8e 01       	movw	r16, r28
    248e:	04 52       	subi	r16, 0x24	; 36
    2490:	1f 4f       	sbci	r17, 0xFF	; 255
    2492:	ce 01       	movw	r24, r28
    2494:	88 52       	subi	r24, 0x28	; 40
    2496:	9f 4f       	sbci	r25, 0xFF	; 255
    2498:	fc 01       	movw	r30, r24
    249a:	60 81       	ld	r22, Z
    249c:	71 81       	ldd	r23, Z+1	; 0x01
    249e:	82 81       	ldd	r24, Z+2	; 0x02
    24a0:	93 81       	ldd	r25, Z+3	; 0x03
    24a2:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	f8 01       	movw	r30, r16
    24ac:	91 83       	std	Z+1, r25	; 0x01
    24ae:	80 83       	st	Z, r24
    24b0:	ce 01       	movw	r24, r28
    24b2:	80 52       	subi	r24, 0x20	; 32
    24b4:	9f 4f       	sbci	r25, 0xFF	; 255
    24b6:	9e 01       	movw	r18, r28
    24b8:	24 52       	subi	r18, 0x24	; 36
    24ba:	3f 4f       	sbci	r19, 0xFF	; 255
    24bc:	f9 01       	movw	r30, r18
    24be:	20 81       	ld	r18, Z
    24c0:	31 81       	ldd	r19, Z+1	; 0x01
    24c2:	fc 01       	movw	r30, r24
    24c4:	31 83       	std	Z+1, r19	; 0x01
    24c6:	20 83       	st	Z, r18
    24c8:	ce 01       	movw	r24, r28
    24ca:	80 52       	subi	r24, 0x20	; 32
    24cc:	9f 4f       	sbci	r25, 0xFF	; 255
    24ce:	fc 01       	movw	r30, r24
    24d0:	80 81       	ld	r24, Z
    24d2:	91 81       	ldd	r25, Z+1	; 0x01
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <main+0x13b0>
    24d8:	9e 01       	movw	r18, r28
    24da:	20 52       	subi	r18, 0x20	; 32
    24dc:	3f 4f       	sbci	r19, 0xFF	; 255
    24de:	f9 01       	movw	r30, r18
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    24ea:	82 e0       	ldi	r24, 0x02	; 2
    24ec:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    24f0:	83 e0       	ldi	r24, 0x03	; 3
    24f2:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    24f6:	84 e0       	ldi	r24, 0x04	; 4
    24f8:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(SIX);
    24fc:	86 e0       	ldi	r24, 0x06	; 6
    24fe:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	a8 e4       	ldi	r26, 0x48	; 72
    2508:	b2 e4       	ldi	r27, 0x42	; 66
    250a:	8a a7       	std	Y+42, r24	; 0x2a
    250c:	9b a7       	std	Y+43, r25	; 0x2b
    250e:	ac a7       	std	Y+44, r26	; 0x2c
    2510:	bd a7       	std	Y+45, r27	; 0x2d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2512:	8e 01       	movw	r16, r28
    2514:	02 53       	subi	r16, 0x32	; 50
    2516:	1f 4f       	sbci	r17, 0xFF	; 255
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	4a e7       	ldi	r20, 0x7A	; 122
    251e:	53 e4       	ldi	r21, 0x43	; 67
    2520:	6a a5       	ldd	r22, Y+42	; 0x2a
    2522:	7b a5       	ldd	r23, Y+43	; 0x2b
    2524:	8c a5       	ldd	r24, Y+44	; 0x2c
    2526:	9d a5       	ldd	r25, Y+45	; 0x2d
    2528:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	f8 01       	movw	r30, r16
    2532:	80 83       	st	Z, r24
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	a2 83       	std	Z+2, r26	; 0x02
    2538:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    253a:	ce 01       	movw	r24, r28
    253c:	82 53       	subi	r24, 0x32	; 50
    253e:	9f 4f       	sbci	r25, 0xFF	; 255
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	fc 01       	movw	r30, r24
    254a:	60 81       	ld	r22, Z
    254c:	71 81       	ldd	r23, Z+1	; 0x01
    254e:	82 81       	ldd	r24, Z+2	; 0x02
    2550:	93 81       	ldd	r25, Z+3	; 0x03
    2552:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    2556:	88 23       	and	r24, r24
    2558:	4c f4       	brge	.+18     	; 0x256c <main+0x1448>
		__ticks = 1;
    255a:	ce 01       	movw	r24, r28
    255c:	8e 52       	subi	r24, 0x2E	; 46
    255e:	9f 4f       	sbci	r25, 0xFF	; 255
    2560:	21 e0       	ldi	r18, 0x01	; 1
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	fc 01       	movw	r30, r24
    2566:	31 83       	std	Z+1, r19	; 0x01
    2568:	20 83       	st	Z, r18
    256a:	69 c0       	rjmp	.+210    	; 0x263e <main+0x151a>
	else if (__tmp > 65535)
    256c:	ce 01       	movw	r24, r28
    256e:	82 53       	subi	r24, 0x32	; 50
    2570:	9f 4f       	sbci	r25, 0xFF	; 255
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	3f ef       	ldi	r19, 0xFF	; 255
    2576:	4f e7       	ldi	r20, 0x7F	; 127
    2578:	57 e4       	ldi	r21, 0x47	; 71
    257a:	fc 01       	movw	r30, r24
    257c:	60 81       	ld	r22, Z
    257e:	71 81       	ldd	r23, Z+1	; 0x01
    2580:	82 81       	ldd	r24, Z+2	; 0x02
    2582:	93 81       	ldd	r25, Z+3	; 0x03
    2584:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    2588:	18 16       	cp	r1, r24
    258a:	0c f0       	brlt	.+2      	; 0x258e <main+0x146a>
    258c:	46 c0       	rjmp	.+140    	; 0x261a <main+0x14f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e2       	ldi	r20, 0x20	; 32
    2594:	51 e4       	ldi	r21, 0x41	; 65
    2596:	6a a5       	ldd	r22, Y+42	; 0x2a
    2598:	7b a5       	ldd	r23, Y+43	; 0x2b
    259a:	8c a5       	ldd	r24, Y+44	; 0x2c
    259c:	9d a5       	ldd	r25, Y+45	; 0x2d
    259e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	8e 01       	movw	r16, r28
    25a8:	0e 52       	subi	r16, 0x2E	; 46
    25aa:	1f 4f       	sbci	r17, 0xFF	; 255
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	f8 01       	movw	r30, r16
    25ba:	91 83       	std	Z+1, r25	; 0x01
    25bc:	80 83       	st	Z, r24
    25be:	24 c0       	rjmp	.+72     	; 0x2608 <main+0x14e4>
    25c0:	ce 01       	movw	r24, r28
    25c2:	8c 52       	subi	r24, 0x2C	; 44
    25c4:	9f 4f       	sbci	r25, 0xFF	; 255
    25c6:	29 e1       	ldi	r18, 0x19	; 25
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	fc 01       	movw	r30, r24
    25cc:	31 83       	std	Z+1, r19	; 0x01
    25ce:	20 83       	st	Z, r18
    25d0:	ce 01       	movw	r24, r28
    25d2:	8c 52       	subi	r24, 0x2C	; 44
    25d4:	9f 4f       	sbci	r25, 0xFF	; 255
    25d6:	fc 01       	movw	r30, r24
    25d8:	80 81       	ld	r24, Z
    25da:	91 81       	ldd	r25, Z+1	; 0x01
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <main+0x14b8>
    25e0:	9e 01       	movw	r18, r28
    25e2:	2c 52       	subi	r18, 0x2C	; 44
    25e4:	3f 4f       	sbci	r19, 0xFF	; 255
    25e6:	f9 01       	movw	r30, r18
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ec:	ce 01       	movw	r24, r28
    25ee:	8e 52       	subi	r24, 0x2E	; 46
    25f0:	9f 4f       	sbci	r25, 0xFF	; 255
    25f2:	9e 01       	movw	r18, r28
    25f4:	2e 52       	subi	r18, 0x2E	; 46
    25f6:	3f 4f       	sbci	r19, 0xFF	; 255
    25f8:	f9 01       	movw	r30, r18
    25fa:	20 81       	ld	r18, Z
    25fc:	31 81       	ldd	r19, Z+1	; 0x01
    25fe:	21 50       	subi	r18, 0x01	; 1
    2600:	31 09       	sbc	r19, r1
    2602:	fc 01       	movw	r30, r24
    2604:	31 83       	std	Z+1, r19	; 0x01
    2606:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2608:	ce 01       	movw	r24, r28
    260a:	8e 52       	subi	r24, 0x2E	; 46
    260c:	9f 4f       	sbci	r25, 0xFF	; 255
    260e:	fc 01       	movw	r30, r24
    2610:	80 81       	ld	r24, Z
    2612:	91 81       	ldd	r25, Z+1	; 0x01
    2614:	89 2b       	or	r24, r25
    2616:	a1 f6       	brne	.-88     	; 0x25c0 <main+0x149c>
    2618:	2c c0       	rjmp	.+88     	; 0x2672 <main+0x154e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261a:	8e 01       	movw	r16, r28
    261c:	0e 52       	subi	r16, 0x2E	; 46
    261e:	1f 4f       	sbci	r17, 0xFF	; 255
    2620:	ce 01       	movw	r24, r28
    2622:	82 53       	subi	r24, 0x32	; 50
    2624:	9f 4f       	sbci	r25, 0xFF	; 255
    2626:	fc 01       	movw	r30, r24
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	f8 01       	movw	r30, r16
    263a:	91 83       	std	Z+1, r25	; 0x01
    263c:	80 83       	st	Z, r24
    263e:	ce 01       	movw	r24, r28
    2640:	8a 52       	subi	r24, 0x2A	; 42
    2642:	9f 4f       	sbci	r25, 0xFF	; 255
    2644:	9e 01       	movw	r18, r28
    2646:	2e 52       	subi	r18, 0x2E	; 46
    2648:	3f 4f       	sbci	r19, 0xFF	; 255
    264a:	f9 01       	movw	r30, r18
    264c:	20 81       	ld	r18, Z
    264e:	31 81       	ldd	r19, Z+1	; 0x01
    2650:	fc 01       	movw	r30, r24
    2652:	31 83       	std	Z+1, r19	; 0x01
    2654:	20 83       	st	Z, r18
    2656:	ce 01       	movw	r24, r28
    2658:	8a 52       	subi	r24, 0x2A	; 42
    265a:	9f 4f       	sbci	r25, 0xFF	; 255
    265c:	fc 01       	movw	r30, r24
    265e:	80 81       	ld	r24, Z
    2660:	91 81       	ldd	r25, Z+1	; 0x01
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <main+0x153e>
    2666:	9e 01       	movw	r18, r28
    2668:	2a 52       	subi	r18, 0x2A	; 42
    266a:	3f 4f       	sbci	r19, 0xFF	; 255
    266c:	f9 01       	movw	r30, r18
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	80 83       	st	Z, r24
				_delay_ms(50);
			}
			if(key == 7)
    2672:	89 85       	ldd	r24, Y+9	; 0x09
    2674:	87 30       	cpi	r24, 0x07	; 7
    2676:	09 f0       	breq	.+2      	; 0x267a <main+0x1556>
    2678:	89 c1       	rjmp	.+786    	; 0x298c <main+0x1868>
    267a:	9e 01       	movw	r18, r28
    267c:	22 5c       	subi	r18, 0xC2	; 194
    267e:	3f 4f       	sbci	r19, 0xFF	; 255
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	a8 e4       	ldi	r26, 0x48	; 72
    2686:	b2 e4       	ldi	r27, 0x42	; 66
    2688:	f9 01       	movw	r30, r18
    268a:	80 83       	st	Z, r24
    268c:	91 83       	std	Z+1, r25	; 0x01
    268e:	a2 83       	std	Z+2, r26	; 0x02
    2690:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2692:	8e 01       	movw	r16, r28
    2694:	04 51       	subi	r16, 0x14	; 20
    2696:	1f 4f       	sbci	r17, 0xFF	; 255
    2698:	ce 01       	movw	r24, r28
    269a:	ce 96       	adiw	r24, 0x3e	; 62
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	4a e7       	ldi	r20, 0x7A	; 122
    26a2:	53 e4       	ldi	r21, 0x43	; 67
    26a4:	fc 01       	movw	r30, r24
    26a6:	60 81       	ld	r22, Z
    26a8:	71 81       	ldd	r23, Z+1	; 0x01
    26aa:	82 81       	ldd	r24, Z+2	; 0x02
    26ac:	93 81       	ldd	r25, Z+3	; 0x03
    26ae:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	f8 01       	movw	r30, r16
    26b8:	80 83       	st	Z, r24
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	a2 83       	std	Z+2, r26	; 0x02
    26be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26c0:	ce 01       	movw	r24, r28
    26c2:	84 51       	subi	r24, 0x14	; 20
    26c4:	9f 4f       	sbci	r25, 0xFF	; 255
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e8       	ldi	r20, 0x80	; 128
    26cc:	5f e3       	ldi	r21, 0x3F	; 63
    26ce:	fc 01       	movw	r30, r24
    26d0:	60 81       	ld	r22, Z
    26d2:	71 81       	ldd	r23, Z+1	; 0x01
    26d4:	82 81       	ldd	r24, Z+2	; 0x02
    26d6:	93 81       	ldd	r25, Z+3	; 0x03
    26d8:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    26dc:	88 23       	and	r24, r24
    26de:	4c f4       	brge	.+18     	; 0x26f2 <main+0x15ce>
		__ticks = 1;
    26e0:	ce 01       	movw	r24, r28
    26e2:	80 51       	subi	r24, 0x10	; 16
    26e4:	9f 4f       	sbci	r25, 0xFF	; 255
    26e6:	21 e0       	ldi	r18, 0x01	; 1
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	fc 01       	movw	r30, r24
    26ec:	31 83       	std	Z+1, r19	; 0x01
    26ee:	20 83       	st	Z, r18
    26f0:	6c c0       	rjmp	.+216    	; 0x27ca <main+0x16a6>
	else if (__tmp > 65535)
    26f2:	ce 01       	movw	r24, r28
    26f4:	84 51       	subi	r24, 0x14	; 20
    26f6:	9f 4f       	sbci	r25, 0xFF	; 255
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	3f ef       	ldi	r19, 0xFF	; 255
    26fc:	4f e7       	ldi	r20, 0x7F	; 127
    26fe:	57 e4       	ldi	r21, 0x47	; 71
    2700:	fc 01       	movw	r30, r24
    2702:	60 81       	ld	r22, Z
    2704:	71 81       	ldd	r23, Z+1	; 0x01
    2706:	82 81       	ldd	r24, Z+2	; 0x02
    2708:	93 81       	ldd	r25, Z+3	; 0x03
    270a:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    270e:	18 16       	cp	r1, r24
    2710:	0c f0       	brlt	.+2      	; 0x2714 <main+0x15f0>
    2712:	49 c0       	rjmp	.+146    	; 0x27a6 <main+0x1682>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2714:	ce 01       	movw	r24, r28
    2716:	ce 96       	adiw	r24, 0x3e	; 62
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e2       	ldi	r20, 0x20	; 32
    271e:	51 e4       	ldi	r21, 0x41	; 65
    2720:	fc 01       	movw	r30, r24
    2722:	60 81       	ld	r22, Z
    2724:	71 81       	ldd	r23, Z+1	; 0x01
    2726:	82 81       	ldd	r24, Z+2	; 0x02
    2728:	93 81       	ldd	r25, Z+3	; 0x03
    272a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	8e 01       	movw	r16, r28
    2734:	00 51       	subi	r16, 0x10	; 16
    2736:	1f 4f       	sbci	r17, 0xFF	; 255
    2738:	bc 01       	movw	r22, r24
    273a:	cd 01       	movw	r24, r26
    273c:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	f8 01       	movw	r30, r16
    2746:	91 83       	std	Z+1, r25	; 0x01
    2748:	80 83       	st	Z, r24
    274a:	24 c0       	rjmp	.+72     	; 0x2794 <main+0x1670>
    274c:	ce 01       	movw	r24, r28
    274e:	8e 50       	subi	r24, 0x0E	; 14
    2750:	9f 4f       	sbci	r25, 0xFF	; 255
    2752:	29 e1       	ldi	r18, 0x19	; 25
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	fc 01       	movw	r30, r24
    2758:	31 83       	std	Z+1, r19	; 0x01
    275a:	20 83       	st	Z, r18
    275c:	ce 01       	movw	r24, r28
    275e:	8e 50       	subi	r24, 0x0E	; 14
    2760:	9f 4f       	sbci	r25, 0xFF	; 255
    2762:	fc 01       	movw	r30, r24
    2764:	80 81       	ld	r24, Z
    2766:	91 81       	ldd	r25, Z+1	; 0x01
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <main+0x1644>
    276c:	9e 01       	movw	r18, r28
    276e:	2e 50       	subi	r18, 0x0E	; 14
    2770:	3f 4f       	sbci	r19, 0xFF	; 255
    2772:	f9 01       	movw	r30, r18
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2778:	ce 01       	movw	r24, r28
    277a:	80 51       	subi	r24, 0x10	; 16
    277c:	9f 4f       	sbci	r25, 0xFF	; 255
    277e:	9e 01       	movw	r18, r28
    2780:	20 51       	subi	r18, 0x10	; 16
    2782:	3f 4f       	sbci	r19, 0xFF	; 255
    2784:	f9 01       	movw	r30, r18
    2786:	20 81       	ld	r18, Z
    2788:	31 81       	ldd	r19, Z+1	; 0x01
    278a:	21 50       	subi	r18, 0x01	; 1
    278c:	31 09       	sbc	r19, r1
    278e:	fc 01       	movw	r30, r24
    2790:	31 83       	std	Z+1, r19	; 0x01
    2792:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2794:	ce 01       	movw	r24, r28
    2796:	80 51       	subi	r24, 0x10	; 16
    2798:	9f 4f       	sbci	r25, 0xFF	; 255
    279a:	fc 01       	movw	r30, r24
    279c:	80 81       	ld	r24, Z
    279e:	91 81       	ldd	r25, Z+1	; 0x01
    27a0:	89 2b       	or	r24, r25
    27a2:	a1 f6       	brne	.-88     	; 0x274c <main+0x1628>
    27a4:	2c c0       	rjmp	.+88     	; 0x27fe <main+0x16da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a6:	8e 01       	movw	r16, r28
    27a8:	00 51       	subi	r16, 0x10	; 16
    27aa:	1f 4f       	sbci	r17, 0xFF	; 255
    27ac:	ce 01       	movw	r24, r28
    27ae:	84 51       	subi	r24, 0x14	; 20
    27b0:	9f 4f       	sbci	r25, 0xFF	; 255
    27b2:	fc 01       	movw	r30, r24
    27b4:	60 81       	ld	r22, Z
    27b6:	71 81       	ldd	r23, Z+1	; 0x01
    27b8:	82 81       	ldd	r24, Z+2	; 0x02
    27ba:	93 81       	ldd	r25, Z+3	; 0x03
    27bc:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	f8 01       	movw	r30, r16
    27c6:	91 83       	std	Z+1, r25	; 0x01
    27c8:	80 83       	st	Z, r24
    27ca:	ce 01       	movw	r24, r28
    27cc:	8c 50       	subi	r24, 0x0C	; 12
    27ce:	9f 4f       	sbci	r25, 0xFF	; 255
    27d0:	9e 01       	movw	r18, r28
    27d2:	20 51       	subi	r18, 0x10	; 16
    27d4:	3f 4f       	sbci	r19, 0xFF	; 255
    27d6:	f9 01       	movw	r30, r18
    27d8:	20 81       	ld	r18, Z
    27da:	31 81       	ldd	r19, Z+1	; 0x01
    27dc:	fc 01       	movw	r30, r24
    27de:	31 83       	std	Z+1, r19	; 0x01
    27e0:	20 83       	st	Z, r18
    27e2:	ce 01       	movw	r24, r28
    27e4:	8c 50       	subi	r24, 0x0C	; 12
    27e6:	9f 4f       	sbci	r25, 0xFF	; 255
    27e8:	fc 01       	movw	r30, r24
    27ea:	80 81       	ld	r24, Z
    27ec:	91 81       	ldd	r25, Z+1	; 0x01
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <main+0x16ca>
    27f2:	9e 01       	movw	r18, r28
    27f4:	2c 50       	subi	r18, 0x0C	; 12
    27f6:	3f 4f       	sbci	r19, 0xFF	; 255
    27f8:	f9 01       	movw	r30, r18
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    2804:	82 e0       	ldi	r24, 0x02	; 2
    2806:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    280a:	83 e0       	ldi	r24, 0x03	; 3
    280c:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    2810:	84 e0       	ldi	r24, 0x04	; 4
    2812:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(SEVEN);
    2816:	87 e0       	ldi	r24, 0x07	; 7
    2818:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	a8 e4       	ldi	r26, 0x48	; 72
    2822:	b2 e4       	ldi	r27, 0x42	; 66
    2824:	8a ab       	std	Y+50, r24	; 0x32
    2826:	9b ab       	std	Y+51, r25	; 0x33
    2828:	ac ab       	std	Y+52, r26	; 0x34
    282a:	bd ab       	std	Y+53, r27	; 0x35

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    282c:	8e 01       	movw	r16, r28
    282e:	0e 51       	subi	r16, 0x1E	; 30
    2830:	1f 4f       	sbci	r17, 0xFF	; 255
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	4a e7       	ldi	r20, 0x7A	; 122
    2838:	53 e4       	ldi	r21, 0x43	; 67
    283a:	6a a9       	ldd	r22, Y+50	; 0x32
    283c:	7b a9       	ldd	r23, Y+51	; 0x33
    283e:	8c a9       	ldd	r24, Y+52	; 0x34
    2840:	9d a9       	ldd	r25, Y+53	; 0x35
    2842:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	f8 01       	movw	r30, r16
    284c:	80 83       	st	Z, r24
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	a2 83       	std	Z+2, r26	; 0x02
    2852:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2854:	ce 01       	movw	r24, r28
    2856:	8e 51       	subi	r24, 0x1E	; 30
    2858:	9f 4f       	sbci	r25, 0xFF	; 255
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e8       	ldi	r20, 0x80	; 128
    2860:	5f e3       	ldi	r21, 0x3F	; 63
    2862:	fc 01       	movw	r30, r24
    2864:	60 81       	ld	r22, Z
    2866:	71 81       	ldd	r23, Z+1	; 0x01
    2868:	82 81       	ldd	r24, Z+2	; 0x02
    286a:	93 81       	ldd	r25, Z+3	; 0x03
    286c:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    2870:	88 23       	and	r24, r24
    2872:	4c f4       	brge	.+18     	; 0x2886 <main+0x1762>
		__ticks = 1;
    2874:	ce 01       	movw	r24, r28
    2876:	8a 51       	subi	r24, 0x1A	; 26
    2878:	9f 4f       	sbci	r25, 0xFF	; 255
    287a:	21 e0       	ldi	r18, 0x01	; 1
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	fc 01       	movw	r30, r24
    2880:	31 83       	std	Z+1, r19	; 0x01
    2882:	20 83       	st	Z, r18
    2884:	69 c0       	rjmp	.+210    	; 0x2958 <main+0x1834>
	else if (__tmp > 65535)
    2886:	ce 01       	movw	r24, r28
    2888:	8e 51       	subi	r24, 0x1E	; 30
    288a:	9f 4f       	sbci	r25, 0xFF	; 255
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	3f ef       	ldi	r19, 0xFF	; 255
    2890:	4f e7       	ldi	r20, 0x7F	; 127
    2892:	57 e4       	ldi	r21, 0x47	; 71
    2894:	fc 01       	movw	r30, r24
    2896:	60 81       	ld	r22, Z
    2898:	71 81       	ldd	r23, Z+1	; 0x01
    289a:	82 81       	ldd	r24, Z+2	; 0x02
    289c:	93 81       	ldd	r25, Z+3	; 0x03
    289e:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    28a2:	18 16       	cp	r1, r24
    28a4:	0c f0       	brlt	.+2      	; 0x28a8 <main+0x1784>
    28a6:	46 c0       	rjmp	.+140    	; 0x2934 <main+0x1810>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e2       	ldi	r20, 0x20	; 32
    28ae:	51 e4       	ldi	r21, 0x41	; 65
    28b0:	6a a9       	ldd	r22, Y+50	; 0x32
    28b2:	7b a9       	ldd	r23, Y+51	; 0x33
    28b4:	8c a9       	ldd	r24, Y+52	; 0x34
    28b6:	9d a9       	ldd	r25, Y+53	; 0x35
    28b8:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	8e 01       	movw	r16, r28
    28c2:	0a 51       	subi	r16, 0x1A	; 26
    28c4:	1f 4f       	sbci	r17, 0xFF	; 255
    28c6:	bc 01       	movw	r22, r24
    28c8:	cd 01       	movw	r24, r26
    28ca:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	f8 01       	movw	r30, r16
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	80 83       	st	Z, r24
    28d8:	24 c0       	rjmp	.+72     	; 0x2922 <main+0x17fe>
    28da:	ce 01       	movw	r24, r28
    28dc:	88 51       	subi	r24, 0x18	; 24
    28de:	9f 4f       	sbci	r25, 0xFF	; 255
    28e0:	29 e1       	ldi	r18, 0x19	; 25
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	fc 01       	movw	r30, r24
    28e6:	31 83       	std	Z+1, r19	; 0x01
    28e8:	20 83       	st	Z, r18
    28ea:	ce 01       	movw	r24, r28
    28ec:	88 51       	subi	r24, 0x18	; 24
    28ee:	9f 4f       	sbci	r25, 0xFF	; 255
    28f0:	fc 01       	movw	r30, r24
    28f2:	80 81       	ld	r24, Z
    28f4:	91 81       	ldd	r25, Z+1	; 0x01
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <main+0x17d2>
    28fa:	9e 01       	movw	r18, r28
    28fc:	28 51       	subi	r18, 0x18	; 24
    28fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2900:	f9 01       	movw	r30, r18
    2902:	91 83       	std	Z+1, r25	; 0x01
    2904:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2906:	ce 01       	movw	r24, r28
    2908:	8a 51       	subi	r24, 0x1A	; 26
    290a:	9f 4f       	sbci	r25, 0xFF	; 255
    290c:	9e 01       	movw	r18, r28
    290e:	2a 51       	subi	r18, 0x1A	; 26
    2910:	3f 4f       	sbci	r19, 0xFF	; 255
    2912:	f9 01       	movw	r30, r18
    2914:	20 81       	ld	r18, Z
    2916:	31 81       	ldd	r19, Z+1	; 0x01
    2918:	21 50       	subi	r18, 0x01	; 1
    291a:	31 09       	sbc	r19, r1
    291c:	fc 01       	movw	r30, r24
    291e:	31 83       	std	Z+1, r19	; 0x01
    2920:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2922:	ce 01       	movw	r24, r28
    2924:	8a 51       	subi	r24, 0x1A	; 26
    2926:	9f 4f       	sbci	r25, 0xFF	; 255
    2928:	fc 01       	movw	r30, r24
    292a:	80 81       	ld	r24, Z
    292c:	91 81       	ldd	r25, Z+1	; 0x01
    292e:	89 2b       	or	r24, r25
    2930:	a1 f6       	brne	.-88     	; 0x28da <main+0x17b6>
    2932:	2c c0       	rjmp	.+88     	; 0x298c <main+0x1868>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2934:	8e 01       	movw	r16, r28
    2936:	0a 51       	subi	r16, 0x1A	; 26
    2938:	1f 4f       	sbci	r17, 0xFF	; 255
    293a:	ce 01       	movw	r24, r28
    293c:	8e 51       	subi	r24, 0x1E	; 30
    293e:	9f 4f       	sbci	r25, 0xFF	; 255
    2940:	fc 01       	movw	r30, r24
    2942:	60 81       	ld	r22, Z
    2944:	71 81       	ldd	r23, Z+1	; 0x01
    2946:	82 81       	ldd	r24, Z+2	; 0x02
    2948:	93 81       	ldd	r25, Z+3	; 0x03
    294a:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	f8 01       	movw	r30, r16
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	80 83       	st	Z, r24
    2958:	ce 01       	movw	r24, r28
    295a:	86 51       	subi	r24, 0x16	; 22
    295c:	9f 4f       	sbci	r25, 0xFF	; 255
    295e:	9e 01       	movw	r18, r28
    2960:	2a 51       	subi	r18, 0x1A	; 26
    2962:	3f 4f       	sbci	r19, 0xFF	; 255
    2964:	f9 01       	movw	r30, r18
    2966:	20 81       	ld	r18, Z
    2968:	31 81       	ldd	r19, Z+1	; 0x01
    296a:	fc 01       	movw	r30, r24
    296c:	31 83       	std	Z+1, r19	; 0x01
    296e:	20 83       	st	Z, r18
    2970:	ce 01       	movw	r24, r28
    2972:	86 51       	subi	r24, 0x16	; 22
    2974:	9f 4f       	sbci	r25, 0xFF	; 255
    2976:	fc 01       	movw	r30, r24
    2978:	80 81       	ld	r24, Z
    297a:	91 81       	ldd	r25, Z+1	; 0x01
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	f1 f7       	brne	.-4      	; 0x297c <main+0x1858>
    2980:	9e 01       	movw	r18, r28
    2982:	26 51       	subi	r18, 0x16	; 22
    2984:	3f 4f       	sbci	r19, 0xFF	; 255
    2986:	f9 01       	movw	r30, r18
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	80 83       	st	Z, r24
				_delay_ms(50);
			}
			if(key == 8)
    298c:	89 85       	ldd	r24, Y+9	; 0x09
    298e:	88 30       	cpi	r24, 0x08	; 8
    2990:	09 f0       	breq	.+2      	; 0x2994 <main+0x1870>
    2992:	87 c1       	rjmp	.+782    	; 0x2ca2 <main+0x1b7e>
    2994:	9e 01       	movw	r18, r28
    2996:	2a 5b       	subi	r18, 0xBA	; 186
    2998:	3f 4f       	sbci	r19, 0xFF	; 255
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a8 e4       	ldi	r26, 0x48	; 72
    29a0:	b2 e4       	ldi	r27, 0x42	; 66
    29a2:	f9 01       	movw	r30, r18
    29a4:	80 83       	st	Z, r24
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	a2 83       	std	Z+2, r26	; 0x02
    29aa:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    29ac:	8e 01       	movw	r16, r28
    29ae:	13 95       	inc	r17
    29b0:	ce 01       	movw	r24, r28
    29b2:	8a 5b       	subi	r24, 0xBA	; 186
    29b4:	9f 4f       	sbci	r25, 0xFF	; 255
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	4a e7       	ldi	r20, 0x7A	; 122
    29bc:	53 e4       	ldi	r21, 0x43	; 67
    29be:	fc 01       	movw	r30, r24
    29c0:	60 81       	ld	r22, Z
    29c2:	71 81       	ldd	r23, Z+1	; 0x01
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	93 81       	ldd	r25, Z+3	; 0x03
    29c8:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	f8 01       	movw	r30, r16
    29d2:	80 83       	st	Z, r24
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	a2 83       	std	Z+2, r26	; 0x02
    29d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29da:	ce 01       	movw	r24, r28
    29dc:	93 95       	inc	r25
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e8       	ldi	r20, 0x80	; 128
    29e4:	5f e3       	ldi	r21, 0x3F	; 63
    29e6:	fc 01       	movw	r30, r24
    29e8:	60 81       	ld	r22, Z
    29ea:	71 81       	ldd	r23, Z+1	; 0x01
    29ec:	82 81       	ldd	r24, Z+2	; 0x02
    29ee:	93 81       	ldd	r25, Z+3	; 0x03
    29f0:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    29f4:	88 23       	and	r24, r24
    29f6:	4c f4       	brge	.+18     	; 0x2a0a <main+0x18e6>
		__ticks = 1;
    29f8:	ce 01       	movw	r24, r28
    29fa:	8c 5f       	subi	r24, 0xFC	; 252
    29fc:	9e 4f       	sbci	r25, 0xFE	; 254
    29fe:	21 e0       	ldi	r18, 0x01	; 1
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	fc 01       	movw	r30, r24
    2a04:	31 83       	std	Z+1, r19	; 0x01
    2a06:	20 83       	st	Z, r18
    2a08:	6b c0       	rjmp	.+214    	; 0x2ae0 <main+0x19bc>
	else if (__tmp > 65535)
    2a0a:	ce 01       	movw	r24, r28
    2a0c:	93 95       	inc	r25
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	3f ef       	ldi	r19, 0xFF	; 255
    2a12:	4f e7       	ldi	r20, 0x7F	; 127
    2a14:	57 e4       	ldi	r21, 0x47	; 71
    2a16:	fc 01       	movw	r30, r24
    2a18:	60 81       	ld	r22, Z
    2a1a:	71 81       	ldd	r23, Z+1	; 0x01
    2a1c:	82 81       	ldd	r24, Z+2	; 0x02
    2a1e:	93 81       	ldd	r25, Z+3	; 0x03
    2a20:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    2a24:	18 16       	cp	r1, r24
    2a26:	0c f0       	brlt	.+2      	; 0x2a2a <main+0x1906>
    2a28:	4a c0       	rjmp	.+148    	; 0x2abe <main+0x199a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	8a 5b       	subi	r24, 0xBA	; 186
    2a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e2       	ldi	r20, 0x20	; 32
    2a36:	51 e4       	ldi	r21, 0x41	; 65
    2a38:	fc 01       	movw	r30, r24
    2a3a:	60 81       	ld	r22, Z
    2a3c:	71 81       	ldd	r23, Z+1	; 0x01
    2a3e:	82 81       	ldd	r24, Z+2	; 0x02
    2a40:	93 81       	ldd	r25, Z+3	; 0x03
    2a42:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	8e 01       	movw	r16, r28
    2a4c:	0c 5f       	subi	r16, 0xFC	; 252
    2a4e:	1e 4f       	sbci	r17, 0xFE	; 254
    2a50:	bc 01       	movw	r22, r24
    2a52:	cd 01       	movw	r24, r26
    2a54:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	f8 01       	movw	r30, r16
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
    2a62:	24 c0       	rjmp	.+72     	; 0x2aac <main+0x1988>
    2a64:	ce 01       	movw	r24, r28
    2a66:	8a 5f       	subi	r24, 0xFA	; 250
    2a68:	9e 4f       	sbci	r25, 0xFE	; 254
    2a6a:	29 e1       	ldi	r18, 0x19	; 25
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	fc 01       	movw	r30, r24
    2a70:	31 83       	std	Z+1, r19	; 0x01
    2a72:	20 83       	st	Z, r18
    2a74:	ce 01       	movw	r24, r28
    2a76:	8a 5f       	subi	r24, 0xFA	; 250
    2a78:	9e 4f       	sbci	r25, 0xFE	; 254
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	80 81       	ld	r24, Z
    2a7e:	91 81       	ldd	r25, Z+1	; 0x01
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <main+0x195c>
    2a84:	9e 01       	movw	r18, r28
    2a86:	2a 5f       	subi	r18, 0xFA	; 250
    2a88:	3e 4f       	sbci	r19, 0xFE	; 254
    2a8a:	f9 01       	movw	r30, r18
    2a8c:	91 83       	std	Z+1, r25	; 0x01
    2a8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a90:	ce 01       	movw	r24, r28
    2a92:	8c 5f       	subi	r24, 0xFC	; 252
    2a94:	9e 4f       	sbci	r25, 0xFE	; 254
    2a96:	9e 01       	movw	r18, r28
    2a98:	2c 5f       	subi	r18, 0xFC	; 252
    2a9a:	3e 4f       	sbci	r19, 0xFE	; 254
    2a9c:	f9 01       	movw	r30, r18
    2a9e:	20 81       	ld	r18, Z
    2aa0:	31 81       	ldd	r19, Z+1	; 0x01
    2aa2:	21 50       	subi	r18, 0x01	; 1
    2aa4:	31 09       	sbc	r19, r1
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	31 83       	std	Z+1, r19	; 0x01
    2aaa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aac:	ce 01       	movw	r24, r28
    2aae:	8c 5f       	subi	r24, 0xFC	; 252
    2ab0:	9e 4f       	sbci	r25, 0xFE	; 254
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	80 81       	ld	r24, Z
    2ab6:	91 81       	ldd	r25, Z+1	; 0x01
    2ab8:	89 2b       	or	r24, r25
    2aba:	a1 f6       	brne	.-88     	; 0x2a64 <main+0x1940>
    2abc:	2b c0       	rjmp	.+86     	; 0x2b14 <main+0x19f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2abe:	8e 01       	movw	r16, r28
    2ac0:	0c 5f       	subi	r16, 0xFC	; 252
    2ac2:	1e 4f       	sbci	r17, 0xFE	; 254
    2ac4:	ce 01       	movw	r24, r28
    2ac6:	93 95       	inc	r25
    2ac8:	fc 01       	movw	r30, r24
    2aca:	60 81       	ld	r22, Z
    2acc:	71 81       	ldd	r23, Z+1	; 0x01
    2ace:	82 81       	ldd	r24, Z+2	; 0x02
    2ad0:	93 81       	ldd	r25, Z+3	; 0x03
    2ad2:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	f8 01       	movw	r30, r16
    2adc:	91 83       	std	Z+1, r25	; 0x01
    2ade:	80 83       	st	Z, r24
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	88 5f       	subi	r24, 0xF8	; 248
    2ae4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ae6:	9e 01       	movw	r18, r28
    2ae8:	2c 5f       	subi	r18, 0xFC	; 252
    2aea:	3e 4f       	sbci	r19, 0xFE	; 254
    2aec:	f9 01       	movw	r30, r18
    2aee:	20 81       	ld	r18, Z
    2af0:	31 81       	ldd	r19, Z+1	; 0x01
    2af2:	fc 01       	movw	r30, r24
    2af4:	31 83       	std	Z+1, r19	; 0x01
    2af6:	20 83       	st	Z, r18
    2af8:	ce 01       	movw	r24, r28
    2afa:	88 5f       	subi	r24, 0xF8	; 248
    2afc:	9e 4f       	sbci	r25, 0xFE	; 254
    2afe:	fc 01       	movw	r30, r24
    2b00:	80 81       	ld	r24, Z
    2b02:	91 81       	ldd	r25, Z+1	; 0x01
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	f1 f7       	brne	.-4      	; 0x2b04 <main+0x19e0>
    2b08:	9e 01       	movw	r18, r28
    2b0a:	28 5f       	subi	r18, 0xF8	; 248
    2b0c:	3e 4f       	sbci	r19, 0xFE	; 254
    2b0e:	f9 01       	movw	r30, r18
    2b10:	91 83       	std	Z+1, r25	; 0x01
    2b12:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    2b1a:	82 e0       	ldi	r24, 0x02	; 2
    2b1c:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    2b20:	83 e0       	ldi	r24, 0x03	; 3
    2b22:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    2b26:	84 e0       	ldi	r24, 0x04	; 4
    2b28:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(EIGHT);
    2b2c:	88 e0       	ldi	r24, 0x08	; 8
    2b2e:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	a8 e4       	ldi	r26, 0x48	; 72
    2b38:	b2 e4       	ldi	r27, 0x42	; 66
    2b3a:	8a af       	std	Y+58, r24	; 0x3a
    2b3c:	9b af       	std	Y+59, r25	; 0x3b
    2b3e:	ac af       	std	Y+60, r26	; 0x3c
    2b40:	bd af       	std	Y+61, r27	; 0x3d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b42:	8e 01       	movw	r16, r28
    2b44:	0a 50       	subi	r16, 0x0A	; 10
    2b46:	1f 4f       	sbci	r17, 0xFF	; 255
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	4a e7       	ldi	r20, 0x7A	; 122
    2b4e:	53 e4       	ldi	r21, 0x43	; 67
    2b50:	6a ad       	ldd	r22, Y+58	; 0x3a
    2b52:	7b ad       	ldd	r23, Y+59	; 0x3b
    2b54:	8c ad       	ldd	r24, Y+60	; 0x3c
    2b56:	9d ad       	ldd	r25, Y+61	; 0x3d
    2b58:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	f8 01       	movw	r30, r16
    2b62:	80 83       	st	Z, r24
    2b64:	91 83       	std	Z+1, r25	; 0x01
    2b66:	a2 83       	std	Z+2, r26	; 0x02
    2b68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b6a:	ce 01       	movw	r24, r28
    2b6c:	8a 50       	subi	r24, 0x0A	; 10
    2b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e8       	ldi	r20, 0x80	; 128
    2b76:	5f e3       	ldi	r21, 0x3F	; 63
    2b78:	fc 01       	movw	r30, r24
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    2b86:	88 23       	and	r24, r24
    2b88:	4c f4       	brge	.+18     	; 0x2b9c <main+0x1a78>
		__ticks = 1;
    2b8a:	ce 01       	movw	r24, r28
    2b8c:	86 50       	subi	r24, 0x06	; 6
    2b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b90:	21 e0       	ldi	r18, 0x01	; 1
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	fc 01       	movw	r30, r24
    2b96:	31 83       	std	Z+1, r19	; 0x01
    2b98:	20 83       	st	Z, r18
    2b9a:	69 c0       	rjmp	.+210    	; 0x2c6e <main+0x1b4a>
	else if (__tmp > 65535)
    2b9c:	ce 01       	movw	r24, r28
    2b9e:	8a 50       	subi	r24, 0x0A	; 10
    2ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	3f ef       	ldi	r19, 0xFF	; 255
    2ba6:	4f e7       	ldi	r20, 0x7F	; 127
    2ba8:	57 e4       	ldi	r21, 0x47	; 71
    2baa:	fc 01       	movw	r30, r24
    2bac:	60 81       	ld	r22, Z
    2bae:	71 81       	ldd	r23, Z+1	; 0x01
    2bb0:	82 81       	ldd	r24, Z+2	; 0x02
    2bb2:	93 81       	ldd	r25, Z+3	; 0x03
    2bb4:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    2bb8:	18 16       	cp	r1, r24
    2bba:	0c f0       	brlt	.+2      	; 0x2bbe <main+0x1a9a>
    2bbc:	46 c0       	rjmp	.+140    	; 0x2c4a <main+0x1b26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	40 e2       	ldi	r20, 0x20	; 32
    2bc4:	51 e4       	ldi	r21, 0x41	; 65
    2bc6:	6a ad       	ldd	r22, Y+58	; 0x3a
    2bc8:	7b ad       	ldd	r23, Y+59	; 0x3b
    2bca:	8c ad       	ldd	r24, Y+60	; 0x3c
    2bcc:	9d ad       	ldd	r25, Y+61	; 0x3d
    2bce:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	8e 01       	movw	r16, r28
    2bd8:	06 50       	subi	r16, 0x06	; 6
    2bda:	1f 4f       	sbci	r17, 0xFF	; 255
    2bdc:	bc 01       	movw	r22, r24
    2bde:	cd 01       	movw	r24, r26
    2be0:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	f8 01       	movw	r30, r16
    2bea:	91 83       	std	Z+1, r25	; 0x01
    2bec:	80 83       	st	Z, r24
    2bee:	24 c0       	rjmp	.+72     	; 0x2c38 <main+0x1b14>
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	84 50       	subi	r24, 0x04	; 4
    2bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf6:	29 e1       	ldi	r18, 0x19	; 25
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	31 83       	std	Z+1, r19	; 0x01
    2bfe:	20 83       	st	Z, r18
    2c00:	ce 01       	movw	r24, r28
    2c02:	84 50       	subi	r24, 0x04	; 4
    2c04:	9f 4f       	sbci	r25, 0xFF	; 255
    2c06:	fc 01       	movw	r30, r24
    2c08:	80 81       	ld	r24, Z
    2c0a:	91 81       	ldd	r25, Z+1	; 0x01
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	f1 f7       	brne	.-4      	; 0x2c0c <main+0x1ae8>
    2c10:	9e 01       	movw	r18, r28
    2c12:	24 50       	subi	r18, 0x04	; 4
    2c14:	3f 4f       	sbci	r19, 0xFF	; 255
    2c16:	f9 01       	movw	r30, r18
    2c18:	91 83       	std	Z+1, r25	; 0x01
    2c1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	86 50       	subi	r24, 0x06	; 6
    2c20:	9f 4f       	sbci	r25, 0xFF	; 255
    2c22:	9e 01       	movw	r18, r28
    2c24:	26 50       	subi	r18, 0x06	; 6
    2c26:	3f 4f       	sbci	r19, 0xFF	; 255
    2c28:	f9 01       	movw	r30, r18
    2c2a:	20 81       	ld	r18, Z
    2c2c:	31 81       	ldd	r19, Z+1	; 0x01
    2c2e:	21 50       	subi	r18, 0x01	; 1
    2c30:	31 09       	sbc	r19, r1
    2c32:	fc 01       	movw	r30, r24
    2c34:	31 83       	std	Z+1, r19	; 0x01
    2c36:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c38:	ce 01       	movw	r24, r28
    2c3a:	86 50       	subi	r24, 0x06	; 6
    2c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3e:	fc 01       	movw	r30, r24
    2c40:	80 81       	ld	r24, Z
    2c42:	91 81       	ldd	r25, Z+1	; 0x01
    2c44:	89 2b       	or	r24, r25
    2c46:	a1 f6       	brne	.-88     	; 0x2bf0 <main+0x1acc>
    2c48:	2c c0       	rjmp	.+88     	; 0x2ca2 <main+0x1b7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4a:	8e 01       	movw	r16, r28
    2c4c:	06 50       	subi	r16, 0x06	; 6
    2c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c50:	ce 01       	movw	r24, r28
    2c52:	8a 50       	subi	r24, 0x0A	; 10
    2c54:	9f 4f       	sbci	r25, 0xFF	; 255
    2c56:	fc 01       	movw	r30, r24
    2c58:	60 81       	ld	r22, Z
    2c5a:	71 81       	ldd	r23, Z+1	; 0x01
    2c5c:	82 81       	ldd	r24, Z+2	; 0x02
    2c5e:	93 81       	ldd	r25, Z+3	; 0x03
    2c60:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	f8 01       	movw	r30, r16
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	80 83       	st	Z, r24
    2c6e:	ce 01       	movw	r24, r28
    2c70:	82 50       	subi	r24, 0x02	; 2
    2c72:	9f 4f       	sbci	r25, 0xFF	; 255
    2c74:	9e 01       	movw	r18, r28
    2c76:	26 50       	subi	r18, 0x06	; 6
    2c78:	3f 4f       	sbci	r19, 0xFF	; 255
    2c7a:	f9 01       	movw	r30, r18
    2c7c:	20 81       	ld	r18, Z
    2c7e:	31 81       	ldd	r19, Z+1	; 0x01
    2c80:	fc 01       	movw	r30, r24
    2c82:	31 83       	std	Z+1, r19	; 0x01
    2c84:	20 83       	st	Z, r18
    2c86:	ce 01       	movw	r24, r28
    2c88:	82 50       	subi	r24, 0x02	; 2
    2c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	80 81       	ld	r24, Z
    2c90:	91 81       	ldd	r25, Z+1	; 0x01
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <main+0x1b6e>
    2c96:	9e 01       	movw	r18, r28
    2c98:	22 50       	subi	r18, 0x02	; 2
    2c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c9c:	f9 01       	movw	r30, r18
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	80 83       	st	Z, r24
				_delay_ms(50);
			}
			if(key == 9)
    2ca2:	89 85       	ldd	r24, Y+9	; 0x09
    2ca4:	89 30       	cpi	r24, 0x09	; 9
    2ca6:	09 f0       	breq	.+2      	; 0x2caa <main+0x1b86>
    2ca8:	97 c1       	rjmp	.+814    	; 0x2fd8 <main+0x1eb4>
    2caa:	9e 01       	movw	r18, r28
    2cac:	22 5b       	subi	r18, 0xB2	; 178
    2cae:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	a8 e4       	ldi	r26, 0x48	; 72
    2cb6:	b2 e4       	ldi	r27, 0x42	; 66
    2cb8:	f9 01       	movw	r30, r18
    2cba:	80 83       	st	Z, r24
    2cbc:	91 83       	std	Z+1, r25	; 0x01
    2cbe:	a2 83       	std	Z+2, r26	; 0x02
    2cc0:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2cc2:	8e 01       	movw	r16, r28
    2cc4:	0c 5e       	subi	r16, 0xEC	; 236
    2cc6:	1e 4f       	sbci	r17, 0xFE	; 254
    2cc8:	ce 01       	movw	r24, r28
    2cca:	82 5b       	subi	r24, 0xB2	; 178
    2ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	4a e7       	ldi	r20, 0x7A	; 122
    2cd4:	53 e4       	ldi	r21, 0x43	; 67
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	f8 01       	movw	r30, r16
    2cea:	80 83       	st	Z, r24
    2cec:	91 83       	std	Z+1, r25	; 0x01
    2cee:	a2 83       	std	Z+2, r26	; 0x02
    2cf0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	8c 5e       	subi	r24, 0xEC	; 236
    2cf6:	9e 4f       	sbci	r25, 0xFE	; 254
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e8       	ldi	r20, 0x80	; 128
    2cfe:	5f e3       	ldi	r21, 0x3F	; 63
    2d00:	fc 01       	movw	r30, r24
    2d02:	60 81       	ld	r22, Z
    2d04:	71 81       	ldd	r23, Z+1	; 0x01
    2d06:	82 81       	ldd	r24, Z+2	; 0x02
    2d08:	93 81       	ldd	r25, Z+3	; 0x03
    2d0a:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    2d0e:	88 23       	and	r24, r24
    2d10:	4c f4       	brge	.+18     	; 0x2d24 <main+0x1c00>
		__ticks = 1;
    2d12:	ce 01       	movw	r24, r28
    2d14:	88 5e       	subi	r24, 0xE8	; 232
    2d16:	9e 4f       	sbci	r25, 0xFE	; 254
    2d18:	21 e0       	ldi	r18, 0x01	; 1
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	31 83       	std	Z+1, r19	; 0x01
    2d20:	20 83       	st	Z, r18
    2d22:	6d c0       	rjmp	.+218    	; 0x2dfe <main+0x1cda>
	else if (__tmp > 65535)
    2d24:	ce 01       	movw	r24, r28
    2d26:	8c 5e       	subi	r24, 0xEC	; 236
    2d28:	9e 4f       	sbci	r25, 0xFE	; 254
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	3f ef       	ldi	r19, 0xFF	; 255
    2d2e:	4f e7       	ldi	r20, 0x7F	; 127
    2d30:	57 e4       	ldi	r21, 0x47	; 71
    2d32:	fc 01       	movw	r30, r24
    2d34:	60 81       	ld	r22, Z
    2d36:	71 81       	ldd	r23, Z+1	; 0x01
    2d38:	82 81       	ldd	r24, Z+2	; 0x02
    2d3a:	93 81       	ldd	r25, Z+3	; 0x03
    2d3c:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    2d40:	18 16       	cp	r1, r24
    2d42:	0c f0       	brlt	.+2      	; 0x2d46 <main+0x1c22>
    2d44:	4a c0       	rjmp	.+148    	; 0x2dda <main+0x1cb6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d46:	ce 01       	movw	r24, r28
    2d48:	82 5b       	subi	r24, 0xB2	; 178
    2d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e2       	ldi	r20, 0x20	; 32
    2d52:	51 e4       	ldi	r21, 0x41	; 65
    2d54:	fc 01       	movw	r30, r24
    2d56:	60 81       	ld	r22, Z
    2d58:	71 81       	ldd	r23, Z+1	; 0x01
    2d5a:	82 81       	ldd	r24, Z+2	; 0x02
    2d5c:	93 81       	ldd	r25, Z+3	; 0x03
    2d5e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	8e 01       	movw	r16, r28
    2d68:	08 5e       	subi	r16, 0xE8	; 232
    2d6a:	1e 4f       	sbci	r17, 0xFE	; 254
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	cd 01       	movw	r24, r26
    2d70:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	f8 01       	movw	r30, r16
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
    2d7e:	24 c0       	rjmp	.+72     	; 0x2dc8 <main+0x1ca4>
    2d80:	ce 01       	movw	r24, r28
    2d82:	86 5e       	subi	r24, 0xE6	; 230
    2d84:	9e 4f       	sbci	r25, 0xFE	; 254
    2d86:	29 e1       	ldi	r18, 0x19	; 25
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	31 83       	std	Z+1, r19	; 0x01
    2d8e:	20 83       	st	Z, r18
    2d90:	ce 01       	movw	r24, r28
    2d92:	86 5e       	subi	r24, 0xE6	; 230
    2d94:	9e 4f       	sbci	r25, 0xFE	; 254
    2d96:	fc 01       	movw	r30, r24
    2d98:	80 81       	ld	r24, Z
    2d9a:	91 81       	ldd	r25, Z+1	; 0x01
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <main+0x1c78>
    2da0:	9e 01       	movw	r18, r28
    2da2:	26 5e       	subi	r18, 0xE6	; 230
    2da4:	3e 4f       	sbci	r19, 0xFE	; 254
    2da6:	f9 01       	movw	r30, r18
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dac:	ce 01       	movw	r24, r28
    2dae:	88 5e       	subi	r24, 0xE8	; 232
    2db0:	9e 4f       	sbci	r25, 0xFE	; 254
    2db2:	9e 01       	movw	r18, r28
    2db4:	28 5e       	subi	r18, 0xE8	; 232
    2db6:	3e 4f       	sbci	r19, 0xFE	; 254
    2db8:	f9 01       	movw	r30, r18
    2dba:	20 81       	ld	r18, Z
    2dbc:	31 81       	ldd	r19, Z+1	; 0x01
    2dbe:	21 50       	subi	r18, 0x01	; 1
    2dc0:	31 09       	sbc	r19, r1
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	31 83       	std	Z+1, r19	; 0x01
    2dc6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc8:	ce 01       	movw	r24, r28
    2dca:	88 5e       	subi	r24, 0xE8	; 232
    2dcc:	9e 4f       	sbci	r25, 0xFE	; 254
    2dce:	fc 01       	movw	r30, r24
    2dd0:	80 81       	ld	r24, Z
    2dd2:	91 81       	ldd	r25, Z+1	; 0x01
    2dd4:	89 2b       	or	r24, r25
    2dd6:	a1 f6       	brne	.-88     	; 0x2d80 <main+0x1c5c>
    2dd8:	2c c0       	rjmp	.+88     	; 0x2e32 <main+0x1d0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dda:	8e 01       	movw	r16, r28
    2ddc:	08 5e       	subi	r16, 0xE8	; 232
    2dde:	1e 4f       	sbci	r17, 0xFE	; 254
    2de0:	ce 01       	movw	r24, r28
    2de2:	8c 5e       	subi	r24, 0xEC	; 236
    2de4:	9e 4f       	sbci	r25, 0xFE	; 254
    2de6:	fc 01       	movw	r30, r24
    2de8:	60 81       	ld	r22, Z
    2dea:	71 81       	ldd	r23, Z+1	; 0x01
    2dec:	82 81       	ldd	r24, Z+2	; 0x02
    2dee:	93 81       	ldd	r25, Z+3	; 0x03
    2df0:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	f8 01       	movw	r30, r16
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	80 83       	st	Z, r24
    2dfe:	ce 01       	movw	r24, r28
    2e00:	84 5e       	subi	r24, 0xE4	; 228
    2e02:	9e 4f       	sbci	r25, 0xFE	; 254
    2e04:	9e 01       	movw	r18, r28
    2e06:	28 5e       	subi	r18, 0xE8	; 232
    2e08:	3e 4f       	sbci	r19, 0xFE	; 254
    2e0a:	f9 01       	movw	r30, r18
    2e0c:	20 81       	ld	r18, Z
    2e0e:	31 81       	ldd	r19, Z+1	; 0x01
    2e10:	fc 01       	movw	r30, r24
    2e12:	31 83       	std	Z+1, r19	; 0x01
    2e14:	20 83       	st	Z, r18
    2e16:	ce 01       	movw	r24, r28
    2e18:	84 5e       	subi	r24, 0xE4	; 228
    2e1a:	9e 4f       	sbci	r25, 0xFE	; 254
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	80 81       	ld	r24, Z
    2e20:	91 81       	ldd	r25, Z+1	; 0x01
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	f1 f7       	brne	.-4      	; 0x2e22 <main+0x1cfe>
    2e26:	9e 01       	movw	r18, r28
    2e28:	24 5e       	subi	r18, 0xE4	; 228
    2e2a:	3e 4f       	sbci	r19, 0xFE	; 254
    2e2c:	f9 01       	movw	r30, r18
    2e2e:	91 83       	std	Z+1, r25	; 0x01
    2e30:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    2e38:	82 e0       	ldi	r24, 0x02	; 2
    2e3a:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    2e3e:	83 e0       	ldi	r24, 0x03	; 3
    2e40:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    2e44:	84 e0       	ldi	r24, 0x04	; 4
    2e46:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(NINE);
    2e4a:	89 e0       	ldi	r24, 0x09	; 9
    2e4c:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    2e50:	9e 01       	movw	r18, r28
    2e52:	2e 5b       	subi	r18, 0xBE	; 190
    2e54:	3f 4f       	sbci	r19, 0xFF	; 255
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	a8 e4       	ldi	r26, 0x48	; 72
    2e5c:	b2 e4       	ldi	r27, 0x42	; 66
    2e5e:	f9 01       	movw	r30, r18
    2e60:	80 83       	st	Z, r24
    2e62:	91 83       	std	Z+1, r25	; 0x01
    2e64:	a2 83       	std	Z+2, r26	; 0x02
    2e66:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2e68:	8e 01       	movw	r16, r28
    2e6a:	06 5f       	subi	r16, 0xF6	; 246
    2e6c:	1e 4f       	sbci	r17, 0xFE	; 254
    2e6e:	ce 01       	movw	r24, r28
    2e70:	8e 5b       	subi	r24, 0xBE	; 190
    2e72:	9f 4f       	sbci	r25, 0xFF	; 255
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	4a e7       	ldi	r20, 0x7A	; 122
    2e7a:	53 e4       	ldi	r21, 0x43	; 67
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	60 81       	ld	r22, Z
    2e80:	71 81       	ldd	r23, Z+1	; 0x01
    2e82:	82 81       	ldd	r24, Z+2	; 0x02
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	f8 01       	movw	r30, r16
    2e90:	80 83       	st	Z, r24
    2e92:	91 83       	std	Z+1, r25	; 0x01
    2e94:	a2 83       	std	Z+2, r26	; 0x02
    2e96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e98:	ce 01       	movw	r24, r28
    2e9a:	86 5f       	subi	r24, 0xF6	; 246
    2e9c:	9e 4f       	sbci	r25, 0xFE	; 254
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e8       	ldi	r20, 0x80	; 128
    2ea4:	5f e3       	ldi	r21, 0x3F	; 63
    2ea6:	fc 01       	movw	r30, r24
    2ea8:	60 81       	ld	r22, Z
    2eaa:	71 81       	ldd	r23, Z+1	; 0x01
    2eac:	82 81       	ldd	r24, Z+2	; 0x02
    2eae:	93 81       	ldd	r25, Z+3	; 0x03
    2eb0:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    2eb4:	88 23       	and	r24, r24
    2eb6:	4c f4       	brge	.+18     	; 0x2eca <main+0x1da6>
		__ticks = 1;
    2eb8:	ce 01       	movw	r24, r28
    2eba:	82 5f       	subi	r24, 0xF2	; 242
    2ebc:	9e 4f       	sbci	r25, 0xFE	; 254
    2ebe:	21 e0       	ldi	r18, 0x01	; 1
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	31 83       	std	Z+1, r19	; 0x01
    2ec6:	20 83       	st	Z, r18
    2ec8:	6d c0       	rjmp	.+218    	; 0x2fa4 <main+0x1e80>
	else if (__tmp > 65535)
    2eca:	ce 01       	movw	r24, r28
    2ecc:	86 5f       	subi	r24, 0xF6	; 246
    2ece:	9e 4f       	sbci	r25, 0xFE	; 254
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	3f ef       	ldi	r19, 0xFF	; 255
    2ed4:	4f e7       	ldi	r20, 0x7F	; 127
    2ed6:	57 e4       	ldi	r21, 0x47	; 71
    2ed8:	fc 01       	movw	r30, r24
    2eda:	60 81       	ld	r22, Z
    2edc:	71 81       	ldd	r23, Z+1	; 0x01
    2ede:	82 81       	ldd	r24, Z+2	; 0x02
    2ee0:	93 81       	ldd	r25, Z+3	; 0x03
    2ee2:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    2ee6:	18 16       	cp	r1, r24
    2ee8:	0c f0       	brlt	.+2      	; 0x2eec <main+0x1dc8>
    2eea:	4a c0       	rjmp	.+148    	; 0x2f80 <main+0x1e5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eec:	ce 01       	movw	r24, r28
    2eee:	8e 5b       	subi	r24, 0xBE	; 190
    2ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	40 e2       	ldi	r20, 0x20	; 32
    2ef8:	51 e4       	ldi	r21, 0x41	; 65
    2efa:	fc 01       	movw	r30, r24
    2efc:	60 81       	ld	r22, Z
    2efe:	71 81       	ldd	r23, Z+1	; 0x01
    2f00:	82 81       	ldd	r24, Z+2	; 0x02
    2f02:	93 81       	ldd	r25, Z+3	; 0x03
    2f04:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8e 01       	movw	r16, r28
    2f0e:	02 5f       	subi	r16, 0xF2	; 242
    2f10:	1e 4f       	sbci	r17, 0xFE	; 254
    2f12:	bc 01       	movw	r22, r24
    2f14:	cd 01       	movw	r24, r26
    2f16:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	f8 01       	movw	r30, r16
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	80 83       	st	Z, r24
    2f24:	24 c0       	rjmp	.+72     	; 0x2f6e <main+0x1e4a>
    2f26:	ce 01       	movw	r24, r28
    2f28:	80 5f       	subi	r24, 0xF0	; 240
    2f2a:	9e 4f       	sbci	r25, 0xFE	; 254
    2f2c:	29 e1       	ldi	r18, 0x19	; 25
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	fc 01       	movw	r30, r24
    2f32:	31 83       	std	Z+1, r19	; 0x01
    2f34:	20 83       	st	Z, r18
    2f36:	ce 01       	movw	r24, r28
    2f38:	80 5f       	subi	r24, 0xF0	; 240
    2f3a:	9e 4f       	sbci	r25, 0xFE	; 254
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	80 81       	ld	r24, Z
    2f40:	91 81       	ldd	r25, Z+1	; 0x01
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <main+0x1e1e>
    2f46:	9e 01       	movw	r18, r28
    2f48:	20 5f       	subi	r18, 0xF0	; 240
    2f4a:	3e 4f       	sbci	r19, 0xFE	; 254
    2f4c:	f9 01       	movw	r30, r18
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f52:	ce 01       	movw	r24, r28
    2f54:	82 5f       	subi	r24, 0xF2	; 242
    2f56:	9e 4f       	sbci	r25, 0xFE	; 254
    2f58:	9e 01       	movw	r18, r28
    2f5a:	22 5f       	subi	r18, 0xF2	; 242
    2f5c:	3e 4f       	sbci	r19, 0xFE	; 254
    2f5e:	f9 01       	movw	r30, r18
    2f60:	20 81       	ld	r18, Z
    2f62:	31 81       	ldd	r19, Z+1	; 0x01
    2f64:	21 50       	subi	r18, 0x01	; 1
    2f66:	31 09       	sbc	r19, r1
    2f68:	fc 01       	movw	r30, r24
    2f6a:	31 83       	std	Z+1, r19	; 0x01
    2f6c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6e:	ce 01       	movw	r24, r28
    2f70:	82 5f       	subi	r24, 0xF2	; 242
    2f72:	9e 4f       	sbci	r25, 0xFE	; 254
    2f74:	fc 01       	movw	r30, r24
    2f76:	80 81       	ld	r24, Z
    2f78:	91 81       	ldd	r25, Z+1	; 0x01
    2f7a:	89 2b       	or	r24, r25
    2f7c:	a1 f6       	brne	.-88     	; 0x2f26 <main+0x1e02>
    2f7e:	2c c0       	rjmp	.+88     	; 0x2fd8 <main+0x1eb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f80:	8e 01       	movw	r16, r28
    2f82:	02 5f       	subi	r16, 0xF2	; 242
    2f84:	1e 4f       	sbci	r17, 0xFE	; 254
    2f86:	ce 01       	movw	r24, r28
    2f88:	86 5f       	subi	r24, 0xF6	; 246
    2f8a:	9e 4f       	sbci	r25, 0xFE	; 254
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	60 81       	ld	r22, Z
    2f90:	71 81       	ldd	r23, Z+1	; 0x01
    2f92:	82 81       	ldd	r24, Z+2	; 0x02
    2f94:	93 81       	ldd	r25, Z+3	; 0x03
    2f96:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	f8 01       	movw	r30, r16
    2fa0:	91 83       	std	Z+1, r25	; 0x01
    2fa2:	80 83       	st	Z, r24
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	8e 5e       	subi	r24, 0xEE	; 238
    2fa8:	9e 4f       	sbci	r25, 0xFE	; 254
    2faa:	9e 01       	movw	r18, r28
    2fac:	22 5f       	subi	r18, 0xF2	; 242
    2fae:	3e 4f       	sbci	r19, 0xFE	; 254
    2fb0:	f9 01       	movw	r30, r18
    2fb2:	20 81       	ld	r18, Z
    2fb4:	31 81       	ldd	r19, Z+1	; 0x01
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	31 83       	std	Z+1, r19	; 0x01
    2fba:	20 83       	st	Z, r18
    2fbc:	ce 01       	movw	r24, r28
    2fbe:	8e 5e       	subi	r24, 0xEE	; 238
    2fc0:	9e 4f       	sbci	r25, 0xFE	; 254
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	80 81       	ld	r24, Z
    2fc6:	91 81       	ldd	r25, Z+1	; 0x01
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	f1 f7       	brne	.-4      	; 0x2fc8 <main+0x1ea4>
    2fcc:	9e 01       	movw	r18, r28
    2fce:	2e 5e       	subi	r18, 0xEE	; 238
    2fd0:	3e 4f       	sbci	r19, 0xFE	; 254
    2fd2:	f9 01       	movw	r30, r18
    2fd4:	91 83       	std	Z+1, r25	; 0x01
    2fd6:	80 83       	st	Z, r24
    2fd8:	9e 01       	movw	r18, r28
    2fda:	26 5b       	subi	r18, 0xB6	; 182
    2fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	aa e7       	ldi	r26, 0x7A	; 122
    2fe4:	b4 e4       	ldi	r27, 0x44	; 68
    2fe6:	f9 01       	movw	r30, r18
    2fe8:	80 83       	st	Z, r24
    2fea:	91 83       	std	Z+1, r25	; 0x01
    2fec:	a2 83       	std	Z+2, r26	; 0x02
    2fee:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ff0:	8e 01       	movw	r16, r28
    2ff2:	02 5e       	subi	r16, 0xE2	; 226
    2ff4:	1e 4f       	sbci	r17, 0xFE	; 254
    2ff6:	ce 01       	movw	r24, r28
    2ff8:	86 5b       	subi	r24, 0xB6	; 182
    2ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	4a e7       	ldi	r20, 0x7A	; 122
    3002:	53 e4       	ldi	r21, 0x43	; 67
    3004:	fc 01       	movw	r30, r24
    3006:	60 81       	ld	r22, Z
    3008:	71 81       	ldd	r23, Z+1	; 0x01
    300a:	82 81       	ldd	r24, Z+2	; 0x02
    300c:	93 81       	ldd	r25, Z+3	; 0x03
    300e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	f8 01       	movw	r30, r16
    3018:	80 83       	st	Z, r24
    301a:	91 83       	std	Z+1, r25	; 0x01
    301c:	a2 83       	std	Z+2, r26	; 0x02
    301e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3020:	ce 01       	movw	r24, r28
    3022:	82 5e       	subi	r24, 0xE2	; 226
    3024:	9e 4f       	sbci	r25, 0xFE	; 254
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e8       	ldi	r20, 0x80	; 128
    302c:	5f e3       	ldi	r21, 0x3F	; 63
    302e:	fc 01       	movw	r30, r24
    3030:	60 81       	ld	r22, Z
    3032:	71 81       	ldd	r23, Z+1	; 0x01
    3034:	82 81       	ldd	r24, Z+2	; 0x02
    3036:	93 81       	ldd	r25, Z+3	; 0x03
    3038:	0e 94 b2 18 	call	0x3164	; 0x3164 <__cmpsf2>
    303c:	88 23       	and	r24, r24
    303e:	4c f4       	brge	.+18     	; 0x3052 <main+0x1f2e>
		__ticks = 1;
    3040:	ce 01       	movw	r24, r28
    3042:	8e 5d       	subi	r24, 0xDE	; 222
    3044:	9e 4f       	sbci	r25, 0xFE	; 254
    3046:	21 e0       	ldi	r18, 0x01	; 1
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	fc 01       	movw	r30, r24
    304c:	31 83       	std	Z+1, r19	; 0x01
    304e:	20 83       	st	Z, r18
    3050:	6d c0       	rjmp	.+218    	; 0x312c <main+0x2008>
	else if (__tmp > 65535)
    3052:	ce 01       	movw	r24, r28
    3054:	82 5e       	subi	r24, 0xE2	; 226
    3056:	9e 4f       	sbci	r25, 0xFE	; 254
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	3f ef       	ldi	r19, 0xFF	; 255
    305c:	4f e7       	ldi	r20, 0x7F	; 127
    305e:	57 e4       	ldi	r21, 0x47	; 71
    3060:	fc 01       	movw	r30, r24
    3062:	60 81       	ld	r22, Z
    3064:	71 81       	ldd	r23, Z+1	; 0x01
    3066:	82 81       	ldd	r24, Z+2	; 0x02
    3068:	93 81       	ldd	r25, Z+3	; 0x03
    306a:	0e 94 cd 19 	call	0x339a	; 0x339a <__gesf2>
    306e:	18 16       	cp	r1, r24
    3070:	0c f0       	brlt	.+2      	; 0x3074 <main+0x1f50>
    3072:	4a c0       	rjmp	.+148    	; 0x3108 <main+0x1fe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3074:	ce 01       	movw	r24, r28
    3076:	86 5b       	subi	r24, 0xB6	; 182
    3078:	9f 4f       	sbci	r25, 0xFF	; 255
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	40 e2       	ldi	r20, 0x20	; 32
    3080:	51 e4       	ldi	r21, 0x41	; 65
    3082:	fc 01       	movw	r30, r24
    3084:	60 81       	ld	r22, Z
    3086:	71 81       	ldd	r23, Z+1	; 0x01
    3088:	82 81       	ldd	r24, Z+2	; 0x02
    308a:	93 81       	ldd	r25, Z+3	; 0x03
    308c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__mulsf3>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	8e 01       	movw	r16, r28
    3096:	0e 5d       	subi	r16, 0xDE	; 222
    3098:	1e 4f       	sbci	r17, 0xFE	; 254
    309a:	bc 01       	movw	r22, r24
    309c:	cd 01       	movw	r24, r26
    309e:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	f8 01       	movw	r30, r16
    30a8:	91 83       	std	Z+1, r25	; 0x01
    30aa:	80 83       	st	Z, r24
    30ac:	24 c0       	rjmp	.+72     	; 0x30f6 <main+0x1fd2>
    30ae:	ce 01       	movw	r24, r28
    30b0:	8c 5d       	subi	r24, 0xDC	; 220
    30b2:	9e 4f       	sbci	r25, 0xFE	; 254
    30b4:	29 e1       	ldi	r18, 0x19	; 25
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	fc 01       	movw	r30, r24
    30ba:	31 83       	std	Z+1, r19	; 0x01
    30bc:	20 83       	st	Z, r18
    30be:	ce 01       	movw	r24, r28
    30c0:	8c 5d       	subi	r24, 0xDC	; 220
    30c2:	9e 4f       	sbci	r25, 0xFE	; 254
    30c4:	fc 01       	movw	r30, r24
    30c6:	80 81       	ld	r24, Z
    30c8:	91 81       	ldd	r25, Z+1	; 0x01
    30ca:	01 97       	sbiw	r24, 0x01	; 1
    30cc:	f1 f7       	brne	.-4      	; 0x30ca <main+0x1fa6>
    30ce:	9e 01       	movw	r18, r28
    30d0:	2c 5d       	subi	r18, 0xDC	; 220
    30d2:	3e 4f       	sbci	r19, 0xFE	; 254
    30d4:	f9 01       	movw	r30, r18
    30d6:	91 83       	std	Z+1, r25	; 0x01
    30d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30da:	ce 01       	movw	r24, r28
    30dc:	8e 5d       	subi	r24, 0xDE	; 222
    30de:	9e 4f       	sbci	r25, 0xFE	; 254
    30e0:	9e 01       	movw	r18, r28
    30e2:	2e 5d       	subi	r18, 0xDE	; 222
    30e4:	3e 4f       	sbci	r19, 0xFE	; 254
    30e6:	f9 01       	movw	r30, r18
    30e8:	20 81       	ld	r18, Z
    30ea:	31 81       	ldd	r19, Z+1	; 0x01
    30ec:	21 50       	subi	r18, 0x01	; 1
    30ee:	31 09       	sbc	r19, r1
    30f0:	fc 01       	movw	r30, r24
    30f2:	31 83       	std	Z+1, r19	; 0x01
    30f4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f6:	ce 01       	movw	r24, r28
    30f8:	8e 5d       	subi	r24, 0xDE	; 222
    30fa:	9e 4f       	sbci	r25, 0xFE	; 254
    30fc:	fc 01       	movw	r30, r24
    30fe:	80 81       	ld	r24, Z
    3100:	91 81       	ldd	r25, Z+1	; 0x01
    3102:	89 2b       	or	r24, r25
    3104:	a1 f6       	brne	.-88     	; 0x30ae <main+0x1f8a>
    3106:	2c c0       	rjmp	.+88     	; 0x3160 <main+0x203c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3108:	8e 01       	movw	r16, r28
    310a:	0e 5d       	subi	r16, 0xDE	; 222
    310c:	1e 4f       	sbci	r17, 0xFE	; 254
    310e:	ce 01       	movw	r24, r28
    3110:	82 5e       	subi	r24, 0xE2	; 226
    3112:	9e 4f       	sbci	r25, 0xFE	; 254
    3114:	fc 01       	movw	r30, r24
    3116:	60 81       	ld	r22, Z
    3118:	71 81       	ldd	r23, Z+1	; 0x01
    311a:	82 81       	ldd	r24, Z+2	; 0x02
    311c:	93 81       	ldd	r25, Z+3	; 0x03
    311e:	0e 94 29 19 	call	0x3252	; 0x3252 <__fixunssfsi>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	f8 01       	movw	r30, r16
    3128:	91 83       	std	Z+1, r25	; 0x01
    312a:	80 83       	st	Z, r24
    312c:	ce 01       	movw	r24, r28
    312e:	8a 5d       	subi	r24, 0xDA	; 218
    3130:	9e 4f       	sbci	r25, 0xFE	; 254
    3132:	9e 01       	movw	r18, r28
    3134:	2e 5d       	subi	r18, 0xDE	; 222
    3136:	3e 4f       	sbci	r19, 0xFE	; 254
    3138:	f9 01       	movw	r30, r18
    313a:	20 81       	ld	r18, Z
    313c:	31 81       	ldd	r19, Z+1	; 0x01
    313e:	fc 01       	movw	r30, r24
    3140:	31 83       	std	Z+1, r19	; 0x01
    3142:	20 83       	st	Z, r18
    3144:	ce 01       	movw	r24, r28
    3146:	8a 5d       	subi	r24, 0xDA	; 218
    3148:	9e 4f       	sbci	r25, 0xFE	; 254
    314a:	fc 01       	movw	r30, r24
    314c:	80 81       	ld	r24, Z
    314e:	91 81       	ldd	r25, Z+1	; 0x01
    3150:	01 97       	sbiw	r24, 0x01	; 1
    3152:	f1 f7       	brne	.-4      	; 0x3150 <main+0x202c>
    3154:	9e 01       	movw	r18, r28
    3156:	2a 5d       	subi	r18, 0xDA	; 218
    3158:	3e 4f       	sbci	r19, 0xFE	; 254
    315a:	f9 01       	movw	r30, r18
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	80 83       	st	Z, r24
				_delay_ms(50);
			}
		_delay_ms(1000);
    }
    3160:	0c 94 a5 08 	jmp	0x114a	; 0x114a <main+0x26>

00003164 <__cmpsf2>:
    3164:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__fp_cmp>
    3168:	08 f4       	brcc	.+2      	; 0x316c <__cmpsf2+0x8>
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	08 95       	ret

0000316e <__divsf3>:
    316e:	0e 94 cb 18 	call	0x3196	; 0x3196 <__divsf3x>
    3172:	0c 94 93 19 	jmp	0x3326	; 0x3326 <__fp_round>
    3176:	0e 94 8c 19 	call	0x3318	; 0x3318 <__fp_pscB>
    317a:	58 f0       	brcs	.+22     	; 0x3192 <__divsf3+0x24>
    317c:	0e 94 85 19 	call	0x330a	; 0x330a <__fp_pscA>
    3180:	40 f0       	brcs	.+16     	; 0x3192 <__divsf3+0x24>
    3182:	29 f4       	brne	.+10     	; 0x318e <__divsf3+0x20>
    3184:	5f 3f       	cpi	r21, 0xFF	; 255
    3186:	29 f0       	breq	.+10     	; 0x3192 <__divsf3+0x24>
    3188:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__fp_inf>
    318c:	51 11       	cpse	r21, r1
    318e:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__fp_szero>
    3192:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__fp_nan>

00003196 <__divsf3x>:
    3196:	0e 94 a4 19 	call	0x3348	; 0x3348 <__fp_split3>
    319a:	68 f3       	brcs	.-38     	; 0x3176 <__divsf3+0x8>

0000319c <__divsf3_pse>:
    319c:	99 23       	and	r25, r25
    319e:	b1 f3       	breq	.-20     	; 0x318c <__divsf3+0x1e>
    31a0:	55 23       	and	r21, r21
    31a2:	91 f3       	breq	.-28     	; 0x3188 <__divsf3+0x1a>
    31a4:	95 1b       	sub	r25, r21
    31a6:	55 0b       	sbc	r21, r21
    31a8:	bb 27       	eor	r27, r27
    31aa:	aa 27       	eor	r26, r26
    31ac:	62 17       	cp	r22, r18
    31ae:	73 07       	cpc	r23, r19
    31b0:	84 07       	cpc	r24, r20
    31b2:	38 f0       	brcs	.+14     	; 0x31c2 <__divsf3_pse+0x26>
    31b4:	9f 5f       	subi	r25, 0xFF	; 255
    31b6:	5f 4f       	sbci	r21, 0xFF	; 255
    31b8:	22 0f       	add	r18, r18
    31ba:	33 1f       	adc	r19, r19
    31bc:	44 1f       	adc	r20, r20
    31be:	aa 1f       	adc	r26, r26
    31c0:	a9 f3       	breq	.-22     	; 0x31ac <__divsf3_pse+0x10>
    31c2:	35 d0       	rcall	.+106    	; 0x322e <__divsf3_pse+0x92>
    31c4:	0e 2e       	mov	r0, r30
    31c6:	3a f0       	brmi	.+14     	; 0x31d6 <__divsf3_pse+0x3a>
    31c8:	e0 e8       	ldi	r30, 0x80	; 128
    31ca:	32 d0       	rcall	.+100    	; 0x3230 <__divsf3_pse+0x94>
    31cc:	91 50       	subi	r25, 0x01	; 1
    31ce:	50 40       	sbci	r21, 0x00	; 0
    31d0:	e6 95       	lsr	r30
    31d2:	00 1c       	adc	r0, r0
    31d4:	ca f7       	brpl	.-14     	; 0x31c8 <__divsf3_pse+0x2c>
    31d6:	2b d0       	rcall	.+86     	; 0x322e <__divsf3_pse+0x92>
    31d8:	fe 2f       	mov	r31, r30
    31da:	29 d0       	rcall	.+82     	; 0x322e <__divsf3_pse+0x92>
    31dc:	66 0f       	add	r22, r22
    31de:	77 1f       	adc	r23, r23
    31e0:	88 1f       	adc	r24, r24
    31e2:	bb 1f       	adc	r27, r27
    31e4:	26 17       	cp	r18, r22
    31e6:	37 07       	cpc	r19, r23
    31e8:	48 07       	cpc	r20, r24
    31ea:	ab 07       	cpc	r26, r27
    31ec:	b0 e8       	ldi	r27, 0x80	; 128
    31ee:	09 f0       	breq	.+2      	; 0x31f2 <__divsf3_pse+0x56>
    31f0:	bb 0b       	sbc	r27, r27
    31f2:	80 2d       	mov	r24, r0
    31f4:	bf 01       	movw	r22, r30
    31f6:	ff 27       	eor	r31, r31
    31f8:	93 58       	subi	r25, 0x83	; 131
    31fa:	5f 4f       	sbci	r21, 0xFF	; 255
    31fc:	3a f0       	brmi	.+14     	; 0x320c <__divsf3_pse+0x70>
    31fe:	9e 3f       	cpi	r25, 0xFE	; 254
    3200:	51 05       	cpc	r21, r1
    3202:	78 f0       	brcs	.+30     	; 0x3222 <__divsf3_pse+0x86>
    3204:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__fp_inf>
    3208:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__fp_szero>
    320c:	5f 3f       	cpi	r21, 0xFF	; 255
    320e:	e4 f3       	brlt	.-8      	; 0x3208 <__divsf3_pse+0x6c>
    3210:	98 3e       	cpi	r25, 0xE8	; 232
    3212:	d4 f3       	brlt	.-12     	; 0x3208 <__divsf3_pse+0x6c>
    3214:	86 95       	lsr	r24
    3216:	77 95       	ror	r23
    3218:	67 95       	ror	r22
    321a:	b7 95       	ror	r27
    321c:	f7 95       	ror	r31
    321e:	9f 5f       	subi	r25, 0xFF	; 255
    3220:	c9 f7       	brne	.-14     	; 0x3214 <__divsf3_pse+0x78>
    3222:	88 0f       	add	r24, r24
    3224:	91 1d       	adc	r25, r1
    3226:	96 95       	lsr	r25
    3228:	87 95       	ror	r24
    322a:	97 f9       	bld	r25, 7
    322c:	08 95       	ret
    322e:	e1 e0       	ldi	r30, 0x01	; 1
    3230:	66 0f       	add	r22, r22
    3232:	77 1f       	adc	r23, r23
    3234:	88 1f       	adc	r24, r24
    3236:	bb 1f       	adc	r27, r27
    3238:	62 17       	cp	r22, r18
    323a:	73 07       	cpc	r23, r19
    323c:	84 07       	cpc	r24, r20
    323e:	ba 07       	cpc	r27, r26
    3240:	20 f0       	brcs	.+8      	; 0x324a <__divsf3_pse+0xae>
    3242:	62 1b       	sub	r22, r18
    3244:	73 0b       	sbc	r23, r19
    3246:	84 0b       	sbc	r24, r20
    3248:	ba 0b       	sbc	r27, r26
    324a:	ee 1f       	adc	r30, r30
    324c:	88 f7       	brcc	.-30     	; 0x3230 <__divsf3_pse+0x94>
    324e:	e0 95       	com	r30
    3250:	08 95       	ret

00003252 <__fixunssfsi>:
    3252:	0e 94 ac 19 	call	0x3358	; 0x3358 <__fp_splitA>
    3256:	88 f0       	brcs	.+34     	; 0x327a <__fixunssfsi+0x28>
    3258:	9f 57       	subi	r25, 0x7F	; 127
    325a:	98 f0       	brcs	.+38     	; 0x3282 <__fixunssfsi+0x30>
    325c:	b9 2f       	mov	r27, r25
    325e:	99 27       	eor	r25, r25
    3260:	b7 51       	subi	r27, 0x17	; 23
    3262:	b0 f0       	brcs	.+44     	; 0x3290 <__fixunssfsi+0x3e>
    3264:	e1 f0       	breq	.+56     	; 0x329e <__fixunssfsi+0x4c>
    3266:	66 0f       	add	r22, r22
    3268:	77 1f       	adc	r23, r23
    326a:	88 1f       	adc	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	1a f0       	brmi	.+6      	; 0x3276 <__fixunssfsi+0x24>
    3270:	ba 95       	dec	r27
    3272:	c9 f7       	brne	.-14     	; 0x3266 <__fixunssfsi+0x14>
    3274:	14 c0       	rjmp	.+40     	; 0x329e <__fixunssfsi+0x4c>
    3276:	b1 30       	cpi	r27, 0x01	; 1
    3278:	91 f0       	breq	.+36     	; 0x329e <__fixunssfsi+0x4c>
    327a:	0e 94 c6 19 	call	0x338c	; 0x338c <__fp_zero>
    327e:	b1 e0       	ldi	r27, 0x01	; 1
    3280:	08 95       	ret
    3282:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__fp_zero>
    3286:	67 2f       	mov	r22, r23
    3288:	78 2f       	mov	r23, r24
    328a:	88 27       	eor	r24, r24
    328c:	b8 5f       	subi	r27, 0xF8	; 248
    328e:	39 f0       	breq	.+14     	; 0x329e <__fixunssfsi+0x4c>
    3290:	b9 3f       	cpi	r27, 0xF9	; 249
    3292:	cc f3       	brlt	.-14     	; 0x3286 <__fixunssfsi+0x34>
    3294:	86 95       	lsr	r24
    3296:	77 95       	ror	r23
    3298:	67 95       	ror	r22
    329a:	b3 95       	inc	r27
    329c:	d9 f7       	brne	.-10     	; 0x3294 <__fixunssfsi+0x42>
    329e:	3e f4       	brtc	.+14     	; 0x32ae <__fixunssfsi+0x5c>
    32a0:	90 95       	com	r25
    32a2:	80 95       	com	r24
    32a4:	70 95       	com	r23
    32a6:	61 95       	neg	r22
    32a8:	7f 4f       	sbci	r23, 0xFF	; 255
    32aa:	8f 4f       	sbci	r24, 0xFF	; 255
    32ac:	9f 4f       	sbci	r25, 0xFF	; 255
    32ae:	08 95       	ret

000032b0 <__fp_cmp>:
    32b0:	99 0f       	add	r25, r25
    32b2:	00 08       	sbc	r0, r0
    32b4:	55 0f       	add	r21, r21
    32b6:	aa 0b       	sbc	r26, r26
    32b8:	e0 e8       	ldi	r30, 0x80	; 128
    32ba:	fe ef       	ldi	r31, 0xFE	; 254
    32bc:	16 16       	cp	r1, r22
    32be:	17 06       	cpc	r1, r23
    32c0:	e8 07       	cpc	r30, r24
    32c2:	f9 07       	cpc	r31, r25
    32c4:	c0 f0       	brcs	.+48     	; 0x32f6 <__fp_cmp+0x46>
    32c6:	12 16       	cp	r1, r18
    32c8:	13 06       	cpc	r1, r19
    32ca:	e4 07       	cpc	r30, r20
    32cc:	f5 07       	cpc	r31, r21
    32ce:	98 f0       	brcs	.+38     	; 0x32f6 <__fp_cmp+0x46>
    32d0:	62 1b       	sub	r22, r18
    32d2:	73 0b       	sbc	r23, r19
    32d4:	84 0b       	sbc	r24, r20
    32d6:	95 0b       	sbc	r25, r21
    32d8:	39 f4       	brne	.+14     	; 0x32e8 <__fp_cmp+0x38>
    32da:	0a 26       	eor	r0, r26
    32dc:	61 f0       	breq	.+24     	; 0x32f6 <__fp_cmp+0x46>
    32de:	23 2b       	or	r18, r19
    32e0:	24 2b       	or	r18, r20
    32e2:	25 2b       	or	r18, r21
    32e4:	21 f4       	brne	.+8      	; 0x32ee <__fp_cmp+0x3e>
    32e6:	08 95       	ret
    32e8:	0a 26       	eor	r0, r26
    32ea:	09 f4       	brne	.+2      	; 0x32ee <__fp_cmp+0x3e>
    32ec:	a1 40       	sbci	r26, 0x01	; 1
    32ee:	a6 95       	lsr	r26
    32f0:	8f ef       	ldi	r24, 0xFF	; 255
    32f2:	81 1d       	adc	r24, r1
    32f4:	81 1d       	adc	r24, r1
    32f6:	08 95       	ret

000032f8 <__fp_inf>:
    32f8:	97 f9       	bld	r25, 7
    32fa:	9f 67       	ori	r25, 0x7F	; 127
    32fc:	80 e8       	ldi	r24, 0x80	; 128
    32fe:	70 e0       	ldi	r23, 0x00	; 0
    3300:	60 e0       	ldi	r22, 0x00	; 0
    3302:	08 95       	ret

00003304 <__fp_nan>:
    3304:	9f ef       	ldi	r25, 0xFF	; 255
    3306:	80 ec       	ldi	r24, 0xC0	; 192
    3308:	08 95       	ret

0000330a <__fp_pscA>:
    330a:	00 24       	eor	r0, r0
    330c:	0a 94       	dec	r0
    330e:	16 16       	cp	r1, r22
    3310:	17 06       	cpc	r1, r23
    3312:	18 06       	cpc	r1, r24
    3314:	09 06       	cpc	r0, r25
    3316:	08 95       	ret

00003318 <__fp_pscB>:
    3318:	00 24       	eor	r0, r0
    331a:	0a 94       	dec	r0
    331c:	12 16       	cp	r1, r18
    331e:	13 06       	cpc	r1, r19
    3320:	14 06       	cpc	r1, r20
    3322:	05 06       	cpc	r0, r21
    3324:	08 95       	ret

00003326 <__fp_round>:
    3326:	09 2e       	mov	r0, r25
    3328:	03 94       	inc	r0
    332a:	00 0c       	add	r0, r0
    332c:	11 f4       	brne	.+4      	; 0x3332 <__fp_round+0xc>
    332e:	88 23       	and	r24, r24
    3330:	52 f0       	brmi	.+20     	; 0x3346 <__fp_round+0x20>
    3332:	bb 0f       	add	r27, r27
    3334:	40 f4       	brcc	.+16     	; 0x3346 <__fp_round+0x20>
    3336:	bf 2b       	or	r27, r31
    3338:	11 f4       	brne	.+4      	; 0x333e <__fp_round+0x18>
    333a:	60 ff       	sbrs	r22, 0
    333c:	04 c0       	rjmp	.+8      	; 0x3346 <__fp_round+0x20>
    333e:	6f 5f       	subi	r22, 0xFF	; 255
    3340:	7f 4f       	sbci	r23, 0xFF	; 255
    3342:	8f 4f       	sbci	r24, 0xFF	; 255
    3344:	9f 4f       	sbci	r25, 0xFF	; 255
    3346:	08 95       	ret

00003348 <__fp_split3>:
    3348:	57 fd       	sbrc	r21, 7
    334a:	90 58       	subi	r25, 0x80	; 128
    334c:	44 0f       	add	r20, r20
    334e:	55 1f       	adc	r21, r21
    3350:	59 f0       	breq	.+22     	; 0x3368 <__fp_splitA+0x10>
    3352:	5f 3f       	cpi	r21, 0xFF	; 255
    3354:	71 f0       	breq	.+28     	; 0x3372 <__fp_splitA+0x1a>
    3356:	47 95       	ror	r20

00003358 <__fp_splitA>:
    3358:	88 0f       	add	r24, r24
    335a:	97 fb       	bst	r25, 7
    335c:	99 1f       	adc	r25, r25
    335e:	61 f0       	breq	.+24     	; 0x3378 <__fp_splitA+0x20>
    3360:	9f 3f       	cpi	r25, 0xFF	; 255
    3362:	79 f0       	breq	.+30     	; 0x3382 <__fp_splitA+0x2a>
    3364:	87 95       	ror	r24
    3366:	08 95       	ret
    3368:	12 16       	cp	r1, r18
    336a:	13 06       	cpc	r1, r19
    336c:	14 06       	cpc	r1, r20
    336e:	55 1f       	adc	r21, r21
    3370:	f2 cf       	rjmp	.-28     	; 0x3356 <__fp_split3+0xe>
    3372:	46 95       	lsr	r20
    3374:	f1 df       	rcall	.-30     	; 0x3358 <__fp_splitA>
    3376:	08 c0       	rjmp	.+16     	; 0x3388 <__fp_splitA+0x30>
    3378:	16 16       	cp	r1, r22
    337a:	17 06       	cpc	r1, r23
    337c:	18 06       	cpc	r1, r24
    337e:	99 1f       	adc	r25, r25
    3380:	f1 cf       	rjmp	.-30     	; 0x3364 <__fp_splitA+0xc>
    3382:	86 95       	lsr	r24
    3384:	71 05       	cpc	r23, r1
    3386:	61 05       	cpc	r22, r1
    3388:	08 94       	sec
    338a:	08 95       	ret

0000338c <__fp_zero>:
    338c:	e8 94       	clt

0000338e <__fp_szero>:
    338e:	bb 27       	eor	r27, r27
    3390:	66 27       	eor	r22, r22
    3392:	77 27       	eor	r23, r23
    3394:	cb 01       	movw	r24, r22
    3396:	97 f9       	bld	r25, 7
    3398:	08 95       	ret

0000339a <__gesf2>:
    339a:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__fp_cmp>
    339e:	08 f4       	brcc	.+2      	; 0x33a2 <__gesf2+0x8>
    33a0:	8f ef       	ldi	r24, 0xFF	; 255
    33a2:	08 95       	ret

000033a4 <__mulsf3>:
    33a4:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__mulsf3x>
    33a8:	0c 94 93 19 	jmp	0x3326	; 0x3326 <__fp_round>
    33ac:	0e 94 85 19 	call	0x330a	; 0x330a <__fp_pscA>
    33b0:	38 f0       	brcs	.+14     	; 0x33c0 <__mulsf3+0x1c>
    33b2:	0e 94 8c 19 	call	0x3318	; 0x3318 <__fp_pscB>
    33b6:	20 f0       	brcs	.+8      	; 0x33c0 <__mulsf3+0x1c>
    33b8:	95 23       	and	r25, r21
    33ba:	11 f0       	breq	.+4      	; 0x33c0 <__mulsf3+0x1c>
    33bc:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__fp_inf>
    33c0:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__fp_nan>
    33c4:	11 24       	eor	r1, r1
    33c6:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__fp_szero>

000033ca <__mulsf3x>:
    33ca:	0e 94 a4 19 	call	0x3348	; 0x3348 <__fp_split3>
    33ce:	70 f3       	brcs	.-36     	; 0x33ac <__mulsf3+0x8>

000033d0 <__mulsf3_pse>:
    33d0:	95 9f       	mul	r25, r21
    33d2:	c1 f3       	breq	.-16     	; 0x33c4 <__mulsf3+0x20>
    33d4:	95 0f       	add	r25, r21
    33d6:	50 e0       	ldi	r21, 0x00	; 0
    33d8:	55 1f       	adc	r21, r21
    33da:	62 9f       	mul	r22, r18
    33dc:	f0 01       	movw	r30, r0
    33de:	72 9f       	mul	r23, r18
    33e0:	bb 27       	eor	r27, r27
    33e2:	f0 0d       	add	r31, r0
    33e4:	b1 1d       	adc	r27, r1
    33e6:	63 9f       	mul	r22, r19
    33e8:	aa 27       	eor	r26, r26
    33ea:	f0 0d       	add	r31, r0
    33ec:	b1 1d       	adc	r27, r1
    33ee:	aa 1f       	adc	r26, r26
    33f0:	64 9f       	mul	r22, r20
    33f2:	66 27       	eor	r22, r22
    33f4:	b0 0d       	add	r27, r0
    33f6:	a1 1d       	adc	r26, r1
    33f8:	66 1f       	adc	r22, r22
    33fa:	82 9f       	mul	r24, r18
    33fc:	22 27       	eor	r18, r18
    33fe:	b0 0d       	add	r27, r0
    3400:	a1 1d       	adc	r26, r1
    3402:	62 1f       	adc	r22, r18
    3404:	73 9f       	mul	r23, r19
    3406:	b0 0d       	add	r27, r0
    3408:	a1 1d       	adc	r26, r1
    340a:	62 1f       	adc	r22, r18
    340c:	83 9f       	mul	r24, r19
    340e:	a0 0d       	add	r26, r0
    3410:	61 1d       	adc	r22, r1
    3412:	22 1f       	adc	r18, r18
    3414:	74 9f       	mul	r23, r20
    3416:	33 27       	eor	r19, r19
    3418:	a0 0d       	add	r26, r0
    341a:	61 1d       	adc	r22, r1
    341c:	23 1f       	adc	r18, r19
    341e:	84 9f       	mul	r24, r20
    3420:	60 0d       	add	r22, r0
    3422:	21 1d       	adc	r18, r1
    3424:	82 2f       	mov	r24, r18
    3426:	76 2f       	mov	r23, r22
    3428:	6a 2f       	mov	r22, r26
    342a:	11 24       	eor	r1, r1
    342c:	9f 57       	subi	r25, 0x7F	; 127
    342e:	50 40       	sbci	r21, 0x00	; 0
    3430:	9a f0       	brmi	.+38     	; 0x3458 <__mulsf3_pse+0x88>
    3432:	f1 f0       	breq	.+60     	; 0x3470 <__mulsf3_pse+0xa0>
    3434:	88 23       	and	r24, r24
    3436:	4a f0       	brmi	.+18     	; 0x344a <__mulsf3_pse+0x7a>
    3438:	ee 0f       	add	r30, r30
    343a:	ff 1f       	adc	r31, r31
    343c:	bb 1f       	adc	r27, r27
    343e:	66 1f       	adc	r22, r22
    3440:	77 1f       	adc	r23, r23
    3442:	88 1f       	adc	r24, r24
    3444:	91 50       	subi	r25, 0x01	; 1
    3446:	50 40       	sbci	r21, 0x00	; 0
    3448:	a9 f7       	brne	.-22     	; 0x3434 <__mulsf3_pse+0x64>
    344a:	9e 3f       	cpi	r25, 0xFE	; 254
    344c:	51 05       	cpc	r21, r1
    344e:	80 f0       	brcs	.+32     	; 0x3470 <__mulsf3_pse+0xa0>
    3450:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__fp_inf>
    3454:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__fp_szero>
    3458:	5f 3f       	cpi	r21, 0xFF	; 255
    345a:	e4 f3       	brlt	.-8      	; 0x3454 <__mulsf3_pse+0x84>
    345c:	98 3e       	cpi	r25, 0xE8	; 232
    345e:	d4 f3       	brlt	.-12     	; 0x3454 <__mulsf3_pse+0x84>
    3460:	86 95       	lsr	r24
    3462:	77 95       	ror	r23
    3464:	67 95       	ror	r22
    3466:	b7 95       	ror	r27
    3468:	f7 95       	ror	r31
    346a:	e7 95       	ror	r30
    346c:	9f 5f       	subi	r25, 0xFF	; 255
    346e:	c1 f7       	brne	.-16     	; 0x3460 <__mulsf3_pse+0x90>
    3470:	fe 2b       	or	r31, r30
    3472:	88 0f       	add	r24, r24
    3474:	91 1d       	adc	r25, r1
    3476:	96 95       	lsr	r25
    3478:	87 95       	ror	r24
    347a:	97 f9       	bld	r25, 7
    347c:	08 95       	ret

0000347e <_exit>:
    347e:	f8 94       	cli

00003480 <__stop_program>:
    3480:	ff cf       	rjmp	.-2      	; 0x3480 <__stop_program>
