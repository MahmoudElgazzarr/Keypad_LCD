
BCDSevegments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000286a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000028be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000028be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000028f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000292c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010a2  00000000  00000000  000029dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006db  00000000  00000000  00003a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f4e  00000000  00000000  00004159  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  000050a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000458  00000000  00000000  00005244  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d0  00000000  00000000  0000569c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000596c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61
      60:	0e 94 84 04 	call	0x908	; 0x908 <main>
      64:	0c 94 33 14 	jmp	0x2866	; 0x2866 <_exit>

00000068 <__bad_interrupt>:
      68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <BCDSevegments_Init>:
	}
	if(segment_Number == 4)
	{
		DIO_WritePin(BCDSEVSEGMENTS4_Enable_PIN,LOW);
	}
}
      6c:	cf 93       	push	r28
      6e:	df 93       	push	r29
      70:	cd b7       	in	r28, 0x3d	; 61
      72:	de b7       	in	r29, 0x3e	; 62
      74:	61 e0       	ldi	r22, 0x01	; 1
      76:	8a e1       	ldi	r24, 0x1A	; 26
      78:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      7c:	61 e0       	ldi	r22, 0x01	; 1
      7e:	8b e1       	ldi	r24, 0x1B	; 27
      80:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      84:	61 e0       	ldi	r22, 0x01	; 1
      86:	8e e1       	ldi	r24, 0x1E	; 30
      88:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      8c:	61 e0       	ldi	r22, 0x01	; 1
      8e:	8f e1       	ldi	r24, 0x1F	; 31
      90:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      94:	61 e0       	ldi	r22, 0x01	; 1
      96:	88 e0       	ldi	r24, 0x08	; 8
      98:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      9c:	61 e0       	ldi	r22, 0x01	; 1
      9e:	89 e0       	ldi	r24, 0x09	; 9
      a0:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      a4:	61 e0       	ldi	r22, 0x01	; 1
      a6:	8a e0       	ldi	r24, 0x0A	; 10
      a8:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      ac:	61 e0       	ldi	r22, 0x01	; 1
      ae:	8b e0       	ldi	r24, 0x0B	; 11
      b0:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      b4:	60 e0       	ldi	r22, 0x00	; 0
      b6:	8a e1       	ldi	r24, 0x1A	; 26
      b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      bc:	60 e0       	ldi	r22, 0x00	; 0
      be:	8b e1       	ldi	r24, 0x1B	; 27
      c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      c4:	60 e0       	ldi	r22, 0x00	; 0
      c6:	8e e1       	ldi	r24, 0x1E	; 30
      c8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	8f e1       	ldi	r24, 0x1F	; 31
      d0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      d4:	00 00       	nop
      d6:	df 91       	pop	r29
      d8:	cf 91       	pop	r28
      da:	08 95       	ret

000000dc <BCDSevegments_enable>:
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	1f 92       	push	r1
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
      e6:	89 83       	std	Y+1, r24	; 0x01
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	81 30       	cpi	r24, 0x01	; 1
      ec:	21 f4       	brne	.+8      	; 0xf6 <BCDSevegments_enable+0x1a>
      ee:	61 e0       	ldi	r22, 0x01	; 1
      f0:	8a e1       	ldi	r24, 0x1A	; 26
      f2:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      f6:	89 81       	ldd	r24, Y+1	; 0x01
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	21 f4       	brne	.+8      	; 0x104 <BCDSevegments_enable+0x28>
      fc:	61 e0       	ldi	r22, 0x01	; 1
      fe:	8b e1       	ldi	r24, 0x1B	; 27
     100:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	83 30       	cpi	r24, 0x03	; 3
     108:	21 f4       	brne	.+8      	; 0x112 <BCDSevegments_enable+0x36>
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	8e e1       	ldi	r24, 0x1E	; 30
     10e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	84 30       	cpi	r24, 0x04	; 4
     116:	21 f4       	brne	.+8      	; 0x120 <BCDSevegments_enable+0x44>
     118:	61 e0       	ldi	r22, 0x01	; 1
     11a:	8f e1       	ldi	r24, 0x1F	; 31
     11c:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     120:	00 00       	nop
     122:	0f 90       	pop	r0
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <BCDSevegments_displayNo>:
void BCDSevegments_displayNo(uint8 number)
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	1f 92       	push	r1
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	89 83       	std	Y+1, r24	; 0x01
	if (number == 0)
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	88 23       	and	r24, r24
     13a:	89 f4       	brne	.+34     	; 0x15e <BCDSevegments_displayNo+0x34>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	88 e0       	ldi	r24, 0x08	; 8
     140:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	89 e0       	ldi	r24, 0x09	; 9
     148:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	8a e0       	ldi	r24, 0x0A	; 10
     150:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	8b e0       	ldi	r24, 0x0B	; 11
     158:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     15c:	b3 c0       	rjmp	.+358    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 1)
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	89 f4       	brne	.+34     	; 0x186 <BCDSevegments_displayNo+0x5c>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	88 e0       	ldi	r24, 0x08	; 8
     168:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	89 e0       	ldi	r24, 0x09	; 9
     170:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	8a e0       	ldi	r24, 0x0A	; 10
     178:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	8b e0       	ldi	r24, 0x0B	; 11
     180:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     184:	9f c0       	rjmp	.+318    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 2)
     186:	89 81       	ldd	r24, Y+1	; 0x01
     188:	82 30       	cpi	r24, 0x02	; 2
     18a:	89 f4       	brne	.+34     	; 0x1ae <BCDSevegments_displayNo+0x84>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	88 e0       	ldi	r24, 0x08	; 8
     190:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	89 e0       	ldi	r24, 0x09	; 9
     198:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	8a e0       	ldi	r24, 0x0A	; 10
     1a0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1a4:	60 e0       	ldi	r22, 0x00	; 0
     1a6:	8b e0       	ldi	r24, 0x0B	; 11
     1a8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1ac:	8b c0       	rjmp	.+278    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 3)
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	83 30       	cpi	r24, 0x03	; 3
     1b2:	89 f4       	brne	.+34     	; 0x1d6 <BCDSevegments_displayNo+0xac>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     1b4:	61 e0       	ldi	r22, 0x01	; 1
     1b6:	88 e0       	ldi	r24, 0x08	; 8
     1b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     1bc:	61 e0       	ldi	r22, 0x01	; 1
     1be:	89 e0       	ldi	r24, 0x09	; 9
     1c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	8a e0       	ldi	r24, 0x0A	; 10
     1c8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1cc:	60 e0       	ldi	r22, 0x00	; 0
     1ce:	8b e0       	ldi	r24, 0x0B	; 11
     1d0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1d4:	77 c0       	rjmp	.+238    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if (number == 4)
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	84 30       	cpi	r24, 0x04	; 4
     1da:	89 f4       	brne	.+34     	; 0x1fe <BCDSevegments_displayNo+0xd4>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	88 e0       	ldi	r24, 0x08	; 8
     1e0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	89 e0       	ldi	r24, 0x09	; 9
     1e8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     1ec:	61 e0       	ldi	r22, 0x01	; 1
     1ee:	8a e0       	ldi	r24, 0x0A	; 10
     1f0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	8b e0       	ldi	r24, 0x0B	; 11
     1f8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1fc:	63 c0       	rjmp	.+198    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 5)
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	85 30       	cpi	r24, 0x05	; 5
     202:	89 f4       	brne	.+34     	; 0x226 <BCDSevegments_displayNo+0xfc>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     204:	61 e0       	ldi	r22, 0x01	; 1
     206:	88 e0       	ldi	r24, 0x08	; 8
     208:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	89 e0       	ldi	r24, 0x09	; 9
     210:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     214:	61 e0       	ldi	r22, 0x01	; 1
     216:	8a e0       	ldi	r24, 0x0A	; 10
     218:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	8b e0       	ldi	r24, 0x0B	; 11
     220:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     224:	4f c0       	rjmp	.+158    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 6)
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	86 30       	cpi	r24, 0x06	; 6
     22a:	89 f4       	brne	.+34     	; 0x24e <BCDSevegments_displayNo+0x124>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	88 e0       	ldi	r24, 0x08	; 8
     230:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	89 e0       	ldi	r24, 0x09	; 9
     238:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	8a e0       	ldi	r24, 0x0A	; 10
     240:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	8b e0       	ldi	r24, 0x0B	; 11
     248:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     24c:	3b c0       	rjmp	.+118    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 7)
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	87 30       	cpi	r24, 0x07	; 7
     252:	89 f4       	brne	.+34     	; 0x276 <BCDSevegments_displayNo+0x14c>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	88 e0       	ldi	r24, 0x08	; 8
     258:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	89 e0       	ldi	r24, 0x09	; 9
     260:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     264:	61 e0       	ldi	r22, 0x01	; 1
     266:	8a e0       	ldi	r24, 0x0A	; 10
     268:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	8b e0       	ldi	r24, 0x0B	; 11
     270:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     274:	27 c0       	rjmp	.+78     	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 8)
     276:	89 81       	ldd	r24, Y+1	; 0x01
     278:	88 30       	cpi	r24, 0x08	; 8
     27a:	89 f4       	brne	.+34     	; 0x29e <BCDSevegments_displayNo+0x174>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	88 e0       	ldi	r24, 0x08	; 8
     280:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	89 e0       	ldi	r24, 0x09	; 9
     288:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	8a e0       	ldi	r24, 0x0A	; 10
     290:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	8b e0       	ldi	r24, 0x0B	; 11
     298:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     29c:	13 c0       	rjmp	.+38     	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
	else if(number == 9)
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	89 30       	cpi	r24, 0x09	; 9
     2a2:	81 f4       	brne	.+32     	; 0x2c4 <BCDSevegments_displayNo+0x19a>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     2a4:	61 e0       	ldi	r22, 0x01	; 1
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	89 e0       	ldi	r24, 0x09	; 9
     2b0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	8a e0       	ldi	r24, 0x0A	; 10
     2b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	8b e0       	ldi	r24, 0x0B	; 11
     2c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	}
     2c4:	00 00       	nop
     2c6:	0f 90       	pop	r0
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <DIO_WritePin>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "BitwiseOperation.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <DIO_WritePin+0x6>
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	89 83       	std	Y+1, r24	; 0x01
     2da:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNum >= 0 && PinNum < 8 )
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	88 30       	cpi	r24, 0x08	; 8
     2e0:	78 f5       	brcc	.+94     	; 0x340 <DIO_WritePin+0x72>
	{
			if(PinValue == 1)
     2e2:	8a 81       	ldd	r24, Y+2	; 0x02
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	a1 f4       	brne	.+40     	; 0x310 <DIO_WritePin+0x42>
			{
				Set_Bit( PORTA , PinNum);
     2e8:	8b e3       	ldi	r24, 0x3B	; 59
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	2b e3       	ldi	r18, 0x3B	; 59
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	f9 01       	movw	r30, r18
     2f2:	20 81       	ld	r18, Z
     2f4:	62 2f       	mov	r22, r18
     2f6:	29 81       	ldd	r18, Y+1	; 0x01
     2f8:	42 2f       	mov	r20, r18
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	21 e0       	ldi	r18, 0x01	; 1
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_WritePin+0x38>
     302:	22 0f       	add	r18, r18
     304:	33 1f       	adc	r19, r19
     306:	4a 95       	dec	r20
     308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_WritePin+0x34>
     30a:	26 2b       	or	r18, r22
     30c:	fc 01       	movw	r30, r24
     30e:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	88 23       	and	r24, r24
     314:	a9 f4       	brne	.+42     	; 0x340 <DIO_WritePin+0x72>
			{
				Clear_Bit( PORTA , PinNum);
     316:	8b e3       	ldi	r24, 0x3B	; 59
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	2b e3       	ldi	r18, 0x3B	; 59
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	f9 01       	movw	r30, r18
     320:	20 81       	ld	r18, Z
     322:	62 2f       	mov	r22, r18
     324:	29 81       	ldd	r18, Y+1	; 0x01
     326:	42 2f       	mov	r20, r18
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	21 e0       	ldi	r18, 0x01	; 1
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_WritePin+0x66>
     330:	22 0f       	add	r18, r18
     332:	33 1f       	adc	r19, r19
     334:	4a 95       	dec	r20
     336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_WritePin+0x62>
     338:	20 95       	com	r18
     33a:	26 23       	and	r18, r22
     33c:	fc 01       	movw	r30, r24
     33e:	20 83       	st	Z, r18
			}
	}
	if(PinNum > 7 && PinNum < 16)
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	88 30       	cpi	r24, 0x08	; 8
     344:	c0 f1       	brcs	.+112    	; 0x3b6 <DIO_WritePin+0xe8>
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	80 31       	cpi	r24, 0x10	; 16
     34a:	a8 f5       	brcc	.+106    	; 0x3b6 <DIO_WritePin+0xe8>
	{
		if(PinValue == 1)
     34c:	8a 81       	ldd	r24, Y+2	; 0x02
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	b9 f4       	brne	.+46     	; 0x380 <DIO_WritePin+0xb2>
		{
			Set_Bit( PORTB , (PinNum-8));
     352:	88 e3       	ldi	r24, 0x38	; 56
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	28 e3       	ldi	r18, 0x38	; 56
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	f9 01       	movw	r30, r18
     35c:	20 81       	ld	r18, Z
     35e:	62 2f       	mov	r22, r18
     360:	29 81       	ldd	r18, Y+1	; 0x01
     362:	22 2f       	mov	r18, r18
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	a9 01       	movw	r20, r18
     368:	48 50       	subi	r20, 0x08	; 8
     36a:	51 09       	sbc	r21, r1
     36c:	21 e0       	ldi	r18, 0x01	; 1
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_WritePin+0xa8>
     372:	22 0f       	add	r18, r18
     374:	33 1f       	adc	r19, r19
     376:	4a 95       	dec	r20
     378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_WritePin+0xa4>
     37a:	26 2b       	or	r18, r22
     37c:	fc 01       	movw	r30, r24
     37e:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
     380:	8a 81       	ldd	r24, Y+2	; 0x02
     382:	88 23       	and	r24, r24
     384:	c1 f4       	brne	.+48     	; 0x3b6 <DIO_WritePin+0xe8>
		{
			Clear_Bit( PORTB , (PinNum-8));
     386:	88 e3       	ldi	r24, 0x38	; 56
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	28 e3       	ldi	r18, 0x38	; 56
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	f9 01       	movw	r30, r18
     390:	20 81       	ld	r18, Z
     392:	62 2f       	mov	r22, r18
     394:	29 81       	ldd	r18, Y+1	; 0x01
     396:	22 2f       	mov	r18, r18
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	a9 01       	movw	r20, r18
     39c:	48 50       	subi	r20, 0x08	; 8
     39e:	51 09       	sbc	r21, r1
     3a0:	21 e0       	ldi	r18, 0x01	; 1
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_WritePin+0xdc>
     3a6:	22 0f       	add	r18, r18
     3a8:	33 1f       	adc	r19, r19
     3aa:	4a 95       	dec	r20
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_WritePin+0xd8>
     3ae:	20 95       	com	r18
     3b0:	26 23       	and	r18, r22
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18
		}
	}
	if(PinNum > 15 && PinNum < 24)
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	80 31       	cpi	r24, 0x10	; 16
     3ba:	c0 f1       	brcs	.+112    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	88 31       	cpi	r24, 0x18	; 24
     3c0:	a8 f5       	brcc	.+106    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	{
		if(PinValue == 1)
     3c2:	8a 81       	ldd	r24, Y+2	; 0x02
     3c4:	81 30       	cpi	r24, 0x01	; 1
     3c6:	b9 f4       	brne	.+46     	; 0x3f6 <DIO_WritePin+0x128>
		{
			Set_Bit( PORTC , (PinNum-16));
     3c8:	85 e3       	ldi	r24, 0x35	; 53
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	25 e3       	ldi	r18, 0x35	; 53
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	f9 01       	movw	r30, r18
     3d2:	20 81       	ld	r18, Z
     3d4:	62 2f       	mov	r22, r18
     3d6:	29 81       	ldd	r18, Y+1	; 0x01
     3d8:	22 2f       	mov	r18, r18
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	a9 01       	movw	r20, r18
     3de:	40 51       	subi	r20, 0x10	; 16
     3e0:	51 09       	sbc	r21, r1
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_WritePin+0x11e>
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
     3ec:	4a 95       	dec	r20
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_WritePin+0x11a>
     3f0:	26 2b       	or	r18, r22
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
     3f6:	8a 81       	ldd	r24, Y+2	; 0x02
     3f8:	88 23       	and	r24, r24
     3fa:	c1 f4       	brne	.+48     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		{
			Clear_Bit( PORTC , (PinNum-16));
     3fc:	85 e3       	ldi	r24, 0x35	; 53
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	25 e3       	ldi	r18, 0x35	; 53
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	f9 01       	movw	r30, r18
     406:	20 81       	ld	r18, Z
     408:	62 2f       	mov	r22, r18
     40a:	29 81       	ldd	r18, Y+1	; 0x01
     40c:	22 2f       	mov	r18, r18
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	a9 01       	movw	r20, r18
     412:	40 51       	subi	r20, 0x10	; 16
     414:	51 09       	sbc	r21, r1
     416:	21 e0       	ldi	r18, 0x01	; 1
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41c:	22 0f       	add	r18, r18
     41e:	33 1f       	adc	r19, r19
     420:	4a 95       	dec	r20
     422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     424:	20 95       	com	r18
     426:	26 23       	and	r18, r22
     428:	fc 01       	movw	r30, r24
     42a:	20 83       	st	Z, r18
		}
	}
	
	if(PinNum > 24 && PinNum < 32)
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	89 31       	cpi	r24, 0x19	; 25
     430:	c0 f1       	brcs	.+112    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	80 32       	cpi	r24, 0x20	; 32
     436:	a8 f5       	brcc	.+106    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
	{
			if(PinValue == 1)
     438:	8a 81       	ldd	r24, Y+2	; 0x02
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	b9 f4       	brne	.+46     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			{
				Set_Bit( PORTD , (PinNum-24));
     43e:	82 e3       	ldi	r24, 0x32	; 50
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	22 e3       	ldi	r18, 0x32	; 50
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	f9 01       	movw	r30, r18
     448:	20 81       	ld	r18, Z
     44a:	62 2f       	mov	r22, r18
     44c:	29 81       	ldd	r18, Y+1	; 0x01
     44e:	22 2f       	mov	r18, r18
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	a9 01       	movw	r20, r18
     454:	48 51       	subi	r20, 0x18	; 24
     456:	51 09       	sbc	r21, r1
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45e:	22 0f       	add	r18, r18
     460:	33 1f       	adc	r19, r19
     462:	4a 95       	dec	r20
     464:	e2 f7       	brpl	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     466:	26 2b       	or	r18, r22
     468:	fc 01       	movw	r30, r24
     46a:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
     46c:	8a 81       	ldd	r24, Y+2	; 0x02
     46e:	88 23       	and	r24, r24
     470:	c1 f4       	brne	.+48     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			{
				Clear_Bit( PORTD , (PinNum-24));
     472:	82 e3       	ldi	r24, 0x32	; 50
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	22 e3       	ldi	r18, 0x32	; 50
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	f9 01       	movw	r30, r18
     47c:	20 81       	ld	r18, Z
     47e:	62 2f       	mov	r22, r18
     480:	29 81       	ldd	r18, Y+1	; 0x01
     482:	22 2f       	mov	r18, r18
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	a9 01       	movw	r20, r18
     488:	48 51       	subi	r20, 0x18	; 24
     48a:	51 09       	sbc	r21, r1
     48c:	21 e0       	ldi	r18, 0x01	; 1
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	02 c0       	rjmp	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     492:	22 0f       	add	r18, r18
     494:	33 1f       	adc	r19, r19
     496:	4a 95       	dec	r20
     498:	e2 f7       	brpl	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     49a:	20 95       	com	r18
     49c:	26 23       	and	r18, r22
     49e:	fc 01       	movw	r30, r24
     4a0:	20 83       	st	Z, r18
			}
	}
}
     4a2:	00 00       	nop
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <DIO_SetPinDirection>:
/*
pindirection = 1 output
pindirection = 0 input
*/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <DIO_SetPinDirection+0x6>
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	89 83       	std	Y+1, r24	; 0x01
     4ba:	6a 83       	std	Y+2, r22	; 0x02
		if(PinNum >= 0 && PinNum < 8 )
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	88 30       	cpi	r24, 0x08	; 8
     4c0:	78 f5       	brcc	.+94     	; 0x520 <DIO_SetPinDirection+0x72>
		{
			if(PinDirection== 1)
     4c2:	8a 81       	ldd	r24, Y+2	; 0x02
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	a1 f4       	brne	.+40     	; 0x4f0 <DIO_SetPinDirection+0x42>
			{
				Set_Bit( DDRA , PinNum);
     4c8:	8a e3       	ldi	r24, 0x3A	; 58
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	2a e3       	ldi	r18, 0x3A	; 58
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	f9 01       	movw	r30, r18
     4d2:	20 81       	ld	r18, Z
     4d4:	62 2f       	mov	r22, r18
     4d6:	29 81       	ldd	r18, Y+1	; 0x01
     4d8:	42 2f       	mov	r20, r18
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	21 e0       	ldi	r18, 0x01	; 1
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_SetPinDirection+0x38>
     4e2:	22 0f       	add	r18, r18
     4e4:	33 1f       	adc	r19, r19
     4e6:	4a 95       	dec	r20
     4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_SetPinDirection+0x34>
     4ea:	26 2b       	or	r18, r22
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     4f0:	8a 81       	ldd	r24, Y+2	; 0x02
     4f2:	88 23       	and	r24, r24
     4f4:	a9 f4       	brne	.+42     	; 0x520 <DIO_SetPinDirection+0x72>
			{
				Clear_Bit( DDRA , PinNum);
     4f6:	8a e3       	ldi	r24, 0x3A	; 58
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	2a e3       	ldi	r18, 0x3A	; 58
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	f9 01       	movw	r30, r18
     500:	20 81       	ld	r18, Z
     502:	62 2f       	mov	r22, r18
     504:	29 81       	ldd	r18, Y+1	; 0x01
     506:	42 2f       	mov	r20, r18
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	21 e0       	ldi	r18, 0x01	; 1
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_SetPinDirection+0x66>
     510:	22 0f       	add	r18, r18
     512:	33 1f       	adc	r19, r19
     514:	4a 95       	dec	r20
     516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_SetPinDirection+0x62>
     518:	20 95       	com	r18
     51a:	26 23       	and	r18, r22
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 7 && PinNum < 16)
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	88 30       	cpi	r24, 0x08	; 8
     524:	c0 f1       	brcs	.+112    	; 0x596 <DIO_SetPinDirection+0xe8>
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	80 31       	cpi	r24, 0x10	; 16
     52a:	a8 f5       	brcc	.+106    	; 0x596 <DIO_SetPinDirection+0xe8>
		{
			if(PinDirection== 1)
     52c:	8a 81       	ldd	r24, Y+2	; 0x02
     52e:	81 30       	cpi	r24, 0x01	; 1
     530:	b9 f4       	brne	.+46     	; 0x560 <DIO_SetPinDirection+0xb2>
			{
				Set_Bit( DDRB , (PinNum-8));
     532:	87 e3       	ldi	r24, 0x37	; 55
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	27 e3       	ldi	r18, 0x37	; 55
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	f9 01       	movw	r30, r18
     53c:	20 81       	ld	r18, Z
     53e:	62 2f       	mov	r22, r18
     540:	29 81       	ldd	r18, Y+1	; 0x01
     542:	22 2f       	mov	r18, r18
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	a9 01       	movw	r20, r18
     548:	48 50       	subi	r20, 0x08	; 8
     54a:	51 09       	sbc	r21, r1
     54c:	21 e0       	ldi	r18, 0x01	; 1
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_SetPinDirection+0xa8>
     552:	22 0f       	add	r18, r18
     554:	33 1f       	adc	r19, r19
     556:	4a 95       	dec	r20
     558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_SetPinDirection+0xa4>
     55a:	26 2b       	or	r18, r22
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	88 23       	and	r24, r24
     564:	c1 f4       	brne	.+48     	; 0x596 <DIO_SetPinDirection+0xe8>
			{
				Clear_Bit( DDRB , (PinNum-8));
     566:	87 e3       	ldi	r24, 0x37	; 55
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	27 e3       	ldi	r18, 0x37	; 55
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	62 2f       	mov	r22, r18
     574:	29 81       	ldd	r18, Y+1	; 0x01
     576:	22 2f       	mov	r18, r18
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	a9 01       	movw	r20, r18
     57c:	48 50       	subi	r20, 0x08	; 8
     57e:	51 09       	sbc	r21, r1
     580:	21 e0       	ldi	r18, 0x01	; 1
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_SetPinDirection+0xdc>
     586:	22 0f       	add	r18, r18
     588:	33 1f       	adc	r19, r19
     58a:	4a 95       	dec	r20
     58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_SetPinDirection+0xd8>
     58e:	20 95       	com	r18
     590:	26 23       	and	r18, r22
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 15 && PinNum < 24)
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	80 31       	cpi	r24, 0x10	; 16
     59a:	c0 f1       	brcs	.+112    	; 0x60c <DIO_SetPinDirection+0x15e>
     59c:	89 81       	ldd	r24, Y+1	; 0x01
     59e:	88 31       	cpi	r24, 0x18	; 24
     5a0:	a8 f5       	brcc	.+106    	; 0x60c <DIO_SetPinDirection+0x15e>
		{
			if(PinDirection== 1)
     5a2:	8a 81       	ldd	r24, Y+2	; 0x02
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	b9 f4       	brne	.+46     	; 0x5d6 <DIO_SetPinDirection+0x128>
			{
				Set_Bit( DDRC , (PinNum-16));
     5a8:	84 e3       	ldi	r24, 0x34	; 52
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	24 e3       	ldi	r18, 0x34	; 52
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	f9 01       	movw	r30, r18
     5b2:	20 81       	ld	r18, Z
     5b4:	62 2f       	mov	r22, r18
     5b6:	29 81       	ldd	r18, Y+1	; 0x01
     5b8:	22 2f       	mov	r18, r18
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	a9 01       	movw	r20, r18
     5be:	40 51       	subi	r20, 0x10	; 16
     5c0:	51 09       	sbc	r21, r1
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_SetPinDirection+0x11e>
     5c8:	22 0f       	add	r18, r18
     5ca:	33 1f       	adc	r19, r19
     5cc:	4a 95       	dec	r20
     5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_SetPinDirection+0x11a>
     5d0:	26 2b       	or	r18, r22
     5d2:	fc 01       	movw	r30, r24
     5d4:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     5d6:	8a 81       	ldd	r24, Y+2	; 0x02
     5d8:	88 23       	and	r24, r24
     5da:	c1 f4       	brne	.+48     	; 0x60c <DIO_SetPinDirection+0x15e>
			{
				Clear_Bit( DDRC , (PinNum-16));
     5dc:	84 e3       	ldi	r24, 0x34	; 52
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	24 e3       	ldi	r18, 0x34	; 52
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	f9 01       	movw	r30, r18
     5e6:	20 81       	ld	r18, Z
     5e8:	62 2f       	mov	r22, r18
     5ea:	29 81       	ldd	r18, Y+1	; 0x01
     5ec:	22 2f       	mov	r18, r18
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	a9 01       	movw	r20, r18
     5f2:	40 51       	subi	r20, 0x10	; 16
     5f4:	51 09       	sbc	r21, r1
     5f6:	21 e0       	ldi	r18, 0x01	; 1
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_SetPinDirection+0x152>
     5fc:	22 0f       	add	r18, r18
     5fe:	33 1f       	adc	r19, r19
     600:	4a 95       	dec	r20
     602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_SetPinDirection+0x14e>
     604:	20 95       	com	r18
     606:	26 23       	and	r18, r22
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
			}
		}
		
		if(PinNum > 24 && PinNum < 32)
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	89 31       	cpi	r24, 0x19	; 25
     610:	c0 f1       	brcs	.+112    	; 0x682 <DIO_SetPinDirection+0x1d4>
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	80 32       	cpi	r24, 0x20	; 32
     616:	a8 f5       	brcc	.+106    	; 0x682 <DIO_SetPinDirection+0x1d4>
		{
			if(PinDirection== 1)
     618:	8a 81       	ldd	r24, Y+2	; 0x02
     61a:	81 30       	cpi	r24, 0x01	; 1
     61c:	b9 f4       	brne	.+46     	; 0x64c <DIO_SetPinDirection+0x19e>
			{
				Set_Bit( DDRD , (PinNum-24));
     61e:	81 e3       	ldi	r24, 0x31	; 49
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	21 e3       	ldi	r18, 0x31	; 49
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	20 81       	ld	r18, Z
     62a:	62 2f       	mov	r22, r18
     62c:	29 81       	ldd	r18, Y+1	; 0x01
     62e:	22 2f       	mov	r18, r18
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	a9 01       	movw	r20, r18
     634:	48 51       	subi	r20, 0x18	; 24
     636:	51 09       	sbc	r21, r1
     638:	21 e0       	ldi	r18, 0x01	; 1
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_SetPinDirection+0x194>
     63e:	22 0f       	add	r18, r18
     640:	33 1f       	adc	r19, r19
     642:	4a 95       	dec	r20
     644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_SetPinDirection+0x190>
     646:	26 2b       	or	r18, r22
     648:	fc 01       	movw	r30, r24
     64a:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	88 23       	and	r24, r24
     650:	c1 f4       	brne	.+48     	; 0x682 <DIO_SetPinDirection+0x1d4>
			{
				Clear_Bit( DDRD , (PinNum-24));
     652:	81 e3       	ldi	r24, 0x31	; 49
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	21 e3       	ldi	r18, 0x31	; 49
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	f9 01       	movw	r30, r18
     65c:	20 81       	ld	r18, Z
     65e:	62 2f       	mov	r22, r18
     660:	29 81       	ldd	r18, Y+1	; 0x01
     662:	22 2f       	mov	r18, r18
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	a9 01       	movw	r20, r18
     668:	48 51       	subi	r20, 0x18	; 24
     66a:	51 09       	sbc	r21, r1
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_SetPinDirection+0x1c8>
     672:	22 0f       	add	r18, r18
     674:	33 1f       	adc	r19, r19
     676:	4a 95       	dec	r20
     678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_SetPinDirection+0x1c4>
     67a:	20 95       	com	r18
     67c:	26 23       	and	r18, r22
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
			}
		}
}
     682:	00 00       	nop
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	00 d0       	rcall	.+0      	; 0x694 <DIO_ReadPin+0x6>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	8a 83       	std	Y+2, r24	; 0x02
		uint8 return_value=0;
     69a:	19 82       	std	Y+1, r1	; 0x01
		if(PinNum >= 0 && PinNum < 8 )
     69c:	8a 81       	ldd	r24, Y+2	; 0x02
     69e:	88 30       	cpi	r24, 0x08	; 8
     6a0:	d8 f4       	brcc	.+54     	; 0x6d8 <DIO_ReadPin+0x4a>
		{
			return_value = Get_Bit(PINA , PinNum);
     6a2:	89 e3       	ldi	r24, 0x39	; 57
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	fc 01       	movw	r30, r24
     6a8:	80 81       	ld	r24, Z
     6aa:	28 2f       	mov	r18, r24
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	8a 81       	ldd	r24, Y+2	; 0x02
     6b0:	48 2f       	mov	r20, r24
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_ReadPin+0x30>
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	4a 95       	dec	r20
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_ReadPin+0x2c>
     6c2:	82 23       	and	r24, r18
     6c4:	93 23       	and	r25, r19
     6c6:	2a 81       	ldd	r18, Y+2	; 0x02
     6c8:	22 2f       	mov	r18, r18
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_ReadPin+0x44>
     6ce:	95 95       	asr	r25
     6d0:	87 95       	ror	r24
     6d2:	2a 95       	dec	r18
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_ReadPin+0x40>
     6d6:	89 83       	std	Y+1, r24	; 0x01
		}
		if(PinNum > 7 && PinNum < 16)
     6d8:	8a 81       	ldd	r24, Y+2	; 0x02
     6da:	88 30       	cpi	r24, 0x08	; 8
     6dc:	18 f1       	brcs	.+70     	; 0x724 <DIO_ReadPin+0x96>
     6de:	8a 81       	ldd	r24, Y+2	; 0x02
     6e0:	80 31       	cpi	r24, 0x10	; 16
     6e2:	00 f5       	brcc	.+64     	; 0x724 <DIO_ReadPin+0x96>
		{
			return_value = Get_Bit(PINB , (PinNum-8));
     6e4:	86 e3       	ldi	r24, 0x36	; 54
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	fc 01       	movw	r30, r24
     6ea:	80 81       	ld	r24, Z
     6ec:	28 2f       	mov	r18, r24
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	8a 81       	ldd	r24, Y+2	; 0x02
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	ac 01       	movw	r20, r24
     6f8:	48 50       	subi	r20, 0x08	; 8
     6fa:	51 09       	sbc	r21, r1
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_ReadPin+0x78>
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	4a 95       	dec	r20
     708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_ReadPin+0x74>
     70a:	82 23       	and	r24, r18
     70c:	93 23       	and	r25, r19
     70e:	2a 81       	ldd	r18, Y+2	; 0x02
     710:	22 2f       	mov	r18, r18
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	28 50       	subi	r18, 0x08	; 8
     716:	31 09       	sbc	r19, r1
     718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_ReadPin+0x90>
     71a:	95 95       	asr	r25
     71c:	87 95       	ror	r24
     71e:	2a 95       	dec	r18
     720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_ReadPin+0x8c>
     722:	89 83       	std	Y+1, r24	; 0x01
		}
		if(PinNum > 15 && PinNum < 24)
     724:	8a 81       	ldd	r24, Y+2	; 0x02
     726:	80 31       	cpi	r24, 0x10	; 16
     728:	18 f1       	brcs	.+70     	; 0x770 <DIO_ReadPin+0xe2>
     72a:	8a 81       	ldd	r24, Y+2	; 0x02
     72c:	88 31       	cpi	r24, 0x18	; 24
     72e:	00 f5       	brcc	.+64     	; 0x770 <DIO_ReadPin+0xe2>
		{
			return_value = Get_Bit(PINC , (PinNum-16));
     730:	83 e3       	ldi	r24, 0x33	; 51
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	fc 01       	movw	r30, r24
     736:	80 81       	ld	r24, Z
     738:	28 2f       	mov	r18, r24
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	8a 81       	ldd	r24, Y+2	; 0x02
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	ac 01       	movw	r20, r24
     744:	40 51       	subi	r20, 0x10	; 16
     746:	51 09       	sbc	r21, r1
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_ReadPin+0xc4>
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	4a 95       	dec	r20
     754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_ReadPin+0xc0>
     756:	82 23       	and	r24, r18
     758:	93 23       	and	r25, r19
     75a:	2a 81       	ldd	r18, Y+2	; 0x02
     75c:	22 2f       	mov	r18, r18
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	20 51       	subi	r18, 0x10	; 16
     762:	31 09       	sbc	r19, r1
     764:	02 c0       	rjmp	.+4      	; 0x76a <DIO_ReadPin+0xdc>
     766:	95 95       	asr	r25
     768:	87 95       	ror	r24
     76a:	2a 95       	dec	r18
     76c:	e2 f7       	brpl	.-8      	; 0x766 <DIO_ReadPin+0xd8>
     76e:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if(PinNum > 24 && PinNum < 32)
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	89 31       	cpi	r24, 0x19	; 25
     774:	18 f1       	brcs	.+70     	; 0x7bc <DIO_ReadPin+0x12e>
     776:	8a 81       	ldd	r24, Y+2	; 0x02
     778:	80 32       	cpi	r24, 0x20	; 32
     77a:	00 f5       	brcc	.+64     	; 0x7bc <DIO_ReadPin+0x12e>
		{
			return_value = Get_Bit(PIND , (PinNum-24));
     77c:	80 e3       	ldi	r24, 0x30	; 48
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	fc 01       	movw	r30, r24
     782:	80 81       	ld	r24, Z
     784:	28 2f       	mov	r18, r24
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	88 2f       	mov	r24, r24
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	ac 01       	movw	r20, r24
     790:	48 51       	subi	r20, 0x18	; 24
     792:	51 09       	sbc	r21, r1
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_ReadPin+0x110>
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	4a 95       	dec	r20
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <DIO_ReadPin+0x10c>
     7a2:	82 23       	and	r24, r18
     7a4:	93 23       	and	r25, r19
     7a6:	2a 81       	ldd	r18, Y+2	; 0x02
     7a8:	22 2f       	mov	r18, r18
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	28 51       	subi	r18, 0x18	; 24
     7ae:	31 09       	sbc	r19, r1
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_ReadPin+0x128>
     7b2:	95 95       	asr	r25
     7b4:	87 95       	ror	r24
     7b6:	2a 95       	dec	r18
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_ReadPin+0x124>
     7ba:	89 83       	std	Y+1, r24	; 0x01
		}
		return return_value;
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <Keypad_init>:

#include "Keypad.h"
#include "Keypad_cfg.h"

void Keypad_init()
{
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
	//Coloumns INPUT
	DIO_SetPinDirection(Keypad_Coloumn1_PIN,INPUT);
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	85 e1       	ldi	r24, 0x15	; 21
     7d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_Coloumn2_PIN,INPUT);
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	86 e1       	ldi	r24, 0x16	; 22
     7dc:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_Coloumn3_PIN,INPUT);
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	87 e1       	ldi	r24, 0x17	; 23
     7e4:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	
	//PUll UP Column
	DIO_WritePin(Keypad_Coloumn1_PIN,HIGH);
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	85 e1       	ldi	r24, 0x15	; 21
     7ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_Coloumn2_PIN,HIGH);
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	86 e1       	ldi	r24, 0x16	; 22
     7f4:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_Coloumn3_PIN,HIGH);
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	87 e1       	ldi	r24, 0x17	; 23
     7fc:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	
	//ROWS OUTPUT
	DIO_SetPinDirection(Keypad_ROW1_PIN,OUTPUT);
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	82 e1       	ldi	r24, 0x12	; 18
     804:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_ROW2_PIN,OUTPUT);
     808:	61 e0       	ldi	r22, 0x01	; 1
     80a:	83 e1       	ldi	r24, 0x13	; 19
     80c:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_ROW3_PIN,OUTPUT);
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	84 e1       	ldi	r24, 0x14	; 20
     814:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>

}
     818:	00 00       	nop
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <Keypad_getPressedKey>:

uint8 Keypad_getPressedKey()
{
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	1f 92       	push	r1
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
	uint8 Pushed_Button = 0 ;
     82a:	19 82       	std	Y+1, r1	; 0x01
	DIO_WritePin(Keypad_ROW1_PIN,LOW);
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	82 e1       	ldi	r24, 0x12	; 18
     830:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW2_PIN,HIGH);
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	83 e1       	ldi	r24, 0x13	; 19
     838:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW3_PIN,HIGH);
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	84 e1       	ldi	r24, 0x14	; 20
     840:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     844:	85 e1       	ldi	r24, 0x15	; 21
     846:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     84a:	88 23       	and	r24, r24
     84c:	19 f4       	brne	.+6      	; 0x854 <Keypad_getPressedKey+0x34>
	{
		Pushed_Button = 1;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	0f c0       	rjmp	.+30     	; 0x872 <__stack+0x13>
	}
	else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     854:	86 e1       	ldi	r24, 0x16	; 22
     856:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     85a:	88 23       	and	r24, r24
     85c:	19 f4       	brne	.+6      	; 0x864 <__stack+0x5>
	{
		Pushed_Button = 2;
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	89 83       	std	Y+1, r24	; 0x01
     862:	07 c0       	rjmp	.+14     	; 0x872 <__stack+0x13>
	}
	else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     864:	87 e1       	ldi	r24, 0x17	; 23
     866:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     86a:	88 23       	and	r24, r24
     86c:	11 f4       	brne	.+4      	; 0x872 <__stack+0x13>
	{
		Pushed_Button = 3;
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_WritePin(Keypad_ROW1_PIN,HIGH);
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	82 e1       	ldi	r24, 0x12	; 18
     876:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW2_PIN,LOW);
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	83 e1       	ldi	r24, 0x13	; 19
     87e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW3_PIN,HIGH);
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	84 e1       	ldi	r24, 0x14	; 20
     886:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     88a:	85 e1       	ldi	r24, 0x15	; 21
     88c:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     890:	88 23       	and	r24, r24
     892:	19 f4       	brne	.+6      	; 0x89a <__stack+0x3b>
	{
			Pushed_Button = 4;
     894:	84 e0       	ldi	r24, 0x04	; 4
     896:	89 83       	std	Y+1, r24	; 0x01
     898:	0f c0       	rjmp	.+30     	; 0x8b8 <__stack+0x59>
	}
	else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     89a:	86 e1       	ldi	r24, 0x16	; 22
     89c:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8a0:	88 23       	and	r24, r24
     8a2:	19 f4       	brne	.+6      	; 0x8aa <__stack+0x4b>
	{
			Pushed_Button = 5;
     8a4:	85 e0       	ldi	r24, 0x05	; 5
     8a6:	89 83       	std	Y+1, r24	; 0x01
     8a8:	07 c0       	rjmp	.+14     	; 0x8b8 <__stack+0x59>
	}
	else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     8aa:	87 e1       	ldi	r24, 0x17	; 23
     8ac:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8b0:	88 23       	and	r24, r24
     8b2:	11 f4       	brne	.+4      	; 0x8b8 <__stack+0x59>
	{
			Pushed_Button = 6;
     8b4:	86 e0       	ldi	r24, 0x06	; 6
     8b6:	89 83       	std	Y+1, r24	; 0x01
	}
		DIO_WritePin(Keypad_ROW1_PIN,HIGH);
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	82 e1       	ldi	r24, 0x12	; 18
     8bc:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(Keypad_ROW2_PIN,HIGH);
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	83 e1       	ldi	r24, 0x13	; 19
     8c4:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(Keypad_ROW3_PIN,LOW);
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	84 e1       	ldi	r24, 0x14	; 20
     8cc:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     8d0:	85 e1       	ldi	r24, 0x15	; 21
     8d2:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8d6:	88 23       	and	r24, r24
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__stack+0x81>
		{
			Pushed_Button = 7;
     8da:	87 e0       	ldi	r24, 0x07	; 7
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	0f c0       	rjmp	.+30     	; 0x8fe <__stack+0x9f>
		}
		else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     8e0:	86 e1       	ldi	r24, 0x16	; 22
     8e2:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8e6:	88 23       	and	r24, r24
     8e8:	19 f4       	brne	.+6      	; 0x8f0 <__stack+0x91>
		{
			Pushed_Button = 8;
     8ea:	88 e0       	ldi	r24, 0x08	; 8
     8ec:	89 83       	std	Y+1, r24	; 0x01
     8ee:	07 c0       	rjmp	.+14     	; 0x8fe <__stack+0x9f>
		}
		else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     8f0:	87 e1       	ldi	r24, 0x17	; 23
     8f2:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8f6:	88 23       	and	r24, r24
     8f8:	11 f4       	brne	.+4      	; 0x8fe <__stack+0x9f>
		{
			Pushed_Button = 9;
     8fa:	89 e0       	ldi	r24, 0x09	; 9
     8fc:	89 83       	std	Y+1, r24	; 0x01
		}
		return Pushed_Button;
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
	
     900:	0f 90       	pop	r0
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <main>:
#include "Keypad.h"
#include "avr/delay.h"


int main(void)
{
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	cb 50       	subi	r28, 0x0B	; 11
     916:	d1 40       	sbci	r29, 0x01	; 1
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	de bf       	out	0x3e, r29	; 62
     91e:	0f be       	out	0x3f, r0	; 63
     920:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	BCDSevegments_Init();
     922:	0e 94 36 00 	call	0x6c	; 0x6c <BCDSevegments_Init>
	Keypad_init();
     926:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <Keypad_init>
    while (1) 
    {
		uint8 key = Keypad_getPressedKey();
     92a:	0e 94 10 04 	call	0x820	; 0x820 <Keypad_getPressedKey>
     92e:	89 83       	std	Y+1, r24	; 0x01
		if (key == 1)
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	81 30       	cpi	r24, 0x01	; 1
     934:	09 f0       	breq	.+2      	; 0x938 <main+0x30>
     936:	8b c1       	rjmp	.+790    	; 0xc4e <main+0x346>
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a8 e4       	ldi	r26, 0x48	; 72
     93e:	b2 e4       	ldi	r27, 0x42	; 66
     940:	8e 83       	std	Y+6, r24	; 0x06
     942:	9f 83       	std	Y+7, r25	; 0x07
     944:	a8 87       	std	Y+8, r26	; 0x08
     946:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     948:	8e 01       	movw	r16, r28
     94a:	08 5a       	subi	r16, 0xA8	; 168
     94c:	1f 4f       	sbci	r17, 0xFF	; 255
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	4a e7       	ldi	r20, 0x7A	; 122
     954:	53 e4       	ldi	r21, 0x43	; 67
     956:	6e 81       	ldd	r22, Y+6	; 0x06
     958:	7f 81       	ldd	r23, Y+7	; 0x07
     95a:	88 85       	ldd	r24, Y+8	; 0x08
     95c:	99 85       	ldd	r25, Y+9	; 0x09
     95e:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
     962:	dc 01       	movw	r26, r24
     964:	cb 01       	movw	r24, r22
     966:	f8 01       	movw	r30, r16
     968:	80 83       	st	Z, r24
     96a:	91 83       	std	Z+1, r25	; 0x01
     96c:	a2 83       	std	Z+2, r26	; 0x02
     96e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     970:	ce 01       	movw	r24, r28
     972:	88 5a       	subi	r24, 0xA8	; 168
     974:	9f 4f       	sbci	r25, 0xFF	; 255
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e8       	ldi	r20, 0x80	; 128
     97c:	5f e3       	ldi	r21, 0x3F	; 63
     97e:	fc 01       	movw	r30, r24
     980:	60 81       	ld	r22, Z
     982:	71 81       	ldd	r23, Z+1	; 0x01
     984:	82 81       	ldd	r24, Z+2	; 0x02
     986:	93 81       	ldd	r25, Z+3	; 0x03
     988:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
     98c:	88 23       	and	r24, r24
     98e:	4c f4       	brge	.+18     	; 0x9a2 <main+0x9a>
		__ticks = 1;
     990:	ce 01       	movw	r24, r28
     992:	84 5a       	subi	r24, 0xA4	; 164
     994:	9f 4f       	sbci	r25, 0xFF	; 255
     996:	21 e0       	ldi	r18, 0x01	; 1
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	fc 01       	movw	r30, r24
     99c:	31 83       	std	Z+1, r19	; 0x01
     99e:	20 83       	st	Z, r18
     9a0:	69 c0       	rjmp	.+210    	; 0xa74 <main+0x16c>
	else if (__tmp > 65535)
     9a2:	ce 01       	movw	r24, r28
     9a4:	88 5a       	subi	r24, 0xA8	; 168
     9a6:	9f 4f       	sbci	r25, 0xFF	; 255
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	3f ef       	ldi	r19, 0xFF	; 255
     9ac:	4f e7       	ldi	r20, 0x7F	; 127
     9ae:	57 e4       	ldi	r21, 0x47	; 71
     9b0:	fc 01       	movw	r30, r24
     9b2:	60 81       	ld	r22, Z
     9b4:	71 81       	ldd	r23, Z+1	; 0x01
     9b6:	82 81       	ldd	r24, Z+2	; 0x02
     9b8:	93 81       	ldd	r25, Z+3	; 0x03
     9ba:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
     9be:	18 16       	cp	r1, r24
     9c0:	0c f0       	brlt	.+2      	; 0x9c4 <main+0xbc>
     9c2:	46 c0       	rjmp	.+140    	; 0xa50 <main+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	40 e2       	ldi	r20, 0x20	; 32
     9ca:	51 e4       	ldi	r21, 0x41	; 65
     9cc:	6e 81       	ldd	r22, Y+6	; 0x06
     9ce:	7f 81       	ldd	r23, Y+7	; 0x07
     9d0:	88 85       	ldd	r24, Y+8	; 0x08
     9d2:	99 85       	ldd	r25, Y+9	; 0x09
     9d4:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
     9d8:	dc 01       	movw	r26, r24
     9da:	cb 01       	movw	r24, r22
     9dc:	8e 01       	movw	r16, r28
     9de:	04 5a       	subi	r16, 0xA4	; 164
     9e0:	1f 4f       	sbci	r17, 0xFF	; 255
     9e2:	bc 01       	movw	r22, r24
     9e4:	cd 01       	movw	r24, r26
     9e6:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
     9ea:	dc 01       	movw	r26, r24
     9ec:	cb 01       	movw	r24, r22
     9ee:	f8 01       	movw	r30, r16
     9f0:	91 83       	std	Z+1, r25	; 0x01
     9f2:	80 83       	st	Z, r24
     9f4:	24 c0       	rjmp	.+72     	; 0xa3e <main+0x136>
     9f6:	ce 01       	movw	r24, r28
     9f8:	82 5a       	subi	r24, 0xA2	; 162
     9fa:	9f 4f       	sbci	r25, 0xFF	; 255
     9fc:	29 e1       	ldi	r18, 0x19	; 25
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	fc 01       	movw	r30, r24
     a02:	31 83       	std	Z+1, r19	; 0x01
     a04:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a06:	ce 01       	movw	r24, r28
     a08:	82 5a       	subi	r24, 0xA2	; 162
     a0a:	9f 4f       	sbci	r25, 0xFF	; 255
     a0c:	fc 01       	movw	r30, r24
     a0e:	80 81       	ld	r24, Z
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	f1 f7       	brne	.-4      	; 0xa12 <main+0x10a>
     a16:	9e 01       	movw	r18, r28
     a18:	22 5a       	subi	r18, 0xA2	; 162
     a1a:	3f 4f       	sbci	r19, 0xFF	; 255
     a1c:	f9 01       	movw	r30, r18
     a1e:	91 83       	std	Z+1, r25	; 0x01
     a20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a22:	ce 01       	movw	r24, r28
     a24:	84 5a       	subi	r24, 0xA4	; 164
     a26:	9f 4f       	sbci	r25, 0xFF	; 255
     a28:	9e 01       	movw	r18, r28
     a2a:	24 5a       	subi	r18, 0xA4	; 164
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	f9 01       	movw	r30, r18
     a30:	20 81       	ld	r18, Z
     a32:	31 81       	ldd	r19, Z+1	; 0x01
     a34:	21 50       	subi	r18, 0x01	; 1
     a36:	31 09       	sbc	r19, r1
     a38:	fc 01       	movw	r30, r24
     a3a:	31 83       	std	Z+1, r19	; 0x01
     a3c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a3e:	ce 01       	movw	r24, r28
     a40:	84 5a       	subi	r24, 0xA4	; 164
     a42:	9f 4f       	sbci	r25, 0xFF	; 255
     a44:	fc 01       	movw	r30, r24
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	89 2b       	or	r24, r25
     a4c:	a1 f6       	brne	.-88     	; 0x9f6 <main+0xee>
     a4e:	2c c0       	rjmp	.+88     	; 0xaa8 <main+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a50:	8e 01       	movw	r16, r28
     a52:	04 5a       	subi	r16, 0xA4	; 164
     a54:	1f 4f       	sbci	r17, 0xFF	; 255
     a56:	ce 01       	movw	r24, r28
     a58:	88 5a       	subi	r24, 0xA8	; 168
     a5a:	9f 4f       	sbci	r25, 0xFF	; 255
     a5c:	fc 01       	movw	r30, r24
     a5e:	60 81       	ld	r22, Z
     a60:	71 81       	ldd	r23, Z+1	; 0x01
     a62:	82 81       	ldd	r24, Z+2	; 0x02
     a64:	93 81       	ldd	r25, Z+3	; 0x03
     a66:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
     a6a:	dc 01       	movw	r26, r24
     a6c:	cb 01       	movw	r24, r22
     a6e:	f8 01       	movw	r30, r16
     a70:	91 83       	std	Z+1, r25	; 0x01
     a72:	80 83       	st	Z, r24
     a74:	ce 01       	movw	r24, r28
     a76:	80 5a       	subi	r24, 0xA0	; 160
     a78:	9f 4f       	sbci	r25, 0xFF	; 255
     a7a:	9e 01       	movw	r18, r28
     a7c:	24 5a       	subi	r18, 0xA4	; 164
     a7e:	3f 4f       	sbci	r19, 0xFF	; 255
     a80:	f9 01       	movw	r30, r18
     a82:	20 81       	ld	r18, Z
     a84:	31 81       	ldd	r19, Z+1	; 0x01
     a86:	fc 01       	movw	r30, r24
     a88:	31 83       	std	Z+1, r19	; 0x01
     a8a:	20 83       	st	Z, r18
     a8c:	ce 01       	movw	r24, r28
     a8e:	80 5a       	subi	r24, 0xA0	; 160
     a90:	9f 4f       	sbci	r25, 0xFF	; 255
     a92:	fc 01       	movw	r30, r24
     a94:	80 81       	ld	r24, Z
     a96:	91 81       	ldd	r25, Z+1	; 0x01
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	f1 f7       	brne	.-4      	; 0xa98 <main+0x190>
     a9c:	9e 01       	movw	r18, r28
     a9e:	20 5a       	subi	r18, 0xA0	; 160
     aa0:	3f 4f       	sbci	r19, 0xFF	; 255
     aa2:	f9 01       	movw	r30, r18
     aa4:	91 83       	std	Z+1, r25	; 0x01
     aa6:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(ONE);
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(TWO);
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(THREE);
     ab4:	83 e0       	ldi	r24, 0x03	; 3
     ab6:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(FOUR);
     aba:	84 e0       	ldi	r24, 0x04	; 4
     abc:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			//display one
			BCDSevegments_displayNo(ONE);
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
     ac6:	9e 01       	movw	r18, r28
     ac8:	26 5b       	subi	r18, 0xB6	; 182
     aca:	3f 4f       	sbci	r19, 0xFF	; 255
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	a8 e4       	ldi	r26, 0x48	; 72
     ad2:	b2 e4       	ldi	r27, 0x42	; 66
     ad4:	f9 01       	movw	r30, r18
     ad6:	80 83       	st	Z, r24
     ad8:	91 83       	std	Z+1, r25	; 0x01
     ada:	a2 83       	std	Z+2, r26	; 0x02
     adc:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ade:	8e 01       	movw	r16, r28
     ae0:	02 5b       	subi	r16, 0xB2	; 178
     ae2:	1f 4f       	sbci	r17, 0xFF	; 255
     ae4:	ce 01       	movw	r24, r28
     ae6:	86 5b       	subi	r24, 0xB6	; 182
     ae8:	9f 4f       	sbci	r25, 0xFF	; 255
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	4a e7       	ldi	r20, 0x7A	; 122
     af0:	53 e4       	ldi	r21, 0x43	; 67
     af2:	fc 01       	movw	r30, r24
     af4:	60 81       	ld	r22, Z
     af6:	71 81       	ldd	r23, Z+1	; 0x01
     af8:	82 81       	ldd	r24, Z+2	; 0x02
     afa:	93 81       	ldd	r25, Z+3	; 0x03
     afc:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
     b00:	dc 01       	movw	r26, r24
     b02:	cb 01       	movw	r24, r22
     b04:	f8 01       	movw	r30, r16
     b06:	80 83       	st	Z, r24
     b08:	91 83       	std	Z+1, r25	; 0x01
     b0a:	a2 83       	std	Z+2, r26	; 0x02
     b0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b0e:	ce 01       	movw	r24, r28
     b10:	82 5b       	subi	r24, 0xB2	; 178
     b12:	9f 4f       	sbci	r25, 0xFF	; 255
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	40 e8       	ldi	r20, 0x80	; 128
     b1a:	5f e3       	ldi	r21, 0x3F	; 63
     b1c:	fc 01       	movw	r30, r24
     b1e:	60 81       	ld	r22, Z
     b20:	71 81       	ldd	r23, Z+1	; 0x01
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	93 81       	ldd	r25, Z+3	; 0x03
     b26:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
     b2a:	88 23       	and	r24, r24
     b2c:	4c f4       	brge	.+18     	; 0xb40 <main+0x238>
		__ticks = 1;
     b2e:	ce 01       	movw	r24, r28
     b30:	8e 5a       	subi	r24, 0xAE	; 174
     b32:	9f 4f       	sbci	r25, 0xFF	; 255
     b34:	21 e0       	ldi	r18, 0x01	; 1
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	fc 01       	movw	r30, r24
     b3a:	31 83       	std	Z+1, r19	; 0x01
     b3c:	20 83       	st	Z, r18
     b3e:	6d c0       	rjmp	.+218    	; 0xc1a <main+0x312>
	else if (__tmp > 65535)
     b40:	ce 01       	movw	r24, r28
     b42:	82 5b       	subi	r24, 0xB2	; 178
     b44:	9f 4f       	sbci	r25, 0xFF	; 255
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	3f ef       	ldi	r19, 0xFF	; 255
     b4a:	4f e7       	ldi	r20, 0x7F	; 127
     b4c:	57 e4       	ldi	r21, 0x47	; 71
     b4e:	fc 01       	movw	r30, r24
     b50:	60 81       	ld	r22, Z
     b52:	71 81       	ldd	r23, Z+1	; 0x01
     b54:	82 81       	ldd	r24, Z+2	; 0x02
     b56:	93 81       	ldd	r25, Z+3	; 0x03
     b58:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
     b5c:	18 16       	cp	r1, r24
     b5e:	0c f0       	brlt	.+2      	; 0xb62 <main+0x25a>
     b60:	4a c0       	rjmp	.+148    	; 0xbf6 <main+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b62:	ce 01       	movw	r24, r28
     b64:	86 5b       	subi	r24, 0xB6	; 182
     b66:	9f 4f       	sbci	r25, 0xFF	; 255
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e2       	ldi	r20, 0x20	; 32
     b6e:	51 e4       	ldi	r21, 0x41	; 65
     b70:	fc 01       	movw	r30, r24
     b72:	60 81       	ld	r22, Z
     b74:	71 81       	ldd	r23, Z+1	; 0x01
     b76:	82 81       	ldd	r24, Z+2	; 0x02
     b78:	93 81       	ldd	r25, Z+3	; 0x03
     b7a:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
     b7e:	dc 01       	movw	r26, r24
     b80:	cb 01       	movw	r24, r22
     b82:	8e 01       	movw	r16, r28
     b84:	0e 5a       	subi	r16, 0xAE	; 174
     b86:	1f 4f       	sbci	r17, 0xFF	; 255
     b88:	bc 01       	movw	r22, r24
     b8a:	cd 01       	movw	r24, r26
     b8c:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	f8 01       	movw	r30, r16
     b96:	91 83       	std	Z+1, r25	; 0x01
     b98:	80 83       	st	Z, r24
     b9a:	24 c0       	rjmp	.+72     	; 0xbe4 <main+0x2dc>
     b9c:	ce 01       	movw	r24, r28
     b9e:	8c 5a       	subi	r24, 0xAC	; 172
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	29 e1       	ldi	r18, 0x19	; 25
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	fc 01       	movw	r30, r24
     ba8:	31 83       	std	Z+1, r19	; 0x01
     baa:	20 83       	st	Z, r18
     bac:	ce 01       	movw	r24, r28
     bae:	8c 5a       	subi	r24, 0xAC	; 172
     bb0:	9f 4f       	sbci	r25, 0xFF	; 255
     bb2:	fc 01       	movw	r30, r24
     bb4:	80 81       	ld	r24, Z
     bb6:	91 81       	ldd	r25, Z+1	; 0x01
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	f1 f7       	brne	.-4      	; 0xbb8 <main+0x2b0>
     bbc:	9e 01       	movw	r18, r28
     bbe:	2c 5a       	subi	r18, 0xAC	; 172
     bc0:	3f 4f       	sbci	r19, 0xFF	; 255
     bc2:	f9 01       	movw	r30, r18
     bc4:	91 83       	std	Z+1, r25	; 0x01
     bc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bc8:	ce 01       	movw	r24, r28
     bca:	8e 5a       	subi	r24, 0xAE	; 174
     bcc:	9f 4f       	sbci	r25, 0xFF	; 255
     bce:	9e 01       	movw	r18, r28
     bd0:	2e 5a       	subi	r18, 0xAE	; 174
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	f9 01       	movw	r30, r18
     bd6:	20 81       	ld	r18, Z
     bd8:	31 81       	ldd	r19, Z+1	; 0x01
     bda:	21 50       	subi	r18, 0x01	; 1
     bdc:	31 09       	sbc	r19, r1
     bde:	fc 01       	movw	r30, r24
     be0:	31 83       	std	Z+1, r19	; 0x01
     be2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     be4:	ce 01       	movw	r24, r28
     be6:	8e 5a       	subi	r24, 0xAE	; 174
     be8:	9f 4f       	sbci	r25, 0xFF	; 255
     bea:	fc 01       	movw	r30, r24
     bec:	80 81       	ld	r24, Z
     bee:	91 81       	ldd	r25, Z+1	; 0x01
     bf0:	89 2b       	or	r24, r25
     bf2:	a1 f6       	brne	.-88     	; 0xb9c <main+0x294>
     bf4:	2c c0       	rjmp	.+88     	; 0xc4e <main+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf6:	8e 01       	movw	r16, r28
     bf8:	0e 5a       	subi	r16, 0xAE	; 174
     bfa:	1f 4f       	sbci	r17, 0xFF	; 255
     bfc:	ce 01       	movw	r24, r28
     bfe:	82 5b       	subi	r24, 0xB2	; 178
     c00:	9f 4f       	sbci	r25, 0xFF	; 255
     c02:	fc 01       	movw	r30, r24
     c04:	60 81       	ld	r22, Z
     c06:	71 81       	ldd	r23, Z+1	; 0x01
     c08:	82 81       	ldd	r24, Z+2	; 0x02
     c0a:	93 81       	ldd	r25, Z+3	; 0x03
     c0c:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	f8 01       	movw	r30, r16
     c16:	91 83       	std	Z+1, r25	; 0x01
     c18:	80 83       	st	Z, r24
     c1a:	ce 01       	movw	r24, r28
     c1c:	8a 5a       	subi	r24, 0xAA	; 170
     c1e:	9f 4f       	sbci	r25, 0xFF	; 255
     c20:	9e 01       	movw	r18, r28
     c22:	2e 5a       	subi	r18, 0xAE	; 174
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	f9 01       	movw	r30, r18
     c28:	20 81       	ld	r18, Z
     c2a:	31 81       	ldd	r19, Z+1	; 0x01
     c2c:	fc 01       	movw	r30, r24
     c2e:	31 83       	std	Z+1, r19	; 0x01
     c30:	20 83       	st	Z, r18
     c32:	ce 01       	movw	r24, r28
     c34:	8a 5a       	subi	r24, 0xAA	; 170
     c36:	9f 4f       	sbci	r25, 0xFF	; 255
     c38:	fc 01       	movw	r30, r24
     c3a:	80 81       	ld	r24, Z
     c3c:	91 81       	ldd	r25, Z+1	; 0x01
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	f1 f7       	brne	.-4      	; 0xc3e <main+0x336>
     c42:	9e 01       	movw	r18, r28
     c44:	2a 5a       	subi	r18, 0xAA	; 170
     c46:	3f 4f       	sbci	r19, 0xFF	; 255
     c48:	f9 01       	movw	r30, r18
     c4a:	91 83       	std	Z+1, r25	; 0x01
     c4c:	80 83       	st	Z, r24
			_delay_ms(50);
		}
		if(key == 2)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	82 30       	cpi	r24, 0x02	; 2
     c52:	09 f0       	breq	.+2      	; 0xc56 <main+0x34e>
     c54:	7f c1       	rjmp	.+766    	; 0xf54 <main+0x64c>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a8 e4       	ldi	r26, 0x48	; 72
     c5c:	b2 e4       	ldi	r27, 0x42	; 66
     c5e:	8e 87       	std	Y+14, r24	; 0x0e
     c60:	9f 87       	std	Y+15, r25	; 0x0f
     c62:	a8 8b       	std	Y+16, r26	; 0x10
     c64:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c66:	8e 01       	movw	r16, r28
     c68:	04 59       	subi	r16, 0x94	; 148
     c6a:	1f 4f       	sbci	r17, 0xFF	; 255
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	4a e7       	ldi	r20, 0x7A	; 122
     c72:	53 e4       	ldi	r21, 0x43	; 67
     c74:	6e 85       	ldd	r22, Y+14	; 0x0e
     c76:	7f 85       	ldd	r23, Y+15	; 0x0f
     c78:	88 89       	ldd	r24, Y+16	; 0x10
     c7a:	99 89       	ldd	r25, Y+17	; 0x11
     c7c:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	f8 01       	movw	r30, r16
     c86:	80 83       	st	Z, r24
     c88:	91 83       	std	Z+1, r25	; 0x01
     c8a:	a2 83       	std	Z+2, r26	; 0x02
     c8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c8e:	ce 01       	movw	r24, r28
     c90:	84 59       	subi	r24, 0x94	; 148
     c92:	9f 4f       	sbci	r25, 0xFF	; 255
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	40 e8       	ldi	r20, 0x80	; 128
     c9a:	5f e3       	ldi	r21, 0x3F	; 63
     c9c:	fc 01       	movw	r30, r24
     c9e:	60 81       	ld	r22, Z
     ca0:	71 81       	ldd	r23, Z+1	; 0x01
     ca2:	82 81       	ldd	r24, Z+2	; 0x02
     ca4:	93 81       	ldd	r25, Z+3	; 0x03
     ca6:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
     caa:	88 23       	and	r24, r24
     cac:	4c f4       	brge	.+18     	; 0xcc0 <main+0x3b8>
		__ticks = 1;
     cae:	ce 01       	movw	r24, r28
     cb0:	80 59       	subi	r24, 0x90	; 144
     cb2:	9f 4f       	sbci	r25, 0xFF	; 255
     cb4:	21 e0       	ldi	r18, 0x01	; 1
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	fc 01       	movw	r30, r24
     cba:	31 83       	std	Z+1, r19	; 0x01
     cbc:	20 83       	st	Z, r18
     cbe:	69 c0       	rjmp	.+210    	; 0xd92 <main+0x48a>
	else if (__tmp > 65535)
     cc0:	ce 01       	movw	r24, r28
     cc2:	84 59       	subi	r24, 0x94	; 148
     cc4:	9f 4f       	sbci	r25, 0xFF	; 255
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	3f ef       	ldi	r19, 0xFF	; 255
     cca:	4f e7       	ldi	r20, 0x7F	; 127
     ccc:	57 e4       	ldi	r21, 0x47	; 71
     cce:	fc 01       	movw	r30, r24
     cd0:	60 81       	ld	r22, Z
     cd2:	71 81       	ldd	r23, Z+1	; 0x01
     cd4:	82 81       	ldd	r24, Z+2	; 0x02
     cd6:	93 81       	ldd	r25, Z+3	; 0x03
     cd8:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
     cdc:	18 16       	cp	r1, r24
     cde:	0c f0       	brlt	.+2      	; 0xce2 <main+0x3da>
     ce0:	46 c0       	rjmp	.+140    	; 0xd6e <main+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	40 e2       	ldi	r20, 0x20	; 32
     ce8:	51 e4       	ldi	r21, 0x41	; 65
     cea:	6e 85       	ldd	r22, Y+14	; 0x0e
     cec:	7f 85       	ldd	r23, Y+15	; 0x0f
     cee:	88 89       	ldd	r24, Y+16	; 0x10
     cf0:	99 89       	ldd	r25, Y+17	; 0x11
     cf2:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	8e 01       	movw	r16, r28
     cfc:	00 59       	subi	r16, 0x90	; 144
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
     d00:	bc 01       	movw	r22, r24
     d02:	cd 01       	movw	r24, r26
     d04:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	f8 01       	movw	r30, r16
     d0e:	91 83       	std	Z+1, r25	; 0x01
     d10:	80 83       	st	Z, r24
     d12:	24 c0       	rjmp	.+72     	; 0xd5c <main+0x454>
     d14:	ce 01       	movw	r24, r28
     d16:	8e 58       	subi	r24, 0x8E	; 142
     d18:	9f 4f       	sbci	r25, 0xFF	; 255
     d1a:	29 e1       	ldi	r18, 0x19	; 25
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	fc 01       	movw	r30, r24
     d20:	31 83       	std	Z+1, r19	; 0x01
     d22:	20 83       	st	Z, r18
     d24:	ce 01       	movw	r24, r28
     d26:	8e 58       	subi	r24, 0x8E	; 142
     d28:	9f 4f       	sbci	r25, 0xFF	; 255
     d2a:	fc 01       	movw	r30, r24
     d2c:	80 81       	ld	r24, Z
     d2e:	91 81       	ldd	r25, Z+1	; 0x01
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <main+0x428>
     d34:	9e 01       	movw	r18, r28
     d36:	2e 58       	subi	r18, 0x8E	; 142
     d38:	3f 4f       	sbci	r19, 0xFF	; 255
     d3a:	f9 01       	movw	r30, r18
     d3c:	91 83       	std	Z+1, r25	; 0x01
     d3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d40:	ce 01       	movw	r24, r28
     d42:	80 59       	subi	r24, 0x90	; 144
     d44:	9f 4f       	sbci	r25, 0xFF	; 255
     d46:	9e 01       	movw	r18, r28
     d48:	20 59       	subi	r18, 0x90	; 144
     d4a:	3f 4f       	sbci	r19, 0xFF	; 255
     d4c:	f9 01       	movw	r30, r18
     d4e:	20 81       	ld	r18, Z
     d50:	31 81       	ldd	r19, Z+1	; 0x01
     d52:	21 50       	subi	r18, 0x01	; 1
     d54:	31 09       	sbc	r19, r1
     d56:	fc 01       	movw	r30, r24
     d58:	31 83       	std	Z+1, r19	; 0x01
     d5a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d5c:	ce 01       	movw	r24, r28
     d5e:	80 59       	subi	r24, 0x90	; 144
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	fc 01       	movw	r30, r24
     d64:	80 81       	ld	r24, Z
     d66:	91 81       	ldd	r25, Z+1	; 0x01
     d68:	89 2b       	or	r24, r25
     d6a:	a1 f6       	brne	.-88     	; 0xd14 <main+0x40c>
     d6c:	2c c0       	rjmp	.+88     	; 0xdc6 <main+0x4be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6e:	8e 01       	movw	r16, r28
     d70:	00 59       	subi	r16, 0x90	; 144
     d72:	1f 4f       	sbci	r17, 0xFF	; 255
     d74:	ce 01       	movw	r24, r28
     d76:	84 59       	subi	r24, 0x94	; 148
     d78:	9f 4f       	sbci	r25, 0xFF	; 255
     d7a:	fc 01       	movw	r30, r24
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	93 81       	ldd	r25, Z+3	; 0x03
     d84:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	f8 01       	movw	r30, r16
     d8e:	91 83       	std	Z+1, r25	; 0x01
     d90:	80 83       	st	Z, r24
     d92:	ce 01       	movw	r24, r28
     d94:	8c 58       	subi	r24, 0x8C	; 140
     d96:	9f 4f       	sbci	r25, 0xFF	; 255
     d98:	9e 01       	movw	r18, r28
     d9a:	20 59       	subi	r18, 0x90	; 144
     d9c:	3f 4f       	sbci	r19, 0xFF	; 255
     d9e:	f9 01       	movw	r30, r18
     da0:	20 81       	ld	r18, Z
     da2:	31 81       	ldd	r19, Z+1	; 0x01
     da4:	fc 01       	movw	r30, r24
     da6:	31 83       	std	Z+1, r19	; 0x01
     da8:	20 83       	st	Z, r18
     daa:	ce 01       	movw	r24, r28
     dac:	8c 58       	subi	r24, 0x8C	; 140
     dae:	9f 4f       	sbci	r25, 0xFF	; 255
     db0:	fc 01       	movw	r30, r24
     db2:	80 81       	ld	r24, Z
     db4:	91 81       	ldd	r25, Z+1	; 0x01
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <main+0x4ae>
     dba:	9e 01       	movw	r18, r28
     dbc:	2c 58       	subi	r18, 0x8C	; 140
     dbe:	3f 4f       	sbci	r19, 0xFF	; 255
     dc0:	f9 01       	movw	r30, r18
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	80 83       	st	Z, r24
		{
			_delay_ms(50);
		BCDSevegments_enable(ONE);
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(TWO);
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(THREE);
     dd2:	83 e0       	ldi	r24, 0x03	; 3
     dd4:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(FOUR);
     dd8:	84 e0       	ldi	r24, 0x04	; 4
     dda:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_displayNo(TWO);
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	a8 e4       	ldi	r26, 0x48	; 72
     dea:	b2 e4       	ldi	r27, 0x42	; 66
     dec:	8a 83       	std	Y+2, r24	; 0x02
     dee:	9b 83       	std	Y+3, r25	; 0x03
     df0:	ac 83       	std	Y+4, r26	; 0x04
     df2:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     df4:	8e 01       	movw	r16, r28
     df6:	0e 59       	subi	r16, 0x9E	; 158
     df8:	1f 4f       	sbci	r17, 0xFF	; 255
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	4a e7       	ldi	r20, 0x7A	; 122
     e00:	53 e4       	ldi	r21, 0x43	; 67
     e02:	6a 81       	ldd	r22, Y+2	; 0x02
     e04:	7b 81       	ldd	r23, Y+3	; 0x03
     e06:	8c 81       	ldd	r24, Y+4	; 0x04
     e08:	9d 81       	ldd	r25, Y+5	; 0x05
     e0a:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	f8 01       	movw	r30, r16
     e14:	80 83       	st	Z, r24
     e16:	91 83       	std	Z+1, r25	; 0x01
     e18:	a2 83       	std	Z+2, r26	; 0x02
     e1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e1c:	ce 01       	movw	r24, r28
     e1e:	8e 59       	subi	r24, 0x9E	; 158
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e8       	ldi	r20, 0x80	; 128
     e28:	5f e3       	ldi	r21, 0x3F	; 63
     e2a:	fc 01       	movw	r30, r24
     e2c:	60 81       	ld	r22, Z
     e2e:	71 81       	ldd	r23, Z+1	; 0x01
     e30:	82 81       	ldd	r24, Z+2	; 0x02
     e32:	93 81       	ldd	r25, Z+3	; 0x03
     e34:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
     e38:	88 23       	and	r24, r24
     e3a:	4c f4       	brge	.+18     	; 0xe4e <main+0x546>
		__ticks = 1;
     e3c:	ce 01       	movw	r24, r28
     e3e:	8a 59       	subi	r24, 0x9A	; 154
     e40:	9f 4f       	sbci	r25, 0xFF	; 255
     e42:	21 e0       	ldi	r18, 0x01	; 1
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	fc 01       	movw	r30, r24
     e48:	31 83       	std	Z+1, r19	; 0x01
     e4a:	20 83       	st	Z, r18
     e4c:	69 c0       	rjmp	.+210    	; 0xf20 <main+0x618>
	else if (__tmp > 65535)
     e4e:	ce 01       	movw	r24, r28
     e50:	8e 59       	subi	r24, 0x9E	; 158
     e52:	9f 4f       	sbci	r25, 0xFF	; 255
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	3f ef       	ldi	r19, 0xFF	; 255
     e58:	4f e7       	ldi	r20, 0x7F	; 127
     e5a:	57 e4       	ldi	r21, 0x47	; 71
     e5c:	fc 01       	movw	r30, r24
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
     e6a:	18 16       	cp	r1, r24
     e6c:	0c f0       	brlt	.+2      	; 0xe70 <main+0x568>
     e6e:	46 c0       	rjmp	.+140    	; 0xefc <main+0x5f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e2       	ldi	r20, 0x20	; 32
     e76:	51 e4       	ldi	r21, 0x41	; 65
     e78:	6a 81       	ldd	r22, Y+2	; 0x02
     e7a:	7b 81       	ldd	r23, Y+3	; 0x03
     e7c:	8c 81       	ldd	r24, Y+4	; 0x04
     e7e:	9d 81       	ldd	r25, Y+5	; 0x05
     e80:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	8e 01       	movw	r16, r28
     e8a:	0a 59       	subi	r16, 0x9A	; 154
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
     e8e:	bc 01       	movw	r22, r24
     e90:	cd 01       	movw	r24, r26
     e92:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	f8 01       	movw	r30, r16
     e9c:	91 83       	std	Z+1, r25	; 0x01
     e9e:	80 83       	st	Z, r24
     ea0:	24 c0       	rjmp	.+72     	; 0xeea <main+0x5e2>
     ea2:	ce 01       	movw	r24, r28
     ea4:	88 59       	subi	r24, 0x98	; 152
     ea6:	9f 4f       	sbci	r25, 0xFF	; 255
     ea8:	29 e1       	ldi	r18, 0x19	; 25
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	fc 01       	movw	r30, r24
     eae:	31 83       	std	Z+1, r19	; 0x01
     eb0:	20 83       	st	Z, r18
     eb2:	ce 01       	movw	r24, r28
     eb4:	88 59       	subi	r24, 0x98	; 152
     eb6:	9f 4f       	sbci	r25, 0xFF	; 255
     eb8:	fc 01       	movw	r30, r24
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <main+0x5b6>
     ec2:	9e 01       	movw	r18, r28
     ec4:	28 59       	subi	r18, 0x98	; 152
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
     ec8:	f9 01       	movw	r30, r18
     eca:	91 83       	std	Z+1, r25	; 0x01
     ecc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ece:	ce 01       	movw	r24, r28
     ed0:	8a 59       	subi	r24, 0x9A	; 154
     ed2:	9f 4f       	sbci	r25, 0xFF	; 255
     ed4:	9e 01       	movw	r18, r28
     ed6:	2a 59       	subi	r18, 0x9A	; 154
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	f9 01       	movw	r30, r18
     edc:	20 81       	ld	r18, Z
     ede:	31 81       	ldd	r19, Z+1	; 0x01
     ee0:	21 50       	subi	r18, 0x01	; 1
     ee2:	31 09       	sbc	r19, r1
     ee4:	fc 01       	movw	r30, r24
     ee6:	31 83       	std	Z+1, r19	; 0x01
     ee8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eea:	ce 01       	movw	r24, r28
     eec:	8a 59       	subi	r24, 0x9A	; 154
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	fc 01       	movw	r30, r24
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
     ef6:	89 2b       	or	r24, r25
     ef8:	a1 f6       	brne	.-88     	; 0xea2 <main+0x59a>
     efa:	2c c0       	rjmp	.+88     	; 0xf54 <main+0x64c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efc:	8e 01       	movw	r16, r28
     efe:	0a 59       	subi	r16, 0x9A	; 154
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	ce 01       	movw	r24, r28
     f04:	8e 59       	subi	r24, 0x9E	; 158
     f06:	9f 4f       	sbci	r25, 0xFF	; 255
     f08:	fc 01       	movw	r30, r24
     f0a:	60 81       	ld	r22, Z
     f0c:	71 81       	ldd	r23, Z+1	; 0x01
     f0e:	82 81       	ldd	r24, Z+2	; 0x02
     f10:	93 81       	ldd	r25, Z+3	; 0x03
     f12:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	f8 01       	movw	r30, r16
     f1c:	91 83       	std	Z+1, r25	; 0x01
     f1e:	80 83       	st	Z, r24
     f20:	ce 01       	movw	r24, r28
     f22:	86 59       	subi	r24, 0x96	; 150
     f24:	9f 4f       	sbci	r25, 0xFF	; 255
     f26:	9e 01       	movw	r18, r28
     f28:	2a 59       	subi	r18, 0x9A	; 154
     f2a:	3f 4f       	sbci	r19, 0xFF	; 255
     f2c:	f9 01       	movw	r30, r18
     f2e:	20 81       	ld	r18, Z
     f30:	31 81       	ldd	r19, Z+1	; 0x01
     f32:	fc 01       	movw	r30, r24
     f34:	31 83       	std	Z+1, r19	; 0x01
     f36:	20 83       	st	Z, r18
     f38:	ce 01       	movw	r24, r28
     f3a:	86 59       	subi	r24, 0x96	; 150
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	fc 01       	movw	r30, r24
     f40:	80 81       	ld	r24, Z
     f42:	91 81       	ldd	r25, Z+1	; 0x01
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <main+0x63c>
     f48:	9e 01       	movw	r18, r28
     f4a:	26 59       	subi	r18, 0x96	; 150
     f4c:	3f 4f       	sbci	r19, 0xFF	; 255
     f4e:	f9 01       	movw	r30, r18
     f50:	91 83       	std	Z+1, r25	; 0x01
     f52:	80 83       	st	Z, r24
			_delay_ms(50);
		}
		if(key == 3)
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	83 30       	cpi	r24, 0x03	; 3
     f58:	09 f0       	breq	.+2      	; 0xf5c <main+0x654>
     f5a:	7f c1       	rjmp	.+766    	; 0x125a <main+0x952>
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	a8 e4       	ldi	r26, 0x48	; 72
     f62:	b2 e4       	ldi	r27, 0x42	; 66
     f64:	8e 8b       	std	Y+22, r24	; 0x16
     f66:	9f 8b       	std	Y+23, r25	; 0x17
     f68:	a8 8f       	std	Y+24, r26	; 0x18
     f6a:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f6c:	8e 01       	movw	r16, r28
     f6e:	00 58       	subi	r16, 0x80	; 128
     f70:	1f 4f       	sbci	r17, 0xFF	; 255
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	4a e7       	ldi	r20, 0x7A	; 122
     f78:	53 e4       	ldi	r21, 0x43	; 67
     f7a:	6e 89       	ldd	r22, Y+22	; 0x16
     f7c:	7f 89       	ldd	r23, Y+23	; 0x17
     f7e:	88 8d       	ldd	r24, Y+24	; 0x18
     f80:	99 8d       	ldd	r25, Y+25	; 0x19
     f82:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	f8 01       	movw	r30, r16
     f8c:	80 83       	st	Z, r24
     f8e:	91 83       	std	Z+1, r25	; 0x01
     f90:	a2 83       	std	Z+2, r26	; 0x02
     f92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f94:	ce 01       	movw	r24, r28
     f96:	80 58       	subi	r24, 0x80	; 128
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e8       	ldi	r20, 0x80	; 128
     fa0:	5f e3       	ldi	r21, 0x3F	; 63
     fa2:	fc 01       	movw	r30, r24
     fa4:	60 81       	ld	r22, Z
     fa6:	71 81       	ldd	r23, Z+1	; 0x01
     fa8:	82 81       	ldd	r24, Z+2	; 0x02
     faa:	93 81       	ldd	r25, Z+3	; 0x03
     fac:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	4c f4       	brge	.+18     	; 0xfc6 <main+0x6be>
		__ticks = 1;
     fb4:	ce 01       	movw	r24, r28
     fb6:	8c 57       	subi	r24, 0x7C	; 124
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	21 e0       	ldi	r18, 0x01	; 1
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	fc 01       	movw	r30, r24
     fc0:	31 83       	std	Z+1, r19	; 0x01
     fc2:	20 83       	st	Z, r18
     fc4:	69 c0       	rjmp	.+210    	; 0x1098 <main+0x790>
	else if (__tmp > 65535)
     fc6:	ce 01       	movw	r24, r28
     fc8:	80 58       	subi	r24, 0x80	; 128
     fca:	9f 4f       	sbci	r25, 0xFF	; 255
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	3f ef       	ldi	r19, 0xFF	; 255
     fd0:	4f e7       	ldi	r20, 0x7F	; 127
     fd2:	57 e4       	ldi	r21, 0x47	; 71
     fd4:	fc 01       	movw	r30, r24
     fd6:	60 81       	ld	r22, Z
     fd8:	71 81       	ldd	r23, Z+1	; 0x01
     fda:	82 81       	ldd	r24, Z+2	; 0x02
     fdc:	93 81       	ldd	r25, Z+3	; 0x03
     fde:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
     fe2:	18 16       	cp	r1, r24
     fe4:	0c f0       	brlt	.+2      	; 0xfe8 <main+0x6e0>
     fe6:	46 c0       	rjmp	.+140    	; 0x1074 <main+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e2       	ldi	r20, 0x20	; 32
     fee:	51 e4       	ldi	r21, 0x41	; 65
     ff0:	6e 89       	ldd	r22, Y+22	; 0x16
     ff2:	7f 89       	ldd	r23, Y+23	; 0x17
     ff4:	88 8d       	ldd	r24, Y+24	; 0x18
     ff6:	99 8d       	ldd	r25, Y+25	; 0x19
     ff8:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	8e 01       	movw	r16, r28
    1002:	0c 57       	subi	r16, 0x7C	; 124
    1004:	1f 4f       	sbci	r17, 0xFF	; 255
    1006:	bc 01       	movw	r22, r24
    1008:	cd 01       	movw	r24, r26
    100a:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	f8 01       	movw	r30, r16
    1014:	91 83       	std	Z+1, r25	; 0x01
    1016:	80 83       	st	Z, r24
    1018:	24 c0       	rjmp	.+72     	; 0x1062 <main+0x75a>
    101a:	ce 01       	movw	r24, r28
    101c:	8a 57       	subi	r24, 0x7A	; 122
    101e:	9f 4f       	sbci	r25, 0xFF	; 255
    1020:	29 e1       	ldi	r18, 0x19	; 25
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	fc 01       	movw	r30, r24
    1026:	31 83       	std	Z+1, r19	; 0x01
    1028:	20 83       	st	Z, r18
    102a:	ce 01       	movw	r24, r28
    102c:	8a 57       	subi	r24, 0x7A	; 122
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	fc 01       	movw	r30, r24
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <main+0x72e>
    103a:	9e 01       	movw	r18, r28
    103c:	2a 57       	subi	r18, 0x7A	; 122
    103e:	3f 4f       	sbci	r19, 0xFF	; 255
    1040:	f9 01       	movw	r30, r18
    1042:	91 83       	std	Z+1, r25	; 0x01
    1044:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1046:	ce 01       	movw	r24, r28
    1048:	8c 57       	subi	r24, 0x7C	; 124
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	9e 01       	movw	r18, r28
    104e:	2c 57       	subi	r18, 0x7C	; 124
    1050:	3f 4f       	sbci	r19, 0xFF	; 255
    1052:	f9 01       	movw	r30, r18
    1054:	20 81       	ld	r18, Z
    1056:	31 81       	ldd	r19, Z+1	; 0x01
    1058:	21 50       	subi	r18, 0x01	; 1
    105a:	31 09       	sbc	r19, r1
    105c:	fc 01       	movw	r30, r24
    105e:	31 83       	std	Z+1, r19	; 0x01
    1060:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1062:	ce 01       	movw	r24, r28
    1064:	8c 57       	subi	r24, 0x7C	; 124
    1066:	9f 4f       	sbci	r25, 0xFF	; 255
    1068:	fc 01       	movw	r30, r24
    106a:	80 81       	ld	r24, Z
    106c:	91 81       	ldd	r25, Z+1	; 0x01
    106e:	89 2b       	or	r24, r25
    1070:	a1 f6       	brne	.-88     	; 0x101a <main+0x712>
    1072:	2c c0       	rjmp	.+88     	; 0x10cc <main+0x7c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1074:	8e 01       	movw	r16, r28
    1076:	0c 57       	subi	r16, 0x7C	; 124
    1078:	1f 4f       	sbci	r17, 0xFF	; 255
    107a:	ce 01       	movw	r24, r28
    107c:	80 58       	subi	r24, 0x80	; 128
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	fc 01       	movw	r30, r24
    1082:	60 81       	ld	r22, Z
    1084:	71 81       	ldd	r23, Z+1	; 0x01
    1086:	82 81       	ldd	r24, Z+2	; 0x02
    1088:	93 81       	ldd	r25, Z+3	; 0x03
    108a:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	f8 01       	movw	r30, r16
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	80 83       	st	Z, r24
    1098:	ce 01       	movw	r24, r28
    109a:	88 57       	subi	r24, 0x78	; 120
    109c:	9f 4f       	sbci	r25, 0xFF	; 255
    109e:	9e 01       	movw	r18, r28
    10a0:	2c 57       	subi	r18, 0x7C	; 124
    10a2:	3f 4f       	sbci	r19, 0xFF	; 255
    10a4:	f9 01       	movw	r30, r18
    10a6:	20 81       	ld	r18, Z
    10a8:	31 81       	ldd	r19, Z+1	; 0x01
    10aa:	fc 01       	movw	r30, r24
    10ac:	31 83       	std	Z+1, r19	; 0x01
    10ae:	20 83       	st	Z, r18
    10b0:	ce 01       	movw	r24, r28
    10b2:	88 57       	subi	r24, 0x78	; 120
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	fc 01       	movw	r30, r24
    10b8:	80 81       	ld	r24, Z
    10ba:	91 81       	ldd	r25, Z+1	; 0x01
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <main+0x7b4>
    10c0:	9e 01       	movw	r18, r28
    10c2:	28 57       	subi	r18, 0x78	; 120
    10c4:	3f 4f       	sbci	r19, 0xFF	; 255
    10c6:	f9 01       	movw	r30, r18
    10c8:	91 83       	std	Z+1, r25	; 0x01
    10ca:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(ONE);
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(TWO);
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(THREE);
    10d8:	83 e0       	ldi	r24, 0x03	; 3
    10da:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(FOUR);
    10de:	84 e0       	ldi	r24, 0x04	; 4
    10e0:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_displayNo(THREE);
    10e4:	83 e0       	ldi	r24, 0x03	; 3
    10e6:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a8 e4       	ldi	r26, 0x48	; 72
    10f0:	b2 e4       	ldi	r27, 0x42	; 66
    10f2:	8a 87       	std	Y+10, r24	; 0x0a
    10f4:	9b 87       	std	Y+11, r25	; 0x0b
    10f6:	ac 87       	std	Y+12, r26	; 0x0c
    10f8:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10fa:	8e 01       	movw	r16, r28
    10fc:	0a 58       	subi	r16, 0x8A	; 138
    10fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	4a e7       	ldi	r20, 0x7A	; 122
    1106:	53 e4       	ldi	r21, 0x43	; 67
    1108:	6a 85       	ldd	r22, Y+10	; 0x0a
    110a:	7b 85       	ldd	r23, Y+11	; 0x0b
    110c:	8c 85       	ldd	r24, Y+12	; 0x0c
    110e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1110:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	f8 01       	movw	r30, r16
    111a:	80 83       	st	Z, r24
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	a2 83       	std	Z+2, r26	; 0x02
    1120:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1122:	ce 01       	movw	r24, r28
    1124:	8a 58       	subi	r24, 0x8A	; 138
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	40 e8       	ldi	r20, 0x80	; 128
    112e:	5f e3       	ldi	r21, 0x3F	; 63
    1130:	fc 01       	movw	r30, r24
    1132:	60 81       	ld	r22, Z
    1134:	71 81       	ldd	r23, Z+1	; 0x01
    1136:	82 81       	ldd	r24, Z+2	; 0x02
    1138:	93 81       	ldd	r25, Z+3	; 0x03
    113a:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
    113e:	88 23       	and	r24, r24
    1140:	4c f4       	brge	.+18     	; 0x1154 <main+0x84c>
		__ticks = 1;
    1142:	ce 01       	movw	r24, r28
    1144:	86 58       	subi	r24, 0x86	; 134
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	21 e0       	ldi	r18, 0x01	; 1
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	fc 01       	movw	r30, r24
    114e:	31 83       	std	Z+1, r19	; 0x01
    1150:	20 83       	st	Z, r18
    1152:	69 c0       	rjmp	.+210    	; 0x1226 <main+0x91e>
	else if (__tmp > 65535)
    1154:	ce 01       	movw	r24, r28
    1156:	8a 58       	subi	r24, 0x8A	; 138
    1158:	9f 4f       	sbci	r25, 0xFF	; 255
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	3f ef       	ldi	r19, 0xFF	; 255
    115e:	4f e7       	ldi	r20, 0x7F	; 127
    1160:	57 e4       	ldi	r21, 0x47	; 71
    1162:	fc 01       	movw	r30, r24
    1164:	60 81       	ld	r22, Z
    1166:	71 81       	ldd	r23, Z+1	; 0x01
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	93 81       	ldd	r25, Z+3	; 0x03
    116c:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
    1170:	18 16       	cp	r1, r24
    1172:	0c f0       	brlt	.+2      	; 0x1176 <main+0x86e>
    1174:	46 c0       	rjmp	.+140    	; 0x1202 <main+0x8fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e2       	ldi	r20, 0x20	; 32
    117c:	51 e4       	ldi	r21, 0x41	; 65
    117e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1180:	7b 85       	ldd	r23, Y+11	; 0x0b
    1182:	8c 85       	ldd	r24, Y+12	; 0x0c
    1184:	9d 85       	ldd	r25, Y+13	; 0x0d
    1186:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	8e 01       	movw	r16, r28
    1190:	06 58       	subi	r16, 0x86	; 134
    1192:	1f 4f       	sbci	r17, 0xFF	; 255
    1194:	bc 01       	movw	r22, r24
    1196:	cd 01       	movw	r24, r26
    1198:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	f8 01       	movw	r30, r16
    11a2:	91 83       	std	Z+1, r25	; 0x01
    11a4:	80 83       	st	Z, r24
    11a6:	24 c0       	rjmp	.+72     	; 0x11f0 <main+0x8e8>
    11a8:	ce 01       	movw	r24, r28
    11aa:	84 58       	subi	r24, 0x84	; 132
    11ac:	9f 4f       	sbci	r25, 0xFF	; 255
    11ae:	29 e1       	ldi	r18, 0x19	; 25
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	fc 01       	movw	r30, r24
    11b4:	31 83       	std	Z+1, r19	; 0x01
    11b6:	20 83       	st	Z, r18
    11b8:	ce 01       	movw	r24, r28
    11ba:	84 58       	subi	r24, 0x84	; 132
    11bc:	9f 4f       	sbci	r25, 0xFF	; 255
    11be:	fc 01       	movw	r30, r24
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <main+0x8bc>
    11c8:	9e 01       	movw	r18, r28
    11ca:	24 58       	subi	r18, 0x84	; 132
    11cc:	3f 4f       	sbci	r19, 0xFF	; 255
    11ce:	f9 01       	movw	r30, r18
    11d0:	91 83       	std	Z+1, r25	; 0x01
    11d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d4:	ce 01       	movw	r24, r28
    11d6:	86 58       	subi	r24, 0x86	; 134
    11d8:	9f 4f       	sbci	r25, 0xFF	; 255
    11da:	9e 01       	movw	r18, r28
    11dc:	26 58       	subi	r18, 0x86	; 134
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
    11e0:	f9 01       	movw	r30, r18
    11e2:	20 81       	ld	r18, Z
    11e4:	31 81       	ldd	r19, Z+1	; 0x01
    11e6:	21 50       	subi	r18, 0x01	; 1
    11e8:	31 09       	sbc	r19, r1
    11ea:	fc 01       	movw	r30, r24
    11ec:	31 83       	std	Z+1, r19	; 0x01
    11ee:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f0:	ce 01       	movw	r24, r28
    11f2:	86 58       	subi	r24, 0x86	; 134
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	fc 01       	movw	r30, r24
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	89 2b       	or	r24, r25
    11fe:	a1 f6       	brne	.-88     	; 0x11a8 <main+0x8a0>
    1200:	2c c0       	rjmp	.+88     	; 0x125a <main+0x952>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1202:	8e 01       	movw	r16, r28
    1204:	06 58       	subi	r16, 0x86	; 134
    1206:	1f 4f       	sbci	r17, 0xFF	; 255
    1208:	ce 01       	movw	r24, r28
    120a:	8a 58       	subi	r24, 0x8A	; 138
    120c:	9f 4f       	sbci	r25, 0xFF	; 255
    120e:	fc 01       	movw	r30, r24
    1210:	60 81       	ld	r22, Z
    1212:	71 81       	ldd	r23, Z+1	; 0x01
    1214:	82 81       	ldd	r24, Z+2	; 0x02
    1216:	93 81       	ldd	r25, Z+3	; 0x03
    1218:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	f8 01       	movw	r30, r16
    1222:	91 83       	std	Z+1, r25	; 0x01
    1224:	80 83       	st	Z, r24
    1226:	ce 01       	movw	r24, r28
    1228:	82 58       	subi	r24, 0x82	; 130
    122a:	9f 4f       	sbci	r25, 0xFF	; 255
    122c:	9e 01       	movw	r18, r28
    122e:	26 58       	subi	r18, 0x86	; 134
    1230:	3f 4f       	sbci	r19, 0xFF	; 255
    1232:	f9 01       	movw	r30, r18
    1234:	20 81       	ld	r18, Z
    1236:	31 81       	ldd	r19, Z+1	; 0x01
    1238:	fc 01       	movw	r30, r24
    123a:	31 83       	std	Z+1, r19	; 0x01
    123c:	20 83       	st	Z, r18
    123e:	ce 01       	movw	r24, r28
    1240:	82 58       	subi	r24, 0x82	; 130
    1242:	9f 4f       	sbci	r25, 0xFF	; 255
    1244:	fc 01       	movw	r30, r24
    1246:	80 81       	ld	r24, Z
    1248:	91 81       	ldd	r25, Z+1	; 0x01
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	f1 f7       	brne	.-4      	; 0x124a <main+0x942>
    124e:	9e 01       	movw	r18, r28
    1250:	22 58       	subi	r18, 0x82	; 130
    1252:	3f 4f       	sbci	r19, 0xFF	; 255
    1254:	f9 01       	movw	r30, r18
    1256:	91 83       	std	Z+1, r25	; 0x01
    1258:	80 83       	st	Z, r24
			_delay_ms(50);
		}
		if(key == 4)
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	09 f0       	breq	.+2      	; 0x1262 <main+0x95a>
    1260:	7f c1       	rjmp	.+766    	; 0x1560 <main+0xc58>
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	a8 e4       	ldi	r26, 0x48	; 72
    1268:	b2 e4       	ldi	r27, 0x42	; 66
    126a:	8e 8f       	std	Y+30, r24	; 0x1e
    126c:	9f 8f       	std	Y+31, r25	; 0x1f
    126e:	a8 a3       	std	Y+32, r26	; 0x20
    1270:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1272:	8e 01       	movw	r16, r28
    1274:	0c 56       	subi	r16, 0x6C	; 108
    1276:	1f 4f       	sbci	r17, 0xFF	; 255
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	4a e7       	ldi	r20, 0x7A	; 122
    127e:	53 e4       	ldi	r21, 0x43	; 67
    1280:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1282:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1284:	88 a1       	ldd	r24, Y+32	; 0x20
    1286:	99 a1       	ldd	r25, Y+33	; 0x21
    1288:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	f8 01       	movw	r30, r16
    1292:	80 83       	st	Z, r24
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	a2 83       	std	Z+2, r26	; 0x02
    1298:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    129a:	ce 01       	movw	r24, r28
    129c:	8c 56       	subi	r24, 0x6C	; 108
    129e:	9f 4f       	sbci	r25, 0xFF	; 255
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e8       	ldi	r20, 0x80	; 128
    12a6:	5f e3       	ldi	r21, 0x3F	; 63
    12a8:	fc 01       	movw	r30, r24
    12aa:	60 81       	ld	r22, Z
    12ac:	71 81       	ldd	r23, Z+1	; 0x01
    12ae:	82 81       	ldd	r24, Z+2	; 0x02
    12b0:	93 81       	ldd	r25, Z+3	; 0x03
    12b2:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
    12b6:	88 23       	and	r24, r24
    12b8:	4c f4       	brge	.+18     	; 0x12cc <main+0x9c4>
		__ticks = 1;
    12ba:	ce 01       	movw	r24, r28
    12bc:	88 56       	subi	r24, 0x68	; 104
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	21 e0       	ldi	r18, 0x01	; 1
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	fc 01       	movw	r30, r24
    12c6:	31 83       	std	Z+1, r19	; 0x01
    12c8:	20 83       	st	Z, r18
    12ca:	69 c0       	rjmp	.+210    	; 0x139e <main+0xa96>
	else if (__tmp > 65535)
    12cc:	ce 01       	movw	r24, r28
    12ce:	8c 56       	subi	r24, 0x6C	; 108
    12d0:	9f 4f       	sbci	r25, 0xFF	; 255
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	3f ef       	ldi	r19, 0xFF	; 255
    12d6:	4f e7       	ldi	r20, 0x7F	; 127
    12d8:	57 e4       	ldi	r21, 0x47	; 71
    12da:	fc 01       	movw	r30, r24
    12dc:	60 81       	ld	r22, Z
    12de:	71 81       	ldd	r23, Z+1	; 0x01
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	93 81       	ldd	r25, Z+3	; 0x03
    12e4:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
    12e8:	18 16       	cp	r1, r24
    12ea:	0c f0       	brlt	.+2      	; 0x12ee <main+0x9e6>
    12ec:	46 c0       	rjmp	.+140    	; 0x137a <main+0xa72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e2       	ldi	r20, 0x20	; 32
    12f4:	51 e4       	ldi	r21, 0x41	; 65
    12f6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    12f8:	7f 8d       	ldd	r23, Y+31	; 0x1f
    12fa:	88 a1       	ldd	r24, Y+32	; 0x20
    12fc:	99 a1       	ldd	r25, Y+33	; 0x21
    12fe:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	8e 01       	movw	r16, r28
    1308:	08 56       	subi	r16, 0x68	; 104
    130a:	1f 4f       	sbci	r17, 0xFF	; 255
    130c:	bc 01       	movw	r22, r24
    130e:	cd 01       	movw	r24, r26
    1310:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	f8 01       	movw	r30, r16
    131a:	91 83       	std	Z+1, r25	; 0x01
    131c:	80 83       	st	Z, r24
    131e:	24 c0       	rjmp	.+72     	; 0x1368 <main+0xa60>
    1320:	ce 01       	movw	r24, r28
    1322:	86 56       	subi	r24, 0x66	; 102
    1324:	9f 4f       	sbci	r25, 0xFF	; 255
    1326:	29 e1       	ldi	r18, 0x19	; 25
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	fc 01       	movw	r30, r24
    132c:	31 83       	std	Z+1, r19	; 0x01
    132e:	20 83       	st	Z, r18
    1330:	ce 01       	movw	r24, r28
    1332:	86 56       	subi	r24, 0x66	; 102
    1334:	9f 4f       	sbci	r25, 0xFF	; 255
    1336:	fc 01       	movw	r30, r24
    1338:	80 81       	ld	r24, Z
    133a:	91 81       	ldd	r25, Z+1	; 0x01
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <main+0xa34>
    1340:	9e 01       	movw	r18, r28
    1342:	26 56       	subi	r18, 0x66	; 102
    1344:	3f 4f       	sbci	r19, 0xFF	; 255
    1346:	f9 01       	movw	r30, r18
    1348:	91 83       	std	Z+1, r25	; 0x01
    134a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134c:	ce 01       	movw	r24, r28
    134e:	88 56       	subi	r24, 0x68	; 104
    1350:	9f 4f       	sbci	r25, 0xFF	; 255
    1352:	9e 01       	movw	r18, r28
    1354:	28 56       	subi	r18, 0x68	; 104
    1356:	3f 4f       	sbci	r19, 0xFF	; 255
    1358:	f9 01       	movw	r30, r18
    135a:	20 81       	ld	r18, Z
    135c:	31 81       	ldd	r19, Z+1	; 0x01
    135e:	21 50       	subi	r18, 0x01	; 1
    1360:	31 09       	sbc	r19, r1
    1362:	fc 01       	movw	r30, r24
    1364:	31 83       	std	Z+1, r19	; 0x01
    1366:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1368:	ce 01       	movw	r24, r28
    136a:	88 56       	subi	r24, 0x68	; 104
    136c:	9f 4f       	sbci	r25, 0xFF	; 255
    136e:	fc 01       	movw	r30, r24
    1370:	80 81       	ld	r24, Z
    1372:	91 81       	ldd	r25, Z+1	; 0x01
    1374:	89 2b       	or	r24, r25
    1376:	a1 f6       	brne	.-88     	; 0x1320 <main+0xa18>
    1378:	2c c0       	rjmp	.+88     	; 0x13d2 <main+0xaca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137a:	8e 01       	movw	r16, r28
    137c:	08 56       	subi	r16, 0x68	; 104
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	ce 01       	movw	r24, r28
    1382:	8c 56       	subi	r24, 0x6C	; 108
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	fc 01       	movw	r30, r24
    1388:	60 81       	ld	r22, Z
    138a:	71 81       	ldd	r23, Z+1	; 0x01
    138c:	82 81       	ldd	r24, Z+2	; 0x02
    138e:	93 81       	ldd	r25, Z+3	; 0x03
    1390:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	f8 01       	movw	r30, r16
    139a:	91 83       	std	Z+1, r25	; 0x01
    139c:	80 83       	st	Z, r24
    139e:	ce 01       	movw	r24, r28
    13a0:	84 56       	subi	r24, 0x64	; 100
    13a2:	9f 4f       	sbci	r25, 0xFF	; 255
    13a4:	9e 01       	movw	r18, r28
    13a6:	28 56       	subi	r18, 0x68	; 104
    13a8:	3f 4f       	sbci	r19, 0xFF	; 255
    13aa:	f9 01       	movw	r30, r18
    13ac:	20 81       	ld	r18, Z
    13ae:	31 81       	ldd	r19, Z+1	; 0x01
    13b0:	fc 01       	movw	r30, r24
    13b2:	31 83       	std	Z+1, r19	; 0x01
    13b4:	20 83       	st	Z, r18
    13b6:	ce 01       	movw	r24, r28
    13b8:	84 56       	subi	r24, 0x64	; 100
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	fc 01       	movw	r30, r24
    13be:	80 81       	ld	r24, Z
    13c0:	91 81       	ldd	r25, Z+1	; 0x01
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <main+0xaba>
    13c6:	9e 01       	movw	r18, r28
    13c8:	24 56       	subi	r18, 0x64	; 100
    13ca:	3f 4f       	sbci	r19, 0xFF	; 255
    13cc:	f9 01       	movw	r30, r18
    13ce:	91 83       	std	Z+1, r25	; 0x01
    13d0:	80 83       	st	Z, r24
		{
		_delay_ms(50);
		BCDSevegments_enable(ONE);
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(TWO);
    13d8:	82 e0       	ldi	r24, 0x02	; 2
    13da:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(THREE);
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(FOUR);
    13e4:	84 e0       	ldi	r24, 0x04	; 4
    13e6:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_displayNo(FOUR);
    13ea:	84 e0       	ldi	r24, 0x04	; 4
    13ec:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	a8 e4       	ldi	r26, 0x48	; 72
    13f6:	b2 e4       	ldi	r27, 0x42	; 66
    13f8:	8a 8b       	std	Y+18, r24	; 0x12
    13fa:	9b 8b       	std	Y+19, r25	; 0x13
    13fc:	ac 8b       	std	Y+20, r26	; 0x14
    13fe:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1400:	8e 01       	movw	r16, r28
    1402:	06 57       	subi	r16, 0x76	; 118
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	4a e7       	ldi	r20, 0x7A	; 122
    140c:	53 e4       	ldi	r21, 0x43	; 67
    140e:	6a 89       	ldd	r22, Y+18	; 0x12
    1410:	7b 89       	ldd	r23, Y+19	; 0x13
    1412:	8c 89       	ldd	r24, Y+20	; 0x14
    1414:	9d 89       	ldd	r25, Y+21	; 0x15
    1416:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	f8 01       	movw	r30, r16
    1420:	80 83       	st	Z, r24
    1422:	91 83       	std	Z+1, r25	; 0x01
    1424:	a2 83       	std	Z+2, r26	; 0x02
    1426:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1428:	ce 01       	movw	r24, r28
    142a:	86 57       	subi	r24, 0x76	; 118
    142c:	9f 4f       	sbci	r25, 0xFF	; 255
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e8       	ldi	r20, 0x80	; 128
    1434:	5f e3       	ldi	r21, 0x3F	; 63
    1436:	fc 01       	movw	r30, r24
    1438:	60 81       	ld	r22, Z
    143a:	71 81       	ldd	r23, Z+1	; 0x01
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
    1444:	88 23       	and	r24, r24
    1446:	4c f4       	brge	.+18     	; 0x145a <main+0xb52>
		__ticks = 1;
    1448:	ce 01       	movw	r24, r28
    144a:	82 57       	subi	r24, 0x72	; 114
    144c:	9f 4f       	sbci	r25, 0xFF	; 255
    144e:	21 e0       	ldi	r18, 0x01	; 1
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	fc 01       	movw	r30, r24
    1454:	31 83       	std	Z+1, r19	; 0x01
    1456:	20 83       	st	Z, r18
    1458:	69 c0       	rjmp	.+210    	; 0x152c <main+0xc24>
	else if (__tmp > 65535)
    145a:	ce 01       	movw	r24, r28
    145c:	86 57       	subi	r24, 0x76	; 118
    145e:	9f 4f       	sbci	r25, 0xFF	; 255
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	3f ef       	ldi	r19, 0xFF	; 255
    1464:	4f e7       	ldi	r20, 0x7F	; 127
    1466:	57 e4       	ldi	r21, 0x47	; 71
    1468:	fc 01       	movw	r30, r24
    146a:	60 81       	ld	r22, Z
    146c:	71 81       	ldd	r23, Z+1	; 0x01
    146e:	82 81       	ldd	r24, Z+2	; 0x02
    1470:	93 81       	ldd	r25, Z+3	; 0x03
    1472:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
    1476:	18 16       	cp	r1, r24
    1478:	0c f0       	brlt	.+2      	; 0x147c <main+0xb74>
    147a:	46 c0       	rjmp	.+140    	; 0x1508 <main+0xc00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e2       	ldi	r20, 0x20	; 32
    1482:	51 e4       	ldi	r21, 0x41	; 65
    1484:	6a 89       	ldd	r22, Y+18	; 0x12
    1486:	7b 89       	ldd	r23, Y+19	; 0x13
    1488:	8c 89       	ldd	r24, Y+20	; 0x14
    148a:	9d 89       	ldd	r25, Y+21	; 0x15
    148c:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	8e 01       	movw	r16, r28
    1496:	02 57       	subi	r16, 0x72	; 114
    1498:	1f 4f       	sbci	r17, 0xFF	; 255
    149a:	bc 01       	movw	r22, r24
    149c:	cd 01       	movw	r24, r26
    149e:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	f8 01       	movw	r30, r16
    14a8:	91 83       	std	Z+1, r25	; 0x01
    14aa:	80 83       	st	Z, r24
    14ac:	24 c0       	rjmp	.+72     	; 0x14f6 <main+0xbee>
    14ae:	ce 01       	movw	r24, r28
    14b0:	80 57       	subi	r24, 0x70	; 112
    14b2:	9f 4f       	sbci	r25, 0xFF	; 255
    14b4:	29 e1       	ldi	r18, 0x19	; 25
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	fc 01       	movw	r30, r24
    14ba:	31 83       	std	Z+1, r19	; 0x01
    14bc:	20 83       	st	Z, r18
    14be:	ce 01       	movw	r24, r28
    14c0:	80 57       	subi	r24, 0x70	; 112
    14c2:	9f 4f       	sbci	r25, 0xFF	; 255
    14c4:	fc 01       	movw	r30, r24
    14c6:	80 81       	ld	r24, Z
    14c8:	91 81       	ldd	r25, Z+1	; 0x01
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <main+0xbc2>
    14ce:	9e 01       	movw	r18, r28
    14d0:	20 57       	subi	r18, 0x70	; 112
    14d2:	3f 4f       	sbci	r19, 0xFF	; 255
    14d4:	f9 01       	movw	r30, r18
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14da:	ce 01       	movw	r24, r28
    14dc:	82 57       	subi	r24, 0x72	; 114
    14de:	9f 4f       	sbci	r25, 0xFF	; 255
    14e0:	9e 01       	movw	r18, r28
    14e2:	22 57       	subi	r18, 0x72	; 114
    14e4:	3f 4f       	sbci	r19, 0xFF	; 255
    14e6:	f9 01       	movw	r30, r18
    14e8:	20 81       	ld	r18, Z
    14ea:	31 81       	ldd	r19, Z+1	; 0x01
    14ec:	21 50       	subi	r18, 0x01	; 1
    14ee:	31 09       	sbc	r19, r1
    14f0:	fc 01       	movw	r30, r24
    14f2:	31 83       	std	Z+1, r19	; 0x01
    14f4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f6:	ce 01       	movw	r24, r28
    14f8:	82 57       	subi	r24, 0x72	; 114
    14fa:	9f 4f       	sbci	r25, 0xFF	; 255
    14fc:	fc 01       	movw	r30, r24
    14fe:	80 81       	ld	r24, Z
    1500:	91 81       	ldd	r25, Z+1	; 0x01
    1502:	89 2b       	or	r24, r25
    1504:	a1 f6       	brne	.-88     	; 0x14ae <main+0xba6>
    1506:	2c c0       	rjmp	.+88     	; 0x1560 <main+0xc58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1508:	8e 01       	movw	r16, r28
    150a:	02 57       	subi	r16, 0x72	; 114
    150c:	1f 4f       	sbci	r17, 0xFF	; 255
    150e:	ce 01       	movw	r24, r28
    1510:	86 57       	subi	r24, 0x76	; 118
    1512:	9f 4f       	sbci	r25, 0xFF	; 255
    1514:	fc 01       	movw	r30, r24
    1516:	60 81       	ld	r22, Z
    1518:	71 81       	ldd	r23, Z+1	; 0x01
    151a:	82 81       	ldd	r24, Z+2	; 0x02
    151c:	93 81       	ldd	r25, Z+3	; 0x03
    151e:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	f8 01       	movw	r30, r16
    1528:	91 83       	std	Z+1, r25	; 0x01
    152a:	80 83       	st	Z, r24
    152c:	ce 01       	movw	r24, r28
    152e:	8e 56       	subi	r24, 0x6E	; 110
    1530:	9f 4f       	sbci	r25, 0xFF	; 255
    1532:	9e 01       	movw	r18, r28
    1534:	22 57       	subi	r18, 0x72	; 114
    1536:	3f 4f       	sbci	r19, 0xFF	; 255
    1538:	f9 01       	movw	r30, r18
    153a:	20 81       	ld	r18, Z
    153c:	31 81       	ldd	r19, Z+1	; 0x01
    153e:	fc 01       	movw	r30, r24
    1540:	31 83       	std	Z+1, r19	; 0x01
    1542:	20 83       	st	Z, r18
    1544:	ce 01       	movw	r24, r28
    1546:	8e 56       	subi	r24, 0x6E	; 110
    1548:	9f 4f       	sbci	r25, 0xFF	; 255
    154a:	fc 01       	movw	r30, r24
    154c:	80 81       	ld	r24, Z
    154e:	91 81       	ldd	r25, Z+1	; 0x01
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <main+0xc48>
    1554:	9e 01       	movw	r18, r28
    1556:	2e 56       	subi	r18, 0x6E	; 110
    1558:	3f 4f       	sbci	r19, 0xFF	; 255
    155a:	f9 01       	movw	r30, r18
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	80 83       	st	Z, r24
		_delay_ms(50);
		}
		if(key == 5)
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	85 30       	cpi	r24, 0x05	; 5
    1564:	09 f0       	breq	.+2      	; 0x1568 <main+0xc60>
    1566:	7f c1       	rjmp	.+766    	; 0x1866 <main+0xf5e>
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	a8 e4       	ldi	r26, 0x48	; 72
    156e:	b2 e4       	ldi	r27, 0x42	; 66
    1570:	8e a3       	std	Y+38, r24	; 0x26
    1572:	9f a3       	std	Y+39, r25	; 0x27
    1574:	a8 a7       	std	Y+40, r26	; 0x28
    1576:	b9 a7       	std	Y+41, r27	; 0x29

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1578:	8e 01       	movw	r16, r28
    157a:	08 55       	subi	r16, 0x58	; 88
    157c:	1f 4f       	sbci	r17, 0xFF	; 255
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	4a e7       	ldi	r20, 0x7A	; 122
    1584:	53 e4       	ldi	r21, 0x43	; 67
    1586:	6e a1       	ldd	r22, Y+38	; 0x26
    1588:	7f a1       	ldd	r23, Y+39	; 0x27
    158a:	88 a5       	ldd	r24, Y+40	; 0x28
    158c:	99 a5       	ldd	r25, Y+41	; 0x29
    158e:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	f8 01       	movw	r30, r16
    1598:	80 83       	st	Z, r24
    159a:	91 83       	std	Z+1, r25	; 0x01
    159c:	a2 83       	std	Z+2, r26	; 0x02
    159e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15a0:	ce 01       	movw	r24, r28
    15a2:	88 55       	subi	r24, 0x58	; 88
    15a4:	9f 4f       	sbci	r25, 0xFF	; 255
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e8       	ldi	r20, 0x80	; 128
    15ac:	5f e3       	ldi	r21, 0x3F	; 63
    15ae:	fc 01       	movw	r30, r24
    15b0:	60 81       	ld	r22, Z
    15b2:	71 81       	ldd	r23, Z+1	; 0x01
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	93 81       	ldd	r25, Z+3	; 0x03
    15b8:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
    15bc:	88 23       	and	r24, r24
    15be:	4c f4       	brge	.+18     	; 0x15d2 <main+0xcca>
		__ticks = 1;
    15c0:	ce 01       	movw	r24, r28
    15c2:	84 55       	subi	r24, 0x54	; 84
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	21 e0       	ldi	r18, 0x01	; 1
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	fc 01       	movw	r30, r24
    15cc:	31 83       	std	Z+1, r19	; 0x01
    15ce:	20 83       	st	Z, r18
    15d0:	69 c0       	rjmp	.+210    	; 0x16a4 <main+0xd9c>
	else if (__tmp > 65535)
    15d2:	ce 01       	movw	r24, r28
    15d4:	88 55       	subi	r24, 0x58	; 88
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	3f ef       	ldi	r19, 0xFF	; 255
    15dc:	4f e7       	ldi	r20, 0x7F	; 127
    15de:	57 e4       	ldi	r21, 0x47	; 71
    15e0:	fc 01       	movw	r30, r24
    15e2:	60 81       	ld	r22, Z
    15e4:	71 81       	ldd	r23, Z+1	; 0x01
    15e6:	82 81       	ldd	r24, Z+2	; 0x02
    15e8:	93 81       	ldd	r25, Z+3	; 0x03
    15ea:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	0c f0       	brlt	.+2      	; 0x15f4 <main+0xcec>
    15f2:	46 c0       	rjmp	.+140    	; 0x1680 <main+0xd78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e2       	ldi	r20, 0x20	; 32
    15fa:	51 e4       	ldi	r21, 0x41	; 65
    15fc:	6e a1       	ldd	r22, Y+38	; 0x26
    15fe:	7f a1       	ldd	r23, Y+39	; 0x27
    1600:	88 a5       	ldd	r24, Y+40	; 0x28
    1602:	99 a5       	ldd	r25, Y+41	; 0x29
    1604:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	8e 01       	movw	r16, r28
    160e:	04 55       	subi	r16, 0x54	; 84
    1610:	1f 4f       	sbci	r17, 0xFF	; 255
    1612:	bc 01       	movw	r22, r24
    1614:	cd 01       	movw	r24, r26
    1616:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	f8 01       	movw	r30, r16
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	80 83       	st	Z, r24
    1624:	24 c0       	rjmp	.+72     	; 0x166e <main+0xd66>
    1626:	ce 01       	movw	r24, r28
    1628:	82 55       	subi	r24, 0x52	; 82
    162a:	9f 4f       	sbci	r25, 0xFF	; 255
    162c:	29 e1       	ldi	r18, 0x19	; 25
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	fc 01       	movw	r30, r24
    1632:	31 83       	std	Z+1, r19	; 0x01
    1634:	20 83       	st	Z, r18
    1636:	ce 01       	movw	r24, r28
    1638:	82 55       	subi	r24, 0x52	; 82
    163a:	9f 4f       	sbci	r25, 0xFF	; 255
    163c:	fc 01       	movw	r30, r24
    163e:	80 81       	ld	r24, Z
    1640:	91 81       	ldd	r25, Z+1	; 0x01
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <main+0xd3a>
    1646:	9e 01       	movw	r18, r28
    1648:	22 55       	subi	r18, 0x52	; 82
    164a:	3f 4f       	sbci	r19, 0xFF	; 255
    164c:	f9 01       	movw	r30, r18
    164e:	91 83       	std	Z+1, r25	; 0x01
    1650:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1652:	ce 01       	movw	r24, r28
    1654:	84 55       	subi	r24, 0x54	; 84
    1656:	9f 4f       	sbci	r25, 0xFF	; 255
    1658:	9e 01       	movw	r18, r28
    165a:	24 55       	subi	r18, 0x54	; 84
    165c:	3f 4f       	sbci	r19, 0xFF	; 255
    165e:	f9 01       	movw	r30, r18
    1660:	20 81       	ld	r18, Z
    1662:	31 81       	ldd	r19, Z+1	; 0x01
    1664:	21 50       	subi	r18, 0x01	; 1
    1666:	31 09       	sbc	r19, r1
    1668:	fc 01       	movw	r30, r24
    166a:	31 83       	std	Z+1, r19	; 0x01
    166c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166e:	ce 01       	movw	r24, r28
    1670:	84 55       	subi	r24, 0x54	; 84
    1672:	9f 4f       	sbci	r25, 0xFF	; 255
    1674:	fc 01       	movw	r30, r24
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	89 2b       	or	r24, r25
    167c:	a1 f6       	brne	.-88     	; 0x1626 <main+0xd1e>
    167e:	2c c0       	rjmp	.+88     	; 0x16d8 <main+0xdd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1680:	8e 01       	movw	r16, r28
    1682:	04 55       	subi	r16, 0x54	; 84
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	ce 01       	movw	r24, r28
    1688:	88 55       	subi	r24, 0x58	; 88
    168a:	9f 4f       	sbci	r25, 0xFF	; 255
    168c:	fc 01       	movw	r30, r24
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	f8 01       	movw	r30, r16
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	80 83       	st	Z, r24
    16a4:	ce 01       	movw	r24, r28
    16a6:	80 55       	subi	r24, 0x50	; 80
    16a8:	9f 4f       	sbci	r25, 0xFF	; 255
    16aa:	9e 01       	movw	r18, r28
    16ac:	24 55       	subi	r18, 0x54	; 84
    16ae:	3f 4f       	sbci	r19, 0xFF	; 255
    16b0:	f9 01       	movw	r30, r18
    16b2:	20 81       	ld	r18, Z
    16b4:	31 81       	ldd	r19, Z+1	; 0x01
    16b6:	fc 01       	movw	r30, r24
    16b8:	31 83       	std	Z+1, r19	; 0x01
    16ba:	20 83       	st	Z, r18
    16bc:	ce 01       	movw	r24, r28
    16be:	80 55       	subi	r24, 0x50	; 80
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	fc 01       	movw	r30, r24
    16c4:	80 81       	ld	r24, Z
    16c6:	91 81       	ldd	r25, Z+1	; 0x01
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <main+0xdc0>
    16cc:	9e 01       	movw	r18, r28
    16ce:	20 55       	subi	r18, 0x50	; 80
    16d0:	3f 4f       	sbci	r19, 0xFF	; 255
    16d2:	f9 01       	movw	r30, r18
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(ONE);
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(TWO);
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(THREE);
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(FOUR);
    16ea:	84 e0       	ldi	r24, 0x04	; 4
    16ec:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_displayNo(FIVE);
    16f0:	85 e0       	ldi	r24, 0x05	; 5
    16f2:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a8 e4       	ldi	r26, 0x48	; 72
    16fc:	b2 e4       	ldi	r27, 0x42	; 66
    16fe:	8a 8f       	std	Y+26, r24	; 0x1a
    1700:	9b 8f       	std	Y+27, r25	; 0x1b
    1702:	ac 8f       	std	Y+28, r26	; 0x1c
    1704:	bd 8f       	std	Y+29, r27	; 0x1d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1706:	8e 01       	movw	r16, r28
    1708:	02 56       	subi	r16, 0x62	; 98
    170a:	1f 4f       	sbci	r17, 0xFF	; 255
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	4a e7       	ldi	r20, 0x7A	; 122
    1712:	53 e4       	ldi	r21, 0x43	; 67
    1714:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1716:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1718:	8c 8d       	ldd	r24, Y+28	; 0x1c
    171a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    171c:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	f8 01       	movw	r30, r16
    1726:	80 83       	st	Z, r24
    1728:	91 83       	std	Z+1, r25	; 0x01
    172a:	a2 83       	std	Z+2, r26	; 0x02
    172c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    172e:	ce 01       	movw	r24, r28
    1730:	82 56       	subi	r24, 0x62	; 98
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e8       	ldi	r20, 0x80	; 128
    173a:	5f e3       	ldi	r21, 0x3F	; 63
    173c:	fc 01       	movw	r30, r24
    173e:	60 81       	ld	r22, Z
    1740:	71 81       	ldd	r23, Z+1	; 0x01
    1742:	82 81       	ldd	r24, Z+2	; 0x02
    1744:	93 81       	ldd	r25, Z+3	; 0x03
    1746:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
    174a:	88 23       	and	r24, r24
    174c:	4c f4       	brge	.+18     	; 0x1760 <main+0xe58>
		__ticks = 1;
    174e:	ce 01       	movw	r24, r28
    1750:	8e 55       	subi	r24, 0x5E	; 94
    1752:	9f 4f       	sbci	r25, 0xFF	; 255
    1754:	21 e0       	ldi	r18, 0x01	; 1
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	fc 01       	movw	r30, r24
    175a:	31 83       	std	Z+1, r19	; 0x01
    175c:	20 83       	st	Z, r18
    175e:	69 c0       	rjmp	.+210    	; 0x1832 <main+0xf2a>
	else if (__tmp > 65535)
    1760:	ce 01       	movw	r24, r28
    1762:	82 56       	subi	r24, 0x62	; 98
    1764:	9f 4f       	sbci	r25, 0xFF	; 255
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	3f ef       	ldi	r19, 0xFF	; 255
    176a:	4f e7       	ldi	r20, 0x7F	; 127
    176c:	57 e4       	ldi	r21, 0x47	; 71
    176e:	fc 01       	movw	r30, r24
    1770:	60 81       	ld	r22, Z
    1772:	71 81       	ldd	r23, Z+1	; 0x01
    1774:	82 81       	ldd	r24, Z+2	; 0x02
    1776:	93 81       	ldd	r25, Z+3	; 0x03
    1778:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
    177c:	18 16       	cp	r1, r24
    177e:	0c f0       	brlt	.+2      	; 0x1782 <main+0xe7a>
    1780:	46 c0       	rjmp	.+140    	; 0x180e <main+0xf06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e2       	ldi	r20, 0x20	; 32
    1788:	51 e4       	ldi	r21, 0x41	; 65
    178a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    178c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    178e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1790:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1792:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	8e 01       	movw	r16, r28
    179c:	0e 55       	subi	r16, 0x5E	; 94
    179e:	1f 4f       	sbci	r17, 0xFF	; 255
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	f8 01       	movw	r30, r16
    17ae:	91 83       	std	Z+1, r25	; 0x01
    17b0:	80 83       	st	Z, r24
    17b2:	24 c0       	rjmp	.+72     	; 0x17fc <main+0xef4>
    17b4:	ce 01       	movw	r24, r28
    17b6:	8c 55       	subi	r24, 0x5C	; 92
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	29 e1       	ldi	r18, 0x19	; 25
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	fc 01       	movw	r30, r24
    17c0:	31 83       	std	Z+1, r19	; 0x01
    17c2:	20 83       	st	Z, r18
    17c4:	ce 01       	movw	r24, r28
    17c6:	8c 55       	subi	r24, 0x5C	; 92
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	fc 01       	movw	r30, r24
    17cc:	80 81       	ld	r24, Z
    17ce:	91 81       	ldd	r25, Z+1	; 0x01
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <main+0xec8>
    17d4:	9e 01       	movw	r18, r28
    17d6:	2c 55       	subi	r18, 0x5C	; 92
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	f9 01       	movw	r30, r18
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e0:	ce 01       	movw	r24, r28
    17e2:	8e 55       	subi	r24, 0x5E	; 94
    17e4:	9f 4f       	sbci	r25, 0xFF	; 255
    17e6:	9e 01       	movw	r18, r28
    17e8:	2e 55       	subi	r18, 0x5E	; 94
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	f9 01       	movw	r30, r18
    17ee:	20 81       	ld	r18, Z
    17f0:	31 81       	ldd	r19, Z+1	; 0x01
    17f2:	21 50       	subi	r18, 0x01	; 1
    17f4:	31 09       	sbc	r19, r1
    17f6:	fc 01       	movw	r30, r24
    17f8:	31 83       	std	Z+1, r19	; 0x01
    17fa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fc:	ce 01       	movw	r24, r28
    17fe:	8e 55       	subi	r24, 0x5E	; 94
    1800:	9f 4f       	sbci	r25, 0xFF	; 255
    1802:	fc 01       	movw	r30, r24
    1804:	80 81       	ld	r24, Z
    1806:	91 81       	ldd	r25, Z+1	; 0x01
    1808:	89 2b       	or	r24, r25
    180a:	a1 f6       	brne	.-88     	; 0x17b4 <main+0xeac>
    180c:	2c c0       	rjmp	.+88     	; 0x1866 <main+0xf5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180e:	8e 01       	movw	r16, r28
    1810:	0e 55       	subi	r16, 0x5E	; 94
    1812:	1f 4f       	sbci	r17, 0xFF	; 255
    1814:	ce 01       	movw	r24, r28
    1816:	82 56       	subi	r24, 0x62	; 98
    1818:	9f 4f       	sbci	r25, 0xFF	; 255
    181a:	fc 01       	movw	r30, r24
    181c:	60 81       	ld	r22, Z
    181e:	71 81       	ldd	r23, Z+1	; 0x01
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	f8 01       	movw	r30, r16
    182e:	91 83       	std	Z+1, r25	; 0x01
    1830:	80 83       	st	Z, r24
    1832:	ce 01       	movw	r24, r28
    1834:	8a 55       	subi	r24, 0x5A	; 90
    1836:	9f 4f       	sbci	r25, 0xFF	; 255
    1838:	9e 01       	movw	r18, r28
    183a:	2e 55       	subi	r18, 0x5E	; 94
    183c:	3f 4f       	sbci	r19, 0xFF	; 255
    183e:	f9 01       	movw	r30, r18
    1840:	20 81       	ld	r18, Z
    1842:	31 81       	ldd	r19, Z+1	; 0x01
    1844:	fc 01       	movw	r30, r24
    1846:	31 83       	std	Z+1, r19	; 0x01
    1848:	20 83       	st	Z, r18
    184a:	ce 01       	movw	r24, r28
    184c:	8a 55       	subi	r24, 0x5A	; 90
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	fc 01       	movw	r30, r24
    1852:	80 81       	ld	r24, Z
    1854:	91 81       	ldd	r25, Z+1	; 0x01
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	f1 f7       	brne	.-4      	; 0x1856 <main+0xf4e>
    185a:	9e 01       	movw	r18, r28
    185c:	2a 55       	subi	r18, 0x5A	; 90
    185e:	3f 4f       	sbci	r19, 0xFF	; 255
    1860:	f9 01       	movw	r30, r18
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	80 83       	st	Z, r24
			_delay_ms(50);
		}
			if(key == 6)
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	86 30       	cpi	r24, 0x06	; 6
    186a:	09 f0       	breq	.+2      	; 0x186e <main+0xf66>
    186c:	7f c1       	rjmp	.+766    	; 0x1b6c <main+0x1264>
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	a8 e4       	ldi	r26, 0x48	; 72
    1874:	b2 e4       	ldi	r27, 0x42	; 66
    1876:	8e a7       	std	Y+46, r24	; 0x2e
    1878:	9f a7       	std	Y+47, r25	; 0x2f
    187a:	a8 ab       	std	Y+48, r26	; 0x30
    187c:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    187e:	8e 01       	movw	r16, r28
    1880:	04 54       	subi	r16, 0x44	; 68
    1882:	1f 4f       	sbci	r17, 0xFF	; 255
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	4a e7       	ldi	r20, 0x7A	; 122
    188a:	53 e4       	ldi	r21, 0x43	; 67
    188c:	6e a5       	ldd	r22, Y+46	; 0x2e
    188e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1890:	88 a9       	ldd	r24, Y+48	; 0x30
    1892:	99 a9       	ldd	r25, Y+49	; 0x31
    1894:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	f8 01       	movw	r30, r16
    189e:	80 83       	st	Z, r24
    18a0:	91 83       	std	Z+1, r25	; 0x01
    18a2:	a2 83       	std	Z+2, r26	; 0x02
    18a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18a6:	ce 01       	movw	r24, r28
    18a8:	84 54       	subi	r24, 0x44	; 68
    18aa:	9f 4f       	sbci	r25, 0xFF	; 255
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e8       	ldi	r20, 0x80	; 128
    18b2:	5f e3       	ldi	r21, 0x3F	; 63
    18b4:	fc 01       	movw	r30, r24
    18b6:	60 81       	ld	r22, Z
    18b8:	71 81       	ldd	r23, Z+1	; 0x01
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
    18c2:	88 23       	and	r24, r24
    18c4:	4c f4       	brge	.+18     	; 0x18d8 <main+0xfd0>
		__ticks = 1;
    18c6:	ce 01       	movw	r24, r28
    18c8:	80 54       	subi	r24, 0x40	; 64
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	21 e0       	ldi	r18, 0x01	; 1
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	fc 01       	movw	r30, r24
    18d2:	31 83       	std	Z+1, r19	; 0x01
    18d4:	20 83       	st	Z, r18
    18d6:	69 c0       	rjmp	.+210    	; 0x19aa <main+0x10a2>
	else if (__tmp > 65535)
    18d8:	ce 01       	movw	r24, r28
    18da:	84 54       	subi	r24, 0x44	; 68
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	3f ef       	ldi	r19, 0xFF	; 255
    18e2:	4f e7       	ldi	r20, 0x7F	; 127
    18e4:	57 e4       	ldi	r21, 0x47	; 71
    18e6:	fc 01       	movw	r30, r24
    18e8:	60 81       	ld	r22, Z
    18ea:	71 81       	ldd	r23, Z+1	; 0x01
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
    18f4:	18 16       	cp	r1, r24
    18f6:	0c f0       	brlt	.+2      	; 0x18fa <main+0xff2>
    18f8:	46 c0       	rjmp	.+140    	; 0x1986 <main+0x107e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e2       	ldi	r20, 0x20	; 32
    1900:	51 e4       	ldi	r21, 0x41	; 65
    1902:	6e a5       	ldd	r22, Y+46	; 0x2e
    1904:	7f a5       	ldd	r23, Y+47	; 0x2f
    1906:	88 a9       	ldd	r24, Y+48	; 0x30
    1908:	99 a9       	ldd	r25, Y+49	; 0x31
    190a:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	8e 01       	movw	r16, r28
    1914:	00 54       	subi	r16, 0x40	; 64
    1916:	1f 4f       	sbci	r17, 0xFF	; 255
    1918:	bc 01       	movw	r22, r24
    191a:	cd 01       	movw	r24, r26
    191c:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	f8 01       	movw	r30, r16
    1926:	91 83       	std	Z+1, r25	; 0x01
    1928:	80 83       	st	Z, r24
    192a:	24 c0       	rjmp	.+72     	; 0x1974 <main+0x106c>
    192c:	ce 01       	movw	r24, r28
    192e:	8e 53       	subi	r24, 0x3E	; 62
    1930:	9f 4f       	sbci	r25, 0xFF	; 255
    1932:	29 e1       	ldi	r18, 0x19	; 25
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	fc 01       	movw	r30, r24
    1938:	31 83       	std	Z+1, r19	; 0x01
    193a:	20 83       	st	Z, r18
    193c:	ce 01       	movw	r24, r28
    193e:	8e 53       	subi	r24, 0x3E	; 62
    1940:	9f 4f       	sbci	r25, 0xFF	; 255
    1942:	fc 01       	movw	r30, r24
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <main+0x1040>
    194c:	9e 01       	movw	r18, r28
    194e:	2e 53       	subi	r18, 0x3E	; 62
    1950:	3f 4f       	sbci	r19, 0xFF	; 255
    1952:	f9 01       	movw	r30, r18
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1958:	ce 01       	movw	r24, r28
    195a:	80 54       	subi	r24, 0x40	; 64
    195c:	9f 4f       	sbci	r25, 0xFF	; 255
    195e:	9e 01       	movw	r18, r28
    1960:	20 54       	subi	r18, 0x40	; 64
    1962:	3f 4f       	sbci	r19, 0xFF	; 255
    1964:	f9 01       	movw	r30, r18
    1966:	20 81       	ld	r18, Z
    1968:	31 81       	ldd	r19, Z+1	; 0x01
    196a:	21 50       	subi	r18, 0x01	; 1
    196c:	31 09       	sbc	r19, r1
    196e:	fc 01       	movw	r30, r24
    1970:	31 83       	std	Z+1, r19	; 0x01
    1972:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1974:	ce 01       	movw	r24, r28
    1976:	80 54       	subi	r24, 0x40	; 64
    1978:	9f 4f       	sbci	r25, 0xFF	; 255
    197a:	fc 01       	movw	r30, r24
    197c:	80 81       	ld	r24, Z
    197e:	91 81       	ldd	r25, Z+1	; 0x01
    1980:	89 2b       	or	r24, r25
    1982:	a1 f6       	brne	.-88     	; 0x192c <main+0x1024>
    1984:	2c c0       	rjmp	.+88     	; 0x19de <main+0x10d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1986:	8e 01       	movw	r16, r28
    1988:	00 54       	subi	r16, 0x40	; 64
    198a:	1f 4f       	sbci	r17, 0xFF	; 255
    198c:	ce 01       	movw	r24, r28
    198e:	84 54       	subi	r24, 0x44	; 68
    1990:	9f 4f       	sbci	r25, 0xFF	; 255
    1992:	fc 01       	movw	r30, r24
    1994:	60 81       	ld	r22, Z
    1996:	71 81       	ldd	r23, Z+1	; 0x01
    1998:	82 81       	ldd	r24, Z+2	; 0x02
    199a:	93 81       	ldd	r25, Z+3	; 0x03
    199c:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	f8 01       	movw	r30, r16
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
    19aa:	ce 01       	movw	r24, r28
    19ac:	8c 53       	subi	r24, 0x3C	; 60
    19ae:	9f 4f       	sbci	r25, 0xFF	; 255
    19b0:	9e 01       	movw	r18, r28
    19b2:	20 54       	subi	r18, 0x40	; 64
    19b4:	3f 4f       	sbci	r19, 0xFF	; 255
    19b6:	f9 01       	movw	r30, r18
    19b8:	20 81       	ld	r18, Z
    19ba:	31 81       	ldd	r19, Z+1	; 0x01
    19bc:	fc 01       	movw	r30, r24
    19be:	31 83       	std	Z+1, r19	; 0x01
    19c0:	20 83       	st	Z, r18
    19c2:	ce 01       	movw	r24, r28
    19c4:	8c 53       	subi	r24, 0x3C	; 60
    19c6:	9f 4f       	sbci	r25, 0xFF	; 255
    19c8:	fc 01       	movw	r30, r24
    19ca:	80 81       	ld	r24, Z
    19cc:	91 81       	ldd	r25, Z+1	; 0x01
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <main+0x10c6>
    19d2:	9e 01       	movw	r18, r28
    19d4:	2c 53       	subi	r18, 0x3C	; 60
    19d6:	3f 4f       	sbci	r19, 0xFF	; 255
    19d8:	f9 01       	movw	r30, r18
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    19ea:	83 e0       	ldi	r24, 0x03	; 3
    19ec:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    19f0:	84 e0       	ldi	r24, 0x04	; 4
    19f2:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(SIX);
    19f6:	86 e0       	ldi	r24, 0x06	; 6
    19f8:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	a8 e4       	ldi	r26, 0x48	; 72
    1a02:	b2 e4       	ldi	r27, 0x42	; 66
    1a04:	8a a3       	std	Y+34, r24	; 0x22
    1a06:	9b a3       	std	Y+35, r25	; 0x23
    1a08:	ac a3       	std	Y+36, r26	; 0x24
    1a0a:	bd a3       	std	Y+37, r27	; 0x25

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a0c:	8e 01       	movw	r16, r28
    1a0e:	0e 54       	subi	r16, 0x4E	; 78
    1a10:	1f 4f       	sbci	r17, 0xFF	; 255
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	4a e7       	ldi	r20, 0x7A	; 122
    1a18:	53 e4       	ldi	r21, 0x43	; 67
    1a1a:	6a a1       	ldd	r22, Y+34	; 0x22
    1a1c:	7b a1       	ldd	r23, Y+35	; 0x23
    1a1e:	8c a1       	ldd	r24, Y+36	; 0x24
    1a20:	9d a1       	ldd	r25, Y+37	; 0x25
    1a22:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	80 83       	st	Z, r24
    1a2e:	91 83       	std	Z+1, r25	; 0x01
    1a30:	a2 83       	std	Z+2, r26	; 0x02
    1a32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a34:	ce 01       	movw	r24, r28
    1a36:	8e 54       	subi	r24, 0x4E	; 78
    1a38:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e8       	ldi	r20, 0x80	; 128
    1a40:	5f e3       	ldi	r21, 0x3F	; 63
    1a42:	fc 01       	movw	r30, r24
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
    1a50:	88 23       	and	r24, r24
    1a52:	4c f4       	brge	.+18     	; 0x1a66 <main+0x115e>
		__ticks = 1;
    1a54:	ce 01       	movw	r24, r28
    1a56:	8a 54       	subi	r24, 0x4A	; 74
    1a58:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5a:	21 e0       	ldi	r18, 0x01	; 1
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	fc 01       	movw	r30, r24
    1a60:	31 83       	std	Z+1, r19	; 0x01
    1a62:	20 83       	st	Z, r18
    1a64:	69 c0       	rjmp	.+210    	; 0x1b38 <main+0x1230>
	else if (__tmp > 65535)
    1a66:	ce 01       	movw	r24, r28
    1a68:	8e 54       	subi	r24, 0x4E	; 78
    1a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	3f ef       	ldi	r19, 0xFF	; 255
    1a70:	4f e7       	ldi	r20, 0x7F	; 127
    1a72:	57 e4       	ldi	r21, 0x47	; 71
    1a74:	fc 01       	movw	r30, r24
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
    1a82:	18 16       	cp	r1, r24
    1a84:	0c f0       	brlt	.+2      	; 0x1a88 <main+0x1180>
    1a86:	46 c0       	rjmp	.+140    	; 0x1b14 <main+0x120c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	6a a1       	ldd	r22, Y+34	; 0x22
    1a92:	7b a1       	ldd	r23, Y+35	; 0x23
    1a94:	8c a1       	ldd	r24, Y+36	; 0x24
    1a96:	9d a1       	ldd	r25, Y+37	; 0x25
    1a98:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8e 01       	movw	r16, r28
    1aa2:	0a 54       	subi	r16, 0x4A	; 74
    1aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	f8 01       	movw	r30, r16
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
    1ab8:	24 c0       	rjmp	.+72     	; 0x1b02 <main+0x11fa>
    1aba:	ce 01       	movw	r24, r28
    1abc:	88 54       	subi	r24, 0x48	; 72
    1abe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac0:	29 e1       	ldi	r18, 0x19	; 25
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	31 83       	std	Z+1, r19	; 0x01
    1ac8:	20 83       	st	Z, r18
    1aca:	ce 01       	movw	r24, r28
    1acc:	88 54       	subi	r24, 0x48	; 72
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <main+0x11ce>
    1ada:	9e 01       	movw	r18, r28
    1adc:	28 54       	subi	r18, 0x48	; 72
    1ade:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae0:	f9 01       	movw	r30, r18
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	8a 54       	subi	r24, 0x4A	; 74
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	9e 01       	movw	r18, r28
    1aee:	2a 54       	subi	r18, 0x4A	; 74
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	f9 01       	movw	r30, r18
    1af4:	20 81       	ld	r18, Z
    1af6:	31 81       	ldd	r19, Z+1	; 0x01
    1af8:	21 50       	subi	r18, 0x01	; 1
    1afa:	31 09       	sbc	r19, r1
    1afc:	fc 01       	movw	r30, r24
    1afe:	31 83       	std	Z+1, r19	; 0x01
    1b00:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b02:	ce 01       	movw	r24, r28
    1b04:	8a 54       	subi	r24, 0x4A	; 74
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	fc 01       	movw	r30, r24
    1b0a:	80 81       	ld	r24, Z
    1b0c:	91 81       	ldd	r25, Z+1	; 0x01
    1b0e:	89 2b       	or	r24, r25
    1b10:	a1 f6       	brne	.-88     	; 0x1aba <main+0x11b2>
    1b12:	2c c0       	rjmp	.+88     	; 0x1b6c <main+0x1264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b14:	8e 01       	movw	r16, r28
    1b16:	0a 54       	subi	r16, 0x4A	; 74
    1b18:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	8e 54       	subi	r24, 0x4E	; 78
    1b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b20:	fc 01       	movw	r30, r24
    1b22:	60 81       	ld	r22, Z
    1b24:	71 81       	ldd	r23, Z+1	; 0x01
    1b26:	82 81       	ldd	r24, Z+2	; 0x02
    1b28:	93 81       	ldd	r25, Z+3	; 0x03
    1b2a:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	f8 01       	movw	r30, r16
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	80 83       	st	Z, r24
    1b38:	ce 01       	movw	r24, r28
    1b3a:	86 54       	subi	r24, 0x46	; 70
    1b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3e:	9e 01       	movw	r18, r28
    1b40:	2a 54       	subi	r18, 0x4A	; 74
    1b42:	3f 4f       	sbci	r19, 0xFF	; 255
    1b44:	f9 01       	movw	r30, r18
    1b46:	20 81       	ld	r18, Z
    1b48:	31 81       	ldd	r19, Z+1	; 0x01
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	31 83       	std	Z+1, r19	; 0x01
    1b4e:	20 83       	st	Z, r18
    1b50:	ce 01       	movw	r24, r28
    1b52:	86 54       	subi	r24, 0x46	; 70
    1b54:	9f 4f       	sbci	r25, 0xFF	; 255
    1b56:	fc 01       	movw	r30, r24
    1b58:	80 81       	ld	r24, Z
    1b5a:	91 81       	ldd	r25, Z+1	; 0x01
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <main+0x1254>
    1b60:	9e 01       	movw	r18, r28
    1b62:	26 54       	subi	r18, 0x46	; 70
    1b64:	3f 4f       	sbci	r19, 0xFF	; 255
    1b66:	f9 01       	movw	r30, r18
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
				_delay_ms(50);
			}
			if(key == 7)
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	87 30       	cpi	r24, 0x07	; 7
    1b70:	09 f0       	breq	.+2      	; 0x1b74 <main+0x126c>
    1b72:	7f c1       	rjmp	.+766    	; 0x1e72 <main+0x156a>
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	a8 e4       	ldi	r26, 0x48	; 72
    1b7a:	b2 e4       	ldi	r27, 0x42	; 66
    1b7c:	8e ab       	std	Y+54, r24	; 0x36
    1b7e:	9f ab       	std	Y+55, r25	; 0x37
    1b80:	a8 af       	std	Y+56, r26	; 0x38
    1b82:	b9 af       	std	Y+57, r27	; 0x39

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b84:	8e 01       	movw	r16, r28
    1b86:	00 53       	subi	r16, 0x30	; 48
    1b88:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	4a e7       	ldi	r20, 0x7A	; 122
    1b90:	53 e4       	ldi	r21, 0x43	; 67
    1b92:	6e a9       	ldd	r22, Y+54	; 0x36
    1b94:	7f a9       	ldd	r23, Y+55	; 0x37
    1b96:	88 ad       	ldd	r24, Y+56	; 0x38
    1b98:	99 ad       	ldd	r25, Y+57	; 0x39
    1b9a:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	80 83       	st	Z, r24
    1ba6:	91 83       	std	Z+1, r25	; 0x01
    1ba8:	a2 83       	std	Z+2, r26	; 0x02
    1baa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bac:	ce 01       	movw	r24, r28
    1bae:	80 53       	subi	r24, 0x30	; 48
    1bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e8       	ldi	r20, 0x80	; 128
    1bb8:	5f e3       	ldi	r21, 0x3F	; 63
    1bba:	fc 01       	movw	r30, r24
    1bbc:	60 81       	ld	r22, Z
    1bbe:	71 81       	ldd	r23, Z+1	; 0x01
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	93 81       	ldd	r25, Z+3	; 0x03
    1bc4:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
    1bc8:	88 23       	and	r24, r24
    1bca:	4c f4       	brge	.+18     	; 0x1bde <main+0x12d6>
		__ticks = 1;
    1bcc:	ce 01       	movw	r24, r28
    1bce:	8c 52       	subi	r24, 0x2C	; 44
    1bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd2:	21 e0       	ldi	r18, 0x01	; 1
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	31 83       	std	Z+1, r19	; 0x01
    1bda:	20 83       	st	Z, r18
    1bdc:	69 c0       	rjmp	.+210    	; 0x1cb0 <main+0x13a8>
	else if (__tmp > 65535)
    1bde:	ce 01       	movw	r24, r28
    1be0:	80 53       	subi	r24, 0x30	; 48
    1be2:	9f 4f       	sbci	r25, 0xFF	; 255
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	3f ef       	ldi	r19, 0xFF	; 255
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	57 e4       	ldi	r21, 0x47	; 71
    1bec:	fc 01       	movw	r30, r24
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
    1bfa:	18 16       	cp	r1, r24
    1bfc:	0c f0       	brlt	.+2      	; 0x1c00 <main+0x12f8>
    1bfe:	46 c0       	rjmp	.+140    	; 0x1c8c <main+0x1384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e2       	ldi	r20, 0x20	; 32
    1c06:	51 e4       	ldi	r21, 0x41	; 65
    1c08:	6e a9       	ldd	r22, Y+54	; 0x36
    1c0a:	7f a9       	ldd	r23, Y+55	; 0x37
    1c0c:	88 ad       	ldd	r24, Y+56	; 0x38
    1c0e:	99 ad       	ldd	r25, Y+57	; 0x39
    1c10:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	8e 01       	movw	r16, r28
    1c1a:	0c 52       	subi	r16, 0x2C	; 44
    1c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	80 83       	st	Z, r24
    1c30:	24 c0       	rjmp	.+72     	; 0x1c7a <main+0x1372>
    1c32:	ce 01       	movw	r24, r28
    1c34:	8a 52       	subi	r24, 0x2A	; 42
    1c36:	9f 4f       	sbci	r25, 0xFF	; 255
    1c38:	29 e1       	ldi	r18, 0x19	; 25
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	31 83       	std	Z+1, r19	; 0x01
    1c40:	20 83       	st	Z, r18
    1c42:	ce 01       	movw	r24, r28
    1c44:	8a 52       	subi	r24, 0x2A	; 42
    1c46:	9f 4f       	sbci	r25, 0xFF	; 255
    1c48:	fc 01       	movw	r30, r24
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <main+0x1346>
    1c52:	9e 01       	movw	r18, r28
    1c54:	2a 52       	subi	r18, 0x2A	; 42
    1c56:	3f 4f       	sbci	r19, 0xFF	; 255
    1c58:	f9 01       	movw	r30, r18
    1c5a:	91 83       	std	Z+1, r25	; 0x01
    1c5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5e:	ce 01       	movw	r24, r28
    1c60:	8c 52       	subi	r24, 0x2C	; 44
    1c62:	9f 4f       	sbci	r25, 0xFF	; 255
    1c64:	9e 01       	movw	r18, r28
    1c66:	2c 52       	subi	r18, 0x2C	; 44
    1c68:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6a:	f9 01       	movw	r30, r18
    1c6c:	20 81       	ld	r18, Z
    1c6e:	31 81       	ldd	r19, Z+1	; 0x01
    1c70:	21 50       	subi	r18, 0x01	; 1
    1c72:	31 09       	sbc	r19, r1
    1c74:	fc 01       	movw	r30, r24
    1c76:	31 83       	std	Z+1, r19	; 0x01
    1c78:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	8c 52       	subi	r24, 0x2C	; 44
    1c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c80:	fc 01       	movw	r30, r24
    1c82:	80 81       	ld	r24, Z
    1c84:	91 81       	ldd	r25, Z+1	; 0x01
    1c86:	89 2b       	or	r24, r25
    1c88:	a1 f6       	brne	.-88     	; 0x1c32 <main+0x132a>
    1c8a:	2c c0       	rjmp	.+88     	; 0x1ce4 <main+0x13dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8c:	8e 01       	movw	r16, r28
    1c8e:	0c 52       	subi	r16, 0x2C	; 44
    1c90:	1f 4f       	sbci	r17, 0xFF	; 255
    1c92:	ce 01       	movw	r24, r28
    1c94:	80 53       	subi	r24, 0x30	; 48
    1c96:	9f 4f       	sbci	r25, 0xFF	; 255
    1c98:	fc 01       	movw	r30, r24
    1c9a:	60 81       	ld	r22, Z
    1c9c:	71 81       	ldd	r23, Z+1	; 0x01
    1c9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ca0:	93 81       	ldd	r25, Z+3	; 0x03
    1ca2:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	f8 01       	movw	r30, r16
    1cac:	91 83       	std	Z+1, r25	; 0x01
    1cae:	80 83       	st	Z, r24
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	88 52       	subi	r24, 0x28	; 40
    1cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb6:	9e 01       	movw	r18, r28
    1cb8:	2c 52       	subi	r18, 0x2C	; 44
    1cba:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbc:	f9 01       	movw	r30, r18
    1cbe:	20 81       	ld	r18, Z
    1cc0:	31 81       	ldd	r19, Z+1	; 0x01
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	31 83       	std	Z+1, r19	; 0x01
    1cc6:	20 83       	st	Z, r18
    1cc8:	ce 01       	movw	r24, r28
    1cca:	88 52       	subi	r24, 0x28	; 40
    1ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cce:	fc 01       	movw	r30, r24
    1cd0:	80 81       	ld	r24, Z
    1cd2:	91 81       	ldd	r25, Z+1	; 0x01
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <main+0x13cc>
    1cd8:	9e 01       	movw	r18, r28
    1cda:	28 52       	subi	r18, 0x28	; 40
    1cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cde:	f9 01       	movw	r30, r18
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    1cf0:	83 e0       	ldi	r24, 0x03	; 3
    1cf2:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    1cf6:	84 e0       	ldi	r24, 0x04	; 4
    1cf8:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(SEVEN);
    1cfc:	87 e0       	ldi	r24, 0x07	; 7
    1cfe:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a8 e4       	ldi	r26, 0x48	; 72
    1d08:	b2 e4       	ldi	r27, 0x42	; 66
    1d0a:	8a a7       	std	Y+42, r24	; 0x2a
    1d0c:	9b a7       	std	Y+43, r25	; 0x2b
    1d0e:	ac a7       	std	Y+44, r26	; 0x2c
    1d10:	bd a7       	std	Y+45, r27	; 0x2d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d12:	8e 01       	movw	r16, r28
    1d14:	0a 53       	subi	r16, 0x3A	; 58
    1d16:	1f 4f       	sbci	r17, 0xFF	; 255
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	4a e7       	ldi	r20, 0x7A	; 122
    1d1e:	53 e4       	ldi	r21, 0x43	; 67
    1d20:	6a a5       	ldd	r22, Y+42	; 0x2a
    1d22:	7b a5       	ldd	r23, Y+43	; 0x2b
    1d24:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d26:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d28:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	f8 01       	movw	r30, r16
    1d32:	80 83       	st	Z, r24
    1d34:	91 83       	std	Z+1, r25	; 0x01
    1d36:	a2 83       	std	Z+2, r26	; 0x02
    1d38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	8a 53       	subi	r24, 0x3A	; 58
    1d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e8       	ldi	r20, 0x80	; 128
    1d46:	5f e3       	ldi	r21, 0x3F	; 63
    1d48:	fc 01       	movw	r30, r24
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	93 81       	ldd	r25, Z+3	; 0x03
    1d52:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
    1d56:	88 23       	and	r24, r24
    1d58:	4c f4       	brge	.+18     	; 0x1d6c <main+0x1464>
		__ticks = 1;
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	86 53       	subi	r24, 0x36	; 54
    1d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d60:	21 e0       	ldi	r18, 0x01	; 1
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	fc 01       	movw	r30, r24
    1d66:	31 83       	std	Z+1, r19	; 0x01
    1d68:	20 83       	st	Z, r18
    1d6a:	69 c0       	rjmp	.+210    	; 0x1e3e <main+0x1536>
	else if (__tmp > 65535)
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	8a 53       	subi	r24, 0x3A	; 58
    1d70:	9f 4f       	sbci	r25, 0xFF	; 255
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	3f ef       	ldi	r19, 0xFF	; 255
    1d76:	4f e7       	ldi	r20, 0x7F	; 127
    1d78:	57 e4       	ldi	r21, 0x47	; 71
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	60 81       	ld	r22, Z
    1d7e:	71 81       	ldd	r23, Z+1	; 0x01
    1d80:	82 81       	ldd	r24, Z+2	; 0x02
    1d82:	93 81       	ldd	r25, Z+3	; 0x03
    1d84:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
    1d88:	18 16       	cp	r1, r24
    1d8a:	0c f0       	brlt	.+2      	; 0x1d8e <main+0x1486>
    1d8c:	46 c0       	rjmp	.+140    	; 0x1e1a <main+0x1512>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e2       	ldi	r20, 0x20	; 32
    1d94:	51 e4       	ldi	r21, 0x41	; 65
    1d96:	6a a5       	ldd	r22, Y+42	; 0x2a
    1d98:	7b a5       	ldd	r23, Y+43	; 0x2b
    1d9a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d9c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d9e:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	8e 01       	movw	r16, r28
    1da8:	06 53       	subi	r16, 0x36	; 54
    1daa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	f8 01       	movw	r30, r16
    1dba:	91 83       	std	Z+1, r25	; 0x01
    1dbc:	80 83       	st	Z, r24
    1dbe:	24 c0       	rjmp	.+72     	; 0x1e08 <main+0x1500>
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	84 53       	subi	r24, 0x34	; 52
    1dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc6:	29 e1       	ldi	r18, 0x19	; 25
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	fc 01       	movw	r30, r24
    1dcc:	31 83       	std	Z+1, r19	; 0x01
    1dce:	20 83       	st	Z, r18
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	84 53       	subi	r24, 0x34	; 52
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	80 81       	ld	r24, Z
    1dda:	91 81       	ldd	r25, Z+1	; 0x01
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <main+0x14d4>
    1de0:	9e 01       	movw	r18, r28
    1de2:	24 53       	subi	r18, 0x34	; 52
    1de4:	3f 4f       	sbci	r19, 0xFF	; 255
    1de6:	f9 01       	movw	r30, r18
    1de8:	91 83       	std	Z+1, r25	; 0x01
    1dea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dec:	ce 01       	movw	r24, r28
    1dee:	86 53       	subi	r24, 0x36	; 54
    1df0:	9f 4f       	sbci	r25, 0xFF	; 255
    1df2:	9e 01       	movw	r18, r28
    1df4:	26 53       	subi	r18, 0x36	; 54
    1df6:	3f 4f       	sbci	r19, 0xFF	; 255
    1df8:	f9 01       	movw	r30, r18
    1dfa:	20 81       	ld	r18, Z
    1dfc:	31 81       	ldd	r19, Z+1	; 0x01
    1dfe:	21 50       	subi	r18, 0x01	; 1
    1e00:	31 09       	sbc	r19, r1
    1e02:	fc 01       	movw	r30, r24
    1e04:	31 83       	std	Z+1, r19	; 0x01
    1e06:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e08:	ce 01       	movw	r24, r28
    1e0a:	86 53       	subi	r24, 0x36	; 54
    1e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0e:	fc 01       	movw	r30, r24
    1e10:	80 81       	ld	r24, Z
    1e12:	91 81       	ldd	r25, Z+1	; 0x01
    1e14:	89 2b       	or	r24, r25
    1e16:	a1 f6       	brne	.-88     	; 0x1dc0 <main+0x14b8>
    1e18:	2c c0       	rjmp	.+88     	; 0x1e72 <main+0x156a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1a:	8e 01       	movw	r16, r28
    1e1c:	06 53       	subi	r16, 0x36	; 54
    1e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e20:	ce 01       	movw	r24, r28
    1e22:	8a 53       	subi	r24, 0x3A	; 58
    1e24:	9f 4f       	sbci	r25, 0xFF	; 255
    1e26:	fc 01       	movw	r30, r24
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	f8 01       	movw	r30, r16
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
    1e3e:	ce 01       	movw	r24, r28
    1e40:	82 53       	subi	r24, 0x32	; 50
    1e42:	9f 4f       	sbci	r25, 0xFF	; 255
    1e44:	9e 01       	movw	r18, r28
    1e46:	26 53       	subi	r18, 0x36	; 54
    1e48:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4a:	f9 01       	movw	r30, r18
    1e4c:	20 81       	ld	r18, Z
    1e4e:	31 81       	ldd	r19, Z+1	; 0x01
    1e50:	fc 01       	movw	r30, r24
    1e52:	31 83       	std	Z+1, r19	; 0x01
    1e54:	20 83       	st	Z, r18
    1e56:	ce 01       	movw	r24, r28
    1e58:	82 53       	subi	r24, 0x32	; 50
    1e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	80 81       	ld	r24, Z
    1e60:	91 81       	ldd	r25, Z+1	; 0x01
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <main+0x155a>
    1e66:	9e 01       	movw	r18, r28
    1e68:	22 53       	subi	r18, 0x32	; 50
    1e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6c:	f9 01       	movw	r30, r18
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	80 83       	st	Z, r24
				_delay_ms(50);
			}
			if(key == 8)
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	88 30       	cpi	r24, 0x08	; 8
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <main+0x1572>
    1e78:	89 c1       	rjmp	.+786    	; 0x218c <main+0x1884>
    1e7a:	9e 01       	movw	r18, r28
    1e7c:	22 5c       	subi	r18, 0xC2	; 194
    1e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a8 e4       	ldi	r26, 0x48	; 72
    1e86:	b2 e4       	ldi	r27, 0x42	; 66
    1e88:	f9 01       	movw	r30, r18
    1e8a:	80 83       	st	Z, r24
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	a2 83       	std	Z+2, r26	; 0x02
    1e90:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e92:	8e 01       	movw	r16, r28
    1e94:	0c 51       	subi	r16, 0x1C	; 28
    1e96:	1f 4f       	sbci	r17, 0xFF	; 255
    1e98:	ce 01       	movw	r24, r28
    1e9a:	ce 96       	adiw	r24, 0x3e	; 62
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4a e7       	ldi	r20, 0x7A	; 122
    1ea2:	53 e4       	ldi	r21, 0x43	; 67
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	60 81       	ld	r22, Z
    1ea8:	71 81       	ldd	r23, Z+1	; 0x01
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	80 83       	st	Z, r24
    1eba:	91 83       	std	Z+1, r25	; 0x01
    1ebc:	a2 83       	std	Z+2, r26	; 0x02
    1ebe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	8c 51       	subi	r24, 0x1C	; 28
    1ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e8       	ldi	r20, 0x80	; 128
    1ecc:	5f e3       	ldi	r21, 0x3F	; 63
    1ece:	fc 01       	movw	r30, r24
    1ed0:	60 81       	ld	r22, Z
    1ed2:	71 81       	ldd	r23, Z+1	; 0x01
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	4c f4       	brge	.+18     	; 0x1ef2 <main+0x15ea>
		__ticks = 1;
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	88 51       	subi	r24, 0x18	; 24
    1ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee6:	21 e0       	ldi	r18, 0x01	; 1
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	fc 01       	movw	r30, r24
    1eec:	31 83       	std	Z+1, r19	; 0x01
    1eee:	20 83       	st	Z, r18
    1ef0:	6c c0       	rjmp	.+216    	; 0x1fca <main+0x16c2>
	else if (__tmp > 65535)
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	8c 51       	subi	r24, 0x1C	; 28
    1ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	3f ef       	ldi	r19, 0xFF	; 255
    1efc:	4f e7       	ldi	r20, 0x7F	; 127
    1efe:	57 e4       	ldi	r21, 0x47	; 71
    1f00:	fc 01       	movw	r30, r24
    1f02:	60 81       	ld	r22, Z
    1f04:	71 81       	ldd	r23, Z+1	; 0x01
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	0c f0       	brlt	.+2      	; 0x1f14 <main+0x160c>
    1f12:	49 c0       	rjmp	.+146    	; 0x1fa6 <main+0x169e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f14:	ce 01       	movw	r24, r28
    1f16:	ce 96       	adiw	r24, 0x3e	; 62
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e2       	ldi	r20, 0x20	; 32
    1f1e:	51 e4       	ldi	r21, 0x41	; 65
    1f20:	fc 01       	movw	r30, r24
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	8e 01       	movw	r16, r28
    1f34:	08 51       	subi	r16, 0x18	; 24
    1f36:	1f 4f       	sbci	r17, 0xFF	; 255
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	f8 01       	movw	r30, r16
    1f46:	91 83       	std	Z+1, r25	; 0x01
    1f48:	80 83       	st	Z, r24
    1f4a:	24 c0       	rjmp	.+72     	; 0x1f94 <main+0x168c>
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	86 51       	subi	r24, 0x16	; 22
    1f50:	9f 4f       	sbci	r25, 0xFF	; 255
    1f52:	29 e1       	ldi	r18, 0x19	; 25
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	fc 01       	movw	r30, r24
    1f58:	31 83       	std	Z+1, r19	; 0x01
    1f5a:	20 83       	st	Z, r18
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	86 51       	subi	r24, 0x16	; 22
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	fc 01       	movw	r30, r24
    1f64:	80 81       	ld	r24, Z
    1f66:	91 81       	ldd	r25, Z+1	; 0x01
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <main+0x1660>
    1f6c:	9e 01       	movw	r18, r28
    1f6e:	26 51       	subi	r18, 0x16	; 22
    1f70:	3f 4f       	sbci	r19, 0xFF	; 255
    1f72:	f9 01       	movw	r30, r18
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f78:	ce 01       	movw	r24, r28
    1f7a:	88 51       	subi	r24, 0x18	; 24
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	9e 01       	movw	r18, r28
    1f80:	28 51       	subi	r18, 0x18	; 24
    1f82:	3f 4f       	sbci	r19, 0xFF	; 255
    1f84:	f9 01       	movw	r30, r18
    1f86:	20 81       	ld	r18, Z
    1f88:	31 81       	ldd	r19, Z+1	; 0x01
    1f8a:	21 50       	subi	r18, 0x01	; 1
    1f8c:	31 09       	sbc	r19, r1
    1f8e:	fc 01       	movw	r30, r24
    1f90:	31 83       	std	Z+1, r19	; 0x01
    1f92:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f94:	ce 01       	movw	r24, r28
    1f96:	88 51       	subi	r24, 0x18	; 24
    1f98:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
    1fa0:	89 2b       	or	r24, r25
    1fa2:	a1 f6       	brne	.-88     	; 0x1f4c <main+0x1644>
    1fa4:	2c c0       	rjmp	.+88     	; 0x1ffe <main+0x16f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa6:	8e 01       	movw	r16, r28
    1fa8:	08 51       	subi	r16, 0x18	; 24
    1faa:	1f 4f       	sbci	r17, 0xFF	; 255
    1fac:	ce 01       	movw	r24, r28
    1fae:	8c 51       	subi	r24, 0x1C	; 28
    1fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	60 81       	ld	r22, Z
    1fb6:	71 81       	ldd	r23, Z+1	; 0x01
    1fb8:	82 81       	ldd	r24, Z+2	; 0x02
    1fba:	93 81       	ldd	r25, Z+3	; 0x03
    1fbc:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	91 83       	std	Z+1, r25	; 0x01
    1fc8:	80 83       	st	Z, r24
    1fca:	ce 01       	movw	r24, r28
    1fcc:	84 51       	subi	r24, 0x14	; 20
    1fce:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd0:	9e 01       	movw	r18, r28
    1fd2:	28 51       	subi	r18, 0x18	; 24
    1fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd6:	f9 01       	movw	r30, r18
    1fd8:	20 81       	ld	r18, Z
    1fda:	31 81       	ldd	r19, Z+1	; 0x01
    1fdc:	fc 01       	movw	r30, r24
    1fde:	31 83       	std	Z+1, r19	; 0x01
    1fe0:	20 83       	st	Z, r18
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	84 51       	subi	r24, 0x14	; 20
    1fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe8:	fc 01       	movw	r30, r24
    1fea:	80 81       	ld	r24, Z
    1fec:	91 81       	ldd	r25, Z+1	; 0x01
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <main+0x16e6>
    1ff2:	9e 01       	movw	r18, r28
    1ff4:	24 51       	subi	r18, 0x14	; 20
    1ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff8:	f9 01       	movw	r30, r18
    1ffa:	91 83       	std	Z+1, r25	; 0x01
    1ffc:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    2004:	82 e0       	ldi	r24, 0x02	; 2
    2006:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    200a:	83 e0       	ldi	r24, 0x03	; 3
    200c:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    2010:	84 e0       	ldi	r24, 0x04	; 4
    2012:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(EIGHT);
    2016:	88 e0       	ldi	r24, 0x08	; 8
    2018:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	a8 e4       	ldi	r26, 0x48	; 72
    2022:	b2 e4       	ldi	r27, 0x42	; 66
    2024:	8a ab       	std	Y+50, r24	; 0x32
    2026:	9b ab       	std	Y+51, r25	; 0x33
    2028:	ac ab       	std	Y+52, r26	; 0x34
    202a:	bd ab       	std	Y+53, r27	; 0x35

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    202c:	8e 01       	movw	r16, r28
    202e:	06 52       	subi	r16, 0x26	; 38
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	4a e7       	ldi	r20, 0x7A	; 122
    2038:	53 e4       	ldi	r21, 0x43	; 67
    203a:	6a a9       	ldd	r22, Y+50	; 0x32
    203c:	7b a9       	ldd	r23, Y+51	; 0x33
    203e:	8c a9       	ldd	r24, Y+52	; 0x34
    2040:	9d a9       	ldd	r25, Y+53	; 0x35
    2042:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	f8 01       	movw	r30, r16
    204c:	80 83       	st	Z, r24
    204e:	91 83       	std	Z+1, r25	; 0x01
    2050:	a2 83       	std	Z+2, r26	; 0x02
    2052:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2054:	ce 01       	movw	r24, r28
    2056:	86 52       	subi	r24, 0x26	; 38
    2058:	9f 4f       	sbci	r25, 0xFF	; 255
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e8       	ldi	r20, 0x80	; 128
    2060:	5f e3       	ldi	r21, 0x3F	; 63
    2062:	fc 01       	movw	r30, r24
    2064:	60 81       	ld	r22, Z
    2066:	71 81       	ldd	r23, Z+1	; 0x01
    2068:	82 81       	ldd	r24, Z+2	; 0x02
    206a:	93 81       	ldd	r25, Z+3	; 0x03
    206c:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
    2070:	88 23       	and	r24, r24
    2072:	4c f4       	brge	.+18     	; 0x2086 <main+0x177e>
		__ticks = 1;
    2074:	ce 01       	movw	r24, r28
    2076:	82 52       	subi	r24, 0x22	; 34
    2078:	9f 4f       	sbci	r25, 0xFF	; 255
    207a:	21 e0       	ldi	r18, 0x01	; 1
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	fc 01       	movw	r30, r24
    2080:	31 83       	std	Z+1, r19	; 0x01
    2082:	20 83       	st	Z, r18
    2084:	69 c0       	rjmp	.+210    	; 0x2158 <main+0x1850>
	else if (__tmp > 65535)
    2086:	ce 01       	movw	r24, r28
    2088:	86 52       	subi	r24, 0x26	; 38
    208a:	9f 4f       	sbci	r25, 0xFF	; 255
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	3f ef       	ldi	r19, 0xFF	; 255
    2090:	4f e7       	ldi	r20, 0x7F	; 127
    2092:	57 e4       	ldi	r21, 0x47	; 71
    2094:	fc 01       	movw	r30, r24
    2096:	60 81       	ld	r22, Z
    2098:	71 81       	ldd	r23, Z+1	; 0x01
    209a:	82 81       	ldd	r24, Z+2	; 0x02
    209c:	93 81       	ldd	r25, Z+3	; 0x03
    209e:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
    20a2:	18 16       	cp	r1, r24
    20a4:	0c f0       	brlt	.+2      	; 0x20a8 <main+0x17a0>
    20a6:	46 c0       	rjmp	.+140    	; 0x2134 <main+0x182c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e2       	ldi	r20, 0x20	; 32
    20ae:	51 e4       	ldi	r21, 0x41	; 65
    20b0:	6a a9       	ldd	r22, Y+50	; 0x32
    20b2:	7b a9       	ldd	r23, Y+51	; 0x33
    20b4:	8c a9       	ldd	r24, Y+52	; 0x34
    20b6:	9d a9       	ldd	r25, Y+53	; 0x35
    20b8:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	8e 01       	movw	r16, r28
    20c2:	02 52       	subi	r16, 0x22	; 34
    20c4:	1f 4f       	sbci	r17, 0xFF	; 255
    20c6:	bc 01       	movw	r22, r24
    20c8:	cd 01       	movw	r24, r26
    20ca:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	f8 01       	movw	r30, r16
    20d4:	91 83       	std	Z+1, r25	; 0x01
    20d6:	80 83       	st	Z, r24
    20d8:	24 c0       	rjmp	.+72     	; 0x2122 <main+0x181a>
    20da:	ce 01       	movw	r24, r28
    20dc:	80 52       	subi	r24, 0x20	; 32
    20de:	9f 4f       	sbci	r25, 0xFF	; 255
    20e0:	29 e1       	ldi	r18, 0x19	; 25
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	fc 01       	movw	r30, r24
    20e6:	31 83       	std	Z+1, r19	; 0x01
    20e8:	20 83       	st	Z, r18
    20ea:	ce 01       	movw	r24, r28
    20ec:	80 52       	subi	r24, 0x20	; 32
    20ee:	9f 4f       	sbci	r25, 0xFF	; 255
    20f0:	fc 01       	movw	r30, r24
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <main+0x17ee>
    20fa:	9e 01       	movw	r18, r28
    20fc:	20 52       	subi	r18, 0x20	; 32
    20fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2100:	f9 01       	movw	r30, r18
    2102:	91 83       	std	Z+1, r25	; 0x01
    2104:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2106:	ce 01       	movw	r24, r28
    2108:	82 52       	subi	r24, 0x22	; 34
    210a:	9f 4f       	sbci	r25, 0xFF	; 255
    210c:	9e 01       	movw	r18, r28
    210e:	22 52       	subi	r18, 0x22	; 34
    2110:	3f 4f       	sbci	r19, 0xFF	; 255
    2112:	f9 01       	movw	r30, r18
    2114:	20 81       	ld	r18, Z
    2116:	31 81       	ldd	r19, Z+1	; 0x01
    2118:	21 50       	subi	r18, 0x01	; 1
    211a:	31 09       	sbc	r19, r1
    211c:	fc 01       	movw	r30, r24
    211e:	31 83       	std	Z+1, r19	; 0x01
    2120:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2122:	ce 01       	movw	r24, r28
    2124:	82 52       	subi	r24, 0x22	; 34
    2126:	9f 4f       	sbci	r25, 0xFF	; 255
    2128:	fc 01       	movw	r30, r24
    212a:	80 81       	ld	r24, Z
    212c:	91 81       	ldd	r25, Z+1	; 0x01
    212e:	89 2b       	or	r24, r25
    2130:	a1 f6       	brne	.-88     	; 0x20da <main+0x17d2>
    2132:	2c c0       	rjmp	.+88     	; 0x218c <main+0x1884>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2134:	8e 01       	movw	r16, r28
    2136:	02 52       	subi	r16, 0x22	; 34
    2138:	1f 4f       	sbci	r17, 0xFF	; 255
    213a:	ce 01       	movw	r24, r28
    213c:	86 52       	subi	r24, 0x26	; 38
    213e:	9f 4f       	sbci	r25, 0xFF	; 255
    2140:	fc 01       	movw	r30, r24
    2142:	60 81       	ld	r22, Z
    2144:	71 81       	ldd	r23, Z+1	; 0x01
    2146:	82 81       	ldd	r24, Z+2	; 0x02
    2148:	93 81       	ldd	r25, Z+3	; 0x03
    214a:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	f8 01       	movw	r30, r16
    2154:	91 83       	std	Z+1, r25	; 0x01
    2156:	80 83       	st	Z, r24
    2158:	ce 01       	movw	r24, r28
    215a:	8e 51       	subi	r24, 0x1E	; 30
    215c:	9f 4f       	sbci	r25, 0xFF	; 255
    215e:	9e 01       	movw	r18, r28
    2160:	22 52       	subi	r18, 0x22	; 34
    2162:	3f 4f       	sbci	r19, 0xFF	; 255
    2164:	f9 01       	movw	r30, r18
    2166:	20 81       	ld	r18, Z
    2168:	31 81       	ldd	r19, Z+1	; 0x01
    216a:	fc 01       	movw	r30, r24
    216c:	31 83       	std	Z+1, r19	; 0x01
    216e:	20 83       	st	Z, r18
    2170:	ce 01       	movw	r24, r28
    2172:	8e 51       	subi	r24, 0x1E	; 30
    2174:	9f 4f       	sbci	r25, 0xFF	; 255
    2176:	fc 01       	movw	r30, r24
    2178:	80 81       	ld	r24, Z
    217a:	91 81       	ldd	r25, Z+1	; 0x01
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <main+0x1874>
    2180:	9e 01       	movw	r18, r28
    2182:	2e 51       	subi	r18, 0x1E	; 30
    2184:	3f 4f       	sbci	r19, 0xFF	; 255
    2186:	f9 01       	movw	r30, r18
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	80 83       	st	Z, r24
				_delay_ms(50);
			}
			if(key == 9)
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	89 30       	cpi	r24, 0x09	; 9
    2190:	09 f0       	breq	.+2      	; 0x2194 <main+0x188c>
    2192:	88 c1       	rjmp	.+784    	; 0x24a4 <main+0x1b9c>
    2194:	9e 01       	movw	r18, r28
    2196:	2a 5b       	subi	r18, 0xBA	; 186
    2198:	3f 4f       	sbci	r19, 0xFF	; 255
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	a8 e4       	ldi	r26, 0x48	; 72
    21a0:	b2 e4       	ldi	r27, 0x42	; 66
    21a2:	f9 01       	movw	r30, r18
    21a4:	80 83       	st	Z, r24
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	a2 83       	std	Z+2, r26	; 0x02
    21aa:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    21ac:	8e 01       	movw	r16, r28
    21ae:	08 50       	subi	r16, 0x08	; 8
    21b0:	1f 4f       	sbci	r17, 0xFF	; 255
    21b2:	ce 01       	movw	r24, r28
    21b4:	8a 5b       	subi	r24, 0xBA	; 186
    21b6:	9f 4f       	sbci	r25, 0xFF	; 255
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	4a e7       	ldi	r20, 0x7A	; 122
    21be:	53 e4       	ldi	r21, 0x43	; 67
    21c0:	fc 01       	movw	r30, r24
    21c2:	60 81       	ld	r22, Z
    21c4:	71 81       	ldd	r23, Z+1	; 0x01
    21c6:	82 81       	ldd	r24, Z+2	; 0x02
    21c8:	93 81       	ldd	r25, Z+3	; 0x03
    21ca:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	f8 01       	movw	r30, r16
    21d4:	80 83       	st	Z, r24
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	a2 83       	std	Z+2, r26	; 0x02
    21da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21dc:	ce 01       	movw	r24, r28
    21de:	88 50       	subi	r24, 0x08	; 8
    21e0:	9f 4f       	sbci	r25, 0xFF	; 255
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e8       	ldi	r20, 0x80	; 128
    21e8:	5f e3       	ldi	r21, 0x3F	; 63
    21ea:	fc 01       	movw	r30, r24
    21ec:	60 81       	ld	r22, Z
    21ee:	71 81       	ldd	r23, Z+1	; 0x01
    21f0:	82 81       	ldd	r24, Z+2	; 0x02
    21f2:	93 81       	ldd	r25, Z+3	; 0x03
    21f4:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
    21f8:	88 23       	and	r24, r24
    21fa:	4c f4       	brge	.+18     	; 0x220e <main+0x1906>
		__ticks = 1;
    21fc:	ce 01       	movw	r24, r28
    21fe:	84 50       	subi	r24, 0x04	; 4
    2200:	9f 4f       	sbci	r25, 0xFF	; 255
    2202:	21 e0       	ldi	r18, 0x01	; 1
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	fc 01       	movw	r30, r24
    2208:	31 83       	std	Z+1, r19	; 0x01
    220a:	20 83       	st	Z, r18
    220c:	6d c0       	rjmp	.+218    	; 0x22e8 <main+0x19e0>
	else if (__tmp > 65535)
    220e:	ce 01       	movw	r24, r28
    2210:	88 50       	subi	r24, 0x08	; 8
    2212:	9f 4f       	sbci	r25, 0xFF	; 255
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	3f ef       	ldi	r19, 0xFF	; 255
    2218:	4f e7       	ldi	r20, 0x7F	; 127
    221a:	57 e4       	ldi	r21, 0x47	; 71
    221c:	fc 01       	movw	r30, r24
    221e:	60 81       	ld	r22, Z
    2220:	71 81       	ldd	r23, Z+1	; 0x01
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
    222a:	18 16       	cp	r1, r24
    222c:	0c f0       	brlt	.+2      	; 0x2230 <main+0x1928>
    222e:	4a c0       	rjmp	.+148    	; 0x22c4 <main+0x19bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2230:	ce 01       	movw	r24, r28
    2232:	8a 5b       	subi	r24, 0xBA	; 186
    2234:	9f 4f       	sbci	r25, 0xFF	; 255
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e2       	ldi	r20, 0x20	; 32
    223c:	51 e4       	ldi	r21, 0x41	; 65
    223e:	fc 01       	movw	r30, r24
    2240:	60 81       	ld	r22, Z
    2242:	71 81       	ldd	r23, Z+1	; 0x01
    2244:	82 81       	ldd	r24, Z+2	; 0x02
    2246:	93 81       	ldd	r25, Z+3	; 0x03
    2248:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	8e 01       	movw	r16, r28
    2252:	04 50       	subi	r16, 0x04	; 4
    2254:	1f 4f       	sbci	r17, 0xFF	; 255
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	f8 01       	movw	r30, r16
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
    2268:	24 c0       	rjmp	.+72     	; 0x22b2 <main+0x19aa>
    226a:	ce 01       	movw	r24, r28
    226c:	82 50       	subi	r24, 0x02	; 2
    226e:	9f 4f       	sbci	r25, 0xFF	; 255
    2270:	29 e1       	ldi	r18, 0x19	; 25
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	fc 01       	movw	r30, r24
    2276:	31 83       	std	Z+1, r19	; 0x01
    2278:	20 83       	st	Z, r18
    227a:	ce 01       	movw	r24, r28
    227c:	82 50       	subi	r24, 0x02	; 2
    227e:	9f 4f       	sbci	r25, 0xFF	; 255
    2280:	fc 01       	movw	r30, r24
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <main+0x197e>
    228a:	9e 01       	movw	r18, r28
    228c:	22 50       	subi	r18, 0x02	; 2
    228e:	3f 4f       	sbci	r19, 0xFF	; 255
    2290:	f9 01       	movw	r30, r18
    2292:	91 83       	std	Z+1, r25	; 0x01
    2294:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2296:	ce 01       	movw	r24, r28
    2298:	84 50       	subi	r24, 0x04	; 4
    229a:	9f 4f       	sbci	r25, 0xFF	; 255
    229c:	9e 01       	movw	r18, r28
    229e:	24 50       	subi	r18, 0x04	; 4
    22a0:	3f 4f       	sbci	r19, 0xFF	; 255
    22a2:	f9 01       	movw	r30, r18
    22a4:	20 81       	ld	r18, Z
    22a6:	31 81       	ldd	r19, Z+1	; 0x01
    22a8:	21 50       	subi	r18, 0x01	; 1
    22aa:	31 09       	sbc	r19, r1
    22ac:	fc 01       	movw	r30, r24
    22ae:	31 83       	std	Z+1, r19	; 0x01
    22b0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b2:	ce 01       	movw	r24, r28
    22b4:	84 50       	subi	r24, 0x04	; 4
    22b6:	9f 4f       	sbci	r25, 0xFF	; 255
    22b8:	fc 01       	movw	r30, r24
    22ba:	80 81       	ld	r24, Z
    22bc:	91 81       	ldd	r25, Z+1	; 0x01
    22be:	89 2b       	or	r24, r25
    22c0:	a1 f6       	brne	.-88     	; 0x226a <main+0x1962>
    22c2:	29 c0       	rjmp	.+82     	; 0x2316 <main+0x1a0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c4:	8e 01       	movw	r16, r28
    22c6:	04 50       	subi	r16, 0x04	; 4
    22c8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ca:	ce 01       	movw	r24, r28
    22cc:	88 50       	subi	r24, 0x08	; 8
    22ce:	9f 4f       	sbci	r25, 0xFF	; 255
    22d0:	fc 01       	movw	r30, r24
    22d2:	60 81       	ld	r22, Z
    22d4:	71 81       	ldd	r23, Z+1	; 0x01
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	93 81       	ldd	r25, Z+3	; 0x03
    22da:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	f8 01       	movw	r30, r16
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
    22e8:	ce 01       	movw	r24, r28
    22ea:	93 95       	inc	r25
    22ec:	9e 01       	movw	r18, r28
    22ee:	24 50       	subi	r18, 0x04	; 4
    22f0:	3f 4f       	sbci	r19, 0xFF	; 255
    22f2:	f9 01       	movw	r30, r18
    22f4:	20 81       	ld	r18, Z
    22f6:	31 81       	ldd	r19, Z+1	; 0x01
    22f8:	fc 01       	movw	r30, r24
    22fa:	31 83       	std	Z+1, r19	; 0x01
    22fc:	20 83       	st	Z, r18
    22fe:	ce 01       	movw	r24, r28
    2300:	93 95       	inc	r25
    2302:	fc 01       	movw	r30, r24
    2304:	80 81       	ld	r24, Z
    2306:	91 81       	ldd	r25, Z+1	; 0x01
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <main+0x1a00>
    230c:	9e 01       	movw	r18, r28
    230e:	33 95       	inc	r19
    2310:	f9 01       	movw	r30, r18
    2312:	91 83       	std	Z+1, r25	; 0x01
    2314:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    231c:	82 e0       	ldi	r24, 0x02	; 2
    231e:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    2322:	83 e0       	ldi	r24, 0x03	; 3
    2324:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    2328:	84 e0       	ldi	r24, 0x04	; 4
    232a:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(NINE);
    232e:	89 e0       	ldi	r24, 0x09	; 9
    2330:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	a8 e4       	ldi	r26, 0x48	; 72
    233a:	b2 e4       	ldi	r27, 0x42	; 66
    233c:	8a af       	std	Y+58, r24	; 0x3a
    233e:	9b af       	std	Y+59, r25	; 0x3b
    2340:	ac af       	std	Y+60, r26	; 0x3c
    2342:	bd af       	std	Y+61, r27	; 0x3d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2344:	8e 01       	movw	r16, r28
    2346:	02 51       	subi	r16, 0x12	; 18
    2348:	1f 4f       	sbci	r17, 0xFF	; 255
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	4a e7       	ldi	r20, 0x7A	; 122
    2350:	53 e4       	ldi	r21, 0x43	; 67
    2352:	6a ad       	ldd	r22, Y+58	; 0x3a
    2354:	7b ad       	ldd	r23, Y+59	; 0x3b
    2356:	8c ad       	ldd	r24, Y+60	; 0x3c
    2358:	9d ad       	ldd	r25, Y+61	; 0x3d
    235a:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	f8 01       	movw	r30, r16
    2364:	80 83       	st	Z, r24
    2366:	91 83       	std	Z+1, r25	; 0x01
    2368:	a2 83       	std	Z+2, r26	; 0x02
    236a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    236c:	ce 01       	movw	r24, r28
    236e:	82 51       	subi	r24, 0x12	; 18
    2370:	9f 4f       	sbci	r25, 0xFF	; 255
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e8       	ldi	r20, 0x80	; 128
    2378:	5f e3       	ldi	r21, 0x3F	; 63
    237a:	fc 01       	movw	r30, r24
    237c:	60 81       	ld	r22, Z
    237e:	71 81       	ldd	r23, Z+1	; 0x01
    2380:	82 81       	ldd	r24, Z+2	; 0x02
    2382:	93 81       	ldd	r25, Z+3	; 0x03
    2384:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
    2388:	88 23       	and	r24, r24
    238a:	4c f4       	brge	.+18     	; 0x239e <main+0x1a96>
		__ticks = 1;
    238c:	ce 01       	movw	r24, r28
    238e:	8e 50       	subi	r24, 0x0E	; 14
    2390:	9f 4f       	sbci	r25, 0xFF	; 255
    2392:	21 e0       	ldi	r18, 0x01	; 1
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	fc 01       	movw	r30, r24
    2398:	31 83       	std	Z+1, r19	; 0x01
    239a:	20 83       	st	Z, r18
    239c:	69 c0       	rjmp	.+210    	; 0x2470 <main+0x1b68>
	else if (__tmp > 65535)
    239e:	ce 01       	movw	r24, r28
    23a0:	82 51       	subi	r24, 0x12	; 18
    23a2:	9f 4f       	sbci	r25, 0xFF	; 255
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	57 e4       	ldi	r21, 0x47	; 71
    23ac:	fc 01       	movw	r30, r24
    23ae:	60 81       	ld	r22, Z
    23b0:	71 81       	ldd	r23, Z+1	; 0x01
    23b2:	82 81       	ldd	r24, Z+2	; 0x02
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
    23ba:	18 16       	cp	r1, r24
    23bc:	0c f0       	brlt	.+2      	; 0x23c0 <main+0x1ab8>
    23be:	46 c0       	rjmp	.+140    	; 0x244c <main+0x1b44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e2       	ldi	r20, 0x20	; 32
    23c6:	51 e4       	ldi	r21, 0x41	; 65
    23c8:	6a ad       	ldd	r22, Y+58	; 0x3a
    23ca:	7b ad       	ldd	r23, Y+59	; 0x3b
    23cc:	8c ad       	ldd	r24, Y+60	; 0x3c
    23ce:	9d ad       	ldd	r25, Y+61	; 0x3d
    23d0:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	8e 01       	movw	r16, r28
    23da:	0e 50       	subi	r16, 0x0E	; 14
    23dc:	1f 4f       	sbci	r17, 0xFF	; 255
    23de:	bc 01       	movw	r22, r24
    23e0:	cd 01       	movw	r24, r26
    23e2:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	f8 01       	movw	r30, r16
    23ec:	91 83       	std	Z+1, r25	; 0x01
    23ee:	80 83       	st	Z, r24
    23f0:	24 c0       	rjmp	.+72     	; 0x243a <main+0x1b32>
    23f2:	ce 01       	movw	r24, r28
    23f4:	8c 50       	subi	r24, 0x0C	; 12
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	29 e1       	ldi	r18, 0x19	; 25
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	fc 01       	movw	r30, r24
    23fe:	31 83       	std	Z+1, r19	; 0x01
    2400:	20 83       	st	Z, r18
    2402:	ce 01       	movw	r24, r28
    2404:	8c 50       	subi	r24, 0x0C	; 12
    2406:	9f 4f       	sbci	r25, 0xFF	; 255
    2408:	fc 01       	movw	r30, r24
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <main+0x1b06>
    2412:	9e 01       	movw	r18, r28
    2414:	2c 50       	subi	r18, 0x0C	; 12
    2416:	3f 4f       	sbci	r19, 0xFF	; 255
    2418:	f9 01       	movw	r30, r18
    241a:	91 83       	std	Z+1, r25	; 0x01
    241c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241e:	ce 01       	movw	r24, r28
    2420:	8e 50       	subi	r24, 0x0E	; 14
    2422:	9f 4f       	sbci	r25, 0xFF	; 255
    2424:	9e 01       	movw	r18, r28
    2426:	2e 50       	subi	r18, 0x0E	; 14
    2428:	3f 4f       	sbci	r19, 0xFF	; 255
    242a:	f9 01       	movw	r30, r18
    242c:	20 81       	ld	r18, Z
    242e:	31 81       	ldd	r19, Z+1	; 0x01
    2430:	21 50       	subi	r18, 0x01	; 1
    2432:	31 09       	sbc	r19, r1
    2434:	fc 01       	movw	r30, r24
    2436:	31 83       	std	Z+1, r19	; 0x01
    2438:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243a:	ce 01       	movw	r24, r28
    243c:	8e 50       	subi	r24, 0x0E	; 14
    243e:	9f 4f       	sbci	r25, 0xFF	; 255
    2440:	fc 01       	movw	r30, r24
    2442:	80 81       	ld	r24, Z
    2444:	91 81       	ldd	r25, Z+1	; 0x01
    2446:	89 2b       	or	r24, r25
    2448:	a1 f6       	brne	.-88     	; 0x23f2 <main+0x1aea>
    244a:	2c c0       	rjmp	.+88     	; 0x24a4 <main+0x1b9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244c:	8e 01       	movw	r16, r28
    244e:	0e 50       	subi	r16, 0x0E	; 14
    2450:	1f 4f       	sbci	r17, 0xFF	; 255
    2452:	ce 01       	movw	r24, r28
    2454:	82 51       	subi	r24, 0x12	; 18
    2456:	9f 4f       	sbci	r25, 0xFF	; 255
    2458:	fc 01       	movw	r30, r24
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	f8 01       	movw	r30, r16
    246c:	91 83       	std	Z+1, r25	; 0x01
    246e:	80 83       	st	Z, r24
    2470:	ce 01       	movw	r24, r28
    2472:	8a 50       	subi	r24, 0x0A	; 10
    2474:	9f 4f       	sbci	r25, 0xFF	; 255
    2476:	9e 01       	movw	r18, r28
    2478:	2e 50       	subi	r18, 0x0E	; 14
    247a:	3f 4f       	sbci	r19, 0xFF	; 255
    247c:	f9 01       	movw	r30, r18
    247e:	20 81       	ld	r18, Z
    2480:	31 81       	ldd	r19, Z+1	; 0x01
    2482:	fc 01       	movw	r30, r24
    2484:	31 83       	std	Z+1, r19	; 0x01
    2486:	20 83       	st	Z, r18
    2488:	ce 01       	movw	r24, r28
    248a:	8a 50       	subi	r24, 0x0A	; 10
    248c:	9f 4f       	sbci	r25, 0xFF	; 255
    248e:	fc 01       	movw	r30, r24
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <main+0x1b8c>
    2498:	9e 01       	movw	r18, r28
    249a:	2a 50       	subi	r18, 0x0A	; 10
    249c:	3f 4f       	sbci	r19, 0xFF	; 255
    249e:	f9 01       	movw	r30, r18
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
    24a4:	9e 01       	movw	r18, r28
    24a6:	2e 5b       	subi	r18, 0xBE	; 190
    24a8:	3f 4f       	sbci	r19, 0xFF	; 255
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	aa e7       	ldi	r26, 0x7A	; 122
    24b0:	b4 e4       	ldi	r27, 0x44	; 68
    24b2:	f9 01       	movw	r30, r18
    24b4:	80 83       	st	Z, r24
    24b6:	91 83       	std	Z+1, r25	; 0x01
    24b8:	a2 83       	std	Z+2, r26	; 0x02
    24ba:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    24bc:	8e 01       	movw	r16, r28
    24be:	0e 5f       	subi	r16, 0xFE	; 254
    24c0:	1e 4f       	sbci	r17, 0xFE	; 254
    24c2:	ce 01       	movw	r24, r28
    24c4:	8e 5b       	subi	r24, 0xBE	; 190
    24c6:	9f 4f       	sbci	r25, 0xFF	; 255
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	4a e7       	ldi	r20, 0x7A	; 122
    24ce:	53 e4       	ldi	r21, 0x43	; 67
    24d0:	fc 01       	movw	r30, r24
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	f8 01       	movw	r30, r16
    24e4:	80 83       	st	Z, r24
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	a2 83       	std	Z+2, r26	; 0x02
    24ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ec:	ce 01       	movw	r24, r28
    24ee:	8e 5f       	subi	r24, 0xFE	; 254
    24f0:	9e 4f       	sbci	r25, 0xFE	; 254
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e8       	ldi	r20, 0x80	; 128
    24f8:	5f e3       	ldi	r21, 0x3F	; 63
    24fa:	fc 01       	movw	r30, r24
    24fc:	60 81       	ld	r22, Z
    24fe:	71 81       	ldd	r23, Z+1	; 0x01
    2500:	82 81       	ldd	r24, Z+2	; 0x02
    2502:	93 81       	ldd	r25, Z+3	; 0x03
    2504:	0e 94 18 13 	call	0x2630	; 0x2630 <__cmpsf2>
    2508:	88 23       	and	r24, r24
    250a:	4c f4       	brge	.+18     	; 0x251e <main+0x1c16>
		__ticks = 1;
    250c:	ce 01       	movw	r24, r28
    250e:	8a 5f       	subi	r24, 0xFA	; 250
    2510:	9e 4f       	sbci	r25, 0xFE	; 254
    2512:	21 e0       	ldi	r18, 0x01	; 1
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	fc 01       	movw	r30, r24
    2518:	31 83       	std	Z+1, r19	; 0x01
    251a:	20 83       	st	Z, r18
    251c:	6d c0       	rjmp	.+218    	; 0x25f8 <main+0x1cf0>
	else if (__tmp > 65535)
    251e:	ce 01       	movw	r24, r28
    2520:	8e 5f       	subi	r24, 0xFE	; 254
    2522:	9e 4f       	sbci	r25, 0xFE	; 254
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	3f ef       	ldi	r19, 0xFF	; 255
    2528:	4f e7       	ldi	r20, 0x7F	; 127
    252a:	57 e4       	ldi	r21, 0x47	; 71
    252c:	fc 01       	movw	r30, r24
    252e:	60 81       	ld	r22, Z
    2530:	71 81       	ldd	r23, Z+1	; 0x01
    2532:	82 81       	ldd	r24, Z+2	; 0x02
    2534:	93 81       	ldd	r25, Z+3	; 0x03
    2536:	0e 94 99 13 	call	0x2732	; 0x2732 <__gesf2>
    253a:	18 16       	cp	r1, r24
    253c:	0c f0       	brlt	.+2      	; 0x2540 <main+0x1c38>
    253e:	4a c0       	rjmp	.+148    	; 0x25d4 <main+0x1ccc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2540:	ce 01       	movw	r24, r28
    2542:	8e 5b       	subi	r24, 0xBE	; 190
    2544:	9f 4f       	sbci	r25, 0xFF	; 255
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e2       	ldi	r20, 0x20	; 32
    254c:	51 e4       	ldi	r21, 0x41	; 65
    254e:	fc 01       	movw	r30, r24
    2550:	60 81       	ld	r22, Z
    2552:	71 81       	ldd	r23, Z+1	; 0x01
    2554:	82 81       	ldd	r24, Z+2	; 0x02
    2556:	93 81       	ldd	r25, Z+3	; 0x03
    2558:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulsf3>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	8e 01       	movw	r16, r28
    2562:	0a 5f       	subi	r16, 0xFA	; 250
    2564:	1e 4f       	sbci	r17, 0xFE	; 254
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	f8 01       	movw	r30, r16
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	80 83       	st	Z, r24
    2578:	24 c0       	rjmp	.+72     	; 0x25c2 <main+0x1cba>
    257a:	ce 01       	movw	r24, r28
    257c:	88 5f       	subi	r24, 0xF8	; 248
    257e:	9e 4f       	sbci	r25, 0xFE	; 254
    2580:	29 e1       	ldi	r18, 0x19	; 25
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	fc 01       	movw	r30, r24
    2586:	31 83       	std	Z+1, r19	; 0x01
    2588:	20 83       	st	Z, r18
    258a:	ce 01       	movw	r24, r28
    258c:	88 5f       	subi	r24, 0xF8	; 248
    258e:	9e 4f       	sbci	r25, 0xFE	; 254
    2590:	fc 01       	movw	r30, r24
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <main+0x1c8e>
    259a:	9e 01       	movw	r18, r28
    259c:	28 5f       	subi	r18, 0xF8	; 248
    259e:	3e 4f       	sbci	r19, 0xFE	; 254
    25a0:	f9 01       	movw	r30, r18
    25a2:	91 83       	std	Z+1, r25	; 0x01
    25a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a6:	ce 01       	movw	r24, r28
    25a8:	8a 5f       	subi	r24, 0xFA	; 250
    25aa:	9e 4f       	sbci	r25, 0xFE	; 254
    25ac:	9e 01       	movw	r18, r28
    25ae:	2a 5f       	subi	r18, 0xFA	; 250
    25b0:	3e 4f       	sbci	r19, 0xFE	; 254
    25b2:	f9 01       	movw	r30, r18
    25b4:	20 81       	ld	r18, Z
    25b6:	31 81       	ldd	r19, Z+1	; 0x01
    25b8:	21 50       	subi	r18, 0x01	; 1
    25ba:	31 09       	sbc	r19, r1
    25bc:	fc 01       	movw	r30, r24
    25be:	31 83       	std	Z+1, r19	; 0x01
    25c0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c2:	ce 01       	movw	r24, r28
    25c4:	8a 5f       	subi	r24, 0xFA	; 250
    25c6:	9e 4f       	sbci	r25, 0xFE	; 254
    25c8:	fc 01       	movw	r30, r24
    25ca:	80 81       	ld	r24, Z
    25cc:	91 81       	ldd	r25, Z+1	; 0x01
    25ce:	89 2b       	or	r24, r25
    25d0:	a1 f6       	brne	.-88     	; 0x257a <main+0x1c72>
    25d2:	2c c0       	rjmp	.+88     	; 0x262c <main+0x1d24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d4:	8e 01       	movw	r16, r28
    25d6:	0a 5f       	subi	r16, 0xFA	; 250
    25d8:	1e 4f       	sbci	r17, 0xFE	; 254
    25da:	ce 01       	movw	r24, r28
    25dc:	8e 5f       	subi	r24, 0xFE	; 254
    25de:	9e 4f       	sbci	r25, 0xFE	; 254
    25e0:	fc 01       	movw	r30, r24
    25e2:	60 81       	ld	r22, Z
    25e4:	71 81       	ldd	r23, Z+1	; 0x01
    25e6:	82 81       	ldd	r24, Z+2	; 0x02
    25e8:	93 81       	ldd	r25, Z+3	; 0x03
    25ea:	0e 94 1d 13 	call	0x263a	; 0x263a <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	f8 01       	movw	r30, r16
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	80 83       	st	Z, r24
    25f8:	ce 01       	movw	r24, r28
    25fa:	86 5f       	subi	r24, 0xF6	; 246
    25fc:	9e 4f       	sbci	r25, 0xFE	; 254
    25fe:	9e 01       	movw	r18, r28
    2600:	2a 5f       	subi	r18, 0xFA	; 250
    2602:	3e 4f       	sbci	r19, 0xFE	; 254
    2604:	f9 01       	movw	r30, r18
    2606:	20 81       	ld	r18, Z
    2608:	31 81       	ldd	r19, Z+1	; 0x01
    260a:	fc 01       	movw	r30, r24
    260c:	31 83       	std	Z+1, r19	; 0x01
    260e:	20 83       	st	Z, r18
    2610:	ce 01       	movw	r24, r28
    2612:	86 5f       	subi	r24, 0xF6	; 246
    2614:	9e 4f       	sbci	r25, 0xFE	; 254
    2616:	fc 01       	movw	r30, r24
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	f1 f7       	brne	.-4      	; 0x261c <main+0x1d14>
    2620:	9e 01       	movw	r18, r28
    2622:	26 5f       	subi	r18, 0xF6	; 246
    2624:	3e 4f       	sbci	r19, 0xFE	; 254
    2626:	f9 01       	movw	r30, r18
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	80 83       	st	Z, r24
				_delay_ms(50);
			}
		_delay_ms(1000);
    }
    262c:	0c 94 95 04 	jmp	0x92a	; 0x92a <main+0x22>

00002630 <__cmpsf2>:
    2630:	0e 94 4c 13 	call	0x2698	; 0x2698 <__fp_cmp>
    2634:	08 f4       	brcc	.+2      	; 0x2638 <__cmpsf2+0x8>
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	08 95       	ret

0000263a <__fixunssfsi>:
    263a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__fp_splitA>
    263e:	88 f0       	brcs	.+34     	; 0x2662 <__fixunssfsi+0x28>
    2640:	9f 57       	subi	r25, 0x7F	; 127
    2642:	98 f0       	brcs	.+38     	; 0x266a <__fixunssfsi+0x30>
    2644:	b9 2f       	mov	r27, r25
    2646:	99 27       	eor	r25, r25
    2648:	b7 51       	subi	r27, 0x17	; 23
    264a:	b0 f0       	brcs	.+44     	; 0x2678 <__fixunssfsi+0x3e>
    264c:	e1 f0       	breq	.+56     	; 0x2686 <__fixunssfsi+0x4c>
    264e:	66 0f       	add	r22, r22
    2650:	77 1f       	adc	r23, r23
    2652:	88 1f       	adc	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	1a f0       	brmi	.+6      	; 0x265e <__fixunssfsi+0x24>
    2658:	ba 95       	dec	r27
    265a:	c9 f7       	brne	.-14     	; 0x264e <__fixunssfsi+0x14>
    265c:	14 c0       	rjmp	.+40     	; 0x2686 <__fixunssfsi+0x4c>
    265e:	b1 30       	cpi	r27, 0x01	; 1
    2660:	91 f0       	breq	.+36     	; 0x2686 <__fixunssfsi+0x4c>
    2662:	0e 94 92 13 	call	0x2724	; 0x2724 <__fp_zero>
    2666:	b1 e0       	ldi	r27, 0x01	; 1
    2668:	08 95       	ret
    266a:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__fp_zero>
    266e:	67 2f       	mov	r22, r23
    2670:	78 2f       	mov	r23, r24
    2672:	88 27       	eor	r24, r24
    2674:	b8 5f       	subi	r27, 0xF8	; 248
    2676:	39 f0       	breq	.+14     	; 0x2686 <__fixunssfsi+0x4c>
    2678:	b9 3f       	cpi	r27, 0xF9	; 249
    267a:	cc f3       	brlt	.-14     	; 0x266e <__fixunssfsi+0x34>
    267c:	86 95       	lsr	r24
    267e:	77 95       	ror	r23
    2680:	67 95       	ror	r22
    2682:	b3 95       	inc	r27
    2684:	d9 f7       	brne	.-10     	; 0x267c <__fixunssfsi+0x42>
    2686:	3e f4       	brtc	.+14     	; 0x2696 <__fixunssfsi+0x5c>
    2688:	90 95       	com	r25
    268a:	80 95       	com	r24
    268c:	70 95       	com	r23
    268e:	61 95       	neg	r22
    2690:	7f 4f       	sbci	r23, 0xFF	; 255
    2692:	8f 4f       	sbci	r24, 0xFF	; 255
    2694:	9f 4f       	sbci	r25, 0xFF	; 255
    2696:	08 95       	ret

00002698 <__fp_cmp>:
    2698:	99 0f       	add	r25, r25
    269a:	00 08       	sbc	r0, r0
    269c:	55 0f       	add	r21, r21
    269e:	aa 0b       	sbc	r26, r26
    26a0:	e0 e8       	ldi	r30, 0x80	; 128
    26a2:	fe ef       	ldi	r31, 0xFE	; 254
    26a4:	16 16       	cp	r1, r22
    26a6:	17 06       	cpc	r1, r23
    26a8:	e8 07       	cpc	r30, r24
    26aa:	f9 07       	cpc	r31, r25
    26ac:	c0 f0       	brcs	.+48     	; 0x26de <__fp_cmp+0x46>
    26ae:	12 16       	cp	r1, r18
    26b0:	13 06       	cpc	r1, r19
    26b2:	e4 07       	cpc	r30, r20
    26b4:	f5 07       	cpc	r31, r21
    26b6:	98 f0       	brcs	.+38     	; 0x26de <__fp_cmp+0x46>
    26b8:	62 1b       	sub	r22, r18
    26ba:	73 0b       	sbc	r23, r19
    26bc:	84 0b       	sbc	r24, r20
    26be:	95 0b       	sbc	r25, r21
    26c0:	39 f4       	brne	.+14     	; 0x26d0 <__fp_cmp+0x38>
    26c2:	0a 26       	eor	r0, r26
    26c4:	61 f0       	breq	.+24     	; 0x26de <__fp_cmp+0x46>
    26c6:	23 2b       	or	r18, r19
    26c8:	24 2b       	or	r18, r20
    26ca:	25 2b       	or	r18, r21
    26cc:	21 f4       	brne	.+8      	; 0x26d6 <__fp_cmp+0x3e>
    26ce:	08 95       	ret
    26d0:	0a 26       	eor	r0, r26
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <__fp_cmp+0x3e>
    26d4:	a1 40       	sbci	r26, 0x01	; 1
    26d6:	a6 95       	lsr	r26
    26d8:	8f ef       	ldi	r24, 0xFF	; 255
    26da:	81 1d       	adc	r24, r1
    26dc:	81 1d       	adc	r24, r1
    26de:	08 95       	ret

000026e0 <__fp_split3>:
    26e0:	57 fd       	sbrc	r21, 7
    26e2:	90 58       	subi	r25, 0x80	; 128
    26e4:	44 0f       	add	r20, r20
    26e6:	55 1f       	adc	r21, r21
    26e8:	59 f0       	breq	.+22     	; 0x2700 <__fp_splitA+0x10>
    26ea:	5f 3f       	cpi	r21, 0xFF	; 255
    26ec:	71 f0       	breq	.+28     	; 0x270a <__fp_splitA+0x1a>
    26ee:	47 95       	ror	r20

000026f0 <__fp_splitA>:
    26f0:	88 0f       	add	r24, r24
    26f2:	97 fb       	bst	r25, 7
    26f4:	99 1f       	adc	r25, r25
    26f6:	61 f0       	breq	.+24     	; 0x2710 <__fp_splitA+0x20>
    26f8:	9f 3f       	cpi	r25, 0xFF	; 255
    26fa:	79 f0       	breq	.+30     	; 0x271a <__fp_splitA+0x2a>
    26fc:	87 95       	ror	r24
    26fe:	08 95       	ret
    2700:	12 16       	cp	r1, r18
    2702:	13 06       	cpc	r1, r19
    2704:	14 06       	cpc	r1, r20
    2706:	55 1f       	adc	r21, r21
    2708:	f2 cf       	rjmp	.-28     	; 0x26ee <__fp_split3+0xe>
    270a:	46 95       	lsr	r20
    270c:	f1 df       	rcall	.-30     	; 0x26f0 <__fp_splitA>
    270e:	08 c0       	rjmp	.+16     	; 0x2720 <__fp_splitA+0x30>
    2710:	16 16       	cp	r1, r22
    2712:	17 06       	cpc	r1, r23
    2714:	18 06       	cpc	r1, r24
    2716:	99 1f       	adc	r25, r25
    2718:	f1 cf       	rjmp	.-30     	; 0x26fc <__fp_splitA+0xc>
    271a:	86 95       	lsr	r24
    271c:	71 05       	cpc	r23, r1
    271e:	61 05       	cpc	r22, r1
    2720:	08 94       	sec
    2722:	08 95       	ret

00002724 <__fp_zero>:
    2724:	e8 94       	clt

00002726 <__fp_szero>:
    2726:	bb 27       	eor	r27, r27
    2728:	66 27       	eor	r22, r22
    272a:	77 27       	eor	r23, r23
    272c:	cb 01       	movw	r24, r22
    272e:	97 f9       	bld	r25, 7
    2730:	08 95       	ret

00002732 <__gesf2>:
    2732:	0e 94 4c 13 	call	0x2698	; 0x2698 <__fp_cmp>
    2736:	08 f4       	brcc	.+2      	; 0x273a <__gesf2+0x8>
    2738:	8f ef       	ldi	r24, 0xFF	; 255
    273a:	08 95       	ret

0000273c <__mulsf3>:
    273c:	0e 94 b1 13 	call	0x2762	; 0x2762 <__mulsf3x>
    2740:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__fp_round>
    2744:	0e 94 14 14 	call	0x2828	; 0x2828 <__fp_pscA>
    2748:	38 f0       	brcs	.+14     	; 0x2758 <__mulsf3+0x1c>
    274a:	0e 94 1b 14 	call	0x2836	; 0x2836 <__fp_pscB>
    274e:	20 f0       	brcs	.+8      	; 0x2758 <__mulsf3+0x1c>
    2750:	95 23       	and	r25, r21
    2752:	11 f0       	breq	.+4      	; 0x2758 <__mulsf3+0x1c>
    2754:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__fp_inf>
    2758:	0c 94 11 14 	jmp	0x2822	; 0x2822 <__fp_nan>
    275c:	11 24       	eor	r1, r1
    275e:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__fp_szero>

00002762 <__mulsf3x>:
    2762:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__fp_split3>
    2766:	70 f3       	brcs	.-36     	; 0x2744 <__mulsf3+0x8>

00002768 <__mulsf3_pse>:
    2768:	95 9f       	mul	r25, r21
    276a:	c1 f3       	breq	.-16     	; 0x275c <__mulsf3+0x20>
    276c:	95 0f       	add	r25, r21
    276e:	50 e0       	ldi	r21, 0x00	; 0
    2770:	55 1f       	adc	r21, r21
    2772:	62 9f       	mul	r22, r18
    2774:	f0 01       	movw	r30, r0
    2776:	72 9f       	mul	r23, r18
    2778:	bb 27       	eor	r27, r27
    277a:	f0 0d       	add	r31, r0
    277c:	b1 1d       	adc	r27, r1
    277e:	63 9f       	mul	r22, r19
    2780:	aa 27       	eor	r26, r26
    2782:	f0 0d       	add	r31, r0
    2784:	b1 1d       	adc	r27, r1
    2786:	aa 1f       	adc	r26, r26
    2788:	64 9f       	mul	r22, r20
    278a:	66 27       	eor	r22, r22
    278c:	b0 0d       	add	r27, r0
    278e:	a1 1d       	adc	r26, r1
    2790:	66 1f       	adc	r22, r22
    2792:	82 9f       	mul	r24, r18
    2794:	22 27       	eor	r18, r18
    2796:	b0 0d       	add	r27, r0
    2798:	a1 1d       	adc	r26, r1
    279a:	62 1f       	adc	r22, r18
    279c:	73 9f       	mul	r23, r19
    279e:	b0 0d       	add	r27, r0
    27a0:	a1 1d       	adc	r26, r1
    27a2:	62 1f       	adc	r22, r18
    27a4:	83 9f       	mul	r24, r19
    27a6:	a0 0d       	add	r26, r0
    27a8:	61 1d       	adc	r22, r1
    27aa:	22 1f       	adc	r18, r18
    27ac:	74 9f       	mul	r23, r20
    27ae:	33 27       	eor	r19, r19
    27b0:	a0 0d       	add	r26, r0
    27b2:	61 1d       	adc	r22, r1
    27b4:	23 1f       	adc	r18, r19
    27b6:	84 9f       	mul	r24, r20
    27b8:	60 0d       	add	r22, r0
    27ba:	21 1d       	adc	r18, r1
    27bc:	82 2f       	mov	r24, r18
    27be:	76 2f       	mov	r23, r22
    27c0:	6a 2f       	mov	r22, r26
    27c2:	11 24       	eor	r1, r1
    27c4:	9f 57       	subi	r25, 0x7F	; 127
    27c6:	50 40       	sbci	r21, 0x00	; 0
    27c8:	9a f0       	brmi	.+38     	; 0x27f0 <__mulsf3_pse+0x88>
    27ca:	f1 f0       	breq	.+60     	; 0x2808 <__mulsf3_pse+0xa0>
    27cc:	88 23       	and	r24, r24
    27ce:	4a f0       	brmi	.+18     	; 0x27e2 <__mulsf3_pse+0x7a>
    27d0:	ee 0f       	add	r30, r30
    27d2:	ff 1f       	adc	r31, r31
    27d4:	bb 1f       	adc	r27, r27
    27d6:	66 1f       	adc	r22, r22
    27d8:	77 1f       	adc	r23, r23
    27da:	88 1f       	adc	r24, r24
    27dc:	91 50       	subi	r25, 0x01	; 1
    27de:	50 40       	sbci	r21, 0x00	; 0
    27e0:	a9 f7       	brne	.-22     	; 0x27cc <__mulsf3_pse+0x64>
    27e2:	9e 3f       	cpi	r25, 0xFE	; 254
    27e4:	51 05       	cpc	r21, r1
    27e6:	80 f0       	brcs	.+32     	; 0x2808 <__mulsf3_pse+0xa0>
    27e8:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__fp_inf>
    27ec:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__fp_szero>
    27f0:	5f 3f       	cpi	r21, 0xFF	; 255
    27f2:	e4 f3       	brlt	.-8      	; 0x27ec <__mulsf3_pse+0x84>
    27f4:	98 3e       	cpi	r25, 0xE8	; 232
    27f6:	d4 f3       	brlt	.-12     	; 0x27ec <__mulsf3_pse+0x84>
    27f8:	86 95       	lsr	r24
    27fa:	77 95       	ror	r23
    27fc:	67 95       	ror	r22
    27fe:	b7 95       	ror	r27
    2800:	f7 95       	ror	r31
    2802:	e7 95       	ror	r30
    2804:	9f 5f       	subi	r25, 0xFF	; 255
    2806:	c1 f7       	brne	.-16     	; 0x27f8 <__mulsf3_pse+0x90>
    2808:	fe 2b       	or	r31, r30
    280a:	88 0f       	add	r24, r24
    280c:	91 1d       	adc	r25, r1
    280e:	96 95       	lsr	r25
    2810:	87 95       	ror	r24
    2812:	97 f9       	bld	r25, 7
    2814:	08 95       	ret

00002816 <__fp_inf>:
    2816:	97 f9       	bld	r25, 7
    2818:	9f 67       	ori	r25, 0x7F	; 127
    281a:	80 e8       	ldi	r24, 0x80	; 128
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	60 e0       	ldi	r22, 0x00	; 0
    2820:	08 95       	ret

00002822 <__fp_nan>:
    2822:	9f ef       	ldi	r25, 0xFF	; 255
    2824:	80 ec       	ldi	r24, 0xC0	; 192
    2826:	08 95       	ret

00002828 <__fp_pscA>:
    2828:	00 24       	eor	r0, r0
    282a:	0a 94       	dec	r0
    282c:	16 16       	cp	r1, r22
    282e:	17 06       	cpc	r1, r23
    2830:	18 06       	cpc	r1, r24
    2832:	09 06       	cpc	r0, r25
    2834:	08 95       	ret

00002836 <__fp_pscB>:
    2836:	00 24       	eor	r0, r0
    2838:	0a 94       	dec	r0
    283a:	12 16       	cp	r1, r18
    283c:	13 06       	cpc	r1, r19
    283e:	14 06       	cpc	r1, r20
    2840:	05 06       	cpc	r0, r21
    2842:	08 95       	ret

00002844 <__fp_round>:
    2844:	09 2e       	mov	r0, r25
    2846:	03 94       	inc	r0
    2848:	00 0c       	add	r0, r0
    284a:	11 f4       	brne	.+4      	; 0x2850 <__fp_round+0xc>
    284c:	88 23       	and	r24, r24
    284e:	52 f0       	brmi	.+20     	; 0x2864 <__fp_round+0x20>
    2850:	bb 0f       	add	r27, r27
    2852:	40 f4       	brcc	.+16     	; 0x2864 <__fp_round+0x20>
    2854:	bf 2b       	or	r27, r31
    2856:	11 f4       	brne	.+4      	; 0x285c <__fp_round+0x18>
    2858:	60 ff       	sbrs	r22, 0
    285a:	04 c0       	rjmp	.+8      	; 0x2864 <__fp_round+0x20>
    285c:	6f 5f       	subi	r22, 0xFF	; 255
    285e:	7f 4f       	sbci	r23, 0xFF	; 255
    2860:	8f 4f       	sbci	r24, 0xFF	; 255
    2862:	9f 4f       	sbci	r25, 0xFF	; 255
    2864:	08 95       	ret

00002866 <_exit>:
    2866:	f8 94       	cli

00002868 <__stop_program>:
    2868:	ff cf       	rjmp	.-2      	; 0x2868 <__stop_program>
