
BCDSevegments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000290c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000290c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000293c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010a2  00000000  00000000  00002a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006db  00000000  00000000  00003aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f4c  00000000  00000000  000041a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  000050f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000456  00000000  00000000  00005290  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d0  00000000  00000000  000056e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000059b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61
      60:	0e 94 ab 04 	call	0x956	; 0x956 <main>
      64:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <_exit>

00000068 <__bad_interrupt>:
      68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <BCDSevegments_Init>:
 */ 
#include "BCDSevegments.h"
#include "BCDSevSegment_cfg.h"

void BCDSevegments_Init()
{
      6c:	cf 93       	push	r28
      6e:	df 93       	push	r29
      70:	cd b7       	in	r28, 0x3d	; 61
      72:	de b7       	in	r29, 0x3e	; 62
	//OUTPUT for enable bits
	DIO_SetPinDirection(BCDSEVSEGMENTS1_Enable_PIN,OUTPUT);
      74:	61 e0       	ldi	r22, 0x01	; 1
      76:	8a e1       	ldi	r24, 0x1A	; 26
      78:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_SetPinDirection>
	DIO_SetPinDirection(BCDSEVSEGMENTS2_Enable_PIN,OUTPUT);
      7c:	61 e0       	ldi	r22, 0x01	; 1
      7e:	8b e1       	ldi	r24, 0x1B	; 27
      80:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_SetPinDirection>
	DIO_SetPinDirection(BCDSEVSEGMENTS3_Enable_PIN,OUTPUT);
      84:	61 e0       	ldi	r22, 0x01	; 1
      86:	8e e1       	ldi	r24, 0x1E	; 30
      88:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_SetPinDirection>
	DIO_SetPinDirection(BCDSEVSEGMENTS4_Enable_PIN,OUTPUT);
      8c:	61 e0       	ldi	r22, 0x01	; 1
      8e:	8f e1       	ldi	r24, 0x1F	; 31
      90:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_SetPinDirection>
	
	//OUTPUT for 4 7-segment
	DIO_SetPinDirection(BCDSEVSEGMENTS1_DATA_PIN,OUTPUT);
      94:	61 e0       	ldi	r22, 0x01	; 1
      96:	88 e0       	ldi	r24, 0x08	; 8
      98:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_SetPinDirection>
	DIO_SetPinDirection(BCDSEVSEGMENTS2_DATA_PIN,OUTPUT);
      9c:	61 e0       	ldi	r22, 0x01	; 1
      9e:	89 e0       	ldi	r24, 0x09	; 9
      a0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_SetPinDirection>
	DIO_SetPinDirection(BCDSEVSEGMENTS3_DATA_PIN,OUTPUT);
      a4:	61 e0       	ldi	r22, 0x01	; 1
      a6:	8a e0       	ldi	r24, 0x0A	; 10
      a8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_SetPinDirection>
	DIO_SetPinDirection(BCDSEVSEGMENTS4_DATA_PIN,OUTPUT);
      ac:	61 e0       	ldi	r22, 0x01	; 1
      ae:	8b e0       	ldi	r24, 0x0B	; 11
      b0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_SetPinDirection>
	
	//Write LOW in the begining
	DIO_WritePin(BCDSEVSEGMENTS1_Enable_PIN,LOW);
      b4:	60 e0       	ldi	r22, 0x00	; 0
      b6:	8a e1       	ldi	r24, 0x1A	; 26
      b8:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	DIO_WritePin(BCDSEVSEGMENTS2_Enable_PIN,LOW);
      bc:	60 e0       	ldi	r22, 0x00	; 0
      be:	8b e1       	ldi	r24, 0x1B	; 27
      c0:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	DIO_WritePin(BCDSEVSEGMENTS3_Enable_PIN,LOW);
      c4:	60 e0       	ldi	r22, 0x00	; 0
      c6:	8e e1       	ldi	r24, 0x1E	; 30
      c8:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	DIO_WritePin(BCDSEVSEGMENTS4_Enable_PIN,LOW);
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	8f e1       	ldi	r24, 0x1F	; 31
      d0:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
}
      d4:	00 00       	nop
      d6:	df 91       	pop	r29
      d8:	cf 91       	pop	r28
      da:	08 95       	ret

000000dc <BCDSevegments_enable>:
void BCDSevegments_enable(uint8 segment_Number)
{
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	1f 92       	push	r1
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
      e6:	89 83       	std	Y+1, r24	; 0x01
	
	if (segment_Number == 1)
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	81 30       	cpi	r24, 0x01	; 1
      ec:	21 f4       	brne	.+8      	; 0xf6 <BCDSevegments_enable+0x1a>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_Enable_PIN,HIGH);
      ee:	61 e0       	ldi	r22, 0x01	; 1
      f0:	8a e1       	ldi	r24, 0x1A	; 26
      f2:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	}
	if (segment_Number == 2)
      f6:	89 81       	ldd	r24, Y+1	; 0x01
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	21 f4       	brne	.+8      	; 0x104 <BCDSevegments_enable+0x28>
	{
		DIO_WritePin(BCDSEVSEGMENTS2_Enable_PIN,HIGH);
      fc:	61 e0       	ldi	r22, 0x01	; 1
      fe:	8b e1       	ldi	r24, 0x1B	; 27
     100:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	}
	if(segment_Number == 3)
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	83 30       	cpi	r24, 0x03	; 3
     108:	21 f4       	brne	.+8      	; 0x112 <BCDSevegments_enable+0x36>
	{
		DIO_WritePin(BCDSEVSEGMENTS3_Enable_PIN,HIGH);
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	8e e1       	ldi	r24, 0x1E	; 30
     10e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	}
	if(segment_Number == 4)
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	84 30       	cpi	r24, 0x04	; 4
     116:	21 f4       	brne	.+8      	; 0x120 <BCDSevegments_enable+0x44>
	{
		DIO_WritePin(BCDSEVSEGMENTS4_Enable_PIN,HIGH);
     118:	61 e0       	ldi	r22, 0x01	; 1
     11a:	8f e1       	ldi	r24, 0x1F	; 31
     11c:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	}
	
}
     120:	00 00       	nop
     122:	0f 90       	pop	r0
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <BCDSevegments_disable>:
void BCDSevegments_disable(uint8 segment_Number)
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	1f 92       	push	r1
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	89 83       	std	Y+1, r24	; 0x01
	
	if (segment_Number == 1)
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	81 30       	cpi	r24, 0x01	; 1
     13a:	21 f4       	brne	.+8      	; 0x144 <BCDSevegments_disable+0x1a>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_Enable_PIN,LOW);
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	8a e1       	ldi	r24, 0x1A	; 26
     140:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	}
	if (segment_Number == 2)
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	21 f4       	brne	.+8      	; 0x152 <BCDSevegments_disable+0x28>
	{
		DIO_WritePin(BCDSEVSEGMENTS2_Enable_PIN,LOW);
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	8b e1       	ldi	r24, 0x1B	; 27
     14e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	}
	if(segment_Number == 3)
     152:	89 81       	ldd	r24, Y+1	; 0x01
     154:	83 30       	cpi	r24, 0x03	; 3
     156:	21 f4       	brne	.+8      	; 0x160 <BCDSevegments_disable+0x36>
	{
		DIO_WritePin(BCDSEVSEGMENTS3_Enable_PIN,LOW);
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	8e e1       	ldi	r24, 0x1E	; 30
     15c:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	}
	if(segment_Number == 4)
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	84 30       	cpi	r24, 0x04	; 4
     164:	21 f4       	brne	.+8      	; 0x16e <BCDSevegments_disable+0x44>
	{
		DIO_WritePin(BCDSEVSEGMENTS4_Enable_PIN,LOW);
     166:	60 e0       	ldi	r22, 0x00	; 0
     168:	8f e1       	ldi	r24, 0x1F	; 31
     16a:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	}
}
     16e:	00 00       	nop
     170:	0f 90       	pop	r0
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	08 95       	ret

00000178 <BCDSevegments_displayNo>:
void BCDSevegments_displayNo(uint8 number)
{
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	1f 92       	push	r1
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
     182:	89 83       	std	Y+1, r24	; 0x01
	if (number == 0)
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	88 23       	and	r24, r24
     188:	89 f4       	brne	.+34     	; 0x1ac <BCDSevegments_displayNo+0x34>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     18a:	60 e0       	ldi	r22, 0x00	; 0
     18c:	88 e0       	ldi	r24, 0x08	; 8
     18e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     192:	60 e0       	ldi	r22, 0x00	; 0
     194:	89 e0       	ldi	r24, 0x09	; 9
     196:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	8a e0       	ldi	r24, 0x0A	; 10
     19e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	8b e0       	ldi	r24, 0x0B	; 11
     1a6:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1aa:	b3 c0       	rjmp	.+358    	; 0x312 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 1)
     1ac:	89 81       	ldd	r24, Y+1	; 0x01
     1ae:	81 30       	cpi	r24, 0x01	; 1
     1b0:	89 f4       	brne	.+34     	; 0x1d4 <BCDSevegments_displayNo+0x5c>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     1b2:	61 e0       	ldi	r22, 0x01	; 1
     1b4:	88 e0       	ldi	r24, 0x08	; 8
     1b6:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	89 e0       	ldi	r24, 0x09	; 9
     1be:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	8a e0       	ldi	r24, 0x0A	; 10
     1c6:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1ca:	60 e0       	ldi	r22, 0x00	; 0
     1cc:	8b e0       	ldi	r24, 0x0B	; 11
     1ce:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1d2:	9f c0       	rjmp	.+318    	; 0x312 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 2)
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	82 30       	cpi	r24, 0x02	; 2
     1d8:	89 f4       	brne	.+34     	; 0x1fc <BCDSevegments_displayNo+0x84>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	88 e0       	ldi	r24, 0x08	; 8
     1de:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     1e2:	61 e0       	ldi	r22, 0x01	; 1
     1e4:	89 e0       	ldi	r24, 0x09	; 9
     1e6:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	8a e0       	ldi	r24, 0x0A	; 10
     1ee:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	8b e0       	ldi	r24, 0x0B	; 11
     1f6:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1fa:	8b c0       	rjmp	.+278    	; 0x312 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 3)
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	83 30       	cpi	r24, 0x03	; 3
     200:	89 f4       	brne	.+34     	; 0x224 <BCDSevegments_displayNo+0xac>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     202:	61 e0       	ldi	r22, 0x01	; 1
     204:	88 e0       	ldi	r24, 0x08	; 8
     206:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     20a:	61 e0       	ldi	r22, 0x01	; 1
     20c:	89 e0       	ldi	r24, 0x09	; 9
     20e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	8a e0       	ldi	r24, 0x0A	; 10
     216:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     21a:	60 e0       	ldi	r22, 0x00	; 0
     21c:	8b e0       	ldi	r24, 0x0B	; 11
     21e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     222:	77 c0       	rjmp	.+238    	; 0x312 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if (number == 4)
     224:	89 81       	ldd	r24, Y+1	; 0x01
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	89 f4       	brne	.+34     	; 0x24c <BCDSevegments_displayNo+0xd4>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	88 e0       	ldi	r24, 0x08	; 8
     22e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	89 e0       	ldi	r24, 0x09	; 9
     236:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     23a:	61 e0       	ldi	r22, 0x01	; 1
     23c:	8a e0       	ldi	r24, 0x0A	; 10
     23e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	8b e0       	ldi	r24, 0x0B	; 11
     246:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     24a:	63 c0       	rjmp	.+198    	; 0x312 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 5)
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	85 30       	cpi	r24, 0x05	; 5
     250:	89 f4       	brne	.+34     	; 0x274 <BCDSevegments_displayNo+0xfc>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     252:	61 e0       	ldi	r22, 0x01	; 1
     254:	88 e0       	ldi	r24, 0x08	; 8
     256:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	89 e0       	ldi	r24, 0x09	; 9
     25e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     262:	61 e0       	ldi	r22, 0x01	; 1
     264:	8a e0       	ldi	r24, 0x0A	; 10
     266:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	8b e0       	ldi	r24, 0x0B	; 11
     26e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     272:	4f c0       	rjmp	.+158    	; 0x312 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 6)
     274:	89 81       	ldd	r24, Y+1	; 0x01
     276:	86 30       	cpi	r24, 0x06	; 6
     278:	89 f4       	brne	.+34     	; 0x29c <BCDSevegments_displayNo+0x124>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	88 e0       	ldi	r24, 0x08	; 8
     27e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	89 e0       	ldi	r24, 0x09	; 9
     286:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     28a:	61 e0       	ldi	r22, 0x01	; 1
     28c:	8a e0       	ldi	r24, 0x0A	; 10
     28e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	8b e0       	ldi	r24, 0x0B	; 11
     296:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     29a:	3b c0       	rjmp	.+118    	; 0x312 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 7)
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	87 30       	cpi	r24, 0x07	; 7
     2a0:	89 f4       	brne	.+34     	; 0x2c4 <BCDSevegments_displayNo+0x14c>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     2a2:	61 e0       	ldi	r22, 0x01	; 1
     2a4:	88 e0       	ldi	r24, 0x08	; 8
     2a6:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     2aa:	61 e0       	ldi	r22, 0x01	; 1
     2ac:	89 e0       	ldi	r24, 0x09	; 9
     2ae:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	8a e0       	ldi	r24, 0x0A	; 10
     2b6:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	8b e0       	ldi	r24, 0x0B	; 11
     2be:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     2c2:	27 c0       	rjmp	.+78     	; 0x312 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 8)
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	89 f4       	brne	.+34     	; 0x2ec <BCDSevegments_displayNo+0x174>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	88 e0       	ldi	r24, 0x08	; 8
     2ce:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	89 e0       	ldi	r24, 0x09	; 9
     2d6:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	8a e0       	ldi	r24, 0x0A	; 10
     2de:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
     2e2:	61 e0       	ldi	r22, 0x01	; 1
     2e4:	8b e0       	ldi	r24, 0x0B	; 11
     2e6:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     2ea:	13 c0       	rjmp	.+38     	; 0x312 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
	else if(number == 9)
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	89 30       	cpi	r24, 0x09	; 9
     2f0:	81 f4       	brne	.+32     	; 0x312 <BCDSevegments_displayNo+0x19a>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	88 e0       	ldi	r24, 0x08	; 8
     2f6:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	89 e0       	ldi	r24, 0x09	; 9
     2fe:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	8a e0       	ldi	r24, 0x0A	; 10
     306:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	8b e0       	ldi	r24, 0x0B	; 11
     30e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	}
     312:	00 00       	nop
     314:	0f 90       	pop	r0
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <DIO_WritePin>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "BitwiseOperation.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	00 d0       	rcall	.+0      	; 0x322 <DIO_WritePin+0x6>
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	89 83       	std	Y+1, r24	; 0x01
     328:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNum >= 0 && PinNum < 8 )
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	88 30       	cpi	r24, 0x08	; 8
     32e:	78 f5       	brcc	.+94     	; 0x38e <DIO_WritePin+0x72>
	{
			if(PinValue == 1)
     330:	8a 81       	ldd	r24, Y+2	; 0x02
     332:	81 30       	cpi	r24, 0x01	; 1
     334:	a1 f4       	brne	.+40     	; 0x35e <DIO_WritePin+0x42>
			{
				Set_Bit( PORTA , PinNum);
     336:	8b e3       	ldi	r24, 0x3B	; 59
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	2b e3       	ldi	r18, 0x3B	; 59
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	f9 01       	movw	r30, r18
     340:	20 81       	ld	r18, Z
     342:	62 2f       	mov	r22, r18
     344:	29 81       	ldd	r18, Y+1	; 0x01
     346:	42 2f       	mov	r20, r18
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_WritePin+0x38>
     350:	22 0f       	add	r18, r18
     352:	33 1f       	adc	r19, r19
     354:	4a 95       	dec	r20
     356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_WritePin+0x34>
     358:	26 2b       	or	r18, r22
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
     35e:	8a 81       	ldd	r24, Y+2	; 0x02
     360:	88 23       	and	r24, r24
     362:	a9 f4       	brne	.+42     	; 0x38e <DIO_WritePin+0x72>
			{
				Clear_Bit( PORTA , PinNum);
     364:	8b e3       	ldi	r24, 0x3B	; 59
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	2b e3       	ldi	r18, 0x3B	; 59
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	f9 01       	movw	r30, r18
     36e:	20 81       	ld	r18, Z
     370:	62 2f       	mov	r22, r18
     372:	29 81       	ldd	r18, Y+1	; 0x01
     374:	42 2f       	mov	r20, r18
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	21 e0       	ldi	r18, 0x01	; 1
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_WritePin+0x66>
     37e:	22 0f       	add	r18, r18
     380:	33 1f       	adc	r19, r19
     382:	4a 95       	dec	r20
     384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_WritePin+0x62>
     386:	20 95       	com	r18
     388:	26 23       	and	r18, r22
     38a:	fc 01       	movw	r30, r24
     38c:	20 83       	st	Z, r18
			}
	}
	if(PinNum > 7 && PinNum < 16)
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	88 30       	cpi	r24, 0x08	; 8
     392:	c0 f1       	brcs	.+112    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	80 31       	cpi	r24, 0x10	; 16
     398:	a8 f5       	brcc	.+106    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	{
		if(PinValue == 1)
     39a:	8a 81       	ldd	r24, Y+2	; 0x02
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	b9 f4       	brne	.+46     	; 0x3ce <DIO_WritePin+0xb2>
		{
			Set_Bit( PORTB , (PinNum-8));
     3a0:	88 e3       	ldi	r24, 0x38	; 56
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	28 e3       	ldi	r18, 0x38	; 56
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	f9 01       	movw	r30, r18
     3aa:	20 81       	ld	r18, Z
     3ac:	62 2f       	mov	r22, r18
     3ae:	29 81       	ldd	r18, Y+1	; 0x01
     3b0:	22 2f       	mov	r18, r18
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	a9 01       	movw	r20, r18
     3b6:	48 50       	subi	r20, 0x08	; 8
     3b8:	51 09       	sbc	r21, r1
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_WritePin+0xa8>
     3c0:	22 0f       	add	r18, r18
     3c2:	33 1f       	adc	r19, r19
     3c4:	4a 95       	dec	r20
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_WritePin+0xa4>
     3c8:	26 2b       	or	r18, r22
     3ca:	fc 01       	movw	r30, r24
     3cc:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
     3ce:	8a 81       	ldd	r24, Y+2	; 0x02
     3d0:	88 23       	and	r24, r24
     3d2:	c1 f4       	brne	.+48     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		{
			Clear_Bit( PORTB , (PinNum-8));
     3d4:	88 e3       	ldi	r24, 0x38	; 56
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	28 e3       	ldi	r18, 0x38	; 56
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	f9 01       	movw	r30, r18
     3de:	20 81       	ld	r18, Z
     3e0:	62 2f       	mov	r22, r18
     3e2:	29 81       	ldd	r18, Y+1	; 0x01
     3e4:	22 2f       	mov	r18, r18
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	a9 01       	movw	r20, r18
     3ea:	48 50       	subi	r20, 0x08	; 8
     3ec:	51 09       	sbc	r21, r1
     3ee:	21 e0       	ldi	r18, 0x01	; 1
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_WritePin+0xdc>
     3f4:	22 0f       	add	r18, r18
     3f6:	33 1f       	adc	r19, r19
     3f8:	4a 95       	dec	r20
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_WritePin+0xd8>
     3fc:	20 95       	com	r18
     3fe:	26 23       	and	r18, r22
     400:	fc 01       	movw	r30, r24
     402:	20 83       	st	Z, r18
		}
	}
	if(PinNum > 15 && PinNum < 24)
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	80 31       	cpi	r24, 0x10	; 16
     408:	c0 f1       	brcs	.+112    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	88 31       	cpi	r24, 0x18	; 24
     40e:	a8 f5       	brcc	.+106    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
	{
		if(PinValue == 1)
     410:	8a 81       	ldd	r24, Y+2	; 0x02
     412:	81 30       	cpi	r24, 0x01	; 1
     414:	b9 f4       	brne	.+46     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		{
			Set_Bit( PORTC , (PinNum-16));
     416:	85 e3       	ldi	r24, 0x35	; 53
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	25 e3       	ldi	r18, 0x35	; 53
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	f9 01       	movw	r30, r18
     420:	20 81       	ld	r18, Z
     422:	62 2f       	mov	r22, r18
     424:	29 81       	ldd	r18, Y+1	; 0x01
     426:	22 2f       	mov	r18, r18
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	a9 01       	movw	r20, r18
     42c:	40 51       	subi	r20, 0x10	; 16
     42e:	51 09       	sbc	r21, r1
     430:	21 e0       	ldi	r18, 0x01	; 1
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	02 c0       	rjmp	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     436:	22 0f       	add	r18, r18
     438:	33 1f       	adc	r19, r19
     43a:	4a 95       	dec	r20
     43c:	e2 f7       	brpl	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     43e:	26 2b       	or	r18, r22
     440:	fc 01       	movw	r30, r24
     442:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
     444:	8a 81       	ldd	r24, Y+2	; 0x02
     446:	88 23       	and	r24, r24
     448:	c1 f4       	brne	.+48     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		{
			Clear_Bit( PORTC , (PinNum-16));
     44a:	85 e3       	ldi	r24, 0x35	; 53
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	25 e3       	ldi	r18, 0x35	; 53
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	f9 01       	movw	r30, r18
     454:	20 81       	ld	r18, Z
     456:	62 2f       	mov	r22, r18
     458:	29 81       	ldd	r18, Y+1	; 0x01
     45a:	22 2f       	mov	r18, r18
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	a9 01       	movw	r20, r18
     460:	40 51       	subi	r20, 0x10	; 16
     462:	51 09       	sbc	r21, r1
     464:	21 e0       	ldi	r18, 0x01	; 1
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	02 c0       	rjmp	.+4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     46a:	22 0f       	add	r18, r18
     46c:	33 1f       	adc	r19, r19
     46e:	4a 95       	dec	r20
     470:	e2 f7       	brpl	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     472:	20 95       	com	r18
     474:	26 23       	and	r18, r22
     476:	fc 01       	movw	r30, r24
     478:	20 83       	st	Z, r18
		}
	}
	
	if(PinNum > 24 && PinNum < 32)
     47a:	89 81       	ldd	r24, Y+1	; 0x01
     47c:	89 31       	cpi	r24, 0x19	; 25
     47e:	c0 f1       	brcs	.+112    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	80 32       	cpi	r24, 0x20	; 32
     484:	a8 f5       	brcc	.+106    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
	{
			if(PinValue == 1)
     486:	8a 81       	ldd	r24, Y+2	; 0x02
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	b9 f4       	brne	.+46     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
			{
				Set_Bit( PORTD , (PinNum-24));
     48c:	82 e3       	ldi	r24, 0x32	; 50
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	22 e3       	ldi	r18, 0x32	; 50
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	f9 01       	movw	r30, r18
     496:	20 81       	ld	r18, Z
     498:	62 2f       	mov	r22, r18
     49a:	29 81       	ldd	r18, Y+1	; 0x01
     49c:	22 2f       	mov	r18, r18
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	a9 01       	movw	r20, r18
     4a2:	48 51       	subi	r20, 0x18	; 24
     4a4:	51 09       	sbc	r21, r1
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4ac:	22 0f       	add	r18, r18
     4ae:	33 1f       	adc	r19, r19
     4b0:	4a 95       	dec	r20
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4b4:	26 2b       	or	r18, r22
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
     4ba:	8a 81       	ldd	r24, Y+2	; 0x02
     4bc:	88 23       	and	r24, r24
     4be:	c1 f4       	brne	.+48     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
			{
				Clear_Bit( PORTD , (PinNum-24));
     4c0:	82 e3       	ldi	r24, 0x32	; 50
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	22 e3       	ldi	r18, 0x32	; 50
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	f9 01       	movw	r30, r18
     4ca:	20 81       	ld	r18, Z
     4cc:	62 2f       	mov	r22, r18
     4ce:	29 81       	ldd	r18, Y+1	; 0x01
     4d0:	22 2f       	mov	r18, r18
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	a9 01       	movw	r20, r18
     4d6:	48 51       	subi	r20, 0x18	; 24
     4d8:	51 09       	sbc	r21, r1
     4da:	21 e0       	ldi	r18, 0x01	; 1
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4e0:	22 0f       	add	r18, r18
     4e2:	33 1f       	adc	r19, r19
     4e4:	4a 95       	dec	r20
     4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4e8:	20 95       	com	r18
     4ea:	26 23       	and	r18, r22
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 83       	st	Z, r18
			}
	}
}
     4f0:	00 00       	nop
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <DIO_SetPinDirection>:
/*
pindirection = 1 output
pindirection = 0 input
*/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	00 d0       	rcall	.+0      	; 0x502 <DIO_SetPinDirection+0x6>
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	6a 83       	std	Y+2, r22	; 0x02
		if(PinNum >= 0 && PinNum < 8 )
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	88 30       	cpi	r24, 0x08	; 8
     50e:	78 f5       	brcc	.+94     	; 0x56e <DIO_SetPinDirection+0x72>
		{
			if(PinDirection== 1)
     510:	8a 81       	ldd	r24, Y+2	; 0x02
     512:	81 30       	cpi	r24, 0x01	; 1
     514:	a1 f4       	brne	.+40     	; 0x53e <DIO_SetPinDirection+0x42>
			{
				Set_Bit( DDRA , PinNum);
     516:	8a e3       	ldi	r24, 0x3A	; 58
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	2a e3       	ldi	r18, 0x3A	; 58
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	f9 01       	movw	r30, r18
     520:	20 81       	ld	r18, Z
     522:	62 2f       	mov	r22, r18
     524:	29 81       	ldd	r18, Y+1	; 0x01
     526:	42 2f       	mov	r20, r18
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	21 e0       	ldi	r18, 0x01	; 1
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_SetPinDirection+0x38>
     530:	22 0f       	add	r18, r18
     532:	33 1f       	adc	r19, r19
     534:	4a 95       	dec	r20
     536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_SetPinDirection+0x34>
     538:	26 2b       	or	r18, r22
     53a:	fc 01       	movw	r30, r24
     53c:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     53e:	8a 81       	ldd	r24, Y+2	; 0x02
     540:	88 23       	and	r24, r24
     542:	a9 f4       	brne	.+42     	; 0x56e <DIO_SetPinDirection+0x72>
			{
				Clear_Bit( DDRA , PinNum);
     544:	8a e3       	ldi	r24, 0x3A	; 58
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	2a e3       	ldi	r18, 0x3A	; 58
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	f9 01       	movw	r30, r18
     54e:	20 81       	ld	r18, Z
     550:	62 2f       	mov	r22, r18
     552:	29 81       	ldd	r18, Y+1	; 0x01
     554:	42 2f       	mov	r20, r18
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	21 e0       	ldi	r18, 0x01	; 1
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_SetPinDirection+0x66>
     55e:	22 0f       	add	r18, r18
     560:	33 1f       	adc	r19, r19
     562:	4a 95       	dec	r20
     564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_SetPinDirection+0x62>
     566:	20 95       	com	r18
     568:	26 23       	and	r18, r22
     56a:	fc 01       	movw	r30, r24
     56c:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 7 && PinNum < 16)
     56e:	89 81       	ldd	r24, Y+1	; 0x01
     570:	88 30       	cpi	r24, 0x08	; 8
     572:	c0 f1       	brcs	.+112    	; 0x5e4 <DIO_SetPinDirection+0xe8>
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	80 31       	cpi	r24, 0x10	; 16
     578:	a8 f5       	brcc	.+106    	; 0x5e4 <DIO_SetPinDirection+0xe8>
		{
			if(PinDirection== 1)
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	b9 f4       	brne	.+46     	; 0x5ae <DIO_SetPinDirection+0xb2>
			{
				Set_Bit( DDRB , (PinNum-8));
     580:	87 e3       	ldi	r24, 0x37	; 55
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	27 e3       	ldi	r18, 0x37	; 55
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	f9 01       	movw	r30, r18
     58a:	20 81       	ld	r18, Z
     58c:	62 2f       	mov	r22, r18
     58e:	29 81       	ldd	r18, Y+1	; 0x01
     590:	22 2f       	mov	r18, r18
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	a9 01       	movw	r20, r18
     596:	48 50       	subi	r20, 0x08	; 8
     598:	51 09       	sbc	r21, r1
     59a:	21 e0       	ldi	r18, 0x01	; 1
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_SetPinDirection+0xa8>
     5a0:	22 0f       	add	r18, r18
     5a2:	33 1f       	adc	r19, r19
     5a4:	4a 95       	dec	r20
     5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_SetPinDirection+0xa4>
     5a8:	26 2b       	or	r18, r22
     5aa:	fc 01       	movw	r30, r24
     5ac:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     5ae:	8a 81       	ldd	r24, Y+2	; 0x02
     5b0:	88 23       	and	r24, r24
     5b2:	c1 f4       	brne	.+48     	; 0x5e4 <DIO_SetPinDirection+0xe8>
			{
				Clear_Bit( DDRB , (PinNum-8));
     5b4:	87 e3       	ldi	r24, 0x37	; 55
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	27 e3       	ldi	r18, 0x37	; 55
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	f9 01       	movw	r30, r18
     5be:	20 81       	ld	r18, Z
     5c0:	62 2f       	mov	r22, r18
     5c2:	29 81       	ldd	r18, Y+1	; 0x01
     5c4:	22 2f       	mov	r18, r18
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	a9 01       	movw	r20, r18
     5ca:	48 50       	subi	r20, 0x08	; 8
     5cc:	51 09       	sbc	r21, r1
     5ce:	21 e0       	ldi	r18, 0x01	; 1
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_SetPinDirection+0xdc>
     5d4:	22 0f       	add	r18, r18
     5d6:	33 1f       	adc	r19, r19
     5d8:	4a 95       	dec	r20
     5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_SetPinDirection+0xd8>
     5dc:	20 95       	com	r18
     5de:	26 23       	and	r18, r22
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 15 && PinNum < 24)
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	80 31       	cpi	r24, 0x10	; 16
     5e8:	c0 f1       	brcs	.+112    	; 0x65a <DIO_SetPinDirection+0x15e>
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	88 31       	cpi	r24, 0x18	; 24
     5ee:	a8 f5       	brcc	.+106    	; 0x65a <DIO_SetPinDirection+0x15e>
		{
			if(PinDirection== 1)
     5f0:	8a 81       	ldd	r24, Y+2	; 0x02
     5f2:	81 30       	cpi	r24, 0x01	; 1
     5f4:	b9 f4       	brne	.+46     	; 0x624 <DIO_SetPinDirection+0x128>
			{
				Set_Bit( DDRC , (PinNum-16));
     5f6:	84 e3       	ldi	r24, 0x34	; 52
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	24 e3       	ldi	r18, 0x34	; 52
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	f9 01       	movw	r30, r18
     600:	20 81       	ld	r18, Z
     602:	62 2f       	mov	r22, r18
     604:	29 81       	ldd	r18, Y+1	; 0x01
     606:	22 2f       	mov	r18, r18
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	a9 01       	movw	r20, r18
     60c:	40 51       	subi	r20, 0x10	; 16
     60e:	51 09       	sbc	r21, r1
     610:	21 e0       	ldi	r18, 0x01	; 1
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_SetPinDirection+0x11e>
     616:	22 0f       	add	r18, r18
     618:	33 1f       	adc	r19, r19
     61a:	4a 95       	dec	r20
     61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_SetPinDirection+0x11a>
     61e:	26 2b       	or	r18, r22
     620:	fc 01       	movw	r30, r24
     622:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     624:	8a 81       	ldd	r24, Y+2	; 0x02
     626:	88 23       	and	r24, r24
     628:	c1 f4       	brne	.+48     	; 0x65a <DIO_SetPinDirection+0x15e>
			{
				Clear_Bit( DDRC , (PinNum-16));
     62a:	84 e3       	ldi	r24, 0x34	; 52
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	24 e3       	ldi	r18, 0x34	; 52
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	f9 01       	movw	r30, r18
     634:	20 81       	ld	r18, Z
     636:	62 2f       	mov	r22, r18
     638:	29 81       	ldd	r18, Y+1	; 0x01
     63a:	22 2f       	mov	r18, r18
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	a9 01       	movw	r20, r18
     640:	40 51       	subi	r20, 0x10	; 16
     642:	51 09       	sbc	r21, r1
     644:	21 e0       	ldi	r18, 0x01	; 1
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_SetPinDirection+0x152>
     64a:	22 0f       	add	r18, r18
     64c:	33 1f       	adc	r19, r19
     64e:	4a 95       	dec	r20
     650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_SetPinDirection+0x14e>
     652:	20 95       	com	r18
     654:	26 23       	and	r18, r22
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
			}
		}
		
		if(PinNum > 24 && PinNum < 32)
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	89 31       	cpi	r24, 0x19	; 25
     65e:	c0 f1       	brcs	.+112    	; 0x6d0 <DIO_SetPinDirection+0x1d4>
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	80 32       	cpi	r24, 0x20	; 32
     664:	a8 f5       	brcc	.+106    	; 0x6d0 <DIO_SetPinDirection+0x1d4>
		{
			if(PinDirection== 1)
     666:	8a 81       	ldd	r24, Y+2	; 0x02
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	b9 f4       	brne	.+46     	; 0x69a <DIO_SetPinDirection+0x19e>
			{
				Set_Bit( DDRD , (PinNum-24));
     66c:	81 e3       	ldi	r24, 0x31	; 49
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	21 e3       	ldi	r18, 0x31	; 49
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	f9 01       	movw	r30, r18
     676:	20 81       	ld	r18, Z
     678:	62 2f       	mov	r22, r18
     67a:	29 81       	ldd	r18, Y+1	; 0x01
     67c:	22 2f       	mov	r18, r18
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	a9 01       	movw	r20, r18
     682:	48 51       	subi	r20, 0x18	; 24
     684:	51 09       	sbc	r21, r1
     686:	21 e0       	ldi	r18, 0x01	; 1
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_SetPinDirection+0x194>
     68c:	22 0f       	add	r18, r18
     68e:	33 1f       	adc	r19, r19
     690:	4a 95       	dec	r20
     692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_SetPinDirection+0x190>
     694:	26 2b       	or	r18, r22
     696:	fc 01       	movw	r30, r24
     698:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     69a:	8a 81       	ldd	r24, Y+2	; 0x02
     69c:	88 23       	and	r24, r24
     69e:	c1 f4       	brne	.+48     	; 0x6d0 <DIO_SetPinDirection+0x1d4>
			{
				Clear_Bit( DDRD , (PinNum-24));
     6a0:	81 e3       	ldi	r24, 0x31	; 49
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	21 e3       	ldi	r18, 0x31	; 49
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	f9 01       	movw	r30, r18
     6aa:	20 81       	ld	r18, Z
     6ac:	62 2f       	mov	r22, r18
     6ae:	29 81       	ldd	r18, Y+1	; 0x01
     6b0:	22 2f       	mov	r18, r18
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	a9 01       	movw	r20, r18
     6b6:	48 51       	subi	r20, 0x18	; 24
     6b8:	51 09       	sbc	r21, r1
     6ba:	21 e0       	ldi	r18, 0x01	; 1
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_SetPinDirection+0x1c8>
     6c0:	22 0f       	add	r18, r18
     6c2:	33 1f       	adc	r19, r19
     6c4:	4a 95       	dec	r20
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_SetPinDirection+0x1c4>
     6c8:	20 95       	com	r18
     6ca:	26 23       	and	r18, r22
     6cc:	fc 01       	movw	r30, r24
     6ce:	20 83       	st	Z, r18
			}
		}
}
     6d0:	00 00       	nop
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	00 d0       	rcall	.+0      	; 0x6e2 <DIO_ReadPin+0x6>
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	8a 83       	std	Y+2, r24	; 0x02
		uint8 return_value=0;
     6e8:	19 82       	std	Y+1, r1	; 0x01
		if(PinNum >= 0 && PinNum < 8 )
     6ea:	8a 81       	ldd	r24, Y+2	; 0x02
     6ec:	88 30       	cpi	r24, 0x08	; 8
     6ee:	d8 f4       	brcc	.+54     	; 0x726 <DIO_ReadPin+0x4a>
		{
			return_value = Get_Bit(PINA , PinNum);
     6f0:	89 e3       	ldi	r24, 0x39	; 57
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	fc 01       	movw	r30, r24
     6f6:	80 81       	ld	r24, Z
     6f8:	28 2f       	mov	r18, r24
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	48 2f       	mov	r20, r24
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	02 c0       	rjmp	.+4      	; 0x70c <DIO_ReadPin+0x30>
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	4a 95       	dec	r20
     70e:	e2 f7       	brpl	.-8      	; 0x708 <DIO_ReadPin+0x2c>
     710:	82 23       	and	r24, r18
     712:	93 23       	and	r25, r19
     714:	2a 81       	ldd	r18, Y+2	; 0x02
     716:	22 2f       	mov	r18, r18
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_ReadPin+0x44>
     71c:	95 95       	asr	r25
     71e:	87 95       	ror	r24
     720:	2a 95       	dec	r18
     722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_ReadPin+0x40>
     724:	89 83       	std	Y+1, r24	; 0x01
		}
		if(PinNum > 7 && PinNum < 16)
     726:	8a 81       	ldd	r24, Y+2	; 0x02
     728:	88 30       	cpi	r24, 0x08	; 8
     72a:	18 f1       	brcs	.+70     	; 0x772 <DIO_ReadPin+0x96>
     72c:	8a 81       	ldd	r24, Y+2	; 0x02
     72e:	80 31       	cpi	r24, 0x10	; 16
     730:	00 f5       	brcc	.+64     	; 0x772 <DIO_ReadPin+0x96>
		{
			return_value = Get_Bit(PINB , (PinNum-8));
     732:	86 e3       	ldi	r24, 0x36	; 54
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	fc 01       	movw	r30, r24
     738:	80 81       	ld	r24, Z
     73a:	28 2f       	mov	r18, r24
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	8a 81       	ldd	r24, Y+2	; 0x02
     740:	88 2f       	mov	r24, r24
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	ac 01       	movw	r20, r24
     746:	48 50       	subi	r20, 0x08	; 8
     748:	51 09       	sbc	r21, r1
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	02 c0       	rjmp	.+4      	; 0x754 <DIO_ReadPin+0x78>
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	4a 95       	dec	r20
     756:	e2 f7       	brpl	.-8      	; 0x750 <DIO_ReadPin+0x74>
     758:	82 23       	and	r24, r18
     75a:	93 23       	and	r25, r19
     75c:	2a 81       	ldd	r18, Y+2	; 0x02
     75e:	22 2f       	mov	r18, r18
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	28 50       	subi	r18, 0x08	; 8
     764:	31 09       	sbc	r19, r1
     766:	02 c0       	rjmp	.+4      	; 0x76c <DIO_ReadPin+0x90>
     768:	95 95       	asr	r25
     76a:	87 95       	ror	r24
     76c:	2a 95       	dec	r18
     76e:	e2 f7       	brpl	.-8      	; 0x768 <DIO_ReadPin+0x8c>
     770:	89 83       	std	Y+1, r24	; 0x01
		}
		if(PinNum > 15 && PinNum < 24)
     772:	8a 81       	ldd	r24, Y+2	; 0x02
     774:	80 31       	cpi	r24, 0x10	; 16
     776:	18 f1       	brcs	.+70     	; 0x7be <DIO_ReadPin+0xe2>
     778:	8a 81       	ldd	r24, Y+2	; 0x02
     77a:	88 31       	cpi	r24, 0x18	; 24
     77c:	00 f5       	brcc	.+64     	; 0x7be <DIO_ReadPin+0xe2>
		{
			return_value = Get_Bit(PINC , (PinNum-16));
     77e:	83 e3       	ldi	r24, 0x33	; 51
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	fc 01       	movw	r30, r24
     784:	80 81       	ld	r24, Z
     786:	28 2f       	mov	r18, r24
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	8a 81       	ldd	r24, Y+2	; 0x02
     78c:	88 2f       	mov	r24, r24
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	ac 01       	movw	r20, r24
     792:	40 51       	subi	r20, 0x10	; 16
     794:	51 09       	sbc	r21, r1
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_ReadPin+0xc4>
     79c:	88 0f       	add	r24, r24
     79e:	99 1f       	adc	r25, r25
     7a0:	4a 95       	dec	r20
     7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_ReadPin+0xc0>
     7a4:	82 23       	and	r24, r18
     7a6:	93 23       	and	r25, r19
     7a8:	2a 81       	ldd	r18, Y+2	; 0x02
     7aa:	22 2f       	mov	r18, r18
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	20 51       	subi	r18, 0x10	; 16
     7b0:	31 09       	sbc	r19, r1
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_ReadPin+0xdc>
     7b4:	95 95       	asr	r25
     7b6:	87 95       	ror	r24
     7b8:	2a 95       	dec	r18
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_ReadPin+0xd8>
     7bc:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if(PinNum > 24 && PinNum < 32)
     7be:	8a 81       	ldd	r24, Y+2	; 0x02
     7c0:	89 31       	cpi	r24, 0x19	; 25
     7c2:	18 f1       	brcs	.+70     	; 0x80a <DIO_ReadPin+0x12e>
     7c4:	8a 81       	ldd	r24, Y+2	; 0x02
     7c6:	80 32       	cpi	r24, 0x20	; 32
     7c8:	00 f5       	brcc	.+64     	; 0x80a <DIO_ReadPin+0x12e>
		{
			return_value = Get_Bit(PIND , (PinNum-24));
     7ca:	80 e3       	ldi	r24, 0x30	; 48
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	fc 01       	movw	r30, r24
     7d0:	80 81       	ld	r24, Z
     7d2:	28 2f       	mov	r18, r24
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	8a 81       	ldd	r24, Y+2	; 0x02
     7d8:	88 2f       	mov	r24, r24
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	ac 01       	movw	r20, r24
     7de:	48 51       	subi	r20, 0x18	; 24
     7e0:	51 09       	sbc	r21, r1
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <DIO_ReadPin+0x110>
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	4a 95       	dec	r20
     7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <DIO_ReadPin+0x10c>
     7f0:	82 23       	and	r24, r18
     7f2:	93 23       	and	r25, r19
     7f4:	2a 81       	ldd	r18, Y+2	; 0x02
     7f6:	22 2f       	mov	r18, r18
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	28 51       	subi	r18, 0x18	; 24
     7fc:	31 09       	sbc	r19, r1
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <DIO_ReadPin+0x128>
     800:	95 95       	asr	r25
     802:	87 95       	ror	r24
     804:	2a 95       	dec	r18
     806:	e2 f7       	brpl	.-8      	; 0x800 <DIO_ReadPin+0x124>
     808:	89 83       	std	Y+1, r24	; 0x01
		}
		return return_value;
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	08 95       	ret

00000816 <Keypad_init>:

#include "Keypad.h"
#include "Keypad_cfg.h"

void Keypad_init()
{
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
	//Coloumns INPUT
	DIO_SetPinDirection(Keypad_Coloumn1_PIN,INPUT);
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	85 e1       	ldi	r24, 0x15	; 21
     822:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_Coloumn2_PIN,INPUT);
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	86 e1       	ldi	r24, 0x16	; 22
     82a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_Coloumn3_PIN,INPUT);
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	87 e1       	ldi	r24, 0x17	; 23
     832:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_SetPinDirection>
	
	//PUll UP Column
	DIO_WritePin(Keypad_Coloumn1_PIN,HIGH);
     836:	61 e0       	ldi	r22, 0x01	; 1
     838:	85 e1       	ldi	r24, 0x15	; 21
     83a:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	DIO_WritePin(Keypad_Coloumn2_PIN,HIGH);
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	86 e1       	ldi	r24, 0x16	; 22
     842:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	DIO_WritePin(Keypad_Coloumn3_PIN,HIGH);
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	87 e1       	ldi	r24, 0x17	; 23
     84a:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	
	//ROWS OUTPUT
	DIO_SetPinDirection(Keypad_ROW1_PIN,OUTPUT);
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	82 e1       	ldi	r24, 0x12	; 18
     852:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_ROW2_PIN,OUTPUT);
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	83 e1       	ldi	r24, 0x13	; 19
     85a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_ROW3_PIN,OUTPUT);
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	84 e1       	ldi	r24, 0x14	; 20
     862:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_SetPinDirection>

}
     866:	00 00       	nop
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <Keypad_getPressedKey>:

uint8 Keypad_getPressedKey()
{
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	1f 92       	push	r1
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
	uint8 Pushed_Button = 0 ;
     878:	19 82       	std	Y+1, r1	; 0x01
	DIO_WritePin(Keypad_ROW1_PIN,LOW);
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	82 e1       	ldi	r24, 0x12	; 18
     87e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	DIO_WritePin(Keypad_ROW2_PIN,HIGH);
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	83 e1       	ldi	r24, 0x13	; 19
     886:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	DIO_WritePin(Keypad_ROW3_PIN,HIGH);
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	84 e1       	ldi	r24, 0x14	; 20
     88e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     892:	85 e1       	ldi	r24, 0x15	; 21
     894:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DIO_ReadPin>
     898:	88 23       	and	r24, r24
     89a:	19 f4       	brne	.+6      	; 0x8a2 <Keypad_getPressedKey+0x34>
	{
		Pushed_Button = 1;
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	89 83       	std	Y+1, r24	; 0x01
     8a0:	0f c0       	rjmp	.+30     	; 0x8c0 <Keypad_getPressedKey+0x52>
	}
	else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     8a2:	86 e1       	ldi	r24, 0x16	; 22
     8a4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DIO_ReadPin>
     8a8:	88 23       	and	r24, r24
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <Keypad_getPressedKey+0x44>
	{
		Pushed_Button = 2;
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	07 c0       	rjmp	.+14     	; 0x8c0 <Keypad_getPressedKey+0x52>
	}
	else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     8b2:	87 e1       	ldi	r24, 0x17	; 23
     8b4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DIO_ReadPin>
     8b8:	88 23       	and	r24, r24
     8ba:	11 f4       	brne	.+4      	; 0x8c0 <Keypad_getPressedKey+0x52>
	{
		Pushed_Button = 3;
     8bc:	83 e0       	ldi	r24, 0x03	; 3
     8be:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_WritePin(Keypad_ROW1_PIN,HIGH);
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	82 e1       	ldi	r24, 0x12	; 18
     8c4:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	DIO_WritePin(Keypad_ROW2_PIN,LOW);
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	83 e1       	ldi	r24, 0x13	; 19
     8cc:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	DIO_WritePin(Keypad_ROW3_PIN,HIGH);
     8d0:	61 e0       	ldi	r22, 0x01	; 1
     8d2:	84 e1       	ldi	r24, 0x14	; 20
     8d4:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
	if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     8d8:	85 e1       	ldi	r24, 0x15	; 21
     8da:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DIO_ReadPin>
     8de:	88 23       	and	r24, r24
     8e0:	19 f4       	brne	.+6      	; 0x8e8 <Keypad_getPressedKey+0x7a>
	{
			Pushed_Button = 4;
     8e2:	84 e0       	ldi	r24, 0x04	; 4
     8e4:	89 83       	std	Y+1, r24	; 0x01
     8e6:	0f c0       	rjmp	.+30     	; 0x906 <Keypad_getPressedKey+0x98>
	}
	else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     8e8:	86 e1       	ldi	r24, 0x16	; 22
     8ea:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DIO_ReadPin>
     8ee:	88 23       	and	r24, r24
     8f0:	19 f4       	brne	.+6      	; 0x8f8 <Keypad_getPressedKey+0x8a>
	{
			Pushed_Button = 5;
     8f2:	85 e0       	ldi	r24, 0x05	; 5
     8f4:	89 83       	std	Y+1, r24	; 0x01
     8f6:	07 c0       	rjmp	.+14     	; 0x906 <Keypad_getPressedKey+0x98>
	}
	else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     8f8:	87 e1       	ldi	r24, 0x17	; 23
     8fa:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DIO_ReadPin>
     8fe:	88 23       	and	r24, r24
     900:	11 f4       	brne	.+4      	; 0x906 <Keypad_getPressedKey+0x98>
	{
			Pushed_Button = 6;
     902:	86 e0       	ldi	r24, 0x06	; 6
     904:	89 83       	std	Y+1, r24	; 0x01
	}
		DIO_WritePin(Keypad_ROW1_PIN,HIGH);
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	82 e1       	ldi	r24, 0x12	; 18
     90a:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(Keypad_ROW2_PIN,HIGH);
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	83 e1       	ldi	r24, 0x13	; 19
     912:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		DIO_WritePin(Keypad_ROW3_PIN,LOW);
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	84 e1       	ldi	r24, 0x14	; 20
     91a:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_WritePin>
		if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     91e:	85 e1       	ldi	r24, 0x15	; 21
     920:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DIO_ReadPin>
     924:	88 23       	and	r24, r24
     926:	19 f4       	brne	.+6      	; 0x92e <Keypad_getPressedKey+0xc0>
		{
			Pushed_Button = 7;
     928:	87 e0       	ldi	r24, 0x07	; 7
     92a:	89 83       	std	Y+1, r24	; 0x01
     92c:	0f c0       	rjmp	.+30     	; 0x94c <Keypad_getPressedKey+0xde>
		}
		else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     92e:	86 e1       	ldi	r24, 0x16	; 22
     930:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DIO_ReadPin>
     934:	88 23       	and	r24, r24
     936:	19 f4       	brne	.+6      	; 0x93e <Keypad_getPressedKey+0xd0>
		{
			Pushed_Button = 8;
     938:	88 e0       	ldi	r24, 0x08	; 8
     93a:	89 83       	std	Y+1, r24	; 0x01
     93c:	07 c0       	rjmp	.+14     	; 0x94c <Keypad_getPressedKey+0xde>
		}
		else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     93e:	87 e1       	ldi	r24, 0x17	; 23
     940:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DIO_ReadPin>
     944:	88 23       	and	r24, r24
     946:	11 f4       	brne	.+4      	; 0x94c <Keypad_getPressedKey+0xde>
		{
			Pushed_Button = 9;
     948:	89 e0       	ldi	r24, 0x09	; 9
     94a:	89 83       	std	Y+1, r24	; 0x01
		}
		return Pushed_Button;
     94c:	89 81       	ldd	r24, Y+1	; 0x01
	
     94e:	0f 90       	pop	r0
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <main>:
#include "Keypad.h"
#include "avr/delay.h"


int main(void)
{
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	cb 50       	subi	r28, 0x0B	; 11
     964:	d1 40       	sbci	r29, 0x01	; 1
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	BCDSevegments_Init();
     970:	0e 94 36 00 	call	0x6c	; 0x6c <BCDSevegments_Init>
	Keypad_init();
     974:	0e 94 0b 04 	call	0x816	; 0x816 <Keypad_init>
    while (1) 
    {
		uint8 key = Keypad_getPressedKey();
     978:	0e 94 37 04 	call	0x86e	; 0x86e <Keypad_getPressedKey>
     97c:	89 83       	std	Y+1, r24	; 0x01
		if (key == 1)
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	09 f0       	breq	.+2      	; 0x986 <main+0x30>
     984:	8b c1       	rjmp	.+790    	; 0xc9c <main+0x346>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	a8 e4       	ldi	r26, 0x48	; 72
     98c:	b2 e4       	ldi	r27, 0x42	; 66
     98e:	8e 83       	std	Y+6, r24	; 0x06
     990:	9f 83       	std	Y+7, r25	; 0x07
     992:	a8 87       	std	Y+8, r26	; 0x08
     994:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     996:	8e 01       	movw	r16, r28
     998:	08 5a       	subi	r16, 0xA8	; 168
     99a:	1f 4f       	sbci	r17, 0xFF	; 255
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	4a e7       	ldi	r20, 0x7A	; 122
     9a2:	53 e4       	ldi	r21, 0x43	; 67
     9a4:	6e 81       	ldd	r22, Y+6	; 0x06
     9a6:	7f 81       	ldd	r23, Y+7	; 0x07
     9a8:	88 85       	ldd	r24, Y+8	; 0x08
     9aa:	99 85       	ldd	r25, Y+9	; 0x09
     9ac:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	f8 01       	movw	r30, r16
     9b6:	80 83       	st	Z, r24
     9b8:	91 83       	std	Z+1, r25	; 0x01
     9ba:	a2 83       	std	Z+2, r26	; 0x02
     9bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9be:	ce 01       	movw	r24, r28
     9c0:	88 5a       	subi	r24, 0xA8	; 168
     9c2:	9f 4f       	sbci	r25, 0xFF	; 255
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	40 e8       	ldi	r20, 0x80	; 128
     9ca:	5f e3       	ldi	r21, 0x3F	; 63
     9cc:	fc 01       	movw	r30, r24
     9ce:	60 81       	ld	r22, Z
     9d0:	71 81       	ldd	r23, Z+1	; 0x01
     9d2:	82 81       	ldd	r24, Z+2	; 0x02
     9d4:	93 81       	ldd	r25, Z+3	; 0x03
     9d6:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
     9da:	88 23       	and	r24, r24
     9dc:	4c f4       	brge	.+18     	; 0x9f0 <main+0x9a>
		__ticks = 1;
     9de:	ce 01       	movw	r24, r28
     9e0:	84 5a       	subi	r24, 0xA4	; 164
     9e2:	9f 4f       	sbci	r25, 0xFF	; 255
     9e4:	21 e0       	ldi	r18, 0x01	; 1
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	fc 01       	movw	r30, r24
     9ea:	31 83       	std	Z+1, r19	; 0x01
     9ec:	20 83       	st	Z, r18
     9ee:	69 c0       	rjmp	.+210    	; 0xac2 <main+0x16c>
	else if (__tmp > 65535)
     9f0:	ce 01       	movw	r24, r28
     9f2:	88 5a       	subi	r24, 0xA8	; 168
     9f4:	9f 4f       	sbci	r25, 0xFF	; 255
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	3f ef       	ldi	r19, 0xFF	; 255
     9fa:	4f e7       	ldi	r20, 0x7F	; 127
     9fc:	57 e4       	ldi	r21, 0x47	; 71
     9fe:	fc 01       	movw	r30, r24
     a00:	60 81       	ld	r22, Z
     a02:	71 81       	ldd	r23, Z+1	; 0x01
     a04:	82 81       	ldd	r24, Z+2	; 0x02
     a06:	93 81       	ldd	r25, Z+3	; 0x03
     a08:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
     a0c:	18 16       	cp	r1, r24
     a0e:	0c f0       	brlt	.+2      	; 0xa12 <main+0xbc>
     a10:	46 c0       	rjmp	.+140    	; 0xa9e <main+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	40 e2       	ldi	r20, 0x20	; 32
     a18:	51 e4       	ldi	r21, 0x41	; 65
     a1a:	6e 81       	ldd	r22, Y+6	; 0x06
     a1c:	7f 81       	ldd	r23, Y+7	; 0x07
     a1e:	88 85       	ldd	r24, Y+8	; 0x08
     a20:	99 85       	ldd	r25, Y+9	; 0x09
     a22:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     a26:	dc 01       	movw	r26, r24
     a28:	cb 01       	movw	r24, r22
     a2a:	8e 01       	movw	r16, r28
     a2c:	04 5a       	subi	r16, 0xA4	; 164
     a2e:	1f 4f       	sbci	r17, 0xFF	; 255
     a30:	bc 01       	movw	r22, r24
     a32:	cd 01       	movw	r24, r26
     a34:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
     a38:	dc 01       	movw	r26, r24
     a3a:	cb 01       	movw	r24, r22
     a3c:	f8 01       	movw	r30, r16
     a3e:	91 83       	std	Z+1, r25	; 0x01
     a40:	80 83       	st	Z, r24
     a42:	24 c0       	rjmp	.+72     	; 0xa8c <main+0x136>
     a44:	ce 01       	movw	r24, r28
     a46:	82 5a       	subi	r24, 0xA2	; 162
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
     a4a:	29 e1       	ldi	r18, 0x19	; 25
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	fc 01       	movw	r30, r24
     a50:	31 83       	std	Z+1, r19	; 0x01
     a52:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a54:	ce 01       	movw	r24, r28
     a56:	82 5a       	subi	r24, 0xA2	; 162
     a58:	9f 4f       	sbci	r25, 0xFF	; 255
     a5a:	fc 01       	movw	r30, r24
     a5c:	80 81       	ld	r24, Z
     a5e:	91 81       	ldd	r25, Z+1	; 0x01
     a60:	01 97       	sbiw	r24, 0x01	; 1
     a62:	f1 f7       	brne	.-4      	; 0xa60 <main+0x10a>
     a64:	9e 01       	movw	r18, r28
     a66:	22 5a       	subi	r18, 0xA2	; 162
     a68:	3f 4f       	sbci	r19, 0xFF	; 255
     a6a:	f9 01       	movw	r30, r18
     a6c:	91 83       	std	Z+1, r25	; 0x01
     a6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a70:	ce 01       	movw	r24, r28
     a72:	84 5a       	subi	r24, 0xA4	; 164
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
     a76:	9e 01       	movw	r18, r28
     a78:	24 5a       	subi	r18, 0xA4	; 164
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	f9 01       	movw	r30, r18
     a7e:	20 81       	ld	r18, Z
     a80:	31 81       	ldd	r19, Z+1	; 0x01
     a82:	21 50       	subi	r18, 0x01	; 1
     a84:	31 09       	sbc	r19, r1
     a86:	fc 01       	movw	r30, r24
     a88:	31 83       	std	Z+1, r19	; 0x01
     a8a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a8c:	ce 01       	movw	r24, r28
     a8e:	84 5a       	subi	r24, 0xA4	; 164
     a90:	9f 4f       	sbci	r25, 0xFF	; 255
     a92:	fc 01       	movw	r30, r24
     a94:	80 81       	ld	r24, Z
     a96:	91 81       	ldd	r25, Z+1	; 0x01
     a98:	89 2b       	or	r24, r25
     a9a:	a1 f6       	brne	.-88     	; 0xa44 <main+0xee>
     a9c:	2c c0       	rjmp	.+88     	; 0xaf6 <main+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a9e:	8e 01       	movw	r16, r28
     aa0:	04 5a       	subi	r16, 0xA4	; 164
     aa2:	1f 4f       	sbci	r17, 0xFF	; 255
     aa4:	ce 01       	movw	r24, r28
     aa6:	88 5a       	subi	r24, 0xA8	; 168
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	fc 01       	movw	r30, r24
     aac:	60 81       	ld	r22, Z
     aae:	71 81       	ldd	r23, Z+1	; 0x01
     ab0:	82 81       	ldd	r24, Z+2	; 0x02
     ab2:	93 81       	ldd	r25, Z+3	; 0x03
     ab4:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
     ab8:	dc 01       	movw	r26, r24
     aba:	cb 01       	movw	r24, r22
     abc:	f8 01       	movw	r30, r16
     abe:	91 83       	std	Z+1, r25	; 0x01
     ac0:	80 83       	st	Z, r24
     ac2:	ce 01       	movw	r24, r28
     ac4:	80 5a       	subi	r24, 0xA0	; 160
     ac6:	9f 4f       	sbci	r25, 0xFF	; 255
     ac8:	9e 01       	movw	r18, r28
     aca:	24 5a       	subi	r18, 0xA4	; 164
     acc:	3f 4f       	sbci	r19, 0xFF	; 255
     ace:	f9 01       	movw	r30, r18
     ad0:	20 81       	ld	r18, Z
     ad2:	31 81       	ldd	r19, Z+1	; 0x01
     ad4:	fc 01       	movw	r30, r24
     ad6:	31 83       	std	Z+1, r19	; 0x01
     ad8:	20 83       	st	Z, r18
     ada:	ce 01       	movw	r24, r28
     adc:	80 5a       	subi	r24, 0xA0	; 160
     ade:	9f 4f       	sbci	r25, 0xFF	; 255
     ae0:	fc 01       	movw	r30, r24
     ae2:	80 81       	ld	r24, Z
     ae4:	91 81       	ldd	r25, Z+1	; 0x01
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <main+0x190>
     aea:	9e 01       	movw	r18, r28
     aec:	20 5a       	subi	r18, 0xA0	; 160
     aee:	3f 4f       	sbci	r19, 0xFF	; 255
     af0:	f9 01       	movw	r30, r18
     af2:	91 83       	std	Z+1, r25	; 0x01
     af4:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(TWO);
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_disable(ONE);
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
			BCDSevegments_disable(THREE);
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
			BCDSevegments_disable(FOUR);
     b08:	84 e0       	ldi	r24, 0x04	; 4
     b0a:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
			//display one
			BCDSevegments_displayNo(ONE);
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	0e 94 bc 00 	call	0x178	; 0x178 <BCDSevegments_displayNo>
     b14:	9e 01       	movw	r18, r28
     b16:	26 5b       	subi	r18, 0xB6	; 182
     b18:	3f 4f       	sbci	r19, 0xFF	; 255
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	a8 e4       	ldi	r26, 0x48	; 72
     b20:	b2 e4       	ldi	r27, 0x42	; 66
     b22:	f9 01       	movw	r30, r18
     b24:	80 83       	st	Z, r24
     b26:	91 83       	std	Z+1, r25	; 0x01
     b28:	a2 83       	std	Z+2, r26	; 0x02
     b2a:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b2c:	8e 01       	movw	r16, r28
     b2e:	02 5b       	subi	r16, 0xB2	; 178
     b30:	1f 4f       	sbci	r17, 0xFF	; 255
     b32:	ce 01       	movw	r24, r28
     b34:	86 5b       	subi	r24, 0xB6	; 182
     b36:	9f 4f       	sbci	r25, 0xFF	; 255
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	4a e7       	ldi	r20, 0x7A	; 122
     b3e:	53 e4       	ldi	r21, 0x43	; 67
     b40:	fc 01       	movw	r30, r24
     b42:	60 81       	ld	r22, Z
     b44:	71 81       	ldd	r23, Z+1	; 0x01
     b46:	82 81       	ldd	r24, Z+2	; 0x02
     b48:	93 81       	ldd	r25, Z+3	; 0x03
     b4a:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     b4e:	dc 01       	movw	r26, r24
     b50:	cb 01       	movw	r24, r22
     b52:	f8 01       	movw	r30, r16
     b54:	80 83       	st	Z, r24
     b56:	91 83       	std	Z+1, r25	; 0x01
     b58:	a2 83       	std	Z+2, r26	; 0x02
     b5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b5c:	ce 01       	movw	r24, r28
     b5e:	82 5b       	subi	r24, 0xB2	; 178
     b60:	9f 4f       	sbci	r25, 0xFF	; 255
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	40 e8       	ldi	r20, 0x80	; 128
     b68:	5f e3       	ldi	r21, 0x3F	; 63
     b6a:	fc 01       	movw	r30, r24
     b6c:	60 81       	ld	r22, Z
     b6e:	71 81       	ldd	r23, Z+1	; 0x01
     b70:	82 81       	ldd	r24, Z+2	; 0x02
     b72:	93 81       	ldd	r25, Z+3	; 0x03
     b74:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
     b78:	88 23       	and	r24, r24
     b7a:	4c f4       	brge	.+18     	; 0xb8e <main+0x238>
		__ticks = 1;
     b7c:	ce 01       	movw	r24, r28
     b7e:	8e 5a       	subi	r24, 0xAE	; 174
     b80:	9f 4f       	sbci	r25, 0xFF	; 255
     b82:	21 e0       	ldi	r18, 0x01	; 1
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	fc 01       	movw	r30, r24
     b88:	31 83       	std	Z+1, r19	; 0x01
     b8a:	20 83       	st	Z, r18
     b8c:	6d c0       	rjmp	.+218    	; 0xc68 <main+0x312>
	else if (__tmp > 65535)
     b8e:	ce 01       	movw	r24, r28
     b90:	82 5b       	subi	r24, 0xB2	; 178
     b92:	9f 4f       	sbci	r25, 0xFF	; 255
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	3f ef       	ldi	r19, 0xFF	; 255
     b98:	4f e7       	ldi	r20, 0x7F	; 127
     b9a:	57 e4       	ldi	r21, 0x47	; 71
     b9c:	fc 01       	movw	r30, r24
     b9e:	60 81       	ld	r22, Z
     ba0:	71 81       	ldd	r23, Z+1	; 0x01
     ba2:	82 81       	ldd	r24, Z+2	; 0x02
     ba4:	93 81       	ldd	r25, Z+3	; 0x03
     ba6:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
     baa:	18 16       	cp	r1, r24
     bac:	0c f0       	brlt	.+2      	; 0xbb0 <main+0x25a>
     bae:	4a c0       	rjmp	.+148    	; 0xc44 <main+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bb0:	ce 01       	movw	r24, r28
     bb2:	86 5b       	subi	r24, 0xB6	; 182
     bb4:	9f 4f       	sbci	r25, 0xFF	; 255
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	40 e2       	ldi	r20, 0x20	; 32
     bbc:	51 e4       	ldi	r21, 0x41	; 65
     bbe:	fc 01       	movw	r30, r24
     bc0:	60 81       	ld	r22, Z
     bc2:	71 81       	ldd	r23, Z+1	; 0x01
     bc4:	82 81       	ldd	r24, Z+2	; 0x02
     bc6:	93 81       	ldd	r25, Z+3	; 0x03
     bc8:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     bcc:	dc 01       	movw	r26, r24
     bce:	cb 01       	movw	r24, r22
     bd0:	8e 01       	movw	r16, r28
     bd2:	0e 5a       	subi	r16, 0xAE	; 174
     bd4:	1f 4f       	sbci	r17, 0xFF	; 255
     bd6:	bc 01       	movw	r22, r24
     bd8:	cd 01       	movw	r24, r26
     bda:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	f8 01       	movw	r30, r16
     be4:	91 83       	std	Z+1, r25	; 0x01
     be6:	80 83       	st	Z, r24
     be8:	24 c0       	rjmp	.+72     	; 0xc32 <main+0x2dc>
     bea:	ce 01       	movw	r24, r28
     bec:	8c 5a       	subi	r24, 0xAC	; 172
     bee:	9f 4f       	sbci	r25, 0xFF	; 255
     bf0:	29 e1       	ldi	r18, 0x19	; 25
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	fc 01       	movw	r30, r24
     bf6:	31 83       	std	Z+1, r19	; 0x01
     bf8:	20 83       	st	Z, r18
     bfa:	ce 01       	movw	r24, r28
     bfc:	8c 5a       	subi	r24, 0xAC	; 172
     bfe:	9f 4f       	sbci	r25, 0xFF	; 255
     c00:	fc 01       	movw	r30, r24
     c02:	80 81       	ld	r24, Z
     c04:	91 81       	ldd	r25, Z+1	; 0x01
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <main+0x2b0>
     c0a:	9e 01       	movw	r18, r28
     c0c:	2c 5a       	subi	r18, 0xAC	; 172
     c0e:	3f 4f       	sbci	r19, 0xFF	; 255
     c10:	f9 01       	movw	r30, r18
     c12:	91 83       	std	Z+1, r25	; 0x01
     c14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c16:	ce 01       	movw	r24, r28
     c18:	8e 5a       	subi	r24, 0xAE	; 174
     c1a:	9f 4f       	sbci	r25, 0xFF	; 255
     c1c:	9e 01       	movw	r18, r28
     c1e:	2e 5a       	subi	r18, 0xAE	; 174
     c20:	3f 4f       	sbci	r19, 0xFF	; 255
     c22:	f9 01       	movw	r30, r18
     c24:	20 81       	ld	r18, Z
     c26:	31 81       	ldd	r19, Z+1	; 0x01
     c28:	21 50       	subi	r18, 0x01	; 1
     c2a:	31 09       	sbc	r19, r1
     c2c:	fc 01       	movw	r30, r24
     c2e:	31 83       	std	Z+1, r19	; 0x01
     c30:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c32:	ce 01       	movw	r24, r28
     c34:	8e 5a       	subi	r24, 0xAE	; 174
     c36:	9f 4f       	sbci	r25, 0xFF	; 255
     c38:	fc 01       	movw	r30, r24
     c3a:	80 81       	ld	r24, Z
     c3c:	91 81       	ldd	r25, Z+1	; 0x01
     c3e:	89 2b       	or	r24, r25
     c40:	a1 f6       	brne	.-88     	; 0xbea <main+0x294>
     c42:	2c c0       	rjmp	.+88     	; 0xc9c <main+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c44:	8e 01       	movw	r16, r28
     c46:	0e 5a       	subi	r16, 0xAE	; 174
     c48:	1f 4f       	sbci	r17, 0xFF	; 255
     c4a:	ce 01       	movw	r24, r28
     c4c:	82 5b       	subi	r24, 0xB2	; 178
     c4e:	9f 4f       	sbci	r25, 0xFF	; 255
     c50:	fc 01       	movw	r30, r24
     c52:	60 81       	ld	r22, Z
     c54:	71 81       	ldd	r23, Z+1	; 0x01
     c56:	82 81       	ldd	r24, Z+2	; 0x02
     c58:	93 81       	ldd	r25, Z+3	; 0x03
     c5a:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	f8 01       	movw	r30, r16
     c64:	91 83       	std	Z+1, r25	; 0x01
     c66:	80 83       	st	Z, r24
     c68:	ce 01       	movw	r24, r28
     c6a:	8a 5a       	subi	r24, 0xAA	; 170
     c6c:	9f 4f       	sbci	r25, 0xFF	; 255
     c6e:	9e 01       	movw	r18, r28
     c70:	2e 5a       	subi	r18, 0xAE	; 174
     c72:	3f 4f       	sbci	r19, 0xFF	; 255
     c74:	f9 01       	movw	r30, r18
     c76:	20 81       	ld	r18, Z
     c78:	31 81       	ldd	r19, Z+1	; 0x01
     c7a:	fc 01       	movw	r30, r24
     c7c:	31 83       	std	Z+1, r19	; 0x01
     c7e:	20 83       	st	Z, r18
     c80:	ce 01       	movw	r24, r28
     c82:	8a 5a       	subi	r24, 0xAA	; 170
     c84:	9f 4f       	sbci	r25, 0xFF	; 255
     c86:	fc 01       	movw	r30, r24
     c88:	80 81       	ld	r24, Z
     c8a:	91 81       	ldd	r25, Z+1	; 0x01
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <main+0x336>
     c90:	9e 01       	movw	r18, r28
     c92:	2a 5a       	subi	r18, 0xAA	; 170
     c94:	3f 4f       	sbci	r19, 0xFF	; 255
     c96:	f9 01       	movw	r30, r18
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24
			_delay_ms(50);
		}
		if(key == 2)
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	82 30       	cpi	r24, 0x02	; 2
     ca0:	09 f0       	breq	.+2      	; 0xca4 <main+0x34e>
     ca2:	7f c1       	rjmp	.+766    	; 0xfa2 <main+0x64c>
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	a8 e4       	ldi	r26, 0x48	; 72
     caa:	b2 e4       	ldi	r27, 0x42	; 66
     cac:	8e 87       	std	Y+14, r24	; 0x0e
     cae:	9f 87       	std	Y+15, r25	; 0x0f
     cb0:	a8 8b       	std	Y+16, r26	; 0x10
     cb2:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cb4:	8e 01       	movw	r16, r28
     cb6:	04 59       	subi	r16, 0x94	; 148
     cb8:	1f 4f       	sbci	r17, 0xFF	; 255
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	4a e7       	ldi	r20, 0x7A	; 122
     cc0:	53 e4       	ldi	r21, 0x43	; 67
     cc2:	6e 85       	ldd	r22, Y+14	; 0x0e
     cc4:	7f 85       	ldd	r23, Y+15	; 0x0f
     cc6:	88 89       	ldd	r24, Y+16	; 0x10
     cc8:	99 89       	ldd	r25, Y+17	; 0x11
     cca:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	f8 01       	movw	r30, r16
     cd4:	80 83       	st	Z, r24
     cd6:	91 83       	std	Z+1, r25	; 0x01
     cd8:	a2 83       	std	Z+2, r26	; 0x02
     cda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cdc:	ce 01       	movw	r24, r28
     cde:	84 59       	subi	r24, 0x94	; 148
     ce0:	9f 4f       	sbci	r25, 0xFF	; 255
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	40 e8       	ldi	r20, 0x80	; 128
     ce8:	5f e3       	ldi	r21, 0x3F	; 63
     cea:	fc 01       	movw	r30, r24
     cec:	60 81       	ld	r22, Z
     cee:	71 81       	ldd	r23, Z+1	; 0x01
     cf0:	82 81       	ldd	r24, Z+2	; 0x02
     cf2:	93 81       	ldd	r25, Z+3	; 0x03
     cf4:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
     cf8:	88 23       	and	r24, r24
     cfa:	4c f4       	brge	.+18     	; 0xd0e <main+0x3b8>
		__ticks = 1;
     cfc:	ce 01       	movw	r24, r28
     cfe:	80 59       	subi	r24, 0x90	; 144
     d00:	9f 4f       	sbci	r25, 0xFF	; 255
     d02:	21 e0       	ldi	r18, 0x01	; 1
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	fc 01       	movw	r30, r24
     d08:	31 83       	std	Z+1, r19	; 0x01
     d0a:	20 83       	st	Z, r18
     d0c:	69 c0       	rjmp	.+210    	; 0xde0 <main+0x48a>
	else if (__tmp > 65535)
     d0e:	ce 01       	movw	r24, r28
     d10:	84 59       	subi	r24, 0x94	; 148
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	3f ef       	ldi	r19, 0xFF	; 255
     d18:	4f e7       	ldi	r20, 0x7F	; 127
     d1a:	57 e4       	ldi	r21, 0x47	; 71
     d1c:	fc 01       	movw	r30, r24
     d1e:	60 81       	ld	r22, Z
     d20:	71 81       	ldd	r23, Z+1	; 0x01
     d22:	82 81       	ldd	r24, Z+2	; 0x02
     d24:	93 81       	ldd	r25, Z+3	; 0x03
     d26:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
     d2a:	18 16       	cp	r1, r24
     d2c:	0c f0       	brlt	.+2      	; 0xd30 <main+0x3da>
     d2e:	46 c0       	rjmp	.+140    	; 0xdbc <main+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	6e 85       	ldd	r22, Y+14	; 0x0e
     d3a:	7f 85       	ldd	r23, Y+15	; 0x0f
     d3c:	88 89       	ldd	r24, Y+16	; 0x10
     d3e:	99 89       	ldd	r25, Y+17	; 0x11
     d40:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	8e 01       	movw	r16, r28
     d4a:	00 59       	subi	r16, 0x90	; 144
     d4c:	1f 4f       	sbci	r17, 0xFF	; 255
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	f8 01       	movw	r30, r16
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	80 83       	st	Z, r24
     d60:	24 c0       	rjmp	.+72     	; 0xdaa <main+0x454>
     d62:	ce 01       	movw	r24, r28
     d64:	8e 58       	subi	r24, 0x8E	; 142
     d66:	9f 4f       	sbci	r25, 0xFF	; 255
     d68:	29 e1       	ldi	r18, 0x19	; 25
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	fc 01       	movw	r30, r24
     d6e:	31 83       	std	Z+1, r19	; 0x01
     d70:	20 83       	st	Z, r18
     d72:	ce 01       	movw	r24, r28
     d74:	8e 58       	subi	r24, 0x8E	; 142
     d76:	9f 4f       	sbci	r25, 0xFF	; 255
     d78:	fc 01       	movw	r30, r24
     d7a:	80 81       	ld	r24, Z
     d7c:	91 81       	ldd	r25, Z+1	; 0x01
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <main+0x428>
     d82:	9e 01       	movw	r18, r28
     d84:	2e 58       	subi	r18, 0x8E	; 142
     d86:	3f 4f       	sbci	r19, 0xFF	; 255
     d88:	f9 01       	movw	r30, r18
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8e:	ce 01       	movw	r24, r28
     d90:	80 59       	subi	r24, 0x90	; 144
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	9e 01       	movw	r18, r28
     d96:	20 59       	subi	r18, 0x90	; 144
     d98:	3f 4f       	sbci	r19, 0xFF	; 255
     d9a:	f9 01       	movw	r30, r18
     d9c:	20 81       	ld	r18, Z
     d9e:	31 81       	ldd	r19, Z+1	; 0x01
     da0:	21 50       	subi	r18, 0x01	; 1
     da2:	31 09       	sbc	r19, r1
     da4:	fc 01       	movw	r30, r24
     da6:	31 83       	std	Z+1, r19	; 0x01
     da8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     daa:	ce 01       	movw	r24, r28
     dac:	80 59       	subi	r24, 0x90	; 144
     dae:	9f 4f       	sbci	r25, 0xFF	; 255
     db0:	fc 01       	movw	r30, r24
     db2:	80 81       	ld	r24, Z
     db4:	91 81       	ldd	r25, Z+1	; 0x01
     db6:	89 2b       	or	r24, r25
     db8:	a1 f6       	brne	.-88     	; 0xd62 <main+0x40c>
     dba:	2c c0       	rjmp	.+88     	; 0xe14 <main+0x4be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dbc:	8e 01       	movw	r16, r28
     dbe:	00 59       	subi	r16, 0x90	; 144
     dc0:	1f 4f       	sbci	r17, 0xFF	; 255
     dc2:	ce 01       	movw	r24, r28
     dc4:	84 59       	subi	r24, 0x94	; 148
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	fc 01       	movw	r30, r24
     dca:	60 81       	ld	r22, Z
     dcc:	71 81       	ldd	r23, Z+1	; 0x01
     dce:	82 81       	ldd	r24, Z+2	; 0x02
     dd0:	93 81       	ldd	r25, Z+3	; 0x03
     dd2:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	f8 01       	movw	r30, r16
     ddc:	91 83       	std	Z+1, r25	; 0x01
     dde:	80 83       	st	Z, r24
     de0:	ce 01       	movw	r24, r28
     de2:	8c 58       	subi	r24, 0x8C	; 140
     de4:	9f 4f       	sbci	r25, 0xFF	; 255
     de6:	9e 01       	movw	r18, r28
     de8:	20 59       	subi	r18, 0x90	; 144
     dea:	3f 4f       	sbci	r19, 0xFF	; 255
     dec:	f9 01       	movw	r30, r18
     dee:	20 81       	ld	r18, Z
     df0:	31 81       	ldd	r19, Z+1	; 0x01
     df2:	fc 01       	movw	r30, r24
     df4:	31 83       	std	Z+1, r19	; 0x01
     df6:	20 83       	st	Z, r18
     df8:	ce 01       	movw	r24, r28
     dfa:	8c 58       	subi	r24, 0x8C	; 140
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	fc 01       	movw	r30, r24
     e00:	80 81       	ld	r24, Z
     e02:	91 81       	ldd	r25, Z+1	; 0x01
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <main+0x4ae>
     e08:	9e 01       	movw	r18, r28
     e0a:	2c 58       	subi	r18, 0x8C	; 140
     e0c:	3f 4f       	sbci	r19, 0xFF	; 255
     e0e:	f9 01       	movw	r30, r18
     e10:	91 83       	std	Z+1, r25	; 0x01
     e12:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(TWO);
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_disable(ONE);
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
			BCDSevegments_disable(THREE);
     e20:	83 e0       	ldi	r24, 0x03	; 3
     e22:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
			BCDSevegments_disable(FOUR);
     e26:	84 e0       	ldi	r24, 0x04	; 4
     e28:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
			BCDSevegments_displayNo(TWO);
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	0e 94 bc 00 	call	0x178	; 0x178 <BCDSevegments_displayNo>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	a8 e4       	ldi	r26, 0x48	; 72
     e38:	b2 e4       	ldi	r27, 0x42	; 66
     e3a:	8a 83       	std	Y+2, r24	; 0x02
     e3c:	9b 83       	std	Y+3, r25	; 0x03
     e3e:	ac 83       	std	Y+4, r26	; 0x04
     e40:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e42:	8e 01       	movw	r16, r28
     e44:	0e 59       	subi	r16, 0x9E	; 158
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	4a e7       	ldi	r20, 0x7A	; 122
     e4e:	53 e4       	ldi	r21, 0x43	; 67
     e50:	6a 81       	ldd	r22, Y+2	; 0x02
     e52:	7b 81       	ldd	r23, Y+3	; 0x03
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
     e56:	9d 81       	ldd	r25, Y+5	; 0x05
     e58:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	f8 01       	movw	r30, r16
     e62:	80 83       	st	Z, r24
     e64:	91 83       	std	Z+1, r25	; 0x01
     e66:	a2 83       	std	Z+2, r26	; 0x02
     e68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e6a:	ce 01       	movw	r24, r28
     e6c:	8e 59       	subi	r24, 0x9E	; 158
     e6e:	9f 4f       	sbci	r25, 0xFF	; 255
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e8       	ldi	r20, 0x80	; 128
     e76:	5f e3       	ldi	r21, 0x3F	; 63
     e78:	fc 01       	movw	r30, r24
     e7a:	60 81       	ld	r22, Z
     e7c:	71 81       	ldd	r23, Z+1	; 0x01
     e7e:	82 81       	ldd	r24, Z+2	; 0x02
     e80:	93 81       	ldd	r25, Z+3	; 0x03
     e82:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
     e86:	88 23       	and	r24, r24
     e88:	4c f4       	brge	.+18     	; 0xe9c <main+0x546>
		__ticks = 1;
     e8a:	ce 01       	movw	r24, r28
     e8c:	8a 59       	subi	r24, 0x9A	; 154
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	21 e0       	ldi	r18, 0x01	; 1
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	fc 01       	movw	r30, r24
     e96:	31 83       	std	Z+1, r19	; 0x01
     e98:	20 83       	st	Z, r18
     e9a:	69 c0       	rjmp	.+210    	; 0xf6e <main+0x618>
	else if (__tmp > 65535)
     e9c:	ce 01       	movw	r24, r28
     e9e:	8e 59       	subi	r24, 0x9E	; 158
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	3f ef       	ldi	r19, 0xFF	; 255
     ea6:	4f e7       	ldi	r20, 0x7F	; 127
     ea8:	57 e4       	ldi	r21, 0x47	; 71
     eaa:	fc 01       	movw	r30, r24
     eac:	60 81       	ld	r22, Z
     eae:	71 81       	ldd	r23, Z+1	; 0x01
     eb0:	82 81       	ldd	r24, Z+2	; 0x02
     eb2:	93 81       	ldd	r25, Z+3	; 0x03
     eb4:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
     eb8:	18 16       	cp	r1, r24
     eba:	0c f0       	brlt	.+2      	; 0xebe <main+0x568>
     ebc:	46 c0       	rjmp	.+140    	; 0xf4a <main+0x5f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	51 e4       	ldi	r21, 0x41	; 65
     ec6:	6a 81       	ldd	r22, Y+2	; 0x02
     ec8:	7b 81       	ldd	r23, Y+3	; 0x03
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	9d 81       	ldd	r25, Y+5	; 0x05
     ece:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	8e 01       	movw	r16, r28
     ed8:	0a 59       	subi	r16, 0x9A	; 154
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	f8 01       	movw	r30, r16
     eea:	91 83       	std	Z+1, r25	; 0x01
     eec:	80 83       	st	Z, r24
     eee:	24 c0       	rjmp	.+72     	; 0xf38 <main+0x5e2>
     ef0:	ce 01       	movw	r24, r28
     ef2:	88 59       	subi	r24, 0x98	; 152
     ef4:	9f 4f       	sbci	r25, 0xFF	; 255
     ef6:	29 e1       	ldi	r18, 0x19	; 25
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	fc 01       	movw	r30, r24
     efc:	31 83       	std	Z+1, r19	; 0x01
     efe:	20 83       	st	Z, r18
     f00:	ce 01       	movw	r24, r28
     f02:	88 59       	subi	r24, 0x98	; 152
     f04:	9f 4f       	sbci	r25, 0xFF	; 255
     f06:	fc 01       	movw	r30, r24
     f08:	80 81       	ld	r24, Z
     f0a:	91 81       	ldd	r25, Z+1	; 0x01
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <main+0x5b6>
     f10:	9e 01       	movw	r18, r28
     f12:	28 59       	subi	r18, 0x98	; 152
     f14:	3f 4f       	sbci	r19, 0xFF	; 255
     f16:	f9 01       	movw	r30, r18
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1c:	ce 01       	movw	r24, r28
     f1e:	8a 59       	subi	r24, 0x9A	; 154
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	9e 01       	movw	r18, r28
     f24:	2a 59       	subi	r18, 0x9A	; 154
     f26:	3f 4f       	sbci	r19, 0xFF	; 255
     f28:	f9 01       	movw	r30, r18
     f2a:	20 81       	ld	r18, Z
     f2c:	31 81       	ldd	r19, Z+1	; 0x01
     f2e:	21 50       	subi	r18, 0x01	; 1
     f30:	31 09       	sbc	r19, r1
     f32:	fc 01       	movw	r30, r24
     f34:	31 83       	std	Z+1, r19	; 0x01
     f36:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f38:	ce 01       	movw	r24, r28
     f3a:	8a 59       	subi	r24, 0x9A	; 154
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	fc 01       	movw	r30, r24
     f40:	80 81       	ld	r24, Z
     f42:	91 81       	ldd	r25, Z+1	; 0x01
     f44:	89 2b       	or	r24, r25
     f46:	a1 f6       	brne	.-88     	; 0xef0 <main+0x59a>
     f48:	2c c0       	rjmp	.+88     	; 0xfa2 <main+0x64c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4a:	8e 01       	movw	r16, r28
     f4c:	0a 59       	subi	r16, 0x9A	; 154
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	ce 01       	movw	r24, r28
     f52:	8e 59       	subi	r24, 0x9E	; 158
     f54:	9f 4f       	sbci	r25, 0xFF	; 255
     f56:	fc 01       	movw	r30, r24
     f58:	60 81       	ld	r22, Z
     f5a:	71 81       	ldd	r23, Z+1	; 0x01
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	93 81       	ldd	r25, Z+3	; 0x03
     f60:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	f8 01       	movw	r30, r16
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
     f6e:	ce 01       	movw	r24, r28
     f70:	86 59       	subi	r24, 0x96	; 150
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	9e 01       	movw	r18, r28
     f76:	2a 59       	subi	r18, 0x9A	; 154
     f78:	3f 4f       	sbci	r19, 0xFF	; 255
     f7a:	f9 01       	movw	r30, r18
     f7c:	20 81       	ld	r18, Z
     f7e:	31 81       	ldd	r19, Z+1	; 0x01
     f80:	fc 01       	movw	r30, r24
     f82:	31 83       	std	Z+1, r19	; 0x01
     f84:	20 83       	st	Z, r18
     f86:	ce 01       	movw	r24, r28
     f88:	86 59       	subi	r24, 0x96	; 150
     f8a:	9f 4f       	sbci	r25, 0xFF	; 255
     f8c:	fc 01       	movw	r30, r24
     f8e:	80 81       	ld	r24, Z
     f90:	91 81       	ldd	r25, Z+1	; 0x01
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <main+0x63c>
     f96:	9e 01       	movw	r18, r28
     f98:	26 59       	subi	r18, 0x96	; 150
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
     f9c:	f9 01       	movw	r30, r18
     f9e:	91 83       	std	Z+1, r25	; 0x01
     fa0:	80 83       	st	Z, r24
			_delay_ms(50);
		}
		if(key == 3)
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	09 f0       	breq	.+2      	; 0xfaa <main+0x654>
     fa8:	7f c1       	rjmp	.+766    	; 0x12a8 <main+0x952>
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a8 e4       	ldi	r26, 0x48	; 72
     fb0:	b2 e4       	ldi	r27, 0x42	; 66
     fb2:	8e 8b       	std	Y+22, r24	; 0x16
     fb4:	9f 8b       	std	Y+23, r25	; 0x17
     fb6:	a8 8f       	std	Y+24, r26	; 0x18
     fb8:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fba:	8e 01       	movw	r16, r28
     fbc:	00 58       	subi	r16, 0x80	; 128
     fbe:	1f 4f       	sbci	r17, 0xFF	; 255
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	4a e7       	ldi	r20, 0x7A	; 122
     fc6:	53 e4       	ldi	r21, 0x43	; 67
     fc8:	6e 89       	ldd	r22, Y+22	; 0x16
     fca:	7f 89       	ldd	r23, Y+23	; 0x17
     fcc:	88 8d       	ldd	r24, Y+24	; 0x18
     fce:	99 8d       	ldd	r25, Y+25	; 0x19
     fd0:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	f8 01       	movw	r30, r16
     fda:	80 83       	st	Z, r24
     fdc:	91 83       	std	Z+1, r25	; 0x01
     fde:	a2 83       	std	Z+2, r26	; 0x02
     fe0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fe2:	ce 01       	movw	r24, r28
     fe4:	80 58       	subi	r24, 0x80	; 128
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e8       	ldi	r20, 0x80	; 128
     fee:	5f e3       	ldi	r21, 0x3F	; 63
     ff0:	fc 01       	movw	r30, r24
     ff2:	60 81       	ld	r22, Z
     ff4:	71 81       	ldd	r23, Z+1	; 0x01
     ff6:	82 81       	ldd	r24, Z+2	; 0x02
     ff8:	93 81       	ldd	r25, Z+3	; 0x03
     ffa:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
     ffe:	88 23       	and	r24, r24
    1000:	4c f4       	brge	.+18     	; 0x1014 <main+0x6be>
		__ticks = 1;
    1002:	ce 01       	movw	r24, r28
    1004:	8c 57       	subi	r24, 0x7C	; 124
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	fc 01       	movw	r30, r24
    100e:	31 83       	std	Z+1, r19	; 0x01
    1010:	20 83       	st	Z, r18
    1012:	69 c0       	rjmp	.+210    	; 0x10e6 <main+0x790>
	else if (__tmp > 65535)
    1014:	ce 01       	movw	r24, r28
    1016:	80 58       	subi	r24, 0x80	; 128
    1018:	9f 4f       	sbci	r25, 0xFF	; 255
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	3f ef       	ldi	r19, 0xFF	; 255
    101e:	4f e7       	ldi	r20, 0x7F	; 127
    1020:	57 e4       	ldi	r21, 0x47	; 71
    1022:	fc 01       	movw	r30, r24
    1024:	60 81       	ld	r22, Z
    1026:	71 81       	ldd	r23, Z+1	; 0x01
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	93 81       	ldd	r25, Z+3	; 0x03
    102c:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
    1030:	18 16       	cp	r1, r24
    1032:	0c f0       	brlt	.+2      	; 0x1036 <main+0x6e0>
    1034:	46 c0       	rjmp	.+140    	; 0x10c2 <main+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e2       	ldi	r20, 0x20	; 32
    103c:	51 e4       	ldi	r21, 0x41	; 65
    103e:	6e 89       	ldd	r22, Y+22	; 0x16
    1040:	7f 89       	ldd	r23, Y+23	; 0x17
    1042:	88 8d       	ldd	r24, Y+24	; 0x18
    1044:	99 8d       	ldd	r25, Y+25	; 0x19
    1046:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	8e 01       	movw	r16, r28
    1050:	0c 57       	subi	r16, 0x7C	; 124
    1052:	1f 4f       	sbci	r17, 0xFF	; 255
    1054:	bc 01       	movw	r22, r24
    1056:	cd 01       	movw	r24, r26
    1058:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	f8 01       	movw	r30, r16
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	80 83       	st	Z, r24
    1066:	24 c0       	rjmp	.+72     	; 0x10b0 <main+0x75a>
    1068:	ce 01       	movw	r24, r28
    106a:	8a 57       	subi	r24, 0x7A	; 122
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	29 e1       	ldi	r18, 0x19	; 25
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	fc 01       	movw	r30, r24
    1074:	31 83       	std	Z+1, r19	; 0x01
    1076:	20 83       	st	Z, r18
    1078:	ce 01       	movw	r24, r28
    107a:	8a 57       	subi	r24, 0x7A	; 122
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	fc 01       	movw	r30, r24
    1080:	80 81       	ld	r24, Z
    1082:	91 81       	ldd	r25, Z+1	; 0x01
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	f1 f7       	brne	.-4      	; 0x1084 <main+0x72e>
    1088:	9e 01       	movw	r18, r28
    108a:	2a 57       	subi	r18, 0x7A	; 122
    108c:	3f 4f       	sbci	r19, 0xFF	; 255
    108e:	f9 01       	movw	r30, r18
    1090:	91 83       	std	Z+1, r25	; 0x01
    1092:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1094:	ce 01       	movw	r24, r28
    1096:	8c 57       	subi	r24, 0x7C	; 124
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	9e 01       	movw	r18, r28
    109c:	2c 57       	subi	r18, 0x7C	; 124
    109e:	3f 4f       	sbci	r19, 0xFF	; 255
    10a0:	f9 01       	movw	r30, r18
    10a2:	20 81       	ld	r18, Z
    10a4:	31 81       	ldd	r19, Z+1	; 0x01
    10a6:	21 50       	subi	r18, 0x01	; 1
    10a8:	31 09       	sbc	r19, r1
    10aa:	fc 01       	movw	r30, r24
    10ac:	31 83       	std	Z+1, r19	; 0x01
    10ae:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b0:	ce 01       	movw	r24, r28
    10b2:	8c 57       	subi	r24, 0x7C	; 124
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	fc 01       	movw	r30, r24
    10b8:	80 81       	ld	r24, Z
    10ba:	91 81       	ldd	r25, Z+1	; 0x01
    10bc:	89 2b       	or	r24, r25
    10be:	a1 f6       	brne	.-88     	; 0x1068 <main+0x712>
    10c0:	2c c0       	rjmp	.+88     	; 0x111a <main+0x7c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c2:	8e 01       	movw	r16, r28
    10c4:	0c 57       	subi	r16, 0x7C	; 124
    10c6:	1f 4f       	sbci	r17, 0xFF	; 255
    10c8:	ce 01       	movw	r24, r28
    10ca:	80 58       	subi	r24, 0x80	; 128
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	fc 01       	movw	r30, r24
    10d0:	60 81       	ld	r22, Z
    10d2:	71 81       	ldd	r23, Z+1	; 0x01
    10d4:	82 81       	ldd	r24, Z+2	; 0x02
    10d6:	93 81       	ldd	r25, Z+3	; 0x03
    10d8:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	f8 01       	movw	r30, r16
    10e2:	91 83       	std	Z+1, r25	; 0x01
    10e4:	80 83       	st	Z, r24
    10e6:	ce 01       	movw	r24, r28
    10e8:	88 57       	subi	r24, 0x78	; 120
    10ea:	9f 4f       	sbci	r25, 0xFF	; 255
    10ec:	9e 01       	movw	r18, r28
    10ee:	2c 57       	subi	r18, 0x7C	; 124
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
    10f2:	f9 01       	movw	r30, r18
    10f4:	20 81       	ld	r18, Z
    10f6:	31 81       	ldd	r19, Z+1	; 0x01
    10f8:	fc 01       	movw	r30, r24
    10fa:	31 83       	std	Z+1, r19	; 0x01
    10fc:	20 83       	st	Z, r18
    10fe:	ce 01       	movw	r24, r28
    1100:	88 57       	subi	r24, 0x78	; 120
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	fc 01       	movw	r30, r24
    1106:	80 81       	ld	r24, Z
    1108:	91 81       	ldd	r25, Z+1	; 0x01
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <main+0x7b4>
    110e:	9e 01       	movw	r18, r28
    1110:	28 57       	subi	r18, 0x78	; 120
    1112:	3f 4f       	sbci	r19, 0xFF	; 255
    1114:	f9 01       	movw	r30, r18
    1116:	91 83       	std	Z+1, r25	; 0x01
    1118:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(TWO);
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_disable(ONE);
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
			BCDSevegments_disable(THREE);
    1126:	83 e0       	ldi	r24, 0x03	; 3
    1128:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
			BCDSevegments_disable(FOUR);
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
			BCDSevegments_displayNo(THREE);
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	0e 94 bc 00 	call	0x178	; 0x178 <BCDSevegments_displayNo>
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	a8 e4       	ldi	r26, 0x48	; 72
    113e:	b2 e4       	ldi	r27, 0x42	; 66
    1140:	8a 87       	std	Y+10, r24	; 0x0a
    1142:	9b 87       	std	Y+11, r25	; 0x0b
    1144:	ac 87       	std	Y+12, r26	; 0x0c
    1146:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1148:	8e 01       	movw	r16, r28
    114a:	0a 58       	subi	r16, 0x8A	; 138
    114c:	1f 4f       	sbci	r17, 0xFF	; 255
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	4a e7       	ldi	r20, 0x7A	; 122
    1154:	53 e4       	ldi	r21, 0x43	; 67
    1156:	6a 85       	ldd	r22, Y+10	; 0x0a
    1158:	7b 85       	ldd	r23, Y+11	; 0x0b
    115a:	8c 85       	ldd	r24, Y+12	; 0x0c
    115c:	9d 85       	ldd	r25, Y+13	; 0x0d
    115e:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	f8 01       	movw	r30, r16
    1168:	80 83       	st	Z, r24
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	a2 83       	std	Z+2, r26	; 0x02
    116e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1170:	ce 01       	movw	r24, r28
    1172:	8a 58       	subi	r24, 0x8A	; 138
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e8       	ldi	r20, 0x80	; 128
    117c:	5f e3       	ldi	r21, 0x3F	; 63
    117e:	fc 01       	movw	r30, r24
    1180:	60 81       	ld	r22, Z
    1182:	71 81       	ldd	r23, Z+1	; 0x01
    1184:	82 81       	ldd	r24, Z+2	; 0x02
    1186:	93 81       	ldd	r25, Z+3	; 0x03
    1188:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
    118c:	88 23       	and	r24, r24
    118e:	4c f4       	brge	.+18     	; 0x11a2 <main+0x84c>
		__ticks = 1;
    1190:	ce 01       	movw	r24, r28
    1192:	86 58       	subi	r24, 0x86	; 134
    1194:	9f 4f       	sbci	r25, 0xFF	; 255
    1196:	21 e0       	ldi	r18, 0x01	; 1
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	fc 01       	movw	r30, r24
    119c:	31 83       	std	Z+1, r19	; 0x01
    119e:	20 83       	st	Z, r18
    11a0:	69 c0       	rjmp	.+210    	; 0x1274 <main+0x91e>
	else if (__tmp > 65535)
    11a2:	ce 01       	movw	r24, r28
    11a4:	8a 58       	subi	r24, 0x8A	; 138
    11a6:	9f 4f       	sbci	r25, 0xFF	; 255
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	3f ef       	ldi	r19, 0xFF	; 255
    11ac:	4f e7       	ldi	r20, 0x7F	; 127
    11ae:	57 e4       	ldi	r21, 0x47	; 71
    11b0:	fc 01       	movw	r30, r24
    11b2:	60 81       	ld	r22, Z
    11b4:	71 81       	ldd	r23, Z+1	; 0x01
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
    11b8:	93 81       	ldd	r25, Z+3	; 0x03
    11ba:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
    11be:	18 16       	cp	r1, r24
    11c0:	0c f0       	brlt	.+2      	; 0x11c4 <main+0x86e>
    11c2:	46 c0       	rjmp	.+140    	; 0x1250 <main+0x8fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e2       	ldi	r20, 0x20	; 32
    11ca:	51 e4       	ldi	r21, 0x41	; 65
    11cc:	6a 85       	ldd	r22, Y+10	; 0x0a
    11ce:	7b 85       	ldd	r23, Y+11	; 0x0b
    11d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    11d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    11d4:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	8e 01       	movw	r16, r28
    11de:	06 58       	subi	r16, 0x86	; 134
    11e0:	1f 4f       	sbci	r17, 0xFF	; 255
    11e2:	bc 01       	movw	r22, r24
    11e4:	cd 01       	movw	r24, r26
    11e6:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	f8 01       	movw	r30, r16
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	80 83       	st	Z, r24
    11f4:	24 c0       	rjmp	.+72     	; 0x123e <main+0x8e8>
    11f6:	ce 01       	movw	r24, r28
    11f8:	84 58       	subi	r24, 0x84	; 132
    11fa:	9f 4f       	sbci	r25, 0xFF	; 255
    11fc:	29 e1       	ldi	r18, 0x19	; 25
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	fc 01       	movw	r30, r24
    1202:	31 83       	std	Z+1, r19	; 0x01
    1204:	20 83       	st	Z, r18
    1206:	ce 01       	movw	r24, r28
    1208:	84 58       	subi	r24, 0x84	; 132
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	fc 01       	movw	r30, r24
    120e:	80 81       	ld	r24, Z
    1210:	91 81       	ldd	r25, Z+1	; 0x01
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <main+0x8bc>
    1216:	9e 01       	movw	r18, r28
    1218:	24 58       	subi	r18, 0x84	; 132
    121a:	3f 4f       	sbci	r19, 0xFF	; 255
    121c:	f9 01       	movw	r30, r18
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1222:	ce 01       	movw	r24, r28
    1224:	86 58       	subi	r24, 0x86	; 134
    1226:	9f 4f       	sbci	r25, 0xFF	; 255
    1228:	9e 01       	movw	r18, r28
    122a:	26 58       	subi	r18, 0x86	; 134
    122c:	3f 4f       	sbci	r19, 0xFF	; 255
    122e:	f9 01       	movw	r30, r18
    1230:	20 81       	ld	r18, Z
    1232:	31 81       	ldd	r19, Z+1	; 0x01
    1234:	21 50       	subi	r18, 0x01	; 1
    1236:	31 09       	sbc	r19, r1
    1238:	fc 01       	movw	r30, r24
    123a:	31 83       	std	Z+1, r19	; 0x01
    123c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    123e:	ce 01       	movw	r24, r28
    1240:	86 58       	subi	r24, 0x86	; 134
    1242:	9f 4f       	sbci	r25, 0xFF	; 255
    1244:	fc 01       	movw	r30, r24
    1246:	80 81       	ld	r24, Z
    1248:	91 81       	ldd	r25, Z+1	; 0x01
    124a:	89 2b       	or	r24, r25
    124c:	a1 f6       	brne	.-88     	; 0x11f6 <main+0x8a0>
    124e:	2c c0       	rjmp	.+88     	; 0x12a8 <main+0x952>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1250:	8e 01       	movw	r16, r28
    1252:	06 58       	subi	r16, 0x86	; 134
    1254:	1f 4f       	sbci	r17, 0xFF	; 255
    1256:	ce 01       	movw	r24, r28
    1258:	8a 58       	subi	r24, 0x8A	; 138
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	fc 01       	movw	r30, r24
    125e:	60 81       	ld	r22, Z
    1260:	71 81       	ldd	r23, Z+1	; 0x01
    1262:	82 81       	ldd	r24, Z+2	; 0x02
    1264:	93 81       	ldd	r25, Z+3	; 0x03
    1266:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	f8 01       	movw	r30, r16
    1270:	91 83       	std	Z+1, r25	; 0x01
    1272:	80 83       	st	Z, r24
    1274:	ce 01       	movw	r24, r28
    1276:	82 58       	subi	r24, 0x82	; 130
    1278:	9f 4f       	sbci	r25, 0xFF	; 255
    127a:	9e 01       	movw	r18, r28
    127c:	26 58       	subi	r18, 0x86	; 134
    127e:	3f 4f       	sbci	r19, 0xFF	; 255
    1280:	f9 01       	movw	r30, r18
    1282:	20 81       	ld	r18, Z
    1284:	31 81       	ldd	r19, Z+1	; 0x01
    1286:	fc 01       	movw	r30, r24
    1288:	31 83       	std	Z+1, r19	; 0x01
    128a:	20 83       	st	Z, r18
    128c:	ce 01       	movw	r24, r28
    128e:	82 58       	subi	r24, 0x82	; 130
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	fc 01       	movw	r30, r24
    1294:	80 81       	ld	r24, Z
    1296:	91 81       	ldd	r25, Z+1	; 0x01
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	f1 f7       	brne	.-4      	; 0x1298 <main+0x942>
    129c:	9e 01       	movw	r18, r28
    129e:	22 58       	subi	r18, 0x82	; 130
    12a0:	3f 4f       	sbci	r19, 0xFF	; 255
    12a2:	f9 01       	movw	r30, r18
    12a4:	91 83       	std	Z+1, r25	; 0x01
    12a6:	80 83       	st	Z, r24
			_delay_ms(50);
		}
		if(key == 4)
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	84 30       	cpi	r24, 0x04	; 4
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <main+0x95a>
    12ae:	7f c1       	rjmp	.+766    	; 0x15ae <main+0xc58>
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	a8 e4       	ldi	r26, 0x48	; 72
    12b6:	b2 e4       	ldi	r27, 0x42	; 66
    12b8:	8e 8f       	std	Y+30, r24	; 0x1e
    12ba:	9f 8f       	std	Y+31, r25	; 0x1f
    12bc:	a8 a3       	std	Y+32, r26	; 0x20
    12be:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12c0:	8e 01       	movw	r16, r28
    12c2:	0c 56       	subi	r16, 0x6C	; 108
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	4a e7       	ldi	r20, 0x7A	; 122
    12cc:	53 e4       	ldi	r21, 0x43	; 67
    12ce:	6e 8d       	ldd	r22, Y+30	; 0x1e
    12d0:	7f 8d       	ldd	r23, Y+31	; 0x1f
    12d2:	88 a1       	ldd	r24, Y+32	; 0x20
    12d4:	99 a1       	ldd	r25, Y+33	; 0x21
    12d6:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	f8 01       	movw	r30, r16
    12e0:	80 83       	st	Z, r24
    12e2:	91 83       	std	Z+1, r25	; 0x01
    12e4:	a2 83       	std	Z+2, r26	; 0x02
    12e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12e8:	ce 01       	movw	r24, r28
    12ea:	8c 56       	subi	r24, 0x6C	; 108
    12ec:	9f 4f       	sbci	r25, 0xFF	; 255
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e8       	ldi	r20, 0x80	; 128
    12f4:	5f e3       	ldi	r21, 0x3F	; 63
    12f6:	fc 01       	movw	r30, r24
    12f8:	60 81       	ld	r22, Z
    12fa:	71 81       	ldd	r23, Z+1	; 0x01
    12fc:	82 81       	ldd	r24, Z+2	; 0x02
    12fe:	93 81       	ldd	r25, Z+3	; 0x03
    1300:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
    1304:	88 23       	and	r24, r24
    1306:	4c f4       	brge	.+18     	; 0x131a <main+0x9c4>
		__ticks = 1;
    1308:	ce 01       	movw	r24, r28
    130a:	88 56       	subi	r24, 0x68	; 104
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	21 e0       	ldi	r18, 0x01	; 1
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	fc 01       	movw	r30, r24
    1314:	31 83       	std	Z+1, r19	; 0x01
    1316:	20 83       	st	Z, r18
    1318:	69 c0       	rjmp	.+210    	; 0x13ec <main+0xa96>
	else if (__tmp > 65535)
    131a:	ce 01       	movw	r24, r28
    131c:	8c 56       	subi	r24, 0x6C	; 108
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	3f ef       	ldi	r19, 0xFF	; 255
    1324:	4f e7       	ldi	r20, 0x7F	; 127
    1326:	57 e4       	ldi	r21, 0x47	; 71
    1328:	fc 01       	movw	r30, r24
    132a:	60 81       	ld	r22, Z
    132c:	71 81       	ldd	r23, Z+1	; 0x01
    132e:	82 81       	ldd	r24, Z+2	; 0x02
    1330:	93 81       	ldd	r25, Z+3	; 0x03
    1332:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
    1336:	18 16       	cp	r1, r24
    1338:	0c f0       	brlt	.+2      	; 0x133c <main+0x9e6>
    133a:	46 c0       	rjmp	.+140    	; 0x13c8 <main+0xa72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e2       	ldi	r20, 0x20	; 32
    1342:	51 e4       	ldi	r21, 0x41	; 65
    1344:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1346:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1348:	88 a1       	ldd	r24, Y+32	; 0x20
    134a:	99 a1       	ldd	r25, Y+33	; 0x21
    134c:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	8e 01       	movw	r16, r28
    1356:	08 56       	subi	r16, 0x68	; 104
    1358:	1f 4f       	sbci	r17, 0xFF	; 255
    135a:	bc 01       	movw	r22, r24
    135c:	cd 01       	movw	r24, r26
    135e:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	f8 01       	movw	r30, r16
    1368:	91 83       	std	Z+1, r25	; 0x01
    136a:	80 83       	st	Z, r24
    136c:	24 c0       	rjmp	.+72     	; 0x13b6 <main+0xa60>
    136e:	ce 01       	movw	r24, r28
    1370:	86 56       	subi	r24, 0x66	; 102
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	29 e1       	ldi	r18, 0x19	; 25
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	fc 01       	movw	r30, r24
    137a:	31 83       	std	Z+1, r19	; 0x01
    137c:	20 83       	st	Z, r18
    137e:	ce 01       	movw	r24, r28
    1380:	86 56       	subi	r24, 0x66	; 102
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	fc 01       	movw	r30, r24
    1386:	80 81       	ld	r24, Z
    1388:	91 81       	ldd	r25, Z+1	; 0x01
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <main+0xa34>
    138e:	9e 01       	movw	r18, r28
    1390:	26 56       	subi	r18, 0x66	; 102
    1392:	3f 4f       	sbci	r19, 0xFF	; 255
    1394:	f9 01       	movw	r30, r18
    1396:	91 83       	std	Z+1, r25	; 0x01
    1398:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139a:	ce 01       	movw	r24, r28
    139c:	88 56       	subi	r24, 0x68	; 104
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	9e 01       	movw	r18, r28
    13a2:	28 56       	subi	r18, 0x68	; 104
    13a4:	3f 4f       	sbci	r19, 0xFF	; 255
    13a6:	f9 01       	movw	r30, r18
    13a8:	20 81       	ld	r18, Z
    13aa:	31 81       	ldd	r19, Z+1	; 0x01
    13ac:	21 50       	subi	r18, 0x01	; 1
    13ae:	31 09       	sbc	r19, r1
    13b0:	fc 01       	movw	r30, r24
    13b2:	31 83       	std	Z+1, r19	; 0x01
    13b4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b6:	ce 01       	movw	r24, r28
    13b8:	88 56       	subi	r24, 0x68	; 104
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	fc 01       	movw	r30, r24
    13be:	80 81       	ld	r24, Z
    13c0:	91 81       	ldd	r25, Z+1	; 0x01
    13c2:	89 2b       	or	r24, r25
    13c4:	a1 f6       	brne	.-88     	; 0x136e <main+0xa18>
    13c6:	2c c0       	rjmp	.+88     	; 0x1420 <main+0xaca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c8:	8e 01       	movw	r16, r28
    13ca:	08 56       	subi	r16, 0x68	; 104
    13cc:	1f 4f       	sbci	r17, 0xFF	; 255
    13ce:	ce 01       	movw	r24, r28
    13d0:	8c 56       	subi	r24, 0x6C	; 108
    13d2:	9f 4f       	sbci	r25, 0xFF	; 255
    13d4:	fc 01       	movw	r30, r24
    13d6:	60 81       	ld	r22, Z
    13d8:	71 81       	ldd	r23, Z+1	; 0x01
    13da:	82 81       	ldd	r24, Z+2	; 0x02
    13dc:	93 81       	ldd	r25, Z+3	; 0x03
    13de:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	f8 01       	movw	r30, r16
    13e8:	91 83       	std	Z+1, r25	; 0x01
    13ea:	80 83       	st	Z, r24
    13ec:	ce 01       	movw	r24, r28
    13ee:	84 56       	subi	r24, 0x64	; 100
    13f0:	9f 4f       	sbci	r25, 0xFF	; 255
    13f2:	9e 01       	movw	r18, r28
    13f4:	28 56       	subi	r18, 0x68	; 104
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	f9 01       	movw	r30, r18
    13fa:	20 81       	ld	r18, Z
    13fc:	31 81       	ldd	r19, Z+1	; 0x01
    13fe:	fc 01       	movw	r30, r24
    1400:	31 83       	std	Z+1, r19	; 0x01
    1402:	20 83       	st	Z, r18
    1404:	ce 01       	movw	r24, r28
    1406:	84 56       	subi	r24, 0x64	; 100
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	fc 01       	movw	r30, r24
    140c:	80 81       	ld	r24, Z
    140e:	91 81       	ldd	r25, Z+1	; 0x01
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <main+0xaba>
    1414:	9e 01       	movw	r18, r28
    1416:	24 56       	subi	r18, 0x64	; 100
    1418:	3f 4f       	sbci	r19, 0xFF	; 255
    141a:	f9 01       	movw	r30, r18
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	80 83       	st	Z, r24
		{
		_delay_ms(50);
		BCDSevegments_enable(TWO);
    1420:	82 e0       	ldi	r24, 0x02	; 2
    1422:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_disable(ONE);
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
		BCDSevegments_disable(THREE);
    142c:	83 e0       	ldi	r24, 0x03	; 3
    142e:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
		BCDSevegments_disable(FOUR);
    1432:	84 e0       	ldi	r24, 0x04	; 4
    1434:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
		BCDSevegments_displayNo(FOUR);
    1438:	84 e0       	ldi	r24, 0x04	; 4
    143a:	0e 94 bc 00 	call	0x178	; 0x178 <BCDSevegments_displayNo>
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	a8 e4       	ldi	r26, 0x48	; 72
    1444:	b2 e4       	ldi	r27, 0x42	; 66
    1446:	8a 8b       	std	Y+18, r24	; 0x12
    1448:	9b 8b       	std	Y+19, r25	; 0x13
    144a:	ac 8b       	std	Y+20, r26	; 0x14
    144c:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    144e:	8e 01       	movw	r16, r28
    1450:	06 57       	subi	r16, 0x76	; 118
    1452:	1f 4f       	sbci	r17, 0xFF	; 255
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	4a e7       	ldi	r20, 0x7A	; 122
    145a:	53 e4       	ldi	r21, 0x43	; 67
    145c:	6a 89       	ldd	r22, Y+18	; 0x12
    145e:	7b 89       	ldd	r23, Y+19	; 0x13
    1460:	8c 89       	ldd	r24, Y+20	; 0x14
    1462:	9d 89       	ldd	r25, Y+21	; 0x15
    1464:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	f8 01       	movw	r30, r16
    146e:	80 83       	st	Z, r24
    1470:	91 83       	std	Z+1, r25	; 0x01
    1472:	a2 83       	std	Z+2, r26	; 0x02
    1474:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1476:	ce 01       	movw	r24, r28
    1478:	86 57       	subi	r24, 0x76	; 118
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e8       	ldi	r20, 0x80	; 128
    1482:	5f e3       	ldi	r21, 0x3F	; 63
    1484:	fc 01       	movw	r30, r24
    1486:	60 81       	ld	r22, Z
    1488:	71 81       	ldd	r23, Z+1	; 0x01
    148a:	82 81       	ldd	r24, Z+2	; 0x02
    148c:	93 81       	ldd	r25, Z+3	; 0x03
    148e:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
    1492:	88 23       	and	r24, r24
    1494:	4c f4       	brge	.+18     	; 0x14a8 <main+0xb52>
		__ticks = 1;
    1496:	ce 01       	movw	r24, r28
    1498:	82 57       	subi	r24, 0x72	; 114
    149a:	9f 4f       	sbci	r25, 0xFF	; 255
    149c:	21 e0       	ldi	r18, 0x01	; 1
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	fc 01       	movw	r30, r24
    14a2:	31 83       	std	Z+1, r19	; 0x01
    14a4:	20 83       	st	Z, r18
    14a6:	69 c0       	rjmp	.+210    	; 0x157a <main+0xc24>
	else if (__tmp > 65535)
    14a8:	ce 01       	movw	r24, r28
    14aa:	86 57       	subi	r24, 0x76	; 118
    14ac:	9f 4f       	sbci	r25, 0xFF	; 255
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	3f ef       	ldi	r19, 0xFF	; 255
    14b2:	4f e7       	ldi	r20, 0x7F	; 127
    14b4:	57 e4       	ldi	r21, 0x47	; 71
    14b6:	fc 01       	movw	r30, r24
    14b8:	60 81       	ld	r22, Z
    14ba:	71 81       	ldd	r23, Z+1	; 0x01
    14bc:	82 81       	ldd	r24, Z+2	; 0x02
    14be:	93 81       	ldd	r25, Z+3	; 0x03
    14c0:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
    14c4:	18 16       	cp	r1, r24
    14c6:	0c f0       	brlt	.+2      	; 0x14ca <main+0xb74>
    14c8:	46 c0       	rjmp	.+140    	; 0x1556 <main+0xc00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e2       	ldi	r20, 0x20	; 32
    14d0:	51 e4       	ldi	r21, 0x41	; 65
    14d2:	6a 89       	ldd	r22, Y+18	; 0x12
    14d4:	7b 89       	ldd	r23, Y+19	; 0x13
    14d6:	8c 89       	ldd	r24, Y+20	; 0x14
    14d8:	9d 89       	ldd	r25, Y+21	; 0x15
    14da:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	8e 01       	movw	r16, r28
    14e4:	02 57       	subi	r16, 0x72	; 114
    14e6:	1f 4f       	sbci	r17, 0xFF	; 255
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	f8 01       	movw	r30, r16
    14f6:	91 83       	std	Z+1, r25	; 0x01
    14f8:	80 83       	st	Z, r24
    14fa:	24 c0       	rjmp	.+72     	; 0x1544 <main+0xbee>
    14fc:	ce 01       	movw	r24, r28
    14fe:	80 57       	subi	r24, 0x70	; 112
    1500:	9f 4f       	sbci	r25, 0xFF	; 255
    1502:	29 e1       	ldi	r18, 0x19	; 25
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	fc 01       	movw	r30, r24
    1508:	31 83       	std	Z+1, r19	; 0x01
    150a:	20 83       	st	Z, r18
    150c:	ce 01       	movw	r24, r28
    150e:	80 57       	subi	r24, 0x70	; 112
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	fc 01       	movw	r30, r24
    1514:	80 81       	ld	r24, Z
    1516:	91 81       	ldd	r25, Z+1	; 0x01
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <main+0xbc2>
    151c:	9e 01       	movw	r18, r28
    151e:	20 57       	subi	r18, 0x70	; 112
    1520:	3f 4f       	sbci	r19, 0xFF	; 255
    1522:	f9 01       	movw	r30, r18
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1528:	ce 01       	movw	r24, r28
    152a:	82 57       	subi	r24, 0x72	; 114
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	9e 01       	movw	r18, r28
    1530:	22 57       	subi	r18, 0x72	; 114
    1532:	3f 4f       	sbci	r19, 0xFF	; 255
    1534:	f9 01       	movw	r30, r18
    1536:	20 81       	ld	r18, Z
    1538:	31 81       	ldd	r19, Z+1	; 0x01
    153a:	21 50       	subi	r18, 0x01	; 1
    153c:	31 09       	sbc	r19, r1
    153e:	fc 01       	movw	r30, r24
    1540:	31 83       	std	Z+1, r19	; 0x01
    1542:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1544:	ce 01       	movw	r24, r28
    1546:	82 57       	subi	r24, 0x72	; 114
    1548:	9f 4f       	sbci	r25, 0xFF	; 255
    154a:	fc 01       	movw	r30, r24
    154c:	80 81       	ld	r24, Z
    154e:	91 81       	ldd	r25, Z+1	; 0x01
    1550:	89 2b       	or	r24, r25
    1552:	a1 f6       	brne	.-88     	; 0x14fc <main+0xba6>
    1554:	2c c0       	rjmp	.+88     	; 0x15ae <main+0xc58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1556:	8e 01       	movw	r16, r28
    1558:	02 57       	subi	r16, 0x72	; 114
    155a:	1f 4f       	sbci	r17, 0xFF	; 255
    155c:	ce 01       	movw	r24, r28
    155e:	86 57       	subi	r24, 0x76	; 118
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	fc 01       	movw	r30, r24
    1564:	60 81       	ld	r22, Z
    1566:	71 81       	ldd	r23, Z+1	; 0x01
    1568:	82 81       	ldd	r24, Z+2	; 0x02
    156a:	93 81       	ldd	r25, Z+3	; 0x03
    156c:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	f8 01       	movw	r30, r16
    1576:	91 83       	std	Z+1, r25	; 0x01
    1578:	80 83       	st	Z, r24
    157a:	ce 01       	movw	r24, r28
    157c:	8e 56       	subi	r24, 0x6E	; 110
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	9e 01       	movw	r18, r28
    1582:	22 57       	subi	r18, 0x72	; 114
    1584:	3f 4f       	sbci	r19, 0xFF	; 255
    1586:	f9 01       	movw	r30, r18
    1588:	20 81       	ld	r18, Z
    158a:	31 81       	ldd	r19, Z+1	; 0x01
    158c:	fc 01       	movw	r30, r24
    158e:	31 83       	std	Z+1, r19	; 0x01
    1590:	20 83       	st	Z, r18
    1592:	ce 01       	movw	r24, r28
    1594:	8e 56       	subi	r24, 0x6E	; 110
    1596:	9f 4f       	sbci	r25, 0xFF	; 255
    1598:	fc 01       	movw	r30, r24
    159a:	80 81       	ld	r24, Z
    159c:	91 81       	ldd	r25, Z+1	; 0x01
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <main+0xc48>
    15a2:	9e 01       	movw	r18, r28
    15a4:	2e 56       	subi	r18, 0x6E	; 110
    15a6:	3f 4f       	sbci	r19, 0xFF	; 255
    15a8:	f9 01       	movw	r30, r18
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	80 83       	st	Z, r24
		_delay_ms(50);
		}
		if(key == 5)
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	85 30       	cpi	r24, 0x05	; 5
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <main+0xc60>
    15b4:	7f c1       	rjmp	.+766    	; 0x18b4 <main+0xf5e>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a8 e4       	ldi	r26, 0x48	; 72
    15bc:	b2 e4       	ldi	r27, 0x42	; 66
    15be:	8e a3       	std	Y+38, r24	; 0x26
    15c0:	9f a3       	std	Y+39, r25	; 0x27
    15c2:	a8 a7       	std	Y+40, r26	; 0x28
    15c4:	b9 a7       	std	Y+41, r27	; 0x29

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15c6:	8e 01       	movw	r16, r28
    15c8:	08 55       	subi	r16, 0x58	; 88
    15ca:	1f 4f       	sbci	r17, 0xFF	; 255
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	4a e7       	ldi	r20, 0x7A	; 122
    15d2:	53 e4       	ldi	r21, 0x43	; 67
    15d4:	6e a1       	ldd	r22, Y+38	; 0x26
    15d6:	7f a1       	ldd	r23, Y+39	; 0x27
    15d8:	88 a5       	ldd	r24, Y+40	; 0x28
    15da:	99 a5       	ldd	r25, Y+41	; 0x29
    15dc:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	f8 01       	movw	r30, r16
    15e6:	80 83       	st	Z, r24
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	a2 83       	std	Z+2, r26	; 0x02
    15ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15ee:	ce 01       	movw	r24, r28
    15f0:	88 55       	subi	r24, 0x58	; 88
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e8       	ldi	r20, 0x80	; 128
    15fa:	5f e3       	ldi	r21, 0x3F	; 63
    15fc:	fc 01       	movw	r30, r24
    15fe:	60 81       	ld	r22, Z
    1600:	71 81       	ldd	r23, Z+1	; 0x01
    1602:	82 81       	ldd	r24, Z+2	; 0x02
    1604:	93 81       	ldd	r25, Z+3	; 0x03
    1606:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
    160a:	88 23       	and	r24, r24
    160c:	4c f4       	brge	.+18     	; 0x1620 <main+0xcca>
		__ticks = 1;
    160e:	ce 01       	movw	r24, r28
    1610:	84 55       	subi	r24, 0x54	; 84
    1612:	9f 4f       	sbci	r25, 0xFF	; 255
    1614:	21 e0       	ldi	r18, 0x01	; 1
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	fc 01       	movw	r30, r24
    161a:	31 83       	std	Z+1, r19	; 0x01
    161c:	20 83       	st	Z, r18
    161e:	69 c0       	rjmp	.+210    	; 0x16f2 <main+0xd9c>
	else if (__tmp > 65535)
    1620:	ce 01       	movw	r24, r28
    1622:	88 55       	subi	r24, 0x58	; 88
    1624:	9f 4f       	sbci	r25, 0xFF	; 255
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	3f ef       	ldi	r19, 0xFF	; 255
    162a:	4f e7       	ldi	r20, 0x7F	; 127
    162c:	57 e4       	ldi	r21, 0x47	; 71
    162e:	fc 01       	movw	r30, r24
    1630:	60 81       	ld	r22, Z
    1632:	71 81       	ldd	r23, Z+1	; 0x01
    1634:	82 81       	ldd	r24, Z+2	; 0x02
    1636:	93 81       	ldd	r25, Z+3	; 0x03
    1638:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
    163c:	18 16       	cp	r1, r24
    163e:	0c f0       	brlt	.+2      	; 0x1642 <main+0xcec>
    1640:	46 c0       	rjmp	.+140    	; 0x16ce <main+0xd78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e2       	ldi	r20, 0x20	; 32
    1648:	51 e4       	ldi	r21, 0x41	; 65
    164a:	6e a1       	ldd	r22, Y+38	; 0x26
    164c:	7f a1       	ldd	r23, Y+39	; 0x27
    164e:	88 a5       	ldd	r24, Y+40	; 0x28
    1650:	99 a5       	ldd	r25, Y+41	; 0x29
    1652:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	8e 01       	movw	r16, r28
    165c:	04 55       	subi	r16, 0x54	; 84
    165e:	1f 4f       	sbci	r17, 0xFF	; 255
    1660:	bc 01       	movw	r22, r24
    1662:	cd 01       	movw	r24, r26
    1664:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	f8 01       	movw	r30, r16
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	80 83       	st	Z, r24
    1672:	24 c0       	rjmp	.+72     	; 0x16bc <main+0xd66>
    1674:	ce 01       	movw	r24, r28
    1676:	82 55       	subi	r24, 0x52	; 82
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	29 e1       	ldi	r18, 0x19	; 25
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	fc 01       	movw	r30, r24
    1680:	31 83       	std	Z+1, r19	; 0x01
    1682:	20 83       	st	Z, r18
    1684:	ce 01       	movw	r24, r28
    1686:	82 55       	subi	r24, 0x52	; 82
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	fc 01       	movw	r30, r24
    168c:	80 81       	ld	r24, Z
    168e:	91 81       	ldd	r25, Z+1	; 0x01
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <main+0xd3a>
    1694:	9e 01       	movw	r18, r28
    1696:	22 55       	subi	r18, 0x52	; 82
    1698:	3f 4f       	sbci	r19, 0xFF	; 255
    169a:	f9 01       	movw	r30, r18
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a0:	ce 01       	movw	r24, r28
    16a2:	84 55       	subi	r24, 0x54	; 84
    16a4:	9f 4f       	sbci	r25, 0xFF	; 255
    16a6:	9e 01       	movw	r18, r28
    16a8:	24 55       	subi	r18, 0x54	; 84
    16aa:	3f 4f       	sbci	r19, 0xFF	; 255
    16ac:	f9 01       	movw	r30, r18
    16ae:	20 81       	ld	r18, Z
    16b0:	31 81       	ldd	r19, Z+1	; 0x01
    16b2:	21 50       	subi	r18, 0x01	; 1
    16b4:	31 09       	sbc	r19, r1
    16b6:	fc 01       	movw	r30, r24
    16b8:	31 83       	std	Z+1, r19	; 0x01
    16ba:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16bc:	ce 01       	movw	r24, r28
    16be:	84 55       	subi	r24, 0x54	; 84
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	fc 01       	movw	r30, r24
    16c4:	80 81       	ld	r24, Z
    16c6:	91 81       	ldd	r25, Z+1	; 0x01
    16c8:	89 2b       	or	r24, r25
    16ca:	a1 f6       	brne	.-88     	; 0x1674 <main+0xd1e>
    16cc:	2c c0       	rjmp	.+88     	; 0x1726 <main+0xdd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ce:	8e 01       	movw	r16, r28
    16d0:	04 55       	subi	r16, 0x54	; 84
    16d2:	1f 4f       	sbci	r17, 0xFF	; 255
    16d4:	ce 01       	movw	r24, r28
    16d6:	88 55       	subi	r24, 0x58	; 88
    16d8:	9f 4f       	sbci	r25, 0xFF	; 255
    16da:	fc 01       	movw	r30, r24
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	f8 01       	movw	r30, r16
    16ee:	91 83       	std	Z+1, r25	; 0x01
    16f0:	80 83       	st	Z, r24
    16f2:	ce 01       	movw	r24, r28
    16f4:	80 55       	subi	r24, 0x50	; 80
    16f6:	9f 4f       	sbci	r25, 0xFF	; 255
    16f8:	9e 01       	movw	r18, r28
    16fa:	24 55       	subi	r18, 0x54	; 84
    16fc:	3f 4f       	sbci	r19, 0xFF	; 255
    16fe:	f9 01       	movw	r30, r18
    1700:	20 81       	ld	r18, Z
    1702:	31 81       	ldd	r19, Z+1	; 0x01
    1704:	fc 01       	movw	r30, r24
    1706:	31 83       	std	Z+1, r19	; 0x01
    1708:	20 83       	st	Z, r18
    170a:	ce 01       	movw	r24, r28
    170c:	80 55       	subi	r24, 0x50	; 80
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	fc 01       	movw	r30, r24
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <main+0xdc0>
    171a:	9e 01       	movw	r18, r28
    171c:	20 55       	subi	r18, 0x50	; 80
    171e:	3f 4f       	sbci	r19, 0xFF	; 255
    1720:	f9 01       	movw	r30, r18
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(TWO);
    1726:	82 e0       	ldi	r24, 0x02	; 2
    1728:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_disable(ONE);
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
			BCDSevegments_disable(THREE);
    1732:	83 e0       	ldi	r24, 0x03	; 3
    1734:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
			BCDSevegments_disable(FOUR);
    1738:	84 e0       	ldi	r24, 0x04	; 4
    173a:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
			BCDSevegments_displayNo(FIVE);
    173e:	85 e0       	ldi	r24, 0x05	; 5
    1740:	0e 94 bc 00 	call	0x178	; 0x178 <BCDSevegments_displayNo>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a8 e4       	ldi	r26, 0x48	; 72
    174a:	b2 e4       	ldi	r27, 0x42	; 66
    174c:	8a 8f       	std	Y+26, r24	; 0x1a
    174e:	9b 8f       	std	Y+27, r25	; 0x1b
    1750:	ac 8f       	std	Y+28, r26	; 0x1c
    1752:	bd 8f       	std	Y+29, r27	; 0x1d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1754:	8e 01       	movw	r16, r28
    1756:	02 56       	subi	r16, 0x62	; 98
    1758:	1f 4f       	sbci	r17, 0xFF	; 255
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	4a e7       	ldi	r20, 0x7A	; 122
    1760:	53 e4       	ldi	r21, 0x43	; 67
    1762:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1764:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1766:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1768:	9d 8d       	ldd	r25, Y+29	; 0x1d
    176a:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	f8 01       	movw	r30, r16
    1774:	80 83       	st	Z, r24
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	a2 83       	std	Z+2, r26	; 0x02
    177a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    177c:	ce 01       	movw	r24, r28
    177e:	82 56       	subi	r24, 0x62	; 98
    1780:	9f 4f       	sbci	r25, 0xFF	; 255
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e8       	ldi	r20, 0x80	; 128
    1788:	5f e3       	ldi	r21, 0x3F	; 63
    178a:	fc 01       	movw	r30, r24
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	93 81       	ldd	r25, Z+3	; 0x03
    1794:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
    1798:	88 23       	and	r24, r24
    179a:	4c f4       	brge	.+18     	; 0x17ae <main+0xe58>
		__ticks = 1;
    179c:	ce 01       	movw	r24, r28
    179e:	8e 55       	subi	r24, 0x5E	; 94
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	21 e0       	ldi	r18, 0x01	; 1
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	fc 01       	movw	r30, r24
    17a8:	31 83       	std	Z+1, r19	; 0x01
    17aa:	20 83       	st	Z, r18
    17ac:	69 c0       	rjmp	.+210    	; 0x1880 <main+0xf2a>
	else if (__tmp > 65535)
    17ae:	ce 01       	movw	r24, r28
    17b0:	82 56       	subi	r24, 0x62	; 98
    17b2:	9f 4f       	sbci	r25, 0xFF	; 255
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	3f ef       	ldi	r19, 0xFF	; 255
    17b8:	4f e7       	ldi	r20, 0x7F	; 127
    17ba:	57 e4       	ldi	r21, 0x47	; 71
    17bc:	fc 01       	movw	r30, r24
    17be:	60 81       	ld	r22, Z
    17c0:	71 81       	ldd	r23, Z+1	; 0x01
    17c2:	82 81       	ldd	r24, Z+2	; 0x02
    17c4:	93 81       	ldd	r25, Z+3	; 0x03
    17c6:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	0c f0       	brlt	.+2      	; 0x17d0 <main+0xe7a>
    17ce:	46 c0       	rjmp	.+140    	; 0x185c <main+0xf06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e2       	ldi	r20, 0x20	; 32
    17d6:	51 e4       	ldi	r21, 0x41	; 65
    17d8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    17da:	7b 8d       	ldd	r23, Y+27	; 0x1b
    17dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17de:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17e0:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	8e 01       	movw	r16, r28
    17ea:	0e 55       	subi	r16, 0x5E	; 94
    17ec:	1f 4f       	sbci	r17, 0xFF	; 255
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	f8 01       	movw	r30, r16
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	80 83       	st	Z, r24
    1800:	24 c0       	rjmp	.+72     	; 0x184a <main+0xef4>
    1802:	ce 01       	movw	r24, r28
    1804:	8c 55       	subi	r24, 0x5C	; 92
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	29 e1       	ldi	r18, 0x19	; 25
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	fc 01       	movw	r30, r24
    180e:	31 83       	std	Z+1, r19	; 0x01
    1810:	20 83       	st	Z, r18
    1812:	ce 01       	movw	r24, r28
    1814:	8c 55       	subi	r24, 0x5C	; 92
    1816:	9f 4f       	sbci	r25, 0xFF	; 255
    1818:	fc 01       	movw	r30, r24
    181a:	80 81       	ld	r24, Z
    181c:	91 81       	ldd	r25, Z+1	; 0x01
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <main+0xec8>
    1822:	9e 01       	movw	r18, r28
    1824:	2c 55       	subi	r18, 0x5C	; 92
    1826:	3f 4f       	sbci	r19, 0xFF	; 255
    1828:	f9 01       	movw	r30, r18
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182e:	ce 01       	movw	r24, r28
    1830:	8e 55       	subi	r24, 0x5E	; 94
    1832:	9f 4f       	sbci	r25, 0xFF	; 255
    1834:	9e 01       	movw	r18, r28
    1836:	2e 55       	subi	r18, 0x5E	; 94
    1838:	3f 4f       	sbci	r19, 0xFF	; 255
    183a:	f9 01       	movw	r30, r18
    183c:	20 81       	ld	r18, Z
    183e:	31 81       	ldd	r19, Z+1	; 0x01
    1840:	21 50       	subi	r18, 0x01	; 1
    1842:	31 09       	sbc	r19, r1
    1844:	fc 01       	movw	r30, r24
    1846:	31 83       	std	Z+1, r19	; 0x01
    1848:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184a:	ce 01       	movw	r24, r28
    184c:	8e 55       	subi	r24, 0x5E	; 94
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	fc 01       	movw	r30, r24
    1852:	80 81       	ld	r24, Z
    1854:	91 81       	ldd	r25, Z+1	; 0x01
    1856:	89 2b       	or	r24, r25
    1858:	a1 f6       	brne	.-88     	; 0x1802 <main+0xeac>
    185a:	2c c0       	rjmp	.+88     	; 0x18b4 <main+0xf5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185c:	8e 01       	movw	r16, r28
    185e:	0e 55       	subi	r16, 0x5E	; 94
    1860:	1f 4f       	sbci	r17, 0xFF	; 255
    1862:	ce 01       	movw	r24, r28
    1864:	82 56       	subi	r24, 0x62	; 98
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	fc 01       	movw	r30, r24
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	82 81       	ldd	r24, Z+2	; 0x02
    1870:	93 81       	ldd	r25, Z+3	; 0x03
    1872:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	f8 01       	movw	r30, r16
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	80 83       	st	Z, r24
    1880:	ce 01       	movw	r24, r28
    1882:	8a 55       	subi	r24, 0x5A	; 90
    1884:	9f 4f       	sbci	r25, 0xFF	; 255
    1886:	9e 01       	movw	r18, r28
    1888:	2e 55       	subi	r18, 0x5E	; 94
    188a:	3f 4f       	sbci	r19, 0xFF	; 255
    188c:	f9 01       	movw	r30, r18
    188e:	20 81       	ld	r18, Z
    1890:	31 81       	ldd	r19, Z+1	; 0x01
    1892:	fc 01       	movw	r30, r24
    1894:	31 83       	std	Z+1, r19	; 0x01
    1896:	20 83       	st	Z, r18
    1898:	ce 01       	movw	r24, r28
    189a:	8a 55       	subi	r24, 0x5A	; 90
    189c:	9f 4f       	sbci	r25, 0xFF	; 255
    189e:	fc 01       	movw	r30, r24
    18a0:	80 81       	ld	r24, Z
    18a2:	91 81       	ldd	r25, Z+1	; 0x01
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	f1 f7       	brne	.-4      	; 0x18a4 <main+0xf4e>
    18a8:	9e 01       	movw	r18, r28
    18aa:	2a 55       	subi	r18, 0x5A	; 90
    18ac:	3f 4f       	sbci	r19, 0xFF	; 255
    18ae:	f9 01       	movw	r30, r18
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	80 83       	st	Z, r24
			_delay_ms(50);
		}
			if(key == 6)
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	86 30       	cpi	r24, 0x06	; 6
    18b8:	09 f0       	breq	.+2      	; 0x18bc <main+0xf66>
    18ba:	7f c1       	rjmp	.+766    	; 0x1bba <main+0x1264>
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a8 e4       	ldi	r26, 0x48	; 72
    18c2:	b2 e4       	ldi	r27, 0x42	; 66
    18c4:	8e a7       	std	Y+46, r24	; 0x2e
    18c6:	9f a7       	std	Y+47, r25	; 0x2f
    18c8:	a8 ab       	std	Y+48, r26	; 0x30
    18ca:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18cc:	8e 01       	movw	r16, r28
    18ce:	04 54       	subi	r16, 0x44	; 68
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	4a e7       	ldi	r20, 0x7A	; 122
    18d8:	53 e4       	ldi	r21, 0x43	; 67
    18da:	6e a5       	ldd	r22, Y+46	; 0x2e
    18dc:	7f a5       	ldd	r23, Y+47	; 0x2f
    18de:	88 a9       	ldd	r24, Y+48	; 0x30
    18e0:	99 a9       	ldd	r25, Y+49	; 0x31
    18e2:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	f8 01       	movw	r30, r16
    18ec:	80 83       	st	Z, r24
    18ee:	91 83       	std	Z+1, r25	; 0x01
    18f0:	a2 83       	std	Z+2, r26	; 0x02
    18f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18f4:	ce 01       	movw	r24, r28
    18f6:	84 54       	subi	r24, 0x44	; 68
    18f8:	9f 4f       	sbci	r25, 0xFF	; 255
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	fc 01       	movw	r30, r24
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
    1910:	88 23       	and	r24, r24
    1912:	4c f4       	brge	.+18     	; 0x1926 <main+0xfd0>
		__ticks = 1;
    1914:	ce 01       	movw	r24, r28
    1916:	80 54       	subi	r24, 0x40	; 64
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	21 e0       	ldi	r18, 0x01	; 1
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	fc 01       	movw	r30, r24
    1920:	31 83       	std	Z+1, r19	; 0x01
    1922:	20 83       	st	Z, r18
    1924:	69 c0       	rjmp	.+210    	; 0x19f8 <main+0x10a2>
	else if (__tmp > 65535)
    1926:	ce 01       	movw	r24, r28
    1928:	84 54       	subi	r24, 0x44	; 68
    192a:	9f 4f       	sbci	r25, 0xFF	; 255
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	3f ef       	ldi	r19, 0xFF	; 255
    1930:	4f e7       	ldi	r20, 0x7F	; 127
    1932:	57 e4       	ldi	r21, 0x47	; 71
    1934:	fc 01       	movw	r30, r24
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
    1942:	18 16       	cp	r1, r24
    1944:	0c f0       	brlt	.+2      	; 0x1948 <main+0xff2>
    1946:	46 c0       	rjmp	.+140    	; 0x19d4 <main+0x107e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e2       	ldi	r20, 0x20	; 32
    194e:	51 e4       	ldi	r21, 0x41	; 65
    1950:	6e a5       	ldd	r22, Y+46	; 0x2e
    1952:	7f a5       	ldd	r23, Y+47	; 0x2f
    1954:	88 a9       	ldd	r24, Y+48	; 0x30
    1956:	99 a9       	ldd	r25, Y+49	; 0x31
    1958:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	8e 01       	movw	r16, r28
    1962:	00 54       	subi	r16, 0x40	; 64
    1964:	1f 4f       	sbci	r17, 0xFF	; 255
    1966:	bc 01       	movw	r22, r24
    1968:	cd 01       	movw	r24, r26
    196a:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	f8 01       	movw	r30, r16
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
    1978:	24 c0       	rjmp	.+72     	; 0x19c2 <main+0x106c>
    197a:	ce 01       	movw	r24, r28
    197c:	8e 53       	subi	r24, 0x3E	; 62
    197e:	9f 4f       	sbci	r25, 0xFF	; 255
    1980:	29 e1       	ldi	r18, 0x19	; 25
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	fc 01       	movw	r30, r24
    1986:	31 83       	std	Z+1, r19	; 0x01
    1988:	20 83       	st	Z, r18
    198a:	ce 01       	movw	r24, r28
    198c:	8e 53       	subi	r24, 0x3E	; 62
    198e:	9f 4f       	sbci	r25, 0xFF	; 255
    1990:	fc 01       	movw	r30, r24
    1992:	80 81       	ld	r24, Z
    1994:	91 81       	ldd	r25, Z+1	; 0x01
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <main+0x1040>
    199a:	9e 01       	movw	r18, r28
    199c:	2e 53       	subi	r18, 0x3E	; 62
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	f9 01       	movw	r30, r18
    19a2:	91 83       	std	Z+1, r25	; 0x01
    19a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a6:	ce 01       	movw	r24, r28
    19a8:	80 54       	subi	r24, 0x40	; 64
    19aa:	9f 4f       	sbci	r25, 0xFF	; 255
    19ac:	9e 01       	movw	r18, r28
    19ae:	20 54       	subi	r18, 0x40	; 64
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	f9 01       	movw	r30, r18
    19b4:	20 81       	ld	r18, Z
    19b6:	31 81       	ldd	r19, Z+1	; 0x01
    19b8:	21 50       	subi	r18, 0x01	; 1
    19ba:	31 09       	sbc	r19, r1
    19bc:	fc 01       	movw	r30, r24
    19be:	31 83       	std	Z+1, r19	; 0x01
    19c0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c2:	ce 01       	movw	r24, r28
    19c4:	80 54       	subi	r24, 0x40	; 64
    19c6:	9f 4f       	sbci	r25, 0xFF	; 255
    19c8:	fc 01       	movw	r30, r24
    19ca:	80 81       	ld	r24, Z
    19cc:	91 81       	ldd	r25, Z+1	; 0x01
    19ce:	89 2b       	or	r24, r25
    19d0:	a1 f6       	brne	.-88     	; 0x197a <main+0x1024>
    19d2:	2c c0       	rjmp	.+88     	; 0x1a2c <main+0x10d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d4:	8e 01       	movw	r16, r28
    19d6:	00 54       	subi	r16, 0x40	; 64
    19d8:	1f 4f       	sbci	r17, 0xFF	; 255
    19da:	ce 01       	movw	r24, r28
    19dc:	84 54       	subi	r24, 0x44	; 68
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	fc 01       	movw	r30, r24
    19e2:	60 81       	ld	r22, Z
    19e4:	71 81       	ldd	r23, Z+1	; 0x01
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	f8 01       	movw	r30, r16
    19f4:	91 83       	std	Z+1, r25	; 0x01
    19f6:	80 83       	st	Z, r24
    19f8:	ce 01       	movw	r24, r28
    19fa:	8c 53       	subi	r24, 0x3C	; 60
    19fc:	9f 4f       	sbci	r25, 0xFF	; 255
    19fe:	9e 01       	movw	r18, r28
    1a00:	20 54       	subi	r18, 0x40	; 64
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	f9 01       	movw	r30, r18
    1a06:	20 81       	ld	r18, Z
    1a08:	31 81       	ldd	r19, Z+1	; 0x01
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	31 83       	std	Z+1, r19	; 0x01
    1a0e:	20 83       	st	Z, r18
    1a10:	ce 01       	movw	r24, r28
    1a12:	8c 53       	subi	r24, 0x3C	; 60
    1a14:	9f 4f       	sbci	r25, 0xFF	; 255
    1a16:	fc 01       	movw	r30, r24
    1a18:	80 81       	ld	r24, Z
    1a1a:	91 81       	ldd	r25, Z+1	; 0x01
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <main+0x10c6>
    1a20:	9e 01       	movw	r18, r28
    1a22:	2c 53       	subi	r18, 0x3C	; 60
    1a24:	3f 4f       	sbci	r19, 0xFF	; 255
    1a26:	f9 01       	movw	r30, r18
    1a28:	91 83       	std	Z+1, r25	; 0x01
    1a2a:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(TWO);
    1a2c:	82 e0       	ldi	r24, 0x02	; 2
    1a2e:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_disable(ONE);
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
				BCDSevegments_disable(THREE);
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
				BCDSevegments_disable(FOUR);
    1a3e:	84 e0       	ldi	r24, 0x04	; 4
    1a40:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
				BCDSevegments_displayNo(SIX);
    1a44:	86 e0       	ldi	r24, 0x06	; 6
    1a46:	0e 94 bc 00 	call	0x178	; 0x178 <BCDSevegments_displayNo>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	a8 e4       	ldi	r26, 0x48	; 72
    1a50:	b2 e4       	ldi	r27, 0x42	; 66
    1a52:	8a a3       	std	Y+34, r24	; 0x22
    1a54:	9b a3       	std	Y+35, r25	; 0x23
    1a56:	ac a3       	std	Y+36, r26	; 0x24
    1a58:	bd a3       	std	Y+37, r27	; 0x25

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a5a:	8e 01       	movw	r16, r28
    1a5c:	0e 54       	subi	r16, 0x4E	; 78
    1a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	4a e7       	ldi	r20, 0x7A	; 122
    1a66:	53 e4       	ldi	r21, 0x43	; 67
    1a68:	6a a1       	ldd	r22, Y+34	; 0x22
    1a6a:	7b a1       	ldd	r23, Y+35	; 0x23
    1a6c:	8c a1       	ldd	r24, Y+36	; 0x24
    1a6e:	9d a1       	ldd	r25, Y+37	; 0x25
    1a70:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	f8 01       	movw	r30, r16
    1a7a:	80 83       	st	Z, r24
    1a7c:	91 83       	std	Z+1, r25	; 0x01
    1a7e:	a2 83       	std	Z+2, r26	; 0x02
    1a80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a82:	ce 01       	movw	r24, r28
    1a84:	8e 54       	subi	r24, 0x4E	; 78
    1a86:	9f 4f       	sbci	r25, 0xFF	; 255
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e8       	ldi	r20, 0x80	; 128
    1a8e:	5f e3       	ldi	r21, 0x3F	; 63
    1a90:	fc 01       	movw	r30, r24
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
    1a9e:	88 23       	and	r24, r24
    1aa0:	4c f4       	brge	.+18     	; 0x1ab4 <main+0x115e>
		__ticks = 1;
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	8a 54       	subi	r24, 0x4A	; 74
    1aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa8:	21 e0       	ldi	r18, 0x01	; 1
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	fc 01       	movw	r30, r24
    1aae:	31 83       	std	Z+1, r19	; 0x01
    1ab0:	20 83       	st	Z, r18
    1ab2:	69 c0       	rjmp	.+210    	; 0x1b86 <main+0x1230>
	else if (__tmp > 65535)
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	8e 54       	subi	r24, 0x4E	; 78
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	3f ef       	ldi	r19, 0xFF	; 255
    1abe:	4f e7       	ldi	r20, 0x7F	; 127
    1ac0:	57 e4       	ldi	r21, 0x47	; 71
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	60 81       	ld	r22, Z
    1ac6:	71 81       	ldd	r23, Z+1	; 0x01
    1ac8:	82 81       	ldd	r24, Z+2	; 0x02
    1aca:	93 81       	ldd	r25, Z+3	; 0x03
    1acc:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
    1ad0:	18 16       	cp	r1, r24
    1ad2:	0c f0       	brlt	.+2      	; 0x1ad6 <main+0x1180>
    1ad4:	46 c0       	rjmp	.+140    	; 0x1b62 <main+0x120c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e2       	ldi	r20, 0x20	; 32
    1adc:	51 e4       	ldi	r21, 0x41	; 65
    1ade:	6a a1       	ldd	r22, Y+34	; 0x22
    1ae0:	7b a1       	ldd	r23, Y+35	; 0x23
    1ae2:	8c a1       	ldd	r24, Y+36	; 0x24
    1ae4:	9d a1       	ldd	r25, Y+37	; 0x25
    1ae6:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	8e 01       	movw	r16, r28
    1af0:	0a 54       	subi	r16, 0x4A	; 74
    1af2:	1f 4f       	sbci	r17, 0xFF	; 255
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	f8 01       	movw	r30, r16
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24
    1b06:	24 c0       	rjmp	.+72     	; 0x1b50 <main+0x11fa>
    1b08:	ce 01       	movw	r24, r28
    1b0a:	88 54       	subi	r24, 0x48	; 72
    1b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0e:	29 e1       	ldi	r18, 0x19	; 25
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	fc 01       	movw	r30, r24
    1b14:	31 83       	std	Z+1, r19	; 0x01
    1b16:	20 83       	st	Z, r18
    1b18:	ce 01       	movw	r24, r28
    1b1a:	88 54       	subi	r24, 0x48	; 72
    1b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1e:	fc 01       	movw	r30, r24
    1b20:	80 81       	ld	r24, Z
    1b22:	91 81       	ldd	r25, Z+1	; 0x01
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <main+0x11ce>
    1b28:	9e 01       	movw	r18, r28
    1b2a:	28 54       	subi	r18, 0x48	; 72
    1b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2e:	f9 01       	movw	r30, r18
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b34:	ce 01       	movw	r24, r28
    1b36:	8a 54       	subi	r24, 0x4A	; 74
    1b38:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3a:	9e 01       	movw	r18, r28
    1b3c:	2a 54       	subi	r18, 0x4A	; 74
    1b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b40:	f9 01       	movw	r30, r18
    1b42:	20 81       	ld	r18, Z
    1b44:	31 81       	ldd	r19, Z+1	; 0x01
    1b46:	21 50       	subi	r18, 0x01	; 1
    1b48:	31 09       	sbc	r19, r1
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	31 83       	std	Z+1, r19	; 0x01
    1b4e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b50:	ce 01       	movw	r24, r28
    1b52:	8a 54       	subi	r24, 0x4A	; 74
    1b54:	9f 4f       	sbci	r25, 0xFF	; 255
    1b56:	fc 01       	movw	r30, r24
    1b58:	80 81       	ld	r24, Z
    1b5a:	91 81       	ldd	r25, Z+1	; 0x01
    1b5c:	89 2b       	or	r24, r25
    1b5e:	a1 f6       	brne	.-88     	; 0x1b08 <main+0x11b2>
    1b60:	2c c0       	rjmp	.+88     	; 0x1bba <main+0x1264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b62:	8e 01       	movw	r16, r28
    1b64:	0a 54       	subi	r16, 0x4A	; 74
    1b66:	1f 4f       	sbci	r17, 0xFF	; 255
    1b68:	ce 01       	movw	r24, r28
    1b6a:	8e 54       	subi	r24, 0x4E	; 78
    1b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6e:	fc 01       	movw	r30, r24
    1b70:	60 81       	ld	r22, Z
    1b72:	71 81       	ldd	r23, Z+1	; 0x01
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	f8 01       	movw	r30, r16
    1b82:	91 83       	std	Z+1, r25	; 0x01
    1b84:	80 83       	st	Z, r24
    1b86:	ce 01       	movw	r24, r28
    1b88:	86 54       	subi	r24, 0x46	; 70
    1b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8c:	9e 01       	movw	r18, r28
    1b8e:	2a 54       	subi	r18, 0x4A	; 74
    1b90:	3f 4f       	sbci	r19, 0xFF	; 255
    1b92:	f9 01       	movw	r30, r18
    1b94:	20 81       	ld	r18, Z
    1b96:	31 81       	ldd	r19, Z+1	; 0x01
    1b98:	fc 01       	movw	r30, r24
    1b9a:	31 83       	std	Z+1, r19	; 0x01
    1b9c:	20 83       	st	Z, r18
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	86 54       	subi	r24, 0x46	; 70
    1ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <main+0x1254>
    1bae:	9e 01       	movw	r18, r28
    1bb0:	26 54       	subi	r18, 0x46	; 70
    1bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb4:	f9 01       	movw	r30, r18
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	80 83       	st	Z, r24
				_delay_ms(50);
			}
			if(key == 7)
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	87 30       	cpi	r24, 0x07	; 7
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <main+0x126c>
    1bc0:	7f c1       	rjmp	.+766    	; 0x1ec0 <main+0x156a>
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	a8 e4       	ldi	r26, 0x48	; 72
    1bc8:	b2 e4       	ldi	r27, 0x42	; 66
    1bca:	8e ab       	std	Y+54, r24	; 0x36
    1bcc:	9f ab       	std	Y+55, r25	; 0x37
    1bce:	a8 af       	std	Y+56, r26	; 0x38
    1bd0:	b9 af       	std	Y+57, r27	; 0x39

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bd2:	8e 01       	movw	r16, r28
    1bd4:	00 53       	subi	r16, 0x30	; 48
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	4a e7       	ldi	r20, 0x7A	; 122
    1bde:	53 e4       	ldi	r21, 0x43	; 67
    1be0:	6e a9       	ldd	r22, Y+54	; 0x36
    1be2:	7f a9       	ldd	r23, Y+55	; 0x37
    1be4:	88 ad       	ldd	r24, Y+56	; 0x38
    1be6:	99 ad       	ldd	r25, Y+57	; 0x39
    1be8:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	f8 01       	movw	r30, r16
    1bf2:	80 83       	st	Z, r24
    1bf4:	91 83       	std	Z+1, r25	; 0x01
    1bf6:	a2 83       	std	Z+2, r26	; 0x02
    1bf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	80 53       	subi	r24, 0x30	; 48
    1bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e8       	ldi	r20, 0x80	; 128
    1c06:	5f e3       	ldi	r21, 0x3F	; 63
    1c08:	fc 01       	movw	r30, r24
    1c0a:	60 81       	ld	r22, Z
    1c0c:	71 81       	ldd	r23, Z+1	; 0x01
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	93 81       	ldd	r25, Z+3	; 0x03
    1c12:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
    1c16:	88 23       	and	r24, r24
    1c18:	4c f4       	brge	.+18     	; 0x1c2c <main+0x12d6>
		__ticks = 1;
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	8c 52       	subi	r24, 0x2C	; 44
    1c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c20:	21 e0       	ldi	r18, 0x01	; 1
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	fc 01       	movw	r30, r24
    1c26:	31 83       	std	Z+1, r19	; 0x01
    1c28:	20 83       	st	Z, r18
    1c2a:	69 c0       	rjmp	.+210    	; 0x1cfe <main+0x13a8>
	else if (__tmp > 65535)
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	80 53       	subi	r24, 0x30	; 48
    1c30:	9f 4f       	sbci	r25, 0xFF	; 255
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	3f ef       	ldi	r19, 0xFF	; 255
    1c36:	4f e7       	ldi	r20, 0x7F	; 127
    1c38:	57 e4       	ldi	r21, 0x47	; 71
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	60 81       	ld	r22, Z
    1c3e:	71 81       	ldd	r23, Z+1	; 0x01
    1c40:	82 81       	ldd	r24, Z+2	; 0x02
    1c42:	93 81       	ldd	r25, Z+3	; 0x03
    1c44:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	0c f0       	brlt	.+2      	; 0x1c4e <main+0x12f8>
    1c4c:	46 c0       	rjmp	.+140    	; 0x1cda <main+0x1384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e2       	ldi	r20, 0x20	; 32
    1c54:	51 e4       	ldi	r21, 0x41	; 65
    1c56:	6e a9       	ldd	r22, Y+54	; 0x36
    1c58:	7f a9       	ldd	r23, Y+55	; 0x37
    1c5a:	88 ad       	ldd	r24, Y+56	; 0x38
    1c5c:	99 ad       	ldd	r25, Y+57	; 0x39
    1c5e:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	8e 01       	movw	r16, r28
    1c68:	0c 52       	subi	r16, 0x2C	; 44
    1c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	f8 01       	movw	r30, r16
    1c7a:	91 83       	std	Z+1, r25	; 0x01
    1c7c:	80 83       	st	Z, r24
    1c7e:	24 c0       	rjmp	.+72     	; 0x1cc8 <main+0x1372>
    1c80:	ce 01       	movw	r24, r28
    1c82:	8a 52       	subi	r24, 0x2A	; 42
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	29 e1       	ldi	r18, 0x19	; 25
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	31 83       	std	Z+1, r19	; 0x01
    1c8e:	20 83       	st	Z, r18
    1c90:	ce 01       	movw	r24, r28
    1c92:	8a 52       	subi	r24, 0x2A	; 42
    1c94:	9f 4f       	sbci	r25, 0xFF	; 255
    1c96:	fc 01       	movw	r30, r24
    1c98:	80 81       	ld	r24, Z
    1c9a:	91 81       	ldd	r25, Z+1	; 0x01
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <main+0x1346>
    1ca0:	9e 01       	movw	r18, r28
    1ca2:	2a 52       	subi	r18, 0x2A	; 42
    1ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca6:	f9 01       	movw	r30, r18
    1ca8:	91 83       	std	Z+1, r25	; 0x01
    1caa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cac:	ce 01       	movw	r24, r28
    1cae:	8c 52       	subi	r24, 0x2C	; 44
    1cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb2:	9e 01       	movw	r18, r28
    1cb4:	2c 52       	subi	r18, 0x2C	; 44
    1cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb8:	f9 01       	movw	r30, r18
    1cba:	20 81       	ld	r18, Z
    1cbc:	31 81       	ldd	r19, Z+1	; 0x01
    1cbe:	21 50       	subi	r18, 0x01	; 1
    1cc0:	31 09       	sbc	r19, r1
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	31 83       	std	Z+1, r19	; 0x01
    1cc6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc8:	ce 01       	movw	r24, r28
    1cca:	8c 52       	subi	r24, 0x2C	; 44
    1ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cce:	fc 01       	movw	r30, r24
    1cd0:	80 81       	ld	r24, Z
    1cd2:	91 81       	ldd	r25, Z+1	; 0x01
    1cd4:	89 2b       	or	r24, r25
    1cd6:	a1 f6       	brne	.-88     	; 0x1c80 <main+0x132a>
    1cd8:	2c c0       	rjmp	.+88     	; 0x1d32 <main+0x13dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cda:	8e 01       	movw	r16, r28
    1cdc:	0c 52       	subi	r16, 0x2C	; 44
    1cde:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	80 53       	subi	r24, 0x30	; 48
    1ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	60 81       	ld	r22, Z
    1cea:	71 81       	ldd	r23, Z+1	; 0x01
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	80 83       	st	Z, r24
    1cfe:	ce 01       	movw	r24, r28
    1d00:	88 52       	subi	r24, 0x28	; 40
    1d02:	9f 4f       	sbci	r25, 0xFF	; 255
    1d04:	9e 01       	movw	r18, r28
    1d06:	2c 52       	subi	r18, 0x2C	; 44
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	f9 01       	movw	r30, r18
    1d0c:	20 81       	ld	r18, Z
    1d0e:	31 81       	ldd	r19, Z+1	; 0x01
    1d10:	fc 01       	movw	r30, r24
    1d12:	31 83       	std	Z+1, r19	; 0x01
    1d14:	20 83       	st	Z, r18
    1d16:	ce 01       	movw	r24, r28
    1d18:	88 52       	subi	r24, 0x28	; 40
    1d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <main+0x13cc>
    1d26:	9e 01       	movw	r18, r28
    1d28:	28 52       	subi	r18, 0x28	; 40
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	f9 01       	movw	r30, r18
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(TWO);
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_disable(ONE);
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
				BCDSevegments_disable(THREE);
    1d3e:	83 e0       	ldi	r24, 0x03	; 3
    1d40:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
				BCDSevegments_disable(FOUR);
    1d44:	84 e0       	ldi	r24, 0x04	; 4
    1d46:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
				BCDSevegments_displayNo(SEVEN);
    1d4a:	87 e0       	ldi	r24, 0x07	; 7
    1d4c:	0e 94 bc 00 	call	0x178	; 0x178 <BCDSevegments_displayNo>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	a8 e4       	ldi	r26, 0x48	; 72
    1d56:	b2 e4       	ldi	r27, 0x42	; 66
    1d58:	8a a7       	std	Y+42, r24	; 0x2a
    1d5a:	9b a7       	std	Y+43, r25	; 0x2b
    1d5c:	ac a7       	std	Y+44, r26	; 0x2c
    1d5e:	bd a7       	std	Y+45, r27	; 0x2d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d60:	8e 01       	movw	r16, r28
    1d62:	0a 53       	subi	r16, 0x3A	; 58
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	4a e7       	ldi	r20, 0x7A	; 122
    1d6c:	53 e4       	ldi	r21, 0x43	; 67
    1d6e:	6a a5       	ldd	r22, Y+42	; 0x2a
    1d70:	7b a5       	ldd	r23, Y+43	; 0x2b
    1d72:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d74:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d76:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	f8 01       	movw	r30, r16
    1d80:	80 83       	st	Z, r24
    1d82:	91 83       	std	Z+1, r25	; 0x01
    1d84:	a2 83       	std	Z+2, r26	; 0x02
    1d86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d88:	ce 01       	movw	r24, r28
    1d8a:	8a 53       	subi	r24, 0x3A	; 58
    1d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e8       	ldi	r20, 0x80	; 128
    1d94:	5f e3       	ldi	r21, 0x3F	; 63
    1d96:	fc 01       	movw	r30, r24
    1d98:	60 81       	ld	r22, Z
    1d9a:	71 81       	ldd	r23, Z+1	; 0x01
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
    1da4:	88 23       	and	r24, r24
    1da6:	4c f4       	brge	.+18     	; 0x1dba <main+0x1464>
		__ticks = 1;
    1da8:	ce 01       	movw	r24, r28
    1daa:	86 53       	subi	r24, 0x36	; 54
    1dac:	9f 4f       	sbci	r25, 0xFF	; 255
    1dae:	21 e0       	ldi	r18, 0x01	; 1
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	fc 01       	movw	r30, r24
    1db4:	31 83       	std	Z+1, r19	; 0x01
    1db6:	20 83       	st	Z, r18
    1db8:	69 c0       	rjmp	.+210    	; 0x1e8c <main+0x1536>
	else if (__tmp > 65535)
    1dba:	ce 01       	movw	r24, r28
    1dbc:	8a 53       	subi	r24, 0x3A	; 58
    1dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	3f ef       	ldi	r19, 0xFF	; 255
    1dc4:	4f e7       	ldi	r20, 0x7F	; 127
    1dc6:	57 e4       	ldi	r21, 0x47	; 71
    1dc8:	fc 01       	movw	r30, r24
    1dca:	60 81       	ld	r22, Z
    1dcc:	71 81       	ldd	r23, Z+1	; 0x01
    1dce:	82 81       	ldd	r24, Z+2	; 0x02
    1dd0:	93 81       	ldd	r25, Z+3	; 0x03
    1dd2:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
    1dd6:	18 16       	cp	r1, r24
    1dd8:	0c f0       	brlt	.+2      	; 0x1ddc <main+0x1486>
    1dda:	46 c0       	rjmp	.+140    	; 0x1e68 <main+0x1512>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	51 e4       	ldi	r21, 0x41	; 65
    1de4:	6a a5       	ldd	r22, Y+42	; 0x2a
    1de6:	7b a5       	ldd	r23, Y+43	; 0x2b
    1de8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1dea:	9d a5       	ldd	r25, Y+45	; 0x2d
    1dec:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	8e 01       	movw	r16, r28
    1df6:	06 53       	subi	r16, 0x36	; 54
    1df8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	f8 01       	movw	r30, r16
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	80 83       	st	Z, r24
    1e0c:	24 c0       	rjmp	.+72     	; 0x1e56 <main+0x1500>
    1e0e:	ce 01       	movw	r24, r28
    1e10:	84 53       	subi	r24, 0x34	; 52
    1e12:	9f 4f       	sbci	r25, 0xFF	; 255
    1e14:	29 e1       	ldi	r18, 0x19	; 25
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	fc 01       	movw	r30, r24
    1e1a:	31 83       	std	Z+1, r19	; 0x01
    1e1c:	20 83       	st	Z, r18
    1e1e:	ce 01       	movw	r24, r28
    1e20:	84 53       	subi	r24, 0x34	; 52
    1e22:	9f 4f       	sbci	r25, 0xFF	; 255
    1e24:	fc 01       	movw	r30, r24
    1e26:	80 81       	ld	r24, Z
    1e28:	91 81       	ldd	r25, Z+1	; 0x01
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <main+0x14d4>
    1e2e:	9e 01       	movw	r18, r28
    1e30:	24 53       	subi	r18, 0x34	; 52
    1e32:	3f 4f       	sbci	r19, 0xFF	; 255
    1e34:	f9 01       	movw	r30, r18
    1e36:	91 83       	std	Z+1, r25	; 0x01
    1e38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	86 53       	subi	r24, 0x36	; 54
    1e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e40:	9e 01       	movw	r18, r28
    1e42:	26 53       	subi	r18, 0x36	; 54
    1e44:	3f 4f       	sbci	r19, 0xFF	; 255
    1e46:	f9 01       	movw	r30, r18
    1e48:	20 81       	ld	r18, Z
    1e4a:	31 81       	ldd	r19, Z+1	; 0x01
    1e4c:	21 50       	subi	r18, 0x01	; 1
    1e4e:	31 09       	sbc	r19, r1
    1e50:	fc 01       	movw	r30, r24
    1e52:	31 83       	std	Z+1, r19	; 0x01
    1e54:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e56:	ce 01       	movw	r24, r28
    1e58:	86 53       	subi	r24, 0x36	; 54
    1e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	80 81       	ld	r24, Z
    1e60:	91 81       	ldd	r25, Z+1	; 0x01
    1e62:	89 2b       	or	r24, r25
    1e64:	a1 f6       	brne	.-88     	; 0x1e0e <main+0x14b8>
    1e66:	2c c0       	rjmp	.+88     	; 0x1ec0 <main+0x156a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e68:	8e 01       	movw	r16, r28
    1e6a:	06 53       	subi	r16, 0x36	; 54
    1e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6e:	ce 01       	movw	r24, r28
    1e70:	8a 53       	subi	r24, 0x3A	; 58
    1e72:	9f 4f       	sbci	r25, 0xFF	; 255
    1e74:	fc 01       	movw	r30, r24
    1e76:	60 81       	ld	r22, Z
    1e78:	71 81       	ldd	r23, Z+1	; 0x01
    1e7a:	82 81       	ldd	r24, Z+2	; 0x02
    1e7c:	93 81       	ldd	r25, Z+3	; 0x03
    1e7e:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	f8 01       	movw	r30, r16
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	80 83       	st	Z, r24
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	82 53       	subi	r24, 0x32	; 50
    1e90:	9f 4f       	sbci	r25, 0xFF	; 255
    1e92:	9e 01       	movw	r18, r28
    1e94:	26 53       	subi	r18, 0x36	; 54
    1e96:	3f 4f       	sbci	r19, 0xFF	; 255
    1e98:	f9 01       	movw	r30, r18
    1e9a:	20 81       	ld	r18, Z
    1e9c:	31 81       	ldd	r19, Z+1	; 0x01
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	31 83       	std	Z+1, r19	; 0x01
    1ea2:	20 83       	st	Z, r18
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	82 53       	subi	r24, 0x32	; 50
    1ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eaa:	fc 01       	movw	r30, r24
    1eac:	80 81       	ld	r24, Z
    1eae:	91 81       	ldd	r25, Z+1	; 0x01
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <main+0x155a>
    1eb4:	9e 01       	movw	r18, r28
    1eb6:	22 53       	subi	r18, 0x32	; 50
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eba:	f9 01       	movw	r30, r18
    1ebc:	91 83       	std	Z+1, r25	; 0x01
    1ebe:	80 83       	st	Z, r24
				_delay_ms(50);
			}
			if(key == 8)
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	88 30       	cpi	r24, 0x08	; 8
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <main+0x1572>
    1ec6:	89 c1       	rjmp	.+786    	; 0x21da <main+0x1884>
    1ec8:	9e 01       	movw	r18, r28
    1eca:	22 5c       	subi	r18, 0xC2	; 194
    1ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	a8 e4       	ldi	r26, 0x48	; 72
    1ed4:	b2 e4       	ldi	r27, 0x42	; 66
    1ed6:	f9 01       	movw	r30, r18
    1ed8:	80 83       	st	Z, r24
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	a2 83       	std	Z+2, r26	; 0x02
    1ede:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ee0:	8e 01       	movw	r16, r28
    1ee2:	0c 51       	subi	r16, 0x1C	; 28
    1ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	ce 96       	adiw	r24, 0x3e	; 62
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	4a e7       	ldi	r20, 0x7A	; 122
    1ef0:	53 e4       	ldi	r21, 0x43	; 67
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	60 81       	ld	r22, Z
    1ef6:	71 81       	ldd	r23, Z+1	; 0x01
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	f8 01       	movw	r30, r16
    1f06:	80 83       	st	Z, r24
    1f08:	91 83       	std	Z+1, r25	; 0x01
    1f0a:	a2 83       	std	Z+2, r26	; 0x02
    1f0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f0e:	ce 01       	movw	r24, r28
    1f10:	8c 51       	subi	r24, 0x1C	; 28
    1f12:	9f 4f       	sbci	r25, 0xFF	; 255
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e8       	ldi	r20, 0x80	; 128
    1f1a:	5f e3       	ldi	r21, 0x3F	; 63
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	60 81       	ld	r22, Z
    1f20:	71 81       	ldd	r23, Z+1	; 0x01
    1f22:	82 81       	ldd	r24, Z+2	; 0x02
    1f24:	93 81       	ldd	r25, Z+3	; 0x03
    1f26:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	4c f4       	brge	.+18     	; 0x1f40 <main+0x15ea>
		__ticks = 1;
    1f2e:	ce 01       	movw	r24, r28
    1f30:	88 51       	subi	r24, 0x18	; 24
    1f32:	9f 4f       	sbci	r25, 0xFF	; 255
    1f34:	21 e0       	ldi	r18, 0x01	; 1
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	fc 01       	movw	r30, r24
    1f3a:	31 83       	std	Z+1, r19	; 0x01
    1f3c:	20 83       	st	Z, r18
    1f3e:	6c c0       	rjmp	.+216    	; 0x2018 <main+0x16c2>
	else if (__tmp > 65535)
    1f40:	ce 01       	movw	r24, r28
    1f42:	8c 51       	subi	r24, 0x1C	; 28
    1f44:	9f 4f       	sbci	r25, 0xFF	; 255
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f e7       	ldi	r20, 0x7F	; 127
    1f4c:	57 e4       	ldi	r21, 0x47	; 71
    1f4e:	fc 01       	movw	r30, r24
    1f50:	60 81       	ld	r22, Z
    1f52:	71 81       	ldd	r23, Z+1	; 0x01
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
    1f5c:	18 16       	cp	r1, r24
    1f5e:	0c f0       	brlt	.+2      	; 0x1f62 <main+0x160c>
    1f60:	49 c0       	rjmp	.+146    	; 0x1ff4 <main+0x169e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f62:	ce 01       	movw	r24, r28
    1f64:	ce 96       	adiw	r24, 0x3e	; 62
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e2       	ldi	r20, 0x20	; 32
    1f6c:	51 e4       	ldi	r21, 0x41	; 65
    1f6e:	fc 01       	movw	r30, r24
    1f70:	60 81       	ld	r22, Z
    1f72:	71 81       	ldd	r23, Z+1	; 0x01
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	8e 01       	movw	r16, r28
    1f82:	08 51       	subi	r16, 0x18	; 24
    1f84:	1f 4f       	sbci	r17, 0xFF	; 255
    1f86:	bc 01       	movw	r22, r24
    1f88:	cd 01       	movw	r24, r26
    1f8a:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	f8 01       	movw	r30, r16
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	80 83       	st	Z, r24
    1f98:	24 c0       	rjmp	.+72     	; 0x1fe2 <main+0x168c>
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	86 51       	subi	r24, 0x16	; 22
    1f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa0:	29 e1       	ldi	r18, 0x19	; 25
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	31 83       	std	Z+1, r19	; 0x01
    1fa8:	20 83       	st	Z, r18
    1faa:	ce 01       	movw	r24, r28
    1fac:	86 51       	subi	r24, 0x16	; 22
    1fae:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	80 81       	ld	r24, Z
    1fb4:	91 81       	ldd	r25, Z+1	; 0x01
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <main+0x1660>
    1fba:	9e 01       	movw	r18, r28
    1fbc:	26 51       	subi	r18, 0x16	; 22
    1fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc0:	f9 01       	movw	r30, r18
    1fc2:	91 83       	std	Z+1, r25	; 0x01
    1fc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	88 51       	subi	r24, 0x18	; 24
    1fca:	9f 4f       	sbci	r25, 0xFF	; 255
    1fcc:	9e 01       	movw	r18, r28
    1fce:	28 51       	subi	r18, 0x18	; 24
    1fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd2:	f9 01       	movw	r30, r18
    1fd4:	20 81       	ld	r18, Z
    1fd6:	31 81       	ldd	r19, Z+1	; 0x01
    1fd8:	21 50       	subi	r18, 0x01	; 1
    1fda:	31 09       	sbc	r19, r1
    1fdc:	fc 01       	movw	r30, r24
    1fde:	31 83       	std	Z+1, r19	; 0x01
    1fe0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	88 51       	subi	r24, 0x18	; 24
    1fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe8:	fc 01       	movw	r30, r24
    1fea:	80 81       	ld	r24, Z
    1fec:	91 81       	ldd	r25, Z+1	; 0x01
    1fee:	89 2b       	or	r24, r25
    1ff0:	a1 f6       	brne	.-88     	; 0x1f9a <main+0x1644>
    1ff2:	2c c0       	rjmp	.+88     	; 0x204c <main+0x16f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff4:	8e 01       	movw	r16, r28
    1ff6:	08 51       	subi	r16, 0x18	; 24
    1ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	8c 51       	subi	r24, 0x1C	; 28
    1ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    2000:	fc 01       	movw	r30, r24
    2002:	60 81       	ld	r22, Z
    2004:	71 81       	ldd	r23, Z+1	; 0x01
    2006:	82 81       	ldd	r24, Z+2	; 0x02
    2008:	93 81       	ldd	r25, Z+3	; 0x03
    200a:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	f8 01       	movw	r30, r16
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	80 83       	st	Z, r24
    2018:	ce 01       	movw	r24, r28
    201a:	84 51       	subi	r24, 0x14	; 20
    201c:	9f 4f       	sbci	r25, 0xFF	; 255
    201e:	9e 01       	movw	r18, r28
    2020:	28 51       	subi	r18, 0x18	; 24
    2022:	3f 4f       	sbci	r19, 0xFF	; 255
    2024:	f9 01       	movw	r30, r18
    2026:	20 81       	ld	r18, Z
    2028:	31 81       	ldd	r19, Z+1	; 0x01
    202a:	fc 01       	movw	r30, r24
    202c:	31 83       	std	Z+1, r19	; 0x01
    202e:	20 83       	st	Z, r18
    2030:	ce 01       	movw	r24, r28
    2032:	84 51       	subi	r24, 0x14	; 20
    2034:	9f 4f       	sbci	r25, 0xFF	; 255
    2036:	fc 01       	movw	r30, r24
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <main+0x16e6>
    2040:	9e 01       	movw	r18, r28
    2042:	24 51       	subi	r18, 0x14	; 20
    2044:	3f 4f       	sbci	r19, 0xFF	; 255
    2046:	f9 01       	movw	r30, r18
    2048:	91 83       	std	Z+1, r25	; 0x01
    204a:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(TWO);
    204c:	82 e0       	ldi	r24, 0x02	; 2
    204e:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_disable(ONE);
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
				BCDSevegments_disable(THREE);
    2058:	83 e0       	ldi	r24, 0x03	; 3
    205a:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
				BCDSevegments_disable(FOUR);
    205e:	84 e0       	ldi	r24, 0x04	; 4
    2060:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
				BCDSevegments_displayNo(EIGHT);
    2064:	88 e0       	ldi	r24, 0x08	; 8
    2066:	0e 94 bc 00 	call	0x178	; 0x178 <BCDSevegments_displayNo>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a8 e4       	ldi	r26, 0x48	; 72
    2070:	b2 e4       	ldi	r27, 0x42	; 66
    2072:	8a ab       	std	Y+50, r24	; 0x32
    2074:	9b ab       	std	Y+51, r25	; 0x33
    2076:	ac ab       	std	Y+52, r26	; 0x34
    2078:	bd ab       	std	Y+53, r27	; 0x35

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    207a:	8e 01       	movw	r16, r28
    207c:	06 52       	subi	r16, 0x26	; 38
    207e:	1f 4f       	sbci	r17, 0xFF	; 255
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4a e7       	ldi	r20, 0x7A	; 122
    2086:	53 e4       	ldi	r21, 0x43	; 67
    2088:	6a a9       	ldd	r22, Y+50	; 0x32
    208a:	7b a9       	ldd	r23, Y+51	; 0x33
    208c:	8c a9       	ldd	r24, Y+52	; 0x34
    208e:	9d a9       	ldd	r25, Y+53	; 0x35
    2090:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	f8 01       	movw	r30, r16
    209a:	80 83       	st	Z, r24
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	a2 83       	std	Z+2, r26	; 0x02
    20a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20a2:	ce 01       	movw	r24, r28
    20a4:	86 52       	subi	r24, 0x26	; 38
    20a6:	9f 4f       	sbci	r25, 0xFF	; 255
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e8       	ldi	r20, 0x80	; 128
    20ae:	5f e3       	ldi	r21, 0x3F	; 63
    20b0:	fc 01       	movw	r30, r24
    20b2:	60 81       	ld	r22, Z
    20b4:	71 81       	ldd	r23, Z+1	; 0x01
    20b6:	82 81       	ldd	r24, Z+2	; 0x02
    20b8:	93 81       	ldd	r25, Z+3	; 0x03
    20ba:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
    20be:	88 23       	and	r24, r24
    20c0:	4c f4       	brge	.+18     	; 0x20d4 <main+0x177e>
		__ticks = 1;
    20c2:	ce 01       	movw	r24, r28
    20c4:	82 52       	subi	r24, 0x22	; 34
    20c6:	9f 4f       	sbci	r25, 0xFF	; 255
    20c8:	21 e0       	ldi	r18, 0x01	; 1
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	fc 01       	movw	r30, r24
    20ce:	31 83       	std	Z+1, r19	; 0x01
    20d0:	20 83       	st	Z, r18
    20d2:	69 c0       	rjmp	.+210    	; 0x21a6 <main+0x1850>
	else if (__tmp > 65535)
    20d4:	ce 01       	movw	r24, r28
    20d6:	86 52       	subi	r24, 0x26	; 38
    20d8:	9f 4f       	sbci	r25, 0xFF	; 255
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	3f ef       	ldi	r19, 0xFF	; 255
    20de:	4f e7       	ldi	r20, 0x7F	; 127
    20e0:	57 e4       	ldi	r21, 0x47	; 71
    20e2:	fc 01       	movw	r30, r24
    20e4:	60 81       	ld	r22, Z
    20e6:	71 81       	ldd	r23, Z+1	; 0x01
    20e8:	82 81       	ldd	r24, Z+2	; 0x02
    20ea:	93 81       	ldd	r25, Z+3	; 0x03
    20ec:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
    20f0:	18 16       	cp	r1, r24
    20f2:	0c f0       	brlt	.+2      	; 0x20f6 <main+0x17a0>
    20f4:	46 c0       	rjmp	.+140    	; 0x2182 <main+0x182c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e2       	ldi	r20, 0x20	; 32
    20fc:	51 e4       	ldi	r21, 0x41	; 65
    20fe:	6a a9       	ldd	r22, Y+50	; 0x32
    2100:	7b a9       	ldd	r23, Y+51	; 0x33
    2102:	8c a9       	ldd	r24, Y+52	; 0x34
    2104:	9d a9       	ldd	r25, Y+53	; 0x35
    2106:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	8e 01       	movw	r16, r28
    2110:	02 52       	subi	r16, 0x22	; 34
    2112:	1f 4f       	sbci	r17, 0xFF	; 255
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	f8 01       	movw	r30, r16
    2122:	91 83       	std	Z+1, r25	; 0x01
    2124:	80 83       	st	Z, r24
    2126:	24 c0       	rjmp	.+72     	; 0x2170 <main+0x181a>
    2128:	ce 01       	movw	r24, r28
    212a:	80 52       	subi	r24, 0x20	; 32
    212c:	9f 4f       	sbci	r25, 0xFF	; 255
    212e:	29 e1       	ldi	r18, 0x19	; 25
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	fc 01       	movw	r30, r24
    2134:	31 83       	std	Z+1, r19	; 0x01
    2136:	20 83       	st	Z, r18
    2138:	ce 01       	movw	r24, r28
    213a:	80 52       	subi	r24, 0x20	; 32
    213c:	9f 4f       	sbci	r25, 0xFF	; 255
    213e:	fc 01       	movw	r30, r24
    2140:	80 81       	ld	r24, Z
    2142:	91 81       	ldd	r25, Z+1	; 0x01
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <main+0x17ee>
    2148:	9e 01       	movw	r18, r28
    214a:	20 52       	subi	r18, 0x20	; 32
    214c:	3f 4f       	sbci	r19, 0xFF	; 255
    214e:	f9 01       	movw	r30, r18
    2150:	91 83       	std	Z+1, r25	; 0x01
    2152:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2154:	ce 01       	movw	r24, r28
    2156:	82 52       	subi	r24, 0x22	; 34
    2158:	9f 4f       	sbci	r25, 0xFF	; 255
    215a:	9e 01       	movw	r18, r28
    215c:	22 52       	subi	r18, 0x22	; 34
    215e:	3f 4f       	sbci	r19, 0xFF	; 255
    2160:	f9 01       	movw	r30, r18
    2162:	20 81       	ld	r18, Z
    2164:	31 81       	ldd	r19, Z+1	; 0x01
    2166:	21 50       	subi	r18, 0x01	; 1
    2168:	31 09       	sbc	r19, r1
    216a:	fc 01       	movw	r30, r24
    216c:	31 83       	std	Z+1, r19	; 0x01
    216e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	ce 01       	movw	r24, r28
    2172:	82 52       	subi	r24, 0x22	; 34
    2174:	9f 4f       	sbci	r25, 0xFF	; 255
    2176:	fc 01       	movw	r30, r24
    2178:	80 81       	ld	r24, Z
    217a:	91 81       	ldd	r25, Z+1	; 0x01
    217c:	89 2b       	or	r24, r25
    217e:	a1 f6       	brne	.-88     	; 0x2128 <main+0x17d2>
    2180:	2c c0       	rjmp	.+88     	; 0x21da <main+0x1884>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2182:	8e 01       	movw	r16, r28
    2184:	02 52       	subi	r16, 0x22	; 34
    2186:	1f 4f       	sbci	r17, 0xFF	; 255
    2188:	ce 01       	movw	r24, r28
    218a:	86 52       	subi	r24, 0x26	; 38
    218c:	9f 4f       	sbci	r25, 0xFF	; 255
    218e:	fc 01       	movw	r30, r24
    2190:	60 81       	ld	r22, Z
    2192:	71 81       	ldd	r23, Z+1	; 0x01
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	f8 01       	movw	r30, r16
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	80 83       	st	Z, r24
    21a6:	ce 01       	movw	r24, r28
    21a8:	8e 51       	subi	r24, 0x1E	; 30
    21aa:	9f 4f       	sbci	r25, 0xFF	; 255
    21ac:	9e 01       	movw	r18, r28
    21ae:	22 52       	subi	r18, 0x22	; 34
    21b0:	3f 4f       	sbci	r19, 0xFF	; 255
    21b2:	f9 01       	movw	r30, r18
    21b4:	20 81       	ld	r18, Z
    21b6:	31 81       	ldd	r19, Z+1	; 0x01
    21b8:	fc 01       	movw	r30, r24
    21ba:	31 83       	std	Z+1, r19	; 0x01
    21bc:	20 83       	st	Z, r18
    21be:	ce 01       	movw	r24, r28
    21c0:	8e 51       	subi	r24, 0x1E	; 30
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	fc 01       	movw	r30, r24
    21c6:	80 81       	ld	r24, Z
    21c8:	91 81       	ldd	r25, Z+1	; 0x01
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <main+0x1874>
    21ce:	9e 01       	movw	r18, r28
    21d0:	2e 51       	subi	r18, 0x1E	; 30
    21d2:	3f 4f       	sbci	r19, 0xFF	; 255
    21d4:	f9 01       	movw	r30, r18
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	80 83       	st	Z, r24
				_delay_ms(50);
			}
			if(key == 9)
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	89 30       	cpi	r24, 0x09	; 9
    21de:	09 f0       	breq	.+2      	; 0x21e2 <main+0x188c>
    21e0:	88 c1       	rjmp	.+784    	; 0x24f2 <main+0x1b9c>
    21e2:	9e 01       	movw	r18, r28
    21e4:	2a 5b       	subi	r18, 0xBA	; 186
    21e6:	3f 4f       	sbci	r19, 0xFF	; 255
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	a8 e4       	ldi	r26, 0x48	; 72
    21ee:	b2 e4       	ldi	r27, 0x42	; 66
    21f0:	f9 01       	movw	r30, r18
    21f2:	80 83       	st	Z, r24
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	a2 83       	std	Z+2, r26	; 0x02
    21f8:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    21fa:	8e 01       	movw	r16, r28
    21fc:	08 50       	subi	r16, 0x08	; 8
    21fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2200:	ce 01       	movw	r24, r28
    2202:	8a 5b       	subi	r24, 0xBA	; 186
    2204:	9f 4f       	sbci	r25, 0xFF	; 255
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	4a e7       	ldi	r20, 0x7A	; 122
    220c:	53 e4       	ldi	r21, 0x43	; 67
    220e:	fc 01       	movw	r30, r24
    2210:	60 81       	ld	r22, Z
    2212:	71 81       	ldd	r23, Z+1	; 0x01
    2214:	82 81       	ldd	r24, Z+2	; 0x02
    2216:	93 81       	ldd	r25, Z+3	; 0x03
    2218:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	f8 01       	movw	r30, r16
    2222:	80 83       	st	Z, r24
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	a2 83       	std	Z+2, r26	; 0x02
    2228:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    222a:	ce 01       	movw	r24, r28
    222c:	88 50       	subi	r24, 0x08	; 8
    222e:	9f 4f       	sbci	r25, 0xFF	; 255
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e8       	ldi	r20, 0x80	; 128
    2236:	5f e3       	ldi	r21, 0x3F	; 63
    2238:	fc 01       	movw	r30, r24
    223a:	60 81       	ld	r22, Z
    223c:	71 81       	ldd	r23, Z+1	; 0x01
    223e:	82 81       	ldd	r24, Z+2	; 0x02
    2240:	93 81       	ldd	r25, Z+3	; 0x03
    2242:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
    2246:	88 23       	and	r24, r24
    2248:	4c f4       	brge	.+18     	; 0x225c <main+0x1906>
		__ticks = 1;
    224a:	ce 01       	movw	r24, r28
    224c:	84 50       	subi	r24, 0x04	; 4
    224e:	9f 4f       	sbci	r25, 0xFF	; 255
    2250:	21 e0       	ldi	r18, 0x01	; 1
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	fc 01       	movw	r30, r24
    2256:	31 83       	std	Z+1, r19	; 0x01
    2258:	20 83       	st	Z, r18
    225a:	6d c0       	rjmp	.+218    	; 0x2336 <main+0x19e0>
	else if (__tmp > 65535)
    225c:	ce 01       	movw	r24, r28
    225e:	88 50       	subi	r24, 0x08	; 8
    2260:	9f 4f       	sbci	r25, 0xFF	; 255
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	3f ef       	ldi	r19, 0xFF	; 255
    2266:	4f e7       	ldi	r20, 0x7F	; 127
    2268:	57 e4       	ldi	r21, 0x47	; 71
    226a:	fc 01       	movw	r30, r24
    226c:	60 81       	ld	r22, Z
    226e:	71 81       	ldd	r23, Z+1	; 0x01
    2270:	82 81       	ldd	r24, Z+2	; 0x02
    2272:	93 81       	ldd	r25, Z+3	; 0x03
    2274:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
    2278:	18 16       	cp	r1, r24
    227a:	0c f0       	brlt	.+2      	; 0x227e <main+0x1928>
    227c:	4a c0       	rjmp	.+148    	; 0x2312 <main+0x19bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227e:	ce 01       	movw	r24, r28
    2280:	8a 5b       	subi	r24, 0xBA	; 186
    2282:	9f 4f       	sbci	r25, 0xFF	; 255
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e2       	ldi	r20, 0x20	; 32
    228a:	51 e4       	ldi	r21, 0x41	; 65
    228c:	fc 01       	movw	r30, r24
    228e:	60 81       	ld	r22, Z
    2290:	71 81       	ldd	r23, Z+1	; 0x01
    2292:	82 81       	ldd	r24, Z+2	; 0x02
    2294:	93 81       	ldd	r25, Z+3	; 0x03
    2296:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	8e 01       	movw	r16, r28
    22a0:	04 50       	subi	r16, 0x04	; 4
    22a2:	1f 4f       	sbci	r17, 0xFF	; 255
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	f8 01       	movw	r30, r16
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	80 83       	st	Z, r24
    22b6:	24 c0       	rjmp	.+72     	; 0x2300 <main+0x19aa>
    22b8:	ce 01       	movw	r24, r28
    22ba:	82 50       	subi	r24, 0x02	; 2
    22bc:	9f 4f       	sbci	r25, 0xFF	; 255
    22be:	29 e1       	ldi	r18, 0x19	; 25
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	fc 01       	movw	r30, r24
    22c4:	31 83       	std	Z+1, r19	; 0x01
    22c6:	20 83       	st	Z, r18
    22c8:	ce 01       	movw	r24, r28
    22ca:	82 50       	subi	r24, 0x02	; 2
    22cc:	9f 4f       	sbci	r25, 0xFF	; 255
    22ce:	fc 01       	movw	r30, r24
    22d0:	80 81       	ld	r24, Z
    22d2:	91 81       	ldd	r25, Z+1	; 0x01
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <main+0x197e>
    22d8:	9e 01       	movw	r18, r28
    22da:	22 50       	subi	r18, 0x02	; 2
    22dc:	3f 4f       	sbci	r19, 0xFF	; 255
    22de:	f9 01       	movw	r30, r18
    22e0:	91 83       	std	Z+1, r25	; 0x01
    22e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e4:	ce 01       	movw	r24, r28
    22e6:	84 50       	subi	r24, 0x04	; 4
    22e8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ea:	9e 01       	movw	r18, r28
    22ec:	24 50       	subi	r18, 0x04	; 4
    22ee:	3f 4f       	sbci	r19, 0xFF	; 255
    22f0:	f9 01       	movw	r30, r18
    22f2:	20 81       	ld	r18, Z
    22f4:	31 81       	ldd	r19, Z+1	; 0x01
    22f6:	21 50       	subi	r18, 0x01	; 1
    22f8:	31 09       	sbc	r19, r1
    22fa:	fc 01       	movw	r30, r24
    22fc:	31 83       	std	Z+1, r19	; 0x01
    22fe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2300:	ce 01       	movw	r24, r28
    2302:	84 50       	subi	r24, 0x04	; 4
    2304:	9f 4f       	sbci	r25, 0xFF	; 255
    2306:	fc 01       	movw	r30, r24
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	89 2b       	or	r24, r25
    230e:	a1 f6       	brne	.-88     	; 0x22b8 <main+0x1962>
    2310:	29 c0       	rjmp	.+82     	; 0x2364 <main+0x1a0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	8e 01       	movw	r16, r28
    2314:	04 50       	subi	r16, 0x04	; 4
    2316:	1f 4f       	sbci	r17, 0xFF	; 255
    2318:	ce 01       	movw	r24, r28
    231a:	88 50       	subi	r24, 0x08	; 8
    231c:	9f 4f       	sbci	r25, 0xFF	; 255
    231e:	fc 01       	movw	r30, r24
    2320:	60 81       	ld	r22, Z
    2322:	71 81       	ldd	r23, Z+1	; 0x01
    2324:	82 81       	ldd	r24, Z+2	; 0x02
    2326:	93 81       	ldd	r25, Z+3	; 0x03
    2328:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	f8 01       	movw	r30, r16
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	80 83       	st	Z, r24
    2336:	ce 01       	movw	r24, r28
    2338:	93 95       	inc	r25
    233a:	9e 01       	movw	r18, r28
    233c:	24 50       	subi	r18, 0x04	; 4
    233e:	3f 4f       	sbci	r19, 0xFF	; 255
    2340:	f9 01       	movw	r30, r18
    2342:	20 81       	ld	r18, Z
    2344:	31 81       	ldd	r19, Z+1	; 0x01
    2346:	fc 01       	movw	r30, r24
    2348:	31 83       	std	Z+1, r19	; 0x01
    234a:	20 83       	st	Z, r18
    234c:	ce 01       	movw	r24, r28
    234e:	93 95       	inc	r25
    2350:	fc 01       	movw	r30, r24
    2352:	80 81       	ld	r24, Z
    2354:	91 81       	ldd	r25, Z+1	; 0x01
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <main+0x1a00>
    235a:	9e 01       	movw	r18, r28
    235c:	33 95       	inc	r19
    235e:	f9 01       	movw	r30, r18
    2360:	91 83       	std	Z+1, r25	; 0x01
    2362:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(TWO);
    2364:	82 e0       	ldi	r24, 0x02	; 2
    2366:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_disable(ONE);
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
				BCDSevegments_disable(THREE);
    2370:	83 e0       	ldi	r24, 0x03	; 3
    2372:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
				BCDSevegments_disable(FOUR);
    2376:	84 e0       	ldi	r24, 0x04	; 4
    2378:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_disable>
				BCDSevegments_displayNo(NINE);
    237c:	89 e0       	ldi	r24, 0x09	; 9
    237e:	0e 94 bc 00 	call	0x178	; 0x178 <BCDSevegments_displayNo>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a8 e4       	ldi	r26, 0x48	; 72
    2388:	b2 e4       	ldi	r27, 0x42	; 66
    238a:	8a af       	std	Y+58, r24	; 0x3a
    238c:	9b af       	std	Y+59, r25	; 0x3b
    238e:	ac af       	std	Y+60, r26	; 0x3c
    2390:	bd af       	std	Y+61, r27	; 0x3d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2392:	8e 01       	movw	r16, r28
    2394:	02 51       	subi	r16, 0x12	; 18
    2396:	1f 4f       	sbci	r17, 0xFF	; 255
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	4a e7       	ldi	r20, 0x7A	; 122
    239e:	53 e4       	ldi	r21, 0x43	; 67
    23a0:	6a ad       	ldd	r22, Y+58	; 0x3a
    23a2:	7b ad       	ldd	r23, Y+59	; 0x3b
    23a4:	8c ad       	ldd	r24, Y+60	; 0x3c
    23a6:	9d ad       	ldd	r25, Y+61	; 0x3d
    23a8:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	f8 01       	movw	r30, r16
    23b2:	80 83       	st	Z, r24
    23b4:	91 83       	std	Z+1, r25	; 0x01
    23b6:	a2 83       	std	Z+2, r26	; 0x02
    23b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ba:	ce 01       	movw	r24, r28
    23bc:	82 51       	subi	r24, 0x12	; 18
    23be:	9f 4f       	sbci	r25, 0xFF	; 255
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e8       	ldi	r20, 0x80	; 128
    23c6:	5f e3       	ldi	r21, 0x3F	; 63
    23c8:	fc 01       	movw	r30, r24
    23ca:	60 81       	ld	r22, Z
    23cc:	71 81       	ldd	r23, Z+1	; 0x01
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
    23d6:	88 23       	and	r24, r24
    23d8:	4c f4       	brge	.+18     	; 0x23ec <main+0x1a96>
		__ticks = 1;
    23da:	ce 01       	movw	r24, r28
    23dc:	8e 50       	subi	r24, 0x0E	; 14
    23de:	9f 4f       	sbci	r25, 0xFF	; 255
    23e0:	21 e0       	ldi	r18, 0x01	; 1
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	fc 01       	movw	r30, r24
    23e6:	31 83       	std	Z+1, r19	; 0x01
    23e8:	20 83       	st	Z, r18
    23ea:	69 c0       	rjmp	.+210    	; 0x24be <main+0x1b68>
	else if (__tmp > 65535)
    23ec:	ce 01       	movw	r24, r28
    23ee:	82 51       	subi	r24, 0x12	; 18
    23f0:	9f 4f       	sbci	r25, 0xFF	; 255
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	3f ef       	ldi	r19, 0xFF	; 255
    23f6:	4f e7       	ldi	r20, 0x7F	; 127
    23f8:	57 e4       	ldi	r21, 0x47	; 71
    23fa:	fc 01       	movw	r30, r24
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
    2408:	18 16       	cp	r1, r24
    240a:	0c f0       	brlt	.+2      	; 0x240e <main+0x1ab8>
    240c:	46 c0       	rjmp	.+140    	; 0x249a <main+0x1b44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e2       	ldi	r20, 0x20	; 32
    2414:	51 e4       	ldi	r21, 0x41	; 65
    2416:	6a ad       	ldd	r22, Y+58	; 0x3a
    2418:	7b ad       	ldd	r23, Y+59	; 0x3b
    241a:	8c ad       	ldd	r24, Y+60	; 0x3c
    241c:	9d ad       	ldd	r25, Y+61	; 0x3d
    241e:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	8e 01       	movw	r16, r28
    2428:	0e 50       	subi	r16, 0x0E	; 14
    242a:	1f 4f       	sbci	r17, 0xFF	; 255
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	f8 01       	movw	r30, r16
    243a:	91 83       	std	Z+1, r25	; 0x01
    243c:	80 83       	st	Z, r24
    243e:	24 c0       	rjmp	.+72     	; 0x2488 <main+0x1b32>
    2440:	ce 01       	movw	r24, r28
    2442:	8c 50       	subi	r24, 0x0C	; 12
    2444:	9f 4f       	sbci	r25, 0xFF	; 255
    2446:	29 e1       	ldi	r18, 0x19	; 25
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	fc 01       	movw	r30, r24
    244c:	31 83       	std	Z+1, r19	; 0x01
    244e:	20 83       	st	Z, r18
    2450:	ce 01       	movw	r24, r28
    2452:	8c 50       	subi	r24, 0x0C	; 12
    2454:	9f 4f       	sbci	r25, 0xFF	; 255
    2456:	fc 01       	movw	r30, r24
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <main+0x1b06>
    2460:	9e 01       	movw	r18, r28
    2462:	2c 50       	subi	r18, 0x0C	; 12
    2464:	3f 4f       	sbci	r19, 0xFF	; 255
    2466:	f9 01       	movw	r30, r18
    2468:	91 83       	std	Z+1, r25	; 0x01
    246a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246c:	ce 01       	movw	r24, r28
    246e:	8e 50       	subi	r24, 0x0E	; 14
    2470:	9f 4f       	sbci	r25, 0xFF	; 255
    2472:	9e 01       	movw	r18, r28
    2474:	2e 50       	subi	r18, 0x0E	; 14
    2476:	3f 4f       	sbci	r19, 0xFF	; 255
    2478:	f9 01       	movw	r30, r18
    247a:	20 81       	ld	r18, Z
    247c:	31 81       	ldd	r19, Z+1	; 0x01
    247e:	21 50       	subi	r18, 0x01	; 1
    2480:	31 09       	sbc	r19, r1
    2482:	fc 01       	movw	r30, r24
    2484:	31 83       	std	Z+1, r19	; 0x01
    2486:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2488:	ce 01       	movw	r24, r28
    248a:	8e 50       	subi	r24, 0x0E	; 14
    248c:	9f 4f       	sbci	r25, 0xFF	; 255
    248e:	fc 01       	movw	r30, r24
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	89 2b       	or	r24, r25
    2496:	a1 f6       	brne	.-88     	; 0x2440 <main+0x1aea>
    2498:	2c c0       	rjmp	.+88     	; 0x24f2 <main+0x1b9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249a:	8e 01       	movw	r16, r28
    249c:	0e 50       	subi	r16, 0x0E	; 14
    249e:	1f 4f       	sbci	r17, 0xFF	; 255
    24a0:	ce 01       	movw	r24, r28
    24a2:	82 51       	subi	r24, 0x12	; 18
    24a4:	9f 4f       	sbci	r25, 0xFF	; 255
    24a6:	fc 01       	movw	r30, r24
    24a8:	60 81       	ld	r22, Z
    24aa:	71 81       	ldd	r23, Z+1	; 0x01
    24ac:	82 81       	ldd	r24, Z+2	; 0x02
    24ae:	93 81       	ldd	r25, Z+3	; 0x03
    24b0:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	f8 01       	movw	r30, r16
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	80 83       	st	Z, r24
    24be:	ce 01       	movw	r24, r28
    24c0:	8a 50       	subi	r24, 0x0A	; 10
    24c2:	9f 4f       	sbci	r25, 0xFF	; 255
    24c4:	9e 01       	movw	r18, r28
    24c6:	2e 50       	subi	r18, 0x0E	; 14
    24c8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ca:	f9 01       	movw	r30, r18
    24cc:	20 81       	ld	r18, Z
    24ce:	31 81       	ldd	r19, Z+1	; 0x01
    24d0:	fc 01       	movw	r30, r24
    24d2:	31 83       	std	Z+1, r19	; 0x01
    24d4:	20 83       	st	Z, r18
    24d6:	ce 01       	movw	r24, r28
    24d8:	8a 50       	subi	r24, 0x0A	; 10
    24da:	9f 4f       	sbci	r25, 0xFF	; 255
    24dc:	fc 01       	movw	r30, r24
    24de:	80 81       	ld	r24, Z
    24e0:	91 81       	ldd	r25, Z+1	; 0x01
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <main+0x1b8c>
    24e6:	9e 01       	movw	r18, r28
    24e8:	2a 50       	subi	r18, 0x0A	; 10
    24ea:	3f 4f       	sbci	r19, 0xFF	; 255
    24ec:	f9 01       	movw	r30, r18
    24ee:	91 83       	std	Z+1, r25	; 0x01
    24f0:	80 83       	st	Z, r24
    24f2:	9e 01       	movw	r18, r28
    24f4:	2e 5b       	subi	r18, 0xBE	; 190
    24f6:	3f 4f       	sbci	r19, 0xFF	; 255
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	aa e7       	ldi	r26, 0x7A	; 122
    24fe:	b4 e4       	ldi	r27, 0x44	; 68
    2500:	f9 01       	movw	r30, r18
    2502:	80 83       	st	Z, r24
    2504:	91 83       	std	Z+1, r25	; 0x01
    2506:	a2 83       	std	Z+2, r26	; 0x02
    2508:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    250a:	8e 01       	movw	r16, r28
    250c:	0e 5f       	subi	r16, 0xFE	; 254
    250e:	1e 4f       	sbci	r17, 0xFE	; 254
    2510:	ce 01       	movw	r24, r28
    2512:	8e 5b       	subi	r24, 0xBE	; 190
    2514:	9f 4f       	sbci	r25, 0xFF	; 255
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	4a e7       	ldi	r20, 0x7A	; 122
    251c:	53 e4       	ldi	r21, 0x43	; 67
    251e:	fc 01       	movw	r30, r24
    2520:	60 81       	ld	r22, Z
    2522:	71 81       	ldd	r23, Z+1	; 0x01
    2524:	82 81       	ldd	r24, Z+2	; 0x02
    2526:	93 81       	ldd	r25, Z+3	; 0x03
    2528:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	f8 01       	movw	r30, r16
    2532:	80 83       	st	Z, r24
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	a2 83       	std	Z+2, r26	; 0x02
    2538:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    253a:	ce 01       	movw	r24, r28
    253c:	8e 5f       	subi	r24, 0xFE	; 254
    253e:	9e 4f       	sbci	r25, 0xFE	; 254
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	fc 01       	movw	r30, r24
    254a:	60 81       	ld	r22, Z
    254c:	71 81       	ldd	r23, Z+1	; 0x01
    254e:	82 81       	ldd	r24, Z+2	; 0x02
    2550:	93 81       	ldd	r25, Z+3	; 0x03
    2552:	0e 94 3f 13 	call	0x267e	; 0x267e <__cmpsf2>
    2556:	88 23       	and	r24, r24
    2558:	4c f4       	brge	.+18     	; 0x256c <main+0x1c16>
		__ticks = 1;
    255a:	ce 01       	movw	r24, r28
    255c:	8a 5f       	subi	r24, 0xFA	; 250
    255e:	9e 4f       	sbci	r25, 0xFE	; 254
    2560:	21 e0       	ldi	r18, 0x01	; 1
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	fc 01       	movw	r30, r24
    2566:	31 83       	std	Z+1, r19	; 0x01
    2568:	20 83       	st	Z, r18
    256a:	6d c0       	rjmp	.+218    	; 0x2646 <main+0x1cf0>
	else if (__tmp > 65535)
    256c:	ce 01       	movw	r24, r28
    256e:	8e 5f       	subi	r24, 0xFE	; 254
    2570:	9e 4f       	sbci	r25, 0xFE	; 254
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	3f ef       	ldi	r19, 0xFF	; 255
    2576:	4f e7       	ldi	r20, 0x7F	; 127
    2578:	57 e4       	ldi	r21, 0x47	; 71
    257a:	fc 01       	movw	r30, r24
    257c:	60 81       	ld	r22, Z
    257e:	71 81       	ldd	r23, Z+1	; 0x01
    2580:	82 81       	ldd	r24, Z+2	; 0x02
    2582:	93 81       	ldd	r25, Z+3	; 0x03
    2584:	0e 94 c0 13 	call	0x2780	; 0x2780 <__gesf2>
    2588:	18 16       	cp	r1, r24
    258a:	0c f0       	brlt	.+2      	; 0x258e <main+0x1c38>
    258c:	4a c0       	rjmp	.+148    	; 0x2622 <main+0x1ccc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	ce 01       	movw	r24, r28
    2590:	8e 5b       	subi	r24, 0xBE	; 190
    2592:	9f 4f       	sbci	r25, 0xFF	; 255
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e2       	ldi	r20, 0x20	; 32
    259a:	51 e4       	ldi	r21, 0x41	; 65
    259c:	fc 01       	movw	r30, r24
    259e:	60 81       	ld	r22, Z
    25a0:	71 81       	ldd	r23, Z+1	; 0x01
    25a2:	82 81       	ldd	r24, Z+2	; 0x02
    25a4:	93 81       	ldd	r25, Z+3	; 0x03
    25a6:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	8e 01       	movw	r16, r28
    25b0:	0a 5f       	subi	r16, 0xFA	; 250
    25b2:	1e 4f       	sbci	r17, 0xFE	; 254
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	f8 01       	movw	r30, r16
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	80 83       	st	Z, r24
    25c6:	24 c0       	rjmp	.+72     	; 0x2610 <main+0x1cba>
    25c8:	ce 01       	movw	r24, r28
    25ca:	88 5f       	subi	r24, 0xF8	; 248
    25cc:	9e 4f       	sbci	r25, 0xFE	; 254
    25ce:	29 e1       	ldi	r18, 0x19	; 25
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	fc 01       	movw	r30, r24
    25d4:	31 83       	std	Z+1, r19	; 0x01
    25d6:	20 83       	st	Z, r18
    25d8:	ce 01       	movw	r24, r28
    25da:	88 5f       	subi	r24, 0xF8	; 248
    25dc:	9e 4f       	sbci	r25, 0xFE	; 254
    25de:	fc 01       	movw	r30, r24
    25e0:	80 81       	ld	r24, Z
    25e2:	91 81       	ldd	r25, Z+1	; 0x01
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <main+0x1c8e>
    25e8:	9e 01       	movw	r18, r28
    25ea:	28 5f       	subi	r18, 0xF8	; 248
    25ec:	3e 4f       	sbci	r19, 0xFE	; 254
    25ee:	f9 01       	movw	r30, r18
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f4:	ce 01       	movw	r24, r28
    25f6:	8a 5f       	subi	r24, 0xFA	; 250
    25f8:	9e 4f       	sbci	r25, 0xFE	; 254
    25fa:	9e 01       	movw	r18, r28
    25fc:	2a 5f       	subi	r18, 0xFA	; 250
    25fe:	3e 4f       	sbci	r19, 0xFE	; 254
    2600:	f9 01       	movw	r30, r18
    2602:	20 81       	ld	r18, Z
    2604:	31 81       	ldd	r19, Z+1	; 0x01
    2606:	21 50       	subi	r18, 0x01	; 1
    2608:	31 09       	sbc	r19, r1
    260a:	fc 01       	movw	r30, r24
    260c:	31 83       	std	Z+1, r19	; 0x01
    260e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2610:	ce 01       	movw	r24, r28
    2612:	8a 5f       	subi	r24, 0xFA	; 250
    2614:	9e 4f       	sbci	r25, 0xFE	; 254
    2616:	fc 01       	movw	r30, r24
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	89 2b       	or	r24, r25
    261e:	a1 f6       	brne	.-88     	; 0x25c8 <main+0x1c72>
    2620:	2c c0       	rjmp	.+88     	; 0x267a <main+0x1d24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2622:	8e 01       	movw	r16, r28
    2624:	0a 5f       	subi	r16, 0xFA	; 250
    2626:	1e 4f       	sbci	r17, 0xFE	; 254
    2628:	ce 01       	movw	r24, r28
    262a:	8e 5f       	subi	r24, 0xFE	; 254
    262c:	9e 4f       	sbci	r25, 0xFE	; 254
    262e:	fc 01       	movw	r30, r24
    2630:	60 81       	ld	r22, Z
    2632:	71 81       	ldd	r23, Z+1	; 0x01
    2634:	82 81       	ldd	r24, Z+2	; 0x02
    2636:	93 81       	ldd	r25, Z+3	; 0x03
    2638:	0e 94 44 13 	call	0x2688	; 0x2688 <__fixunssfsi>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	f8 01       	movw	r30, r16
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24
    2646:	ce 01       	movw	r24, r28
    2648:	86 5f       	subi	r24, 0xF6	; 246
    264a:	9e 4f       	sbci	r25, 0xFE	; 254
    264c:	9e 01       	movw	r18, r28
    264e:	2a 5f       	subi	r18, 0xFA	; 250
    2650:	3e 4f       	sbci	r19, 0xFE	; 254
    2652:	f9 01       	movw	r30, r18
    2654:	20 81       	ld	r18, Z
    2656:	31 81       	ldd	r19, Z+1	; 0x01
    2658:	fc 01       	movw	r30, r24
    265a:	31 83       	std	Z+1, r19	; 0x01
    265c:	20 83       	st	Z, r18
    265e:	ce 01       	movw	r24, r28
    2660:	86 5f       	subi	r24, 0xF6	; 246
    2662:	9e 4f       	sbci	r25, 0xFE	; 254
    2664:	fc 01       	movw	r30, r24
    2666:	80 81       	ld	r24, Z
    2668:	91 81       	ldd	r25, Z+1	; 0x01
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <main+0x1d14>
    266e:	9e 01       	movw	r18, r28
    2670:	26 5f       	subi	r18, 0xF6	; 246
    2672:	3e 4f       	sbci	r19, 0xFE	; 254
    2674:	f9 01       	movw	r30, r18
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	80 83       	st	Z, r24
				_delay_ms(50);
			}
		_delay_ms(1000);
    }
    267a:	0c 94 bc 04 	jmp	0x978	; 0x978 <main+0x22>

0000267e <__cmpsf2>:
    267e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__fp_cmp>
    2682:	08 f4       	brcc	.+2      	; 0x2686 <__cmpsf2+0x8>
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	08 95       	ret

00002688 <__fixunssfsi>:
    2688:	0e 94 9f 13 	call	0x273e	; 0x273e <__fp_splitA>
    268c:	88 f0       	brcs	.+34     	; 0x26b0 <__fixunssfsi+0x28>
    268e:	9f 57       	subi	r25, 0x7F	; 127
    2690:	98 f0       	brcs	.+38     	; 0x26b8 <__fixunssfsi+0x30>
    2692:	b9 2f       	mov	r27, r25
    2694:	99 27       	eor	r25, r25
    2696:	b7 51       	subi	r27, 0x17	; 23
    2698:	b0 f0       	brcs	.+44     	; 0x26c6 <__fixunssfsi+0x3e>
    269a:	e1 f0       	breq	.+56     	; 0x26d4 <__fixunssfsi+0x4c>
    269c:	66 0f       	add	r22, r22
    269e:	77 1f       	adc	r23, r23
    26a0:	88 1f       	adc	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	1a f0       	brmi	.+6      	; 0x26ac <__fixunssfsi+0x24>
    26a6:	ba 95       	dec	r27
    26a8:	c9 f7       	brne	.-14     	; 0x269c <__fixunssfsi+0x14>
    26aa:	14 c0       	rjmp	.+40     	; 0x26d4 <__fixunssfsi+0x4c>
    26ac:	b1 30       	cpi	r27, 0x01	; 1
    26ae:	91 f0       	breq	.+36     	; 0x26d4 <__fixunssfsi+0x4c>
    26b0:	0e 94 b9 13 	call	0x2772	; 0x2772 <__fp_zero>
    26b4:	b1 e0       	ldi	r27, 0x01	; 1
    26b6:	08 95       	ret
    26b8:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__fp_zero>
    26bc:	67 2f       	mov	r22, r23
    26be:	78 2f       	mov	r23, r24
    26c0:	88 27       	eor	r24, r24
    26c2:	b8 5f       	subi	r27, 0xF8	; 248
    26c4:	39 f0       	breq	.+14     	; 0x26d4 <__fixunssfsi+0x4c>
    26c6:	b9 3f       	cpi	r27, 0xF9	; 249
    26c8:	cc f3       	brlt	.-14     	; 0x26bc <__fixunssfsi+0x34>
    26ca:	86 95       	lsr	r24
    26cc:	77 95       	ror	r23
    26ce:	67 95       	ror	r22
    26d0:	b3 95       	inc	r27
    26d2:	d9 f7       	brne	.-10     	; 0x26ca <__fixunssfsi+0x42>
    26d4:	3e f4       	brtc	.+14     	; 0x26e4 <__fixunssfsi+0x5c>
    26d6:	90 95       	com	r25
    26d8:	80 95       	com	r24
    26da:	70 95       	com	r23
    26dc:	61 95       	neg	r22
    26de:	7f 4f       	sbci	r23, 0xFF	; 255
    26e0:	8f 4f       	sbci	r24, 0xFF	; 255
    26e2:	9f 4f       	sbci	r25, 0xFF	; 255
    26e4:	08 95       	ret

000026e6 <__fp_cmp>:
    26e6:	99 0f       	add	r25, r25
    26e8:	00 08       	sbc	r0, r0
    26ea:	55 0f       	add	r21, r21
    26ec:	aa 0b       	sbc	r26, r26
    26ee:	e0 e8       	ldi	r30, 0x80	; 128
    26f0:	fe ef       	ldi	r31, 0xFE	; 254
    26f2:	16 16       	cp	r1, r22
    26f4:	17 06       	cpc	r1, r23
    26f6:	e8 07       	cpc	r30, r24
    26f8:	f9 07       	cpc	r31, r25
    26fa:	c0 f0       	brcs	.+48     	; 0x272c <__fp_cmp+0x46>
    26fc:	12 16       	cp	r1, r18
    26fe:	13 06       	cpc	r1, r19
    2700:	e4 07       	cpc	r30, r20
    2702:	f5 07       	cpc	r31, r21
    2704:	98 f0       	brcs	.+38     	; 0x272c <__fp_cmp+0x46>
    2706:	62 1b       	sub	r22, r18
    2708:	73 0b       	sbc	r23, r19
    270a:	84 0b       	sbc	r24, r20
    270c:	95 0b       	sbc	r25, r21
    270e:	39 f4       	brne	.+14     	; 0x271e <__fp_cmp+0x38>
    2710:	0a 26       	eor	r0, r26
    2712:	61 f0       	breq	.+24     	; 0x272c <__fp_cmp+0x46>
    2714:	23 2b       	or	r18, r19
    2716:	24 2b       	or	r18, r20
    2718:	25 2b       	or	r18, r21
    271a:	21 f4       	brne	.+8      	; 0x2724 <__fp_cmp+0x3e>
    271c:	08 95       	ret
    271e:	0a 26       	eor	r0, r26
    2720:	09 f4       	brne	.+2      	; 0x2724 <__fp_cmp+0x3e>
    2722:	a1 40       	sbci	r26, 0x01	; 1
    2724:	a6 95       	lsr	r26
    2726:	8f ef       	ldi	r24, 0xFF	; 255
    2728:	81 1d       	adc	r24, r1
    272a:	81 1d       	adc	r24, r1
    272c:	08 95       	ret

0000272e <__fp_split3>:
    272e:	57 fd       	sbrc	r21, 7
    2730:	90 58       	subi	r25, 0x80	; 128
    2732:	44 0f       	add	r20, r20
    2734:	55 1f       	adc	r21, r21
    2736:	59 f0       	breq	.+22     	; 0x274e <__fp_splitA+0x10>
    2738:	5f 3f       	cpi	r21, 0xFF	; 255
    273a:	71 f0       	breq	.+28     	; 0x2758 <__fp_splitA+0x1a>
    273c:	47 95       	ror	r20

0000273e <__fp_splitA>:
    273e:	88 0f       	add	r24, r24
    2740:	97 fb       	bst	r25, 7
    2742:	99 1f       	adc	r25, r25
    2744:	61 f0       	breq	.+24     	; 0x275e <__fp_splitA+0x20>
    2746:	9f 3f       	cpi	r25, 0xFF	; 255
    2748:	79 f0       	breq	.+30     	; 0x2768 <__fp_splitA+0x2a>
    274a:	87 95       	ror	r24
    274c:	08 95       	ret
    274e:	12 16       	cp	r1, r18
    2750:	13 06       	cpc	r1, r19
    2752:	14 06       	cpc	r1, r20
    2754:	55 1f       	adc	r21, r21
    2756:	f2 cf       	rjmp	.-28     	; 0x273c <__fp_split3+0xe>
    2758:	46 95       	lsr	r20
    275a:	f1 df       	rcall	.-30     	; 0x273e <__fp_splitA>
    275c:	08 c0       	rjmp	.+16     	; 0x276e <__fp_splitA+0x30>
    275e:	16 16       	cp	r1, r22
    2760:	17 06       	cpc	r1, r23
    2762:	18 06       	cpc	r1, r24
    2764:	99 1f       	adc	r25, r25
    2766:	f1 cf       	rjmp	.-30     	; 0x274a <__fp_splitA+0xc>
    2768:	86 95       	lsr	r24
    276a:	71 05       	cpc	r23, r1
    276c:	61 05       	cpc	r22, r1
    276e:	08 94       	sec
    2770:	08 95       	ret

00002772 <__fp_zero>:
    2772:	e8 94       	clt

00002774 <__fp_szero>:
    2774:	bb 27       	eor	r27, r27
    2776:	66 27       	eor	r22, r22
    2778:	77 27       	eor	r23, r23
    277a:	cb 01       	movw	r24, r22
    277c:	97 f9       	bld	r25, 7
    277e:	08 95       	ret

00002780 <__gesf2>:
    2780:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__fp_cmp>
    2784:	08 f4       	brcc	.+2      	; 0x2788 <__gesf2+0x8>
    2786:	8f ef       	ldi	r24, 0xFF	; 255
    2788:	08 95       	ret

0000278a <__mulsf3>:
    278a:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__mulsf3x>
    278e:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__fp_round>
    2792:	0e 94 3b 14 	call	0x2876	; 0x2876 <__fp_pscA>
    2796:	38 f0       	brcs	.+14     	; 0x27a6 <__mulsf3+0x1c>
    2798:	0e 94 42 14 	call	0x2884	; 0x2884 <__fp_pscB>
    279c:	20 f0       	brcs	.+8      	; 0x27a6 <__mulsf3+0x1c>
    279e:	95 23       	and	r25, r21
    27a0:	11 f0       	breq	.+4      	; 0x27a6 <__mulsf3+0x1c>
    27a2:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__fp_inf>
    27a6:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__fp_nan>
    27aa:	11 24       	eor	r1, r1
    27ac:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__fp_szero>

000027b0 <__mulsf3x>:
    27b0:	0e 94 97 13 	call	0x272e	; 0x272e <__fp_split3>
    27b4:	70 f3       	brcs	.-36     	; 0x2792 <__mulsf3+0x8>

000027b6 <__mulsf3_pse>:
    27b6:	95 9f       	mul	r25, r21
    27b8:	c1 f3       	breq	.-16     	; 0x27aa <__mulsf3+0x20>
    27ba:	95 0f       	add	r25, r21
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	55 1f       	adc	r21, r21
    27c0:	62 9f       	mul	r22, r18
    27c2:	f0 01       	movw	r30, r0
    27c4:	72 9f       	mul	r23, r18
    27c6:	bb 27       	eor	r27, r27
    27c8:	f0 0d       	add	r31, r0
    27ca:	b1 1d       	adc	r27, r1
    27cc:	63 9f       	mul	r22, r19
    27ce:	aa 27       	eor	r26, r26
    27d0:	f0 0d       	add	r31, r0
    27d2:	b1 1d       	adc	r27, r1
    27d4:	aa 1f       	adc	r26, r26
    27d6:	64 9f       	mul	r22, r20
    27d8:	66 27       	eor	r22, r22
    27da:	b0 0d       	add	r27, r0
    27dc:	a1 1d       	adc	r26, r1
    27de:	66 1f       	adc	r22, r22
    27e0:	82 9f       	mul	r24, r18
    27e2:	22 27       	eor	r18, r18
    27e4:	b0 0d       	add	r27, r0
    27e6:	a1 1d       	adc	r26, r1
    27e8:	62 1f       	adc	r22, r18
    27ea:	73 9f       	mul	r23, r19
    27ec:	b0 0d       	add	r27, r0
    27ee:	a1 1d       	adc	r26, r1
    27f0:	62 1f       	adc	r22, r18
    27f2:	83 9f       	mul	r24, r19
    27f4:	a0 0d       	add	r26, r0
    27f6:	61 1d       	adc	r22, r1
    27f8:	22 1f       	adc	r18, r18
    27fa:	74 9f       	mul	r23, r20
    27fc:	33 27       	eor	r19, r19
    27fe:	a0 0d       	add	r26, r0
    2800:	61 1d       	adc	r22, r1
    2802:	23 1f       	adc	r18, r19
    2804:	84 9f       	mul	r24, r20
    2806:	60 0d       	add	r22, r0
    2808:	21 1d       	adc	r18, r1
    280a:	82 2f       	mov	r24, r18
    280c:	76 2f       	mov	r23, r22
    280e:	6a 2f       	mov	r22, r26
    2810:	11 24       	eor	r1, r1
    2812:	9f 57       	subi	r25, 0x7F	; 127
    2814:	50 40       	sbci	r21, 0x00	; 0
    2816:	9a f0       	brmi	.+38     	; 0x283e <__mulsf3_pse+0x88>
    2818:	f1 f0       	breq	.+60     	; 0x2856 <__mulsf3_pse+0xa0>
    281a:	88 23       	and	r24, r24
    281c:	4a f0       	brmi	.+18     	; 0x2830 <__mulsf3_pse+0x7a>
    281e:	ee 0f       	add	r30, r30
    2820:	ff 1f       	adc	r31, r31
    2822:	bb 1f       	adc	r27, r27
    2824:	66 1f       	adc	r22, r22
    2826:	77 1f       	adc	r23, r23
    2828:	88 1f       	adc	r24, r24
    282a:	91 50       	subi	r25, 0x01	; 1
    282c:	50 40       	sbci	r21, 0x00	; 0
    282e:	a9 f7       	brne	.-22     	; 0x281a <__mulsf3_pse+0x64>
    2830:	9e 3f       	cpi	r25, 0xFE	; 254
    2832:	51 05       	cpc	r21, r1
    2834:	80 f0       	brcs	.+32     	; 0x2856 <__mulsf3_pse+0xa0>
    2836:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__fp_inf>
    283a:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__fp_szero>
    283e:	5f 3f       	cpi	r21, 0xFF	; 255
    2840:	e4 f3       	brlt	.-8      	; 0x283a <__mulsf3_pse+0x84>
    2842:	98 3e       	cpi	r25, 0xE8	; 232
    2844:	d4 f3       	brlt	.-12     	; 0x283a <__mulsf3_pse+0x84>
    2846:	86 95       	lsr	r24
    2848:	77 95       	ror	r23
    284a:	67 95       	ror	r22
    284c:	b7 95       	ror	r27
    284e:	f7 95       	ror	r31
    2850:	e7 95       	ror	r30
    2852:	9f 5f       	subi	r25, 0xFF	; 255
    2854:	c1 f7       	brne	.-16     	; 0x2846 <__mulsf3_pse+0x90>
    2856:	fe 2b       	or	r31, r30
    2858:	88 0f       	add	r24, r24
    285a:	91 1d       	adc	r25, r1
    285c:	96 95       	lsr	r25
    285e:	87 95       	ror	r24
    2860:	97 f9       	bld	r25, 7
    2862:	08 95       	ret

00002864 <__fp_inf>:
    2864:	97 f9       	bld	r25, 7
    2866:	9f 67       	ori	r25, 0x7F	; 127
    2868:	80 e8       	ldi	r24, 0x80	; 128
    286a:	70 e0       	ldi	r23, 0x00	; 0
    286c:	60 e0       	ldi	r22, 0x00	; 0
    286e:	08 95       	ret

00002870 <__fp_nan>:
    2870:	9f ef       	ldi	r25, 0xFF	; 255
    2872:	80 ec       	ldi	r24, 0xC0	; 192
    2874:	08 95       	ret

00002876 <__fp_pscA>:
    2876:	00 24       	eor	r0, r0
    2878:	0a 94       	dec	r0
    287a:	16 16       	cp	r1, r22
    287c:	17 06       	cpc	r1, r23
    287e:	18 06       	cpc	r1, r24
    2880:	09 06       	cpc	r0, r25
    2882:	08 95       	ret

00002884 <__fp_pscB>:
    2884:	00 24       	eor	r0, r0
    2886:	0a 94       	dec	r0
    2888:	12 16       	cp	r1, r18
    288a:	13 06       	cpc	r1, r19
    288c:	14 06       	cpc	r1, r20
    288e:	05 06       	cpc	r0, r21
    2890:	08 95       	ret

00002892 <__fp_round>:
    2892:	09 2e       	mov	r0, r25
    2894:	03 94       	inc	r0
    2896:	00 0c       	add	r0, r0
    2898:	11 f4       	brne	.+4      	; 0x289e <__fp_round+0xc>
    289a:	88 23       	and	r24, r24
    289c:	52 f0       	brmi	.+20     	; 0x28b2 <__fp_round+0x20>
    289e:	bb 0f       	add	r27, r27
    28a0:	40 f4       	brcc	.+16     	; 0x28b2 <__fp_round+0x20>
    28a2:	bf 2b       	or	r27, r31
    28a4:	11 f4       	brne	.+4      	; 0x28aa <__fp_round+0x18>
    28a6:	60 ff       	sbrs	r22, 0
    28a8:	04 c0       	rjmp	.+8      	; 0x28b2 <__fp_round+0x20>
    28aa:	6f 5f       	subi	r22, 0xFF	; 255
    28ac:	7f 4f       	sbci	r23, 0xFF	; 255
    28ae:	8f 4f       	sbci	r24, 0xFF	; 255
    28b0:	9f 4f       	sbci	r25, 0xFF	; 255
    28b2:	08 95       	ret

000028b4 <_exit>:
    28b4:	f8 94       	cli

000028b6 <__stop_program>:
    28b6:	ff cf       	rjmp	.-2      	; 0x28b6 <__stop_program>
