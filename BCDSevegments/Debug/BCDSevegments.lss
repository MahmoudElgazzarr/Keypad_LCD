
BCDSevegments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00002a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00002a52  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002a84  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00002ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012f3  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b9  00000000  00000000  00003eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011d0  00000000  00000000  0000466c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  0000583c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d7  00000000  00000000  00005acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000479  00000000  00000000  00005fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  0000641c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61
      60:	0e 94 8c 04 	call	0x918	; 0x918 <main>
      64:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <_exit>

00000068 <__bad_interrupt>:
      68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <BCDSevegments_Init>:
	}
	if(segment_Number == 4)
	{
		DIO_WritePin(BCDSEVSEGMENTS4_Enable_PIN,LOW);
	}
}
      6c:	cf 93       	push	r28
      6e:	df 93       	push	r29
      70:	cd b7       	in	r28, 0x3d	; 61
      72:	de b7       	in	r29, 0x3e	; 62
      74:	61 e0       	ldi	r22, 0x01	; 1
      76:	8a e1       	ldi	r24, 0x1A	; 26
      78:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      7c:	61 e0       	ldi	r22, 0x01	; 1
      7e:	8b e1       	ldi	r24, 0x1B	; 27
      80:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      84:	61 e0       	ldi	r22, 0x01	; 1
      86:	8e e1       	ldi	r24, 0x1E	; 30
      88:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      8c:	61 e0       	ldi	r22, 0x01	; 1
      8e:	8f e1       	ldi	r24, 0x1F	; 31
      90:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      94:	61 e0       	ldi	r22, 0x01	; 1
      96:	88 e0       	ldi	r24, 0x08	; 8
      98:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      9c:	61 e0       	ldi	r22, 0x01	; 1
      9e:	89 e0       	ldi	r24, 0x09	; 9
      a0:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      a4:	61 e0       	ldi	r22, 0x01	; 1
      a6:	8a e0       	ldi	r24, 0x0A	; 10
      a8:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      ac:	61 e0       	ldi	r22, 0x01	; 1
      ae:	8b e0       	ldi	r24, 0x0B	; 11
      b0:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
      b4:	60 e0       	ldi	r22, 0x00	; 0
      b6:	8a e1       	ldi	r24, 0x1A	; 26
      b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      bc:	60 e0       	ldi	r22, 0x00	; 0
      be:	8b e1       	ldi	r24, 0x1B	; 27
      c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      c4:	60 e0       	ldi	r22, 0x00	; 0
      c6:	8e e1       	ldi	r24, 0x1E	; 30
      c8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	8f e1       	ldi	r24, 0x1F	; 31
      d0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      d4:	00 00       	nop
      d6:	df 91       	pop	r29
      d8:	cf 91       	pop	r28
      da:	08 95       	ret

000000dc <BCDSevegments_enable>:
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	1f 92       	push	r1
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
      e6:	89 83       	std	Y+1, r24	; 0x01
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	81 30       	cpi	r24, 0x01	; 1
      ec:	21 f4       	brne	.+8      	; 0xf6 <BCDSevegments_enable+0x1a>
      ee:	61 e0       	ldi	r22, 0x01	; 1
      f0:	8a e1       	ldi	r24, 0x1A	; 26
      f2:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
      f6:	89 81       	ldd	r24, Y+1	; 0x01
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	21 f4       	brne	.+8      	; 0x104 <BCDSevegments_enable+0x28>
      fc:	61 e0       	ldi	r22, 0x01	; 1
      fe:	8b e1       	ldi	r24, 0x1B	; 27
     100:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	83 30       	cpi	r24, 0x03	; 3
     108:	21 f4       	brne	.+8      	; 0x112 <BCDSevegments_enable+0x36>
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	8e e1       	ldi	r24, 0x1E	; 30
     10e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	84 30       	cpi	r24, 0x04	; 4
     116:	21 f4       	brne	.+8      	; 0x120 <BCDSevegments_enable+0x44>
     118:	61 e0       	ldi	r22, 0x01	; 1
     11a:	8f e1       	ldi	r24, 0x1F	; 31
     11c:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
     120:	00 00       	nop
     122:	0f 90       	pop	r0
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <BCDSevegments_displayNo>:
void BCDSevegments_displayNo(uint8 number)
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	1f 92       	push	r1
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	89 83       	std	Y+1, r24	; 0x01
	if (number == 0)
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	88 23       	and	r24, r24
     13a:	89 f4       	brne	.+34     	; 0x15e <BCDSevegments_displayNo+0x34>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	88 e0       	ldi	r24, 0x08	; 8
     140:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	89 e0       	ldi	r24, 0x09	; 9
     148:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	8a e0       	ldi	r24, 0x0A	; 10
     150:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	8b e0       	ldi	r24, 0x0B	; 11
     158:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     15c:	b3 c0       	rjmp	.+358    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 1)
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	89 f4       	brne	.+34     	; 0x186 <BCDSevegments_displayNo+0x5c>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	88 e0       	ldi	r24, 0x08	; 8
     168:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	89 e0       	ldi	r24, 0x09	; 9
     170:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	8a e0       	ldi	r24, 0x0A	; 10
     178:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	8b e0       	ldi	r24, 0x0B	; 11
     180:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     184:	9f c0       	rjmp	.+318    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 2)
     186:	89 81       	ldd	r24, Y+1	; 0x01
     188:	82 30       	cpi	r24, 0x02	; 2
     18a:	89 f4       	brne	.+34     	; 0x1ae <BCDSevegments_displayNo+0x84>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	88 e0       	ldi	r24, 0x08	; 8
     190:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	89 e0       	ldi	r24, 0x09	; 9
     198:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	8a e0       	ldi	r24, 0x0A	; 10
     1a0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1a4:	60 e0       	ldi	r22, 0x00	; 0
     1a6:	8b e0       	ldi	r24, 0x0B	; 11
     1a8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1ac:	8b c0       	rjmp	.+278    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 3)
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	83 30       	cpi	r24, 0x03	; 3
     1b2:	89 f4       	brne	.+34     	; 0x1d6 <BCDSevegments_displayNo+0xac>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     1b4:	61 e0       	ldi	r22, 0x01	; 1
     1b6:	88 e0       	ldi	r24, 0x08	; 8
     1b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     1bc:	61 e0       	ldi	r22, 0x01	; 1
     1be:	89 e0       	ldi	r24, 0x09	; 9
     1c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	8a e0       	ldi	r24, 0x0A	; 10
     1c8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1cc:	60 e0       	ldi	r22, 0x00	; 0
     1ce:	8b e0       	ldi	r24, 0x0B	; 11
     1d0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1d4:	77 c0       	rjmp	.+238    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if (number == 4)
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	84 30       	cpi	r24, 0x04	; 4
     1da:	89 f4       	brne	.+34     	; 0x1fe <BCDSevegments_displayNo+0xd4>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	88 e0       	ldi	r24, 0x08	; 8
     1e0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	89 e0       	ldi	r24, 0x09	; 9
     1e8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     1ec:	61 e0       	ldi	r22, 0x01	; 1
     1ee:	8a e0       	ldi	r24, 0x0A	; 10
     1f0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	8b e0       	ldi	r24, 0x0B	; 11
     1f8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     1fc:	63 c0       	rjmp	.+198    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 5)
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	85 30       	cpi	r24, 0x05	; 5
     202:	89 f4       	brne	.+34     	; 0x226 <BCDSevegments_displayNo+0xfc>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     204:	61 e0       	ldi	r22, 0x01	; 1
     206:	88 e0       	ldi	r24, 0x08	; 8
     208:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	89 e0       	ldi	r24, 0x09	; 9
     210:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     214:	61 e0       	ldi	r22, 0x01	; 1
     216:	8a e0       	ldi	r24, 0x0A	; 10
     218:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	8b e0       	ldi	r24, 0x0B	; 11
     220:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     224:	4f c0       	rjmp	.+158    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 6)
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	86 30       	cpi	r24, 0x06	; 6
     22a:	89 f4       	brne	.+34     	; 0x24e <BCDSevegments_displayNo+0x124>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	88 e0       	ldi	r24, 0x08	; 8
     230:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	89 e0       	ldi	r24, 0x09	; 9
     238:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	8a e0       	ldi	r24, 0x0A	; 10
     240:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	8b e0       	ldi	r24, 0x0B	; 11
     248:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     24c:	3b c0       	rjmp	.+118    	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 7)
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	87 30       	cpi	r24, 0x07	; 7
     252:	89 f4       	brne	.+34     	; 0x276 <BCDSevegments_displayNo+0x14c>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	88 e0       	ldi	r24, 0x08	; 8
     258:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	89 e0       	ldi	r24, 0x09	; 9
     260:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
     264:	61 e0       	ldi	r22, 0x01	; 1
     266:	8a e0       	ldi	r24, 0x0A	; 10
     268:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	8b e0       	ldi	r24, 0x0B	; 11
     270:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     274:	27 c0       	rjmp	.+78     	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,LOW);
	}
	else if(number == 8)
     276:	89 81       	ldd	r24, Y+1	; 0x01
     278:	88 30       	cpi	r24, 0x08	; 8
     27a:	89 f4       	brne	.+34     	; 0x29e <BCDSevegments_displayNo+0x174>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	88 e0       	ldi	r24, 0x08	; 8
     280:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	89 e0       	ldi	r24, 0x09	; 9
     288:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	8a e0       	ldi	r24, 0x0A	; 10
     290:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	8b e0       	ldi	r24, 0x0B	; 11
     298:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
     29c:	13 c0       	rjmp	.+38     	; 0x2c4 <BCDSevegments_displayNo+0x19a>
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
	}
	else if(number == 9)
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	89 30       	cpi	r24, 0x09	; 9
     2a2:	81 f4       	brne	.+32     	; 0x2c4 <BCDSevegments_displayNo+0x19a>
	{
		DIO_WritePin(BCDSEVSEGMENTS1_DATA_PIN,HIGH);
     2a4:	61 e0       	ldi	r22, 0x01	; 1
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS2_DATA_PIN,LOW);
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	89 e0       	ldi	r24, 0x09	; 9
     2b0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS3_DATA_PIN,LOW);
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	8a e0       	ldi	r24, 0x0A	; 10
     2b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(BCDSEVSEGMENTS4_DATA_PIN,HIGH);
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	8b e0       	ldi	r24, 0x0B	; 11
     2c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	}
     2c4:	00 00       	nop
     2c6:	0f 90       	pop	r0
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <DIO_WritePin>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "BitwiseOperation.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <DIO_WritePin+0x6>
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	89 83       	std	Y+1, r24	; 0x01
     2da:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNum >= 0 && PinNum < 8 )
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	88 30       	cpi	r24, 0x08	; 8
     2e0:	78 f5       	brcc	.+94     	; 0x340 <DIO_WritePin+0x72>
	{
			if(PinValue == 1)
     2e2:	8a 81       	ldd	r24, Y+2	; 0x02
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	a1 f4       	brne	.+40     	; 0x310 <DIO_WritePin+0x42>
			{
				Set_Bit( PORTA , PinNum);
     2e8:	8b e3       	ldi	r24, 0x3B	; 59
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	2b e3       	ldi	r18, 0x3B	; 59
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	f9 01       	movw	r30, r18
     2f2:	20 81       	ld	r18, Z
     2f4:	62 2f       	mov	r22, r18
     2f6:	29 81       	ldd	r18, Y+1	; 0x01
     2f8:	42 2f       	mov	r20, r18
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	21 e0       	ldi	r18, 0x01	; 1
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_WritePin+0x38>
     302:	22 0f       	add	r18, r18
     304:	33 1f       	adc	r19, r19
     306:	4a 95       	dec	r20
     308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_WritePin+0x34>
     30a:	26 2b       	or	r18, r22
     30c:	fc 01       	movw	r30, r24
     30e:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	88 23       	and	r24, r24
     314:	a9 f4       	brne	.+42     	; 0x340 <DIO_WritePin+0x72>
			{
				Clear_Bit( PORTA , PinNum);
     316:	8b e3       	ldi	r24, 0x3B	; 59
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	2b e3       	ldi	r18, 0x3B	; 59
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	f9 01       	movw	r30, r18
     320:	20 81       	ld	r18, Z
     322:	62 2f       	mov	r22, r18
     324:	29 81       	ldd	r18, Y+1	; 0x01
     326:	42 2f       	mov	r20, r18
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	21 e0       	ldi	r18, 0x01	; 1
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_WritePin+0x66>
     330:	22 0f       	add	r18, r18
     332:	33 1f       	adc	r19, r19
     334:	4a 95       	dec	r20
     336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_WritePin+0x62>
     338:	20 95       	com	r18
     33a:	26 23       	and	r18, r22
     33c:	fc 01       	movw	r30, r24
     33e:	20 83       	st	Z, r18
			}
	}
	if(PinNum > 7 && PinNum < 16)
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	88 30       	cpi	r24, 0x08	; 8
     344:	c0 f1       	brcs	.+112    	; 0x3b6 <DIO_WritePin+0xe8>
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	80 31       	cpi	r24, 0x10	; 16
     34a:	a8 f5       	brcc	.+106    	; 0x3b6 <DIO_WritePin+0xe8>
	{
		if(PinValue == 1)
     34c:	8a 81       	ldd	r24, Y+2	; 0x02
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	b9 f4       	brne	.+46     	; 0x380 <DIO_WritePin+0xb2>
		{
			Set_Bit( PORTB , (PinNum-8));
     352:	88 e3       	ldi	r24, 0x38	; 56
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	28 e3       	ldi	r18, 0x38	; 56
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	f9 01       	movw	r30, r18
     35c:	20 81       	ld	r18, Z
     35e:	62 2f       	mov	r22, r18
     360:	29 81       	ldd	r18, Y+1	; 0x01
     362:	22 2f       	mov	r18, r18
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	a9 01       	movw	r20, r18
     368:	48 50       	subi	r20, 0x08	; 8
     36a:	51 09       	sbc	r21, r1
     36c:	21 e0       	ldi	r18, 0x01	; 1
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_WritePin+0xa8>
     372:	22 0f       	add	r18, r18
     374:	33 1f       	adc	r19, r19
     376:	4a 95       	dec	r20
     378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_WritePin+0xa4>
     37a:	26 2b       	or	r18, r22
     37c:	fc 01       	movw	r30, r24
     37e:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
     380:	8a 81       	ldd	r24, Y+2	; 0x02
     382:	88 23       	and	r24, r24
     384:	c1 f4       	brne	.+48     	; 0x3b6 <DIO_WritePin+0xe8>
		{
			Clear_Bit( PORTB , (PinNum-8));
     386:	88 e3       	ldi	r24, 0x38	; 56
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	28 e3       	ldi	r18, 0x38	; 56
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	f9 01       	movw	r30, r18
     390:	20 81       	ld	r18, Z
     392:	62 2f       	mov	r22, r18
     394:	29 81       	ldd	r18, Y+1	; 0x01
     396:	22 2f       	mov	r18, r18
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	a9 01       	movw	r20, r18
     39c:	48 50       	subi	r20, 0x08	; 8
     39e:	51 09       	sbc	r21, r1
     3a0:	21 e0       	ldi	r18, 0x01	; 1
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_WritePin+0xdc>
     3a6:	22 0f       	add	r18, r18
     3a8:	33 1f       	adc	r19, r19
     3aa:	4a 95       	dec	r20
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_WritePin+0xd8>
     3ae:	20 95       	com	r18
     3b0:	26 23       	and	r18, r22
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18
		}
	}
	if(PinNum > 15 && PinNum < 24)
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	80 31       	cpi	r24, 0x10	; 16
     3ba:	c0 f1       	brcs	.+112    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	88 31       	cpi	r24, 0x18	; 24
     3c0:	a8 f5       	brcc	.+106    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	{
		if(PinValue == 1)
     3c2:	8a 81       	ldd	r24, Y+2	; 0x02
     3c4:	81 30       	cpi	r24, 0x01	; 1
     3c6:	b9 f4       	brne	.+46     	; 0x3f6 <DIO_WritePin+0x128>
		{
			Set_Bit( PORTC , (PinNum-16));
     3c8:	85 e3       	ldi	r24, 0x35	; 53
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	25 e3       	ldi	r18, 0x35	; 53
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	f9 01       	movw	r30, r18
     3d2:	20 81       	ld	r18, Z
     3d4:	62 2f       	mov	r22, r18
     3d6:	29 81       	ldd	r18, Y+1	; 0x01
     3d8:	22 2f       	mov	r18, r18
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	a9 01       	movw	r20, r18
     3de:	40 51       	subi	r20, 0x10	; 16
     3e0:	51 09       	sbc	r21, r1
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_WritePin+0x11e>
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
     3ec:	4a 95       	dec	r20
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_WritePin+0x11a>
     3f0:	26 2b       	or	r18, r22
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
     3f6:	8a 81       	ldd	r24, Y+2	; 0x02
     3f8:	88 23       	and	r24, r24
     3fa:	c1 f4       	brne	.+48     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		{
			Clear_Bit( PORTC , (PinNum-16));
     3fc:	85 e3       	ldi	r24, 0x35	; 53
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	25 e3       	ldi	r18, 0x35	; 53
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	f9 01       	movw	r30, r18
     406:	20 81       	ld	r18, Z
     408:	62 2f       	mov	r22, r18
     40a:	29 81       	ldd	r18, Y+1	; 0x01
     40c:	22 2f       	mov	r18, r18
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	a9 01       	movw	r20, r18
     412:	40 51       	subi	r20, 0x10	; 16
     414:	51 09       	sbc	r21, r1
     416:	21 e0       	ldi	r18, 0x01	; 1
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41c:	22 0f       	add	r18, r18
     41e:	33 1f       	adc	r19, r19
     420:	4a 95       	dec	r20
     422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     424:	20 95       	com	r18
     426:	26 23       	and	r18, r22
     428:	fc 01       	movw	r30, r24
     42a:	20 83       	st	Z, r18
		}
	}
	
	if(PinNum > 24 && PinNum < 32)
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	89 31       	cpi	r24, 0x19	; 25
     430:	c0 f1       	brcs	.+112    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	80 32       	cpi	r24, 0x20	; 32
     436:	a8 f5       	brcc	.+106    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
	{
			if(PinValue == 1)
     438:	8a 81       	ldd	r24, Y+2	; 0x02
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	b9 f4       	brne	.+46     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			{
				Set_Bit( PORTD , (PinNum-24));
     43e:	82 e3       	ldi	r24, 0x32	; 50
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	22 e3       	ldi	r18, 0x32	; 50
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	f9 01       	movw	r30, r18
     448:	20 81       	ld	r18, Z
     44a:	62 2f       	mov	r22, r18
     44c:	29 81       	ldd	r18, Y+1	; 0x01
     44e:	22 2f       	mov	r18, r18
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	a9 01       	movw	r20, r18
     454:	48 51       	subi	r20, 0x18	; 24
     456:	51 09       	sbc	r21, r1
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45e:	22 0f       	add	r18, r18
     460:	33 1f       	adc	r19, r19
     462:	4a 95       	dec	r20
     464:	e2 f7       	brpl	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     466:	26 2b       	or	r18, r22
     468:	fc 01       	movw	r30, r24
     46a:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
     46c:	8a 81       	ldd	r24, Y+2	; 0x02
     46e:	88 23       	and	r24, r24
     470:	c1 f4       	brne	.+48     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			{
				Clear_Bit( PORTD , (PinNum-24));
     472:	82 e3       	ldi	r24, 0x32	; 50
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	22 e3       	ldi	r18, 0x32	; 50
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	f9 01       	movw	r30, r18
     47c:	20 81       	ld	r18, Z
     47e:	62 2f       	mov	r22, r18
     480:	29 81       	ldd	r18, Y+1	; 0x01
     482:	22 2f       	mov	r18, r18
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	a9 01       	movw	r20, r18
     488:	48 51       	subi	r20, 0x18	; 24
     48a:	51 09       	sbc	r21, r1
     48c:	21 e0       	ldi	r18, 0x01	; 1
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	02 c0       	rjmp	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     492:	22 0f       	add	r18, r18
     494:	33 1f       	adc	r19, r19
     496:	4a 95       	dec	r20
     498:	e2 f7       	brpl	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     49a:	20 95       	com	r18
     49c:	26 23       	and	r18, r22
     49e:	fc 01       	movw	r30, r24
     4a0:	20 83       	st	Z, r18
			}
	}
}
     4a2:	00 00       	nop
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <DIO_SetPinDirection>:
/*
pindirection = 1 output
pindirection = 0 input
*/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <DIO_SetPinDirection+0x6>
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	89 83       	std	Y+1, r24	; 0x01
     4ba:	6a 83       	std	Y+2, r22	; 0x02
		if(PinNum >= 0 && PinNum < 8 )
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	88 30       	cpi	r24, 0x08	; 8
     4c0:	78 f5       	brcc	.+94     	; 0x520 <DIO_SetPinDirection+0x72>
		{
			if(PinDirection== 1)
     4c2:	8a 81       	ldd	r24, Y+2	; 0x02
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	a1 f4       	brne	.+40     	; 0x4f0 <DIO_SetPinDirection+0x42>
			{
				Set_Bit( DDRA , PinNum);
     4c8:	8a e3       	ldi	r24, 0x3A	; 58
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	2a e3       	ldi	r18, 0x3A	; 58
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	f9 01       	movw	r30, r18
     4d2:	20 81       	ld	r18, Z
     4d4:	62 2f       	mov	r22, r18
     4d6:	29 81       	ldd	r18, Y+1	; 0x01
     4d8:	42 2f       	mov	r20, r18
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	21 e0       	ldi	r18, 0x01	; 1
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_SetPinDirection+0x38>
     4e2:	22 0f       	add	r18, r18
     4e4:	33 1f       	adc	r19, r19
     4e6:	4a 95       	dec	r20
     4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_SetPinDirection+0x34>
     4ea:	26 2b       	or	r18, r22
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     4f0:	8a 81       	ldd	r24, Y+2	; 0x02
     4f2:	88 23       	and	r24, r24
     4f4:	a9 f4       	brne	.+42     	; 0x520 <DIO_SetPinDirection+0x72>
			{
				Clear_Bit( DDRA , PinNum);
     4f6:	8a e3       	ldi	r24, 0x3A	; 58
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	2a e3       	ldi	r18, 0x3A	; 58
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	f9 01       	movw	r30, r18
     500:	20 81       	ld	r18, Z
     502:	62 2f       	mov	r22, r18
     504:	29 81       	ldd	r18, Y+1	; 0x01
     506:	42 2f       	mov	r20, r18
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	21 e0       	ldi	r18, 0x01	; 1
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_SetPinDirection+0x66>
     510:	22 0f       	add	r18, r18
     512:	33 1f       	adc	r19, r19
     514:	4a 95       	dec	r20
     516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_SetPinDirection+0x62>
     518:	20 95       	com	r18
     51a:	26 23       	and	r18, r22
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 7 && PinNum < 16)
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	88 30       	cpi	r24, 0x08	; 8
     524:	c0 f1       	brcs	.+112    	; 0x596 <DIO_SetPinDirection+0xe8>
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	80 31       	cpi	r24, 0x10	; 16
     52a:	a8 f5       	brcc	.+106    	; 0x596 <DIO_SetPinDirection+0xe8>
		{
			if(PinDirection== 1)
     52c:	8a 81       	ldd	r24, Y+2	; 0x02
     52e:	81 30       	cpi	r24, 0x01	; 1
     530:	b9 f4       	brne	.+46     	; 0x560 <DIO_SetPinDirection+0xb2>
			{
				Set_Bit( DDRB , (PinNum-8));
     532:	87 e3       	ldi	r24, 0x37	; 55
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	27 e3       	ldi	r18, 0x37	; 55
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	f9 01       	movw	r30, r18
     53c:	20 81       	ld	r18, Z
     53e:	62 2f       	mov	r22, r18
     540:	29 81       	ldd	r18, Y+1	; 0x01
     542:	22 2f       	mov	r18, r18
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	a9 01       	movw	r20, r18
     548:	48 50       	subi	r20, 0x08	; 8
     54a:	51 09       	sbc	r21, r1
     54c:	21 e0       	ldi	r18, 0x01	; 1
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_SetPinDirection+0xa8>
     552:	22 0f       	add	r18, r18
     554:	33 1f       	adc	r19, r19
     556:	4a 95       	dec	r20
     558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_SetPinDirection+0xa4>
     55a:	26 2b       	or	r18, r22
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	88 23       	and	r24, r24
     564:	c1 f4       	brne	.+48     	; 0x596 <DIO_SetPinDirection+0xe8>
			{
				Clear_Bit( DDRB , (PinNum-8));
     566:	87 e3       	ldi	r24, 0x37	; 55
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	27 e3       	ldi	r18, 0x37	; 55
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	62 2f       	mov	r22, r18
     574:	29 81       	ldd	r18, Y+1	; 0x01
     576:	22 2f       	mov	r18, r18
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	a9 01       	movw	r20, r18
     57c:	48 50       	subi	r20, 0x08	; 8
     57e:	51 09       	sbc	r21, r1
     580:	21 e0       	ldi	r18, 0x01	; 1
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_SetPinDirection+0xdc>
     586:	22 0f       	add	r18, r18
     588:	33 1f       	adc	r19, r19
     58a:	4a 95       	dec	r20
     58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_SetPinDirection+0xd8>
     58e:	20 95       	com	r18
     590:	26 23       	and	r18, r22
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 15 && PinNum < 24)
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	80 31       	cpi	r24, 0x10	; 16
     59a:	c0 f1       	brcs	.+112    	; 0x60c <DIO_SetPinDirection+0x15e>
     59c:	89 81       	ldd	r24, Y+1	; 0x01
     59e:	88 31       	cpi	r24, 0x18	; 24
     5a0:	a8 f5       	brcc	.+106    	; 0x60c <DIO_SetPinDirection+0x15e>
		{
			if(PinDirection== 1)
     5a2:	8a 81       	ldd	r24, Y+2	; 0x02
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	b9 f4       	brne	.+46     	; 0x5d6 <DIO_SetPinDirection+0x128>
			{
				Set_Bit( DDRC , (PinNum-16));
     5a8:	84 e3       	ldi	r24, 0x34	; 52
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	24 e3       	ldi	r18, 0x34	; 52
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	f9 01       	movw	r30, r18
     5b2:	20 81       	ld	r18, Z
     5b4:	62 2f       	mov	r22, r18
     5b6:	29 81       	ldd	r18, Y+1	; 0x01
     5b8:	22 2f       	mov	r18, r18
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	a9 01       	movw	r20, r18
     5be:	40 51       	subi	r20, 0x10	; 16
     5c0:	51 09       	sbc	r21, r1
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_SetPinDirection+0x11e>
     5c8:	22 0f       	add	r18, r18
     5ca:	33 1f       	adc	r19, r19
     5cc:	4a 95       	dec	r20
     5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_SetPinDirection+0x11a>
     5d0:	26 2b       	or	r18, r22
     5d2:	fc 01       	movw	r30, r24
     5d4:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     5d6:	8a 81       	ldd	r24, Y+2	; 0x02
     5d8:	88 23       	and	r24, r24
     5da:	c1 f4       	brne	.+48     	; 0x60c <DIO_SetPinDirection+0x15e>
			{
				Clear_Bit( DDRC , (PinNum-16));
     5dc:	84 e3       	ldi	r24, 0x34	; 52
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	24 e3       	ldi	r18, 0x34	; 52
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	f9 01       	movw	r30, r18
     5e6:	20 81       	ld	r18, Z
     5e8:	62 2f       	mov	r22, r18
     5ea:	29 81       	ldd	r18, Y+1	; 0x01
     5ec:	22 2f       	mov	r18, r18
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	a9 01       	movw	r20, r18
     5f2:	40 51       	subi	r20, 0x10	; 16
     5f4:	51 09       	sbc	r21, r1
     5f6:	21 e0       	ldi	r18, 0x01	; 1
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_SetPinDirection+0x152>
     5fc:	22 0f       	add	r18, r18
     5fe:	33 1f       	adc	r19, r19
     600:	4a 95       	dec	r20
     602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_SetPinDirection+0x14e>
     604:	20 95       	com	r18
     606:	26 23       	and	r18, r22
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
			}
		}
		
		if(PinNum > 24 && PinNum < 32)
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	89 31       	cpi	r24, 0x19	; 25
     610:	c0 f1       	brcs	.+112    	; 0x682 <DIO_SetPinDirection+0x1d4>
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	80 32       	cpi	r24, 0x20	; 32
     616:	a8 f5       	brcc	.+106    	; 0x682 <DIO_SetPinDirection+0x1d4>
		{
			if(PinDirection== 1)
     618:	8a 81       	ldd	r24, Y+2	; 0x02
     61a:	81 30       	cpi	r24, 0x01	; 1
     61c:	b9 f4       	brne	.+46     	; 0x64c <DIO_SetPinDirection+0x19e>
			{
				Set_Bit( DDRD , (PinNum-24));
     61e:	81 e3       	ldi	r24, 0x31	; 49
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	21 e3       	ldi	r18, 0x31	; 49
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	20 81       	ld	r18, Z
     62a:	62 2f       	mov	r22, r18
     62c:	29 81       	ldd	r18, Y+1	; 0x01
     62e:	22 2f       	mov	r18, r18
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	a9 01       	movw	r20, r18
     634:	48 51       	subi	r20, 0x18	; 24
     636:	51 09       	sbc	r21, r1
     638:	21 e0       	ldi	r18, 0x01	; 1
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_SetPinDirection+0x194>
     63e:	22 0f       	add	r18, r18
     640:	33 1f       	adc	r19, r19
     642:	4a 95       	dec	r20
     644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_SetPinDirection+0x190>
     646:	26 2b       	or	r18, r22
     648:	fc 01       	movw	r30, r24
     64a:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	88 23       	and	r24, r24
     650:	c1 f4       	brne	.+48     	; 0x682 <DIO_SetPinDirection+0x1d4>
			{
				Clear_Bit( DDRD , (PinNum-24));
     652:	81 e3       	ldi	r24, 0x31	; 49
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	21 e3       	ldi	r18, 0x31	; 49
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	f9 01       	movw	r30, r18
     65c:	20 81       	ld	r18, Z
     65e:	62 2f       	mov	r22, r18
     660:	29 81       	ldd	r18, Y+1	; 0x01
     662:	22 2f       	mov	r18, r18
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	a9 01       	movw	r20, r18
     668:	48 51       	subi	r20, 0x18	; 24
     66a:	51 09       	sbc	r21, r1
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_SetPinDirection+0x1c8>
     672:	22 0f       	add	r18, r18
     674:	33 1f       	adc	r19, r19
     676:	4a 95       	dec	r20
     678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_SetPinDirection+0x1c4>
     67a:	20 95       	com	r18
     67c:	26 23       	and	r18, r22
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
			}
		}
}
     682:	00 00       	nop
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	00 d0       	rcall	.+0      	; 0x694 <DIO_ReadPin+0x6>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	8a 83       	std	Y+2, r24	; 0x02
		uint8 return_value=0;
     69a:	19 82       	std	Y+1, r1	; 0x01
		if(PinNum >= 0 && PinNum < 8 )
     69c:	8a 81       	ldd	r24, Y+2	; 0x02
     69e:	88 30       	cpi	r24, 0x08	; 8
     6a0:	d8 f4       	brcc	.+54     	; 0x6d8 <DIO_ReadPin+0x4a>
		{
			return_value = Get_Bit(PINA , PinNum);
     6a2:	89 e3       	ldi	r24, 0x39	; 57
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	fc 01       	movw	r30, r24
     6a8:	80 81       	ld	r24, Z
     6aa:	28 2f       	mov	r18, r24
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	8a 81       	ldd	r24, Y+2	; 0x02
     6b0:	48 2f       	mov	r20, r24
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_ReadPin+0x30>
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	4a 95       	dec	r20
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_ReadPin+0x2c>
     6c2:	82 23       	and	r24, r18
     6c4:	93 23       	and	r25, r19
     6c6:	2a 81       	ldd	r18, Y+2	; 0x02
     6c8:	22 2f       	mov	r18, r18
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_ReadPin+0x44>
     6ce:	95 95       	asr	r25
     6d0:	87 95       	ror	r24
     6d2:	2a 95       	dec	r18
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_ReadPin+0x40>
     6d6:	89 83       	std	Y+1, r24	; 0x01
		}
		if(PinNum > 7 && PinNum < 16)
     6d8:	8a 81       	ldd	r24, Y+2	; 0x02
     6da:	88 30       	cpi	r24, 0x08	; 8
     6dc:	18 f1       	brcs	.+70     	; 0x724 <DIO_ReadPin+0x96>
     6de:	8a 81       	ldd	r24, Y+2	; 0x02
     6e0:	80 31       	cpi	r24, 0x10	; 16
     6e2:	00 f5       	brcc	.+64     	; 0x724 <DIO_ReadPin+0x96>
		{
			return_value = Get_Bit(PINB , (PinNum-8));
     6e4:	86 e3       	ldi	r24, 0x36	; 54
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	fc 01       	movw	r30, r24
     6ea:	80 81       	ld	r24, Z
     6ec:	28 2f       	mov	r18, r24
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	8a 81       	ldd	r24, Y+2	; 0x02
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	ac 01       	movw	r20, r24
     6f8:	48 50       	subi	r20, 0x08	; 8
     6fa:	51 09       	sbc	r21, r1
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_ReadPin+0x78>
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	4a 95       	dec	r20
     708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_ReadPin+0x74>
     70a:	82 23       	and	r24, r18
     70c:	93 23       	and	r25, r19
     70e:	2a 81       	ldd	r18, Y+2	; 0x02
     710:	22 2f       	mov	r18, r18
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	28 50       	subi	r18, 0x08	; 8
     716:	31 09       	sbc	r19, r1
     718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_ReadPin+0x90>
     71a:	95 95       	asr	r25
     71c:	87 95       	ror	r24
     71e:	2a 95       	dec	r18
     720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_ReadPin+0x8c>
     722:	89 83       	std	Y+1, r24	; 0x01
		}
		if(PinNum > 15 && PinNum < 24)
     724:	8a 81       	ldd	r24, Y+2	; 0x02
     726:	80 31       	cpi	r24, 0x10	; 16
     728:	18 f1       	brcs	.+70     	; 0x770 <DIO_ReadPin+0xe2>
     72a:	8a 81       	ldd	r24, Y+2	; 0x02
     72c:	88 31       	cpi	r24, 0x18	; 24
     72e:	00 f5       	brcc	.+64     	; 0x770 <DIO_ReadPin+0xe2>
		{
			return_value = Get_Bit(PINC , (PinNum-16));
     730:	83 e3       	ldi	r24, 0x33	; 51
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	fc 01       	movw	r30, r24
     736:	80 81       	ld	r24, Z
     738:	28 2f       	mov	r18, r24
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	8a 81       	ldd	r24, Y+2	; 0x02
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	ac 01       	movw	r20, r24
     744:	40 51       	subi	r20, 0x10	; 16
     746:	51 09       	sbc	r21, r1
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_ReadPin+0xc4>
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	4a 95       	dec	r20
     754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_ReadPin+0xc0>
     756:	82 23       	and	r24, r18
     758:	93 23       	and	r25, r19
     75a:	2a 81       	ldd	r18, Y+2	; 0x02
     75c:	22 2f       	mov	r18, r18
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	20 51       	subi	r18, 0x10	; 16
     762:	31 09       	sbc	r19, r1
     764:	02 c0       	rjmp	.+4      	; 0x76a <DIO_ReadPin+0xdc>
     766:	95 95       	asr	r25
     768:	87 95       	ror	r24
     76a:	2a 95       	dec	r18
     76c:	e2 f7       	brpl	.-8      	; 0x766 <DIO_ReadPin+0xd8>
     76e:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if(PinNum > 24 && PinNum < 32)
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	89 31       	cpi	r24, 0x19	; 25
     774:	18 f1       	brcs	.+70     	; 0x7bc <DIO_ReadPin+0x12e>
     776:	8a 81       	ldd	r24, Y+2	; 0x02
     778:	80 32       	cpi	r24, 0x20	; 32
     77a:	00 f5       	brcc	.+64     	; 0x7bc <DIO_ReadPin+0x12e>
		{
			return_value = Get_Bit(PIND , (PinNum-24));
     77c:	80 e3       	ldi	r24, 0x30	; 48
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	fc 01       	movw	r30, r24
     782:	80 81       	ld	r24, Z
     784:	28 2f       	mov	r18, r24
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	88 2f       	mov	r24, r24
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	ac 01       	movw	r20, r24
     790:	48 51       	subi	r20, 0x18	; 24
     792:	51 09       	sbc	r21, r1
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_ReadPin+0x110>
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	4a 95       	dec	r20
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <DIO_ReadPin+0x10c>
     7a2:	82 23       	and	r24, r18
     7a4:	93 23       	and	r25, r19
     7a6:	2a 81       	ldd	r18, Y+2	; 0x02
     7a8:	22 2f       	mov	r18, r18
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	28 51       	subi	r18, 0x18	; 24
     7ae:	31 09       	sbc	r19, r1
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_ReadPin+0x128>
     7b2:	95 95       	asr	r25
     7b4:	87 95       	ror	r24
     7b6:	2a 95       	dec	r18
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_ReadPin+0x124>
     7ba:	89 83       	std	Y+1, r24	; 0x01
		}
		return return_value;
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <Keypad_init>:

#include "Keypad.h"
#include "Keypad_cfg.h"

void Keypad_init()
{
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
	//Coloumns INPUT
	DIO_SetPinDirection(Keypad_Coloumn1_PIN,INPUT);
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	85 e1       	ldi	r24, 0x15	; 21
     7d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_Coloumn2_PIN,INPUT);
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	86 e1       	ldi	r24, 0x16	; 22
     7dc:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_Coloumn3_PIN,INPUT);
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	87 e1       	ldi	r24, 0x17	; 23
     7e4:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	
	//PUll UP Column
	DIO_WritePin(Keypad_Coloumn1_PIN,HIGH);
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	85 e1       	ldi	r24, 0x15	; 21
     7ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_Coloumn2_PIN,HIGH);
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	86 e1       	ldi	r24, 0x16	; 22
     7f4:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_Coloumn3_PIN,HIGH);
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	87 e1       	ldi	r24, 0x17	; 23
     7fc:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	
	//ROWS OUTPUT
	DIO_SetPinDirection(Keypad_ROW1_PIN,OUTPUT);
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	82 e1       	ldi	r24, 0x12	; 18
     804:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_ROW2_PIN,OUTPUT);
     808:	61 e0       	ldi	r22, 0x01	; 1
     80a:	83 e1       	ldi	r24, 0x13	; 19
     80c:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>
	DIO_SetPinDirection(Keypad_ROW3_PIN,OUTPUT);
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	84 e1       	ldi	r24, 0x14	; 20
     814:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_SetPinDirection>

}
     818:	00 00       	nop
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <Keypad_getPressedKey>:

uint8 Keypad_getPressedKey()
{
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	1f 92       	push	r1
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
	uint8 Pushed_Button = 0 ;
     82a:	19 82       	std	Y+1, r1	; 0x01
	DIO_WritePin(Keypad_ROW1_PIN,LOW);
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	82 e1       	ldi	r24, 0x12	; 18
     830:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW2_PIN,HIGH);
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	83 e1       	ldi	r24, 0x13	; 19
     838:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW3_PIN,HIGH);
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	84 e1       	ldi	r24, 0x14	; 20
     840:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     844:	85 e1       	ldi	r24, 0x15	; 21
     846:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     84a:	88 23       	and	r24, r24
     84c:	19 f4       	brne	.+6      	; 0x854 <Keypad_getPressedKey+0x34>
	{
		Pushed_Button = 1;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	0f c0       	rjmp	.+30     	; 0x872 <__stack+0x13>
	}
	else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     854:	86 e1       	ldi	r24, 0x16	; 22
     856:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     85a:	88 23       	and	r24, r24
     85c:	19 f4       	brne	.+6      	; 0x864 <__stack+0x5>
	{
		Pushed_Button = 2;
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	89 83       	std	Y+1, r24	; 0x01
     862:	07 c0       	rjmp	.+14     	; 0x872 <__stack+0x13>
	}
	else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     864:	87 e1       	ldi	r24, 0x17	; 23
     866:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     86a:	88 23       	and	r24, r24
     86c:	11 f4       	brne	.+4      	; 0x872 <__stack+0x13>
	{
		Pushed_Button = 3;
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_WritePin(Keypad_ROW1_PIN,HIGH);
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	82 e1       	ldi	r24, 0x12	; 18
     876:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW2_PIN,LOW);
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	83 e1       	ldi	r24, 0x13	; 19
     87e:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	DIO_WritePin(Keypad_ROW3_PIN,HIGH);
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	84 e1       	ldi	r24, 0x14	; 20
     886:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
	if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     88a:	85 e1       	ldi	r24, 0x15	; 21
     88c:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     890:	88 23       	and	r24, r24
     892:	19 f4       	brne	.+6      	; 0x89a <__stack+0x3b>
	{
			Pushed_Button = 4;
     894:	84 e0       	ldi	r24, 0x04	; 4
     896:	89 83       	std	Y+1, r24	; 0x01
     898:	0f c0       	rjmp	.+30     	; 0x8b8 <__stack+0x59>
	}
	else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     89a:	86 e1       	ldi	r24, 0x16	; 22
     89c:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8a0:	88 23       	and	r24, r24
     8a2:	19 f4       	brne	.+6      	; 0x8aa <__stack+0x4b>
	{
			Pushed_Button = 5;
     8a4:	85 e0       	ldi	r24, 0x05	; 5
     8a6:	89 83       	std	Y+1, r24	; 0x01
     8a8:	07 c0       	rjmp	.+14     	; 0x8b8 <__stack+0x59>
	}
	else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     8aa:	87 e1       	ldi	r24, 0x17	; 23
     8ac:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8b0:	88 23       	and	r24, r24
     8b2:	11 f4       	brne	.+4      	; 0x8b8 <__stack+0x59>
	{
			Pushed_Button = 6;
     8b4:	86 e0       	ldi	r24, 0x06	; 6
     8b6:	89 83       	std	Y+1, r24	; 0x01
	}
		DIO_WritePin(Keypad_ROW1_PIN,HIGH);
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	82 e1       	ldi	r24, 0x12	; 18
     8bc:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(Keypad_ROW2_PIN,HIGH);
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	83 e1       	ldi	r24, 0x13	; 19
     8c4:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		DIO_WritePin(Keypad_ROW3_PIN,LOW);
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	84 e1       	ldi	r24, 0x14	; 20
     8cc:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePin>
		if(DIO_ReadPin(Keypad_Coloumn1_PIN) == 0)
     8d0:	85 e1       	ldi	r24, 0x15	; 21
     8d2:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8d6:	88 23       	and	r24, r24
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__stack+0x81>
		{
			Pushed_Button = 7;
     8da:	87 e0       	ldi	r24, 0x07	; 7
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	0f c0       	rjmp	.+30     	; 0x8fe <__stack+0x9f>
		}
		else if(DIO_ReadPin(Keypad_Coloumn2_PIN) == 0)
     8e0:	86 e1       	ldi	r24, 0x16	; 22
     8e2:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8e6:	88 23       	and	r24, r24
     8e8:	19 f4       	brne	.+6      	; 0x8f0 <__stack+0x91>
		{
			Pushed_Button = 8;
     8ea:	88 e0       	ldi	r24, 0x08	; 8
     8ec:	89 83       	std	Y+1, r24	; 0x01
     8ee:	07 c0       	rjmp	.+14     	; 0x8fe <__stack+0x9f>
		}
		else if(DIO_ReadPin(Keypad_Coloumn3_PIN) == 0)
     8f0:	87 e1       	ldi	r24, 0x17	; 23
     8f2:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ReadPin>
     8f6:	88 23       	and	r24, r24
     8f8:	11 f4       	brne	.+4      	; 0x8fe <__stack+0x9f>
		{
			Pushed_Button = 9;
     8fa:	89 e0       	ldi	r24, 0x09	; 9
     8fc:	89 83       	std	Y+1, r24	; 0x01
		}
		return Pushed_Button;
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
	
     900:	0f 90       	pop	r0
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <LCD_init>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "avr/delay.h"

void LCD_init()
{
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
	
	
	#endif
	
	
}
     910:	00 00       	nop
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <main>:
#include "avr/delay.h"
#include "LCD.h"
#include "LCD_Cfg.h"

int main(void)
{
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	c9 51       	subi	r28, 0x19	; 25
     926:	d1 40       	sbci	r29, 0x01	; 1
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	BCDSevegments_Init();
     932:	0e 94 36 00 	call	0x6c	; 0x6c <BCDSevegments_Init>
	Keypad_init();
     936:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <Keypad_init>
	LCD_init();
     93a:	0e 94 84 04 	call	0x908	; 0x908 <LCD_init>
     93e:	9e 01       	movw	r18, r28
     940:	22 5b       	subi	r18, 0xB2	; 178
     942:	3f 4f       	sbci	r19, 0xFF	; 255
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	a0 ea       	ldi	r26, 0xA0	; 160
     94a:	b0 e4       	ldi	r27, 0x40	; 64
     94c:	f9 01       	movw	r30, r18
     94e:	80 83       	st	Z, r24
     950:	91 83       	std	Z+1, r25	; 0x01
     952:	a2 83       	std	Z+2, r26	; 0x02
     954:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     956:	8e 01       	movw	r16, r28
     958:	0e 5a       	subi	r16, 0xAE	; 174
     95a:	1f 4f       	sbci	r17, 0xFF	; 255
     95c:	ce 01       	movw	r24, r28
     95e:	82 5b       	subi	r24, 0xB2	; 178
     960:	9f 4f       	sbci	r25, 0xFF	; 255
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	4a e7       	ldi	r20, 0x7A	; 122
     968:	53 e4       	ldi	r21, 0x43	; 67
     96a:	fc 01       	movw	r30, r24
     96c:	60 81       	ld	r22, Z
     96e:	71 81       	ldd	r23, Z+1	; 0x01
     970:	82 81       	ldd	r24, Z+2	; 0x02
     972:	93 81       	ldd	r25, Z+3	; 0x03
     974:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	f8 01       	movw	r30, r16
     97e:	80 83       	st	Z, r24
     980:	91 83       	std	Z+1, r25	; 0x01
     982:	a2 83       	std	Z+2, r26	; 0x02
     984:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     986:	ce 01       	movw	r24, r28
     988:	8e 5a       	subi	r24, 0xAE	; 174
     98a:	9f 4f       	sbci	r25, 0xFF	; 255
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e8       	ldi	r20, 0x80	; 128
     992:	5f e3       	ldi	r21, 0x3F	; 63
     994:	fc 01       	movw	r30, r24
     996:	60 81       	ld	r22, Z
     998:	71 81       	ldd	r23, Z+1	; 0x01
     99a:	82 81       	ldd	r24, Z+2	; 0x02
     99c:	93 81       	ldd	r25, Z+3	; 0x03
     99e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     9a2:	88 23       	and	r24, r24
     9a4:	4c f4       	brge	.+18     	; 0x9b8 <main+0xa0>
		__ticks = 1;
     9a6:	ce 01       	movw	r24, r28
     9a8:	8a 5a       	subi	r24, 0xAA	; 170
     9aa:	9f 4f       	sbci	r25, 0xFF	; 255
     9ac:	21 e0       	ldi	r18, 0x01	; 1
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	fc 01       	movw	r30, r24
     9b2:	31 83       	std	Z+1, r19	; 0x01
     9b4:	20 83       	st	Z, r18
     9b6:	6d c0       	rjmp	.+218    	; 0xa92 <main+0x17a>
	else if (__tmp > 65535)
     9b8:	ce 01       	movw	r24, r28
     9ba:	8e 5a       	subi	r24, 0xAE	; 174
     9bc:	9f 4f       	sbci	r25, 0xFF	; 255
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	3f ef       	ldi	r19, 0xFF	; 255
     9c2:	4f e7       	ldi	r20, 0x7F	; 127
     9c4:	57 e4       	ldi	r21, 0x47	; 71
     9c6:	fc 01       	movw	r30, r24
     9c8:	60 81       	ld	r22, Z
     9ca:	71 81       	ldd	r23, Z+1	; 0x01
     9cc:	82 81       	ldd	r24, Z+2	; 0x02
     9ce:	93 81       	ldd	r25, Z+3	; 0x03
     9d0:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
     9d4:	18 16       	cp	r1, r24
     9d6:	0c f0       	brlt	.+2      	; 0x9da <main+0xc2>
     9d8:	4a c0       	rjmp	.+148    	; 0xa6e <main+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9da:	ce 01       	movw	r24, r28
     9dc:	82 5b       	subi	r24, 0xB2	; 178
     9de:	9f 4f       	sbci	r25, 0xFF	; 255
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e2       	ldi	r20, 0x20	; 32
     9e6:	51 e4       	ldi	r21, 0x41	; 65
     9e8:	fc 01       	movw	r30, r24
     9ea:	60 81       	ld	r22, Z
     9ec:	71 81       	ldd	r23, Z+1	; 0x01
     9ee:	82 81       	ldd	r24, Z+2	; 0x02
     9f0:	93 81       	ldd	r25, Z+3	; 0x03
     9f2:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
     9f6:	dc 01       	movw	r26, r24
     9f8:	cb 01       	movw	r24, r22
     9fa:	8e 01       	movw	r16, r28
     9fc:	0a 5a       	subi	r16, 0xAA	; 170
     9fe:	1f 4f       	sbci	r17, 0xFF	; 255
     a00:	bc 01       	movw	r22, r24
     a02:	cd 01       	movw	r24, r26
     a04:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	f8 01       	movw	r30, r16
     a0e:	91 83       	std	Z+1, r25	; 0x01
     a10:	80 83       	st	Z, r24
     a12:	24 c0       	rjmp	.+72     	; 0xa5c <main+0x144>
     a14:	ce 01       	movw	r24, r28
     a16:	88 5a       	subi	r24, 0xA8	; 168
     a18:	9f 4f       	sbci	r25, 0xFF	; 255
     a1a:	29 e1       	ldi	r18, 0x19	; 25
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	fc 01       	movw	r30, r24
     a20:	31 83       	std	Z+1, r19	; 0x01
     a22:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a24:	ce 01       	movw	r24, r28
     a26:	88 5a       	subi	r24, 0xA8	; 168
     a28:	9f 4f       	sbci	r25, 0xFF	; 255
     a2a:	fc 01       	movw	r30, r24
     a2c:	80 81       	ld	r24, Z
     a2e:	91 81       	ldd	r25, Z+1	; 0x01
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	f1 f7       	brne	.-4      	; 0xa30 <main+0x118>
     a34:	9e 01       	movw	r18, r28
     a36:	28 5a       	subi	r18, 0xA8	; 168
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	f9 01       	movw	r30, r18
     a3c:	91 83       	std	Z+1, r25	; 0x01
     a3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a40:	ce 01       	movw	r24, r28
     a42:	8a 5a       	subi	r24, 0xAA	; 170
     a44:	9f 4f       	sbci	r25, 0xFF	; 255
     a46:	9e 01       	movw	r18, r28
     a48:	2a 5a       	subi	r18, 0xAA	; 170
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	f9 01       	movw	r30, r18
     a4e:	20 81       	ld	r18, Z
     a50:	31 81       	ldd	r19, Z+1	; 0x01
     a52:	21 50       	subi	r18, 0x01	; 1
     a54:	31 09       	sbc	r19, r1
     a56:	fc 01       	movw	r30, r24
     a58:	31 83       	std	Z+1, r19	; 0x01
     a5a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a5c:	ce 01       	movw	r24, r28
     a5e:	8a 5a       	subi	r24, 0xAA	; 170
     a60:	9f 4f       	sbci	r25, 0xFF	; 255
     a62:	fc 01       	movw	r30, r24
     a64:	80 81       	ld	r24, Z
     a66:	91 81       	ldd	r25, Z+1	; 0x01
     a68:	89 2b       	or	r24, r25
     a6a:	a1 f6       	brne	.-88     	; 0xa14 <main+0xfc>
     a6c:	2c c0       	rjmp	.+88     	; 0xac6 <main+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a6e:	8e 01       	movw	r16, r28
     a70:	0a 5a       	subi	r16, 0xAA	; 170
     a72:	1f 4f       	sbci	r17, 0xFF	; 255
     a74:	ce 01       	movw	r24, r28
     a76:	8e 5a       	subi	r24, 0xAE	; 174
     a78:	9f 4f       	sbci	r25, 0xFF	; 255
     a7a:	fc 01       	movw	r30, r24
     a7c:	60 81       	ld	r22, Z
     a7e:	71 81       	ldd	r23, Z+1	; 0x01
     a80:	82 81       	ldd	r24, Z+2	; 0x02
     a82:	93 81       	ldd	r25, Z+3	; 0x03
     a84:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
     a88:	dc 01       	movw	r26, r24
     a8a:	cb 01       	movw	r24, r22
     a8c:	f8 01       	movw	r30, r16
     a8e:	91 83       	std	Z+1, r25	; 0x01
     a90:	80 83       	st	Z, r24
     a92:	ce 01       	movw	r24, r28
     a94:	86 5a       	subi	r24, 0xA6	; 166
     a96:	9f 4f       	sbci	r25, 0xFF	; 255
     a98:	9e 01       	movw	r18, r28
     a9a:	2a 5a       	subi	r18, 0xAA	; 170
     a9c:	3f 4f       	sbci	r19, 0xFF	; 255
     a9e:	f9 01       	movw	r30, r18
     aa0:	20 81       	ld	r18, Z
     aa2:	31 81       	ldd	r19, Z+1	; 0x01
     aa4:	fc 01       	movw	r30, r24
     aa6:	31 83       	std	Z+1, r19	; 0x01
     aa8:	20 83       	st	Z, r18
     aaa:	ce 01       	movw	r24, r28
     aac:	86 5a       	subi	r24, 0xA6	; 166
     aae:	9f 4f       	sbci	r25, 0xFF	; 255
     ab0:	fc 01       	movw	r30, r24
     ab2:	80 81       	ld	r24, Z
     ab4:	91 81       	ldd	r25, Z+1	; 0x01
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <main+0x19e>
     aba:	9e 01       	movw	r18, r28
     abc:	26 5a       	subi	r18, 0xA6	; 166
     abe:	3f 4f       	sbci	r19, 0xFF	; 255
     ac0:	f9 01       	movw	r30, r18
     ac2:	91 83       	std	Z+1, r25	; 0x01
     ac4:	80 83       	st	Z, r24
	_delay_ms(5);
	
    while (1) 
    {
		uint8 key = Keypad_getPressedKey();
     ac6:	0e 94 10 04 	call	0x820	; 0x820 <Keypad_getPressedKey>
     aca:	8d 83       	std	Y+5, r24	; 0x05
		if (key == 1)
     acc:	8d 81       	ldd	r24, Y+5	; 0x05
     ace:	81 30       	cpi	r24, 0x01	; 1
     ad0:	09 f0       	breq	.+2      	; 0xad4 <main+0x1bc>
     ad2:	7f c1       	rjmp	.+766    	; 0xdd2 <main+0x4ba>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	a8 e4       	ldi	r26, 0x48	; 72
     ada:	b2 e4       	ldi	r27, 0x42	; 66
     adc:	8a 87       	std	Y+10, r24	; 0x0a
     ade:	9b 87       	std	Y+11, r25	; 0x0b
     ae0:	ac 87       	std	Y+12, r26	; 0x0c
     ae2:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ae4:	8e 01       	movw	r16, r28
     ae6:	0a 59       	subi	r16, 0x9A	; 154
     ae8:	1f 4f       	sbci	r17, 0xFF	; 255
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	4a e7       	ldi	r20, 0x7A	; 122
     af0:	53 e4       	ldi	r21, 0x43	; 67
     af2:	6a 85       	ldd	r22, Y+10	; 0x0a
     af4:	7b 85       	ldd	r23, Y+11	; 0x0b
     af6:	8c 85       	ldd	r24, Y+12	; 0x0c
     af8:	9d 85       	ldd	r25, Y+13	; 0x0d
     afa:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
     afe:	dc 01       	movw	r26, r24
     b00:	cb 01       	movw	r24, r22
     b02:	f8 01       	movw	r30, r16
     b04:	80 83       	st	Z, r24
     b06:	91 83       	std	Z+1, r25	; 0x01
     b08:	a2 83       	std	Z+2, r26	; 0x02
     b0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b0c:	ce 01       	movw	r24, r28
     b0e:	8a 59       	subi	r24, 0x9A	; 154
     b10:	9f 4f       	sbci	r25, 0xFF	; 255
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e8       	ldi	r20, 0x80	; 128
     b18:	5f e3       	ldi	r21, 0x3F	; 63
     b1a:	fc 01       	movw	r30, r24
     b1c:	60 81       	ld	r22, Z
     b1e:	71 81       	ldd	r23, Z+1	; 0x01
     b20:	82 81       	ldd	r24, Z+2	; 0x02
     b22:	93 81       	ldd	r25, Z+3	; 0x03
     b24:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     b28:	88 23       	and	r24, r24
     b2a:	4c f4       	brge	.+18     	; 0xb3e <main+0x226>
		__ticks = 1;
     b2c:	ce 01       	movw	r24, r28
     b2e:	86 59       	subi	r24, 0x96	; 150
     b30:	9f 4f       	sbci	r25, 0xFF	; 255
     b32:	21 e0       	ldi	r18, 0x01	; 1
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	fc 01       	movw	r30, r24
     b38:	31 83       	std	Z+1, r19	; 0x01
     b3a:	20 83       	st	Z, r18
     b3c:	69 c0       	rjmp	.+210    	; 0xc10 <main+0x2f8>
	else if (__tmp > 65535)
     b3e:	ce 01       	movw	r24, r28
     b40:	8a 59       	subi	r24, 0x9A	; 154
     b42:	9f 4f       	sbci	r25, 0xFF	; 255
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	3f ef       	ldi	r19, 0xFF	; 255
     b48:	4f e7       	ldi	r20, 0x7F	; 127
     b4a:	57 e4       	ldi	r21, 0x47	; 71
     b4c:	fc 01       	movw	r30, r24
     b4e:	60 81       	ld	r22, Z
     b50:	71 81       	ldd	r23, Z+1	; 0x01
     b52:	82 81       	ldd	r24, Z+2	; 0x02
     b54:	93 81       	ldd	r25, Z+3	; 0x03
     b56:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
     b5a:	18 16       	cp	r1, r24
     b5c:	0c f0       	brlt	.+2      	; 0xb60 <main+0x248>
     b5e:	46 c0       	rjmp	.+140    	; 0xbec <main+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	40 e2       	ldi	r20, 0x20	; 32
     b66:	51 e4       	ldi	r21, 0x41	; 65
     b68:	6a 85       	ldd	r22, Y+10	; 0x0a
     b6a:	7b 85       	ldd	r23, Y+11	; 0x0b
     b6c:	8c 85       	ldd	r24, Y+12	; 0x0c
     b6e:	9d 85       	ldd	r25, Y+13	; 0x0d
     b70:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	8e 01       	movw	r16, r28
     b7a:	06 59       	subi	r16, 0x96	; 150
     b7c:	1f 4f       	sbci	r17, 0xFF	; 255
     b7e:	bc 01       	movw	r22, r24
     b80:	cd 01       	movw	r24, r26
     b82:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
     b86:	dc 01       	movw	r26, r24
     b88:	cb 01       	movw	r24, r22
     b8a:	f8 01       	movw	r30, r16
     b8c:	91 83       	std	Z+1, r25	; 0x01
     b8e:	80 83       	st	Z, r24
     b90:	24 c0       	rjmp	.+72     	; 0xbda <main+0x2c2>
     b92:	ce 01       	movw	r24, r28
     b94:	84 59       	subi	r24, 0x94	; 148
     b96:	9f 4f       	sbci	r25, 0xFF	; 255
     b98:	29 e1       	ldi	r18, 0x19	; 25
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	fc 01       	movw	r30, r24
     b9e:	31 83       	std	Z+1, r19	; 0x01
     ba0:	20 83       	st	Z, r18
     ba2:	ce 01       	movw	r24, r28
     ba4:	84 59       	subi	r24, 0x94	; 148
     ba6:	9f 4f       	sbci	r25, 0xFF	; 255
     ba8:	fc 01       	movw	r30, r24
     baa:	80 81       	ld	r24, Z
     bac:	91 81       	ldd	r25, Z+1	; 0x01
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <main+0x296>
     bb2:	9e 01       	movw	r18, r28
     bb4:	24 59       	subi	r18, 0x94	; 148
     bb6:	3f 4f       	sbci	r19, 0xFF	; 255
     bb8:	f9 01       	movw	r30, r18
     bba:	91 83       	std	Z+1, r25	; 0x01
     bbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bbe:	ce 01       	movw	r24, r28
     bc0:	86 59       	subi	r24, 0x96	; 150
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	9e 01       	movw	r18, r28
     bc6:	26 59       	subi	r18, 0x96	; 150
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	f9 01       	movw	r30, r18
     bcc:	20 81       	ld	r18, Z
     bce:	31 81       	ldd	r19, Z+1	; 0x01
     bd0:	21 50       	subi	r18, 0x01	; 1
     bd2:	31 09       	sbc	r19, r1
     bd4:	fc 01       	movw	r30, r24
     bd6:	31 83       	std	Z+1, r19	; 0x01
     bd8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bda:	ce 01       	movw	r24, r28
     bdc:	86 59       	subi	r24, 0x96	; 150
     bde:	9f 4f       	sbci	r25, 0xFF	; 255
     be0:	fc 01       	movw	r30, r24
     be2:	80 81       	ld	r24, Z
     be4:	91 81       	ldd	r25, Z+1	; 0x01
     be6:	89 2b       	or	r24, r25
     be8:	a1 f6       	brne	.-88     	; 0xb92 <main+0x27a>
     bea:	2c c0       	rjmp	.+88     	; 0xc44 <main+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bec:	8e 01       	movw	r16, r28
     bee:	06 59       	subi	r16, 0x96	; 150
     bf0:	1f 4f       	sbci	r17, 0xFF	; 255
     bf2:	ce 01       	movw	r24, r28
     bf4:	8a 59       	subi	r24, 0x9A	; 154
     bf6:	9f 4f       	sbci	r25, 0xFF	; 255
     bf8:	fc 01       	movw	r30, r24
     bfa:	60 81       	ld	r22, Z
     bfc:	71 81       	ldd	r23, Z+1	; 0x01
     bfe:	82 81       	ldd	r24, Z+2	; 0x02
     c00:	93 81       	ldd	r25, Z+3	; 0x03
     c02:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	f8 01       	movw	r30, r16
     c0c:	91 83       	std	Z+1, r25	; 0x01
     c0e:	80 83       	st	Z, r24
     c10:	ce 01       	movw	r24, r28
     c12:	82 59       	subi	r24, 0x92	; 146
     c14:	9f 4f       	sbci	r25, 0xFF	; 255
     c16:	9e 01       	movw	r18, r28
     c18:	26 59       	subi	r18, 0x96	; 150
     c1a:	3f 4f       	sbci	r19, 0xFF	; 255
     c1c:	f9 01       	movw	r30, r18
     c1e:	20 81       	ld	r18, Z
     c20:	31 81       	ldd	r19, Z+1	; 0x01
     c22:	fc 01       	movw	r30, r24
     c24:	31 83       	std	Z+1, r19	; 0x01
     c26:	20 83       	st	Z, r18
     c28:	ce 01       	movw	r24, r28
     c2a:	82 59       	subi	r24, 0x92	; 146
     c2c:	9f 4f       	sbci	r25, 0xFF	; 255
     c2e:	fc 01       	movw	r30, r24
     c30:	80 81       	ld	r24, Z
     c32:	91 81       	ldd	r25, Z+1	; 0x01
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <main+0x31c>
     c38:	9e 01       	movw	r18, r28
     c3a:	22 59       	subi	r18, 0x92	; 146
     c3c:	3f 4f       	sbci	r19, 0xFF	; 255
     c3e:	f9 01       	movw	r30, r18
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(ONE);
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(TWO);
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(THREE);
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(FOUR);
     c56:	84 e0       	ldi	r24, 0x04	; 4
     c58:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			//display one
			BCDSevegments_displayNo(ONE);
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	a8 e4       	ldi	r26, 0x48	; 72
     c68:	b2 e4       	ldi	r27, 0x42	; 66
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	9a 83       	std	Y+2, r25	; 0x02
     c6e:	ab 83       	std	Y+3, r26	; 0x03
     c70:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c72:	8e 01       	movw	r16, r28
     c74:	04 5a       	subi	r16, 0xA4	; 164
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	4a e7       	ldi	r20, 0x7A	; 122
     c7e:	53 e4       	ldi	r21, 0x43	; 67
     c80:	69 81       	ldd	r22, Y+1	; 0x01
     c82:	7a 81       	ldd	r23, Y+2	; 0x02
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	9c 81       	ldd	r25, Y+4	; 0x04
     c88:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	f8 01       	movw	r30, r16
     c92:	80 83       	st	Z, r24
     c94:	91 83       	std	Z+1, r25	; 0x01
     c96:	a2 83       	std	Z+2, r26	; 0x02
     c98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c9a:	ce 01       	movw	r24, r28
     c9c:	84 5a       	subi	r24, 0xA4	; 164
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e8       	ldi	r20, 0x80	; 128
     ca6:	5f e3       	ldi	r21, 0x3F	; 63
     ca8:	fc 01       	movw	r30, r24
     caa:	60 81       	ld	r22, Z
     cac:	71 81       	ldd	r23, Z+1	; 0x01
     cae:	82 81       	ldd	r24, Z+2	; 0x02
     cb0:	93 81       	ldd	r25, Z+3	; 0x03
     cb2:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     cb6:	88 23       	and	r24, r24
     cb8:	4c f4       	brge	.+18     	; 0xccc <main+0x3b4>
		__ticks = 1;
     cba:	ce 01       	movw	r24, r28
     cbc:	80 5a       	subi	r24, 0xA0	; 160
     cbe:	9f 4f       	sbci	r25, 0xFF	; 255
     cc0:	21 e0       	ldi	r18, 0x01	; 1
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	fc 01       	movw	r30, r24
     cc6:	31 83       	std	Z+1, r19	; 0x01
     cc8:	20 83       	st	Z, r18
     cca:	69 c0       	rjmp	.+210    	; 0xd9e <main+0x486>
	else if (__tmp > 65535)
     ccc:	ce 01       	movw	r24, r28
     cce:	84 5a       	subi	r24, 0xA4	; 164
     cd0:	9f 4f       	sbci	r25, 0xFF	; 255
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	3f ef       	ldi	r19, 0xFF	; 255
     cd6:	4f e7       	ldi	r20, 0x7F	; 127
     cd8:	57 e4       	ldi	r21, 0x47	; 71
     cda:	fc 01       	movw	r30, r24
     cdc:	60 81       	ld	r22, Z
     cde:	71 81       	ldd	r23, Z+1	; 0x01
     ce0:	82 81       	ldd	r24, Z+2	; 0x02
     ce2:	93 81       	ldd	r25, Z+3	; 0x03
     ce4:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
     ce8:	18 16       	cp	r1, r24
     cea:	0c f0       	brlt	.+2      	; 0xcee <main+0x3d6>
     cec:	46 c0       	rjmp	.+140    	; 0xd7a <main+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e2       	ldi	r20, 0x20	; 32
     cf4:	51 e4       	ldi	r21, 0x41	; 65
     cf6:	69 81       	ldd	r22, Y+1	; 0x01
     cf8:	7a 81       	ldd	r23, Y+2	; 0x02
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	9c 81       	ldd	r25, Y+4	; 0x04
     cfe:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	8e 01       	movw	r16, r28
     d08:	00 5a       	subi	r16, 0xA0	; 160
     d0a:	1f 4f       	sbci	r17, 0xFF	; 255
     d0c:	bc 01       	movw	r22, r24
     d0e:	cd 01       	movw	r24, r26
     d10:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
     d14:	dc 01       	movw	r26, r24
     d16:	cb 01       	movw	r24, r22
     d18:	f8 01       	movw	r30, r16
     d1a:	91 83       	std	Z+1, r25	; 0x01
     d1c:	80 83       	st	Z, r24
     d1e:	24 c0       	rjmp	.+72     	; 0xd68 <main+0x450>
     d20:	ce 01       	movw	r24, r28
     d22:	8e 59       	subi	r24, 0x9E	; 158
     d24:	9f 4f       	sbci	r25, 0xFF	; 255
     d26:	29 e1       	ldi	r18, 0x19	; 25
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	fc 01       	movw	r30, r24
     d2c:	31 83       	std	Z+1, r19	; 0x01
     d2e:	20 83       	st	Z, r18
     d30:	ce 01       	movw	r24, r28
     d32:	8e 59       	subi	r24, 0x9E	; 158
     d34:	9f 4f       	sbci	r25, 0xFF	; 255
     d36:	fc 01       	movw	r30, r24
     d38:	80 81       	ld	r24, Z
     d3a:	91 81       	ldd	r25, Z+1	; 0x01
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <main+0x424>
     d40:	9e 01       	movw	r18, r28
     d42:	2e 59       	subi	r18, 0x9E	; 158
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	f9 01       	movw	r30, r18
     d48:	91 83       	std	Z+1, r25	; 0x01
     d4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4c:	ce 01       	movw	r24, r28
     d4e:	80 5a       	subi	r24, 0xA0	; 160
     d50:	9f 4f       	sbci	r25, 0xFF	; 255
     d52:	9e 01       	movw	r18, r28
     d54:	20 5a       	subi	r18, 0xA0	; 160
     d56:	3f 4f       	sbci	r19, 0xFF	; 255
     d58:	f9 01       	movw	r30, r18
     d5a:	20 81       	ld	r18, Z
     d5c:	31 81       	ldd	r19, Z+1	; 0x01
     d5e:	21 50       	subi	r18, 0x01	; 1
     d60:	31 09       	sbc	r19, r1
     d62:	fc 01       	movw	r30, r24
     d64:	31 83       	std	Z+1, r19	; 0x01
     d66:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d68:	ce 01       	movw	r24, r28
     d6a:	80 5a       	subi	r24, 0xA0	; 160
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
     d6e:	fc 01       	movw	r30, r24
     d70:	80 81       	ld	r24, Z
     d72:	91 81       	ldd	r25, Z+1	; 0x01
     d74:	89 2b       	or	r24, r25
     d76:	a1 f6       	brne	.-88     	; 0xd20 <main+0x408>
     d78:	2c c0       	rjmp	.+88     	; 0xdd2 <main+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	8e 01       	movw	r16, r28
     d7c:	00 5a       	subi	r16, 0xA0	; 160
     d7e:	1f 4f       	sbci	r17, 0xFF	; 255
     d80:	ce 01       	movw	r24, r28
     d82:	84 5a       	subi	r24, 0xA4	; 164
     d84:	9f 4f       	sbci	r25, 0xFF	; 255
     d86:	fc 01       	movw	r30, r24
     d88:	60 81       	ld	r22, Z
     d8a:	71 81       	ldd	r23, Z+1	; 0x01
     d8c:	82 81       	ldd	r24, Z+2	; 0x02
     d8e:	93 81       	ldd	r25, Z+3	; 0x03
     d90:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	f8 01       	movw	r30, r16
     d9a:	91 83       	std	Z+1, r25	; 0x01
     d9c:	80 83       	st	Z, r24
     d9e:	ce 01       	movw	r24, r28
     da0:	8c 59       	subi	r24, 0x9C	; 156
     da2:	9f 4f       	sbci	r25, 0xFF	; 255
     da4:	9e 01       	movw	r18, r28
     da6:	20 5a       	subi	r18, 0xA0	; 160
     da8:	3f 4f       	sbci	r19, 0xFF	; 255
     daa:	f9 01       	movw	r30, r18
     dac:	20 81       	ld	r18, Z
     dae:	31 81       	ldd	r19, Z+1	; 0x01
     db0:	fc 01       	movw	r30, r24
     db2:	31 83       	std	Z+1, r19	; 0x01
     db4:	20 83       	st	Z, r18
     db6:	ce 01       	movw	r24, r28
     db8:	8c 59       	subi	r24, 0x9C	; 156
     dba:	9f 4f       	sbci	r25, 0xFF	; 255
     dbc:	fc 01       	movw	r30, r24
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <main+0x4aa>
     dc6:	9e 01       	movw	r18, r28
     dc8:	2c 59       	subi	r18, 0x9C	; 156
     dca:	3f 4f       	sbci	r19, 0xFF	; 255
     dcc:	f9 01       	movw	r30, r18
     dce:	91 83       	std	Z+1, r25	; 0x01
     dd0:	80 83       	st	Z, r24
			_delay_ms(50);
		}
		if(key == 2)
     dd2:	8d 81       	ldd	r24, Y+5	; 0x05
     dd4:	82 30       	cpi	r24, 0x02	; 2
     dd6:	09 f0       	breq	.+2      	; 0xdda <main+0x4c2>
     dd8:	7f c1       	rjmp	.+766    	; 0x10d8 <main+0x7c0>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a8 e4       	ldi	r26, 0x48	; 72
     de0:	b2 e4       	ldi	r27, 0x42	; 66
     de2:	8a 8b       	std	Y+18, r24	; 0x12
     de4:	9b 8b       	std	Y+19, r25	; 0x13
     de6:	ac 8b       	std	Y+20, r26	; 0x14
     de8:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dea:	8e 01       	movw	r16, r28
     dec:	06 58       	subi	r16, 0x86	; 134
     dee:	1f 4f       	sbci	r17, 0xFF	; 255
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	4a e7       	ldi	r20, 0x7A	; 122
     df6:	53 e4       	ldi	r21, 0x43	; 67
     df8:	6a 89       	ldd	r22, Y+18	; 0x12
     dfa:	7b 89       	ldd	r23, Y+19	; 0x13
     dfc:	8c 89       	ldd	r24, Y+20	; 0x14
     dfe:	9d 89       	ldd	r25, Y+21	; 0x15
     e00:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	f8 01       	movw	r30, r16
     e0a:	80 83       	st	Z, r24
     e0c:	91 83       	std	Z+1, r25	; 0x01
     e0e:	a2 83       	std	Z+2, r26	; 0x02
     e10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e12:	ce 01       	movw	r24, r28
     e14:	86 58       	subi	r24, 0x86	; 134
     e16:	9f 4f       	sbci	r25, 0xFF	; 255
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e8       	ldi	r20, 0x80	; 128
     e1e:	5f e3       	ldi	r21, 0x3F	; 63
     e20:	fc 01       	movw	r30, r24
     e22:	60 81       	ld	r22, Z
     e24:	71 81       	ldd	r23, Z+1	; 0x01
     e26:	82 81       	ldd	r24, Z+2	; 0x02
     e28:	93 81       	ldd	r25, Z+3	; 0x03
     e2a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     e2e:	88 23       	and	r24, r24
     e30:	4c f4       	brge	.+18     	; 0xe44 <main+0x52c>
		__ticks = 1;
     e32:	ce 01       	movw	r24, r28
     e34:	82 58       	subi	r24, 0x82	; 130
     e36:	9f 4f       	sbci	r25, 0xFF	; 255
     e38:	21 e0       	ldi	r18, 0x01	; 1
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	fc 01       	movw	r30, r24
     e3e:	31 83       	std	Z+1, r19	; 0x01
     e40:	20 83       	st	Z, r18
     e42:	69 c0       	rjmp	.+210    	; 0xf16 <main+0x5fe>
	else if (__tmp > 65535)
     e44:	ce 01       	movw	r24, r28
     e46:	86 58       	subi	r24, 0x86	; 134
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	3f ef       	ldi	r19, 0xFF	; 255
     e4e:	4f e7       	ldi	r20, 0x7F	; 127
     e50:	57 e4       	ldi	r21, 0x47	; 71
     e52:	fc 01       	movw	r30, r24
     e54:	60 81       	ld	r22, Z
     e56:	71 81       	ldd	r23, Z+1	; 0x01
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	93 81       	ldd	r25, Z+3	; 0x03
     e5c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
     e60:	18 16       	cp	r1, r24
     e62:	0c f0       	brlt	.+2      	; 0xe66 <main+0x54e>
     e64:	46 c0       	rjmp	.+140    	; 0xef2 <main+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e2       	ldi	r20, 0x20	; 32
     e6c:	51 e4       	ldi	r21, 0x41	; 65
     e6e:	6a 89       	ldd	r22, Y+18	; 0x12
     e70:	7b 89       	ldd	r23, Y+19	; 0x13
     e72:	8c 89       	ldd	r24, Y+20	; 0x14
     e74:	9d 89       	ldd	r25, Y+21	; 0x15
     e76:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	8e 01       	movw	r16, r28
     e80:	02 58       	subi	r16, 0x82	; 130
     e82:	1f 4f       	sbci	r17, 0xFF	; 255
     e84:	bc 01       	movw	r22, r24
     e86:	cd 01       	movw	r24, r26
     e88:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	f8 01       	movw	r30, r16
     e92:	91 83       	std	Z+1, r25	; 0x01
     e94:	80 83       	st	Z, r24
     e96:	24 c0       	rjmp	.+72     	; 0xee0 <main+0x5c8>
     e98:	ce 01       	movw	r24, r28
     e9a:	80 58       	subi	r24, 0x80	; 128
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	29 e1       	ldi	r18, 0x19	; 25
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	fc 01       	movw	r30, r24
     ea4:	31 83       	std	Z+1, r19	; 0x01
     ea6:	20 83       	st	Z, r18
     ea8:	ce 01       	movw	r24, r28
     eaa:	80 58       	subi	r24, 0x80	; 128
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	fc 01       	movw	r30, r24
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <main+0x59c>
     eb8:	9e 01       	movw	r18, r28
     eba:	20 58       	subi	r18, 0x80	; 128
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	f9 01       	movw	r30, r18
     ec0:	91 83       	std	Z+1, r25	; 0x01
     ec2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec4:	ce 01       	movw	r24, r28
     ec6:	82 58       	subi	r24, 0x82	; 130
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	9e 01       	movw	r18, r28
     ecc:	22 58       	subi	r18, 0x82	; 130
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	f9 01       	movw	r30, r18
     ed2:	20 81       	ld	r18, Z
     ed4:	31 81       	ldd	r19, Z+1	; 0x01
     ed6:	21 50       	subi	r18, 0x01	; 1
     ed8:	31 09       	sbc	r19, r1
     eda:	fc 01       	movw	r30, r24
     edc:	31 83       	std	Z+1, r19	; 0x01
     ede:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee0:	ce 01       	movw	r24, r28
     ee2:	82 58       	subi	r24, 0x82	; 130
     ee4:	9f 4f       	sbci	r25, 0xFF	; 255
     ee6:	fc 01       	movw	r30, r24
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01
     eec:	89 2b       	or	r24, r25
     eee:	a1 f6       	brne	.-88     	; 0xe98 <main+0x580>
     ef0:	2c c0       	rjmp	.+88     	; 0xf4a <main+0x632>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef2:	8e 01       	movw	r16, r28
     ef4:	02 58       	subi	r16, 0x82	; 130
     ef6:	1f 4f       	sbci	r17, 0xFF	; 255
     ef8:	ce 01       	movw	r24, r28
     efa:	86 58       	subi	r24, 0x86	; 134
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	fc 01       	movw	r30, r24
     f00:	60 81       	ld	r22, Z
     f02:	71 81       	ldd	r23, Z+1	; 0x01
     f04:	82 81       	ldd	r24, Z+2	; 0x02
     f06:	93 81       	ldd	r25, Z+3	; 0x03
     f08:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	f8 01       	movw	r30, r16
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	80 83       	st	Z, r24
     f16:	ce 01       	movw	r24, r28
     f18:	8e 57       	subi	r24, 0x7E	; 126
     f1a:	9f 4f       	sbci	r25, 0xFF	; 255
     f1c:	9e 01       	movw	r18, r28
     f1e:	22 58       	subi	r18, 0x82	; 130
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	f9 01       	movw	r30, r18
     f24:	20 81       	ld	r18, Z
     f26:	31 81       	ldd	r19, Z+1	; 0x01
     f28:	fc 01       	movw	r30, r24
     f2a:	31 83       	std	Z+1, r19	; 0x01
     f2c:	20 83       	st	Z, r18
     f2e:	ce 01       	movw	r24, r28
     f30:	8e 57       	subi	r24, 0x7E	; 126
     f32:	9f 4f       	sbci	r25, 0xFF	; 255
     f34:	fc 01       	movw	r30, r24
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <main+0x622>
     f3e:	9e 01       	movw	r18, r28
     f40:	2e 57       	subi	r18, 0x7E	; 126
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	f9 01       	movw	r30, r18
     f46:	91 83       	std	Z+1, r25	; 0x01
     f48:	80 83       	st	Z, r24
		{
			_delay_ms(50);
		BCDSevegments_enable(ONE);
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(TWO);
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(THREE);
     f56:	83 e0       	ldi	r24, 0x03	; 3
     f58:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(FOUR);
     f5c:	84 e0       	ldi	r24, 0x04	; 4
     f5e:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_displayNo(TWO);
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a8 e4       	ldi	r26, 0x48	; 72
     f6e:	b2 e4       	ldi	r27, 0x42	; 66
     f70:	8e 83       	std	Y+6, r24	; 0x06
     f72:	9f 83       	std	Y+7, r25	; 0x07
     f74:	a8 87       	std	Y+8, r26	; 0x08
     f76:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f78:	8e 01       	movw	r16, r28
     f7a:	00 59       	subi	r16, 0x90	; 144
     f7c:	1f 4f       	sbci	r17, 0xFF	; 255
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	4a e7       	ldi	r20, 0x7A	; 122
     f84:	53 e4       	ldi	r21, 0x43	; 67
     f86:	6e 81       	ldd	r22, Y+6	; 0x06
     f88:	7f 81       	ldd	r23, Y+7	; 0x07
     f8a:	88 85       	ldd	r24, Y+8	; 0x08
     f8c:	99 85       	ldd	r25, Y+9	; 0x09
     f8e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	f8 01       	movw	r30, r16
     f98:	80 83       	st	Z, r24
     f9a:	91 83       	std	Z+1, r25	; 0x01
     f9c:	a2 83       	std	Z+2, r26	; 0x02
     f9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fa0:	ce 01       	movw	r24, r28
     fa2:	80 59       	subi	r24, 0x90	; 144
     fa4:	9f 4f       	sbci	r25, 0xFF	; 255
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e8       	ldi	r20, 0x80	; 128
     fac:	5f e3       	ldi	r21, 0x3F	; 63
     fae:	fc 01       	movw	r30, r24
     fb0:	60 81       	ld	r22, Z
     fb2:	71 81       	ldd	r23, Z+1	; 0x01
     fb4:	82 81       	ldd	r24, Z+2	; 0x02
     fb6:	93 81       	ldd	r25, Z+3	; 0x03
     fb8:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
     fbc:	88 23       	and	r24, r24
     fbe:	4c f4       	brge	.+18     	; 0xfd2 <main+0x6ba>
		__ticks = 1;
     fc0:	ce 01       	movw	r24, r28
     fc2:	8c 58       	subi	r24, 0x8C	; 140
     fc4:	9f 4f       	sbci	r25, 0xFF	; 255
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	fc 01       	movw	r30, r24
     fcc:	31 83       	std	Z+1, r19	; 0x01
     fce:	20 83       	st	Z, r18
     fd0:	69 c0       	rjmp	.+210    	; 0x10a4 <main+0x78c>
	else if (__tmp > 65535)
     fd2:	ce 01       	movw	r24, r28
     fd4:	80 59       	subi	r24, 0x90	; 144
     fd6:	9f 4f       	sbci	r25, 0xFF	; 255
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	3f ef       	ldi	r19, 0xFF	; 255
     fdc:	4f e7       	ldi	r20, 0x7F	; 127
     fde:	57 e4       	ldi	r21, 0x47	; 71
     fe0:	fc 01       	movw	r30, r24
     fe2:	60 81       	ld	r22, Z
     fe4:	71 81       	ldd	r23, Z+1	; 0x01
     fe6:	82 81       	ldd	r24, Z+2	; 0x02
     fe8:	93 81       	ldd	r25, Z+3	; 0x03
     fea:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
     fee:	18 16       	cp	r1, r24
     ff0:	0c f0       	brlt	.+2      	; 0xff4 <main+0x6dc>
     ff2:	46 c0       	rjmp	.+140    	; 0x1080 <main+0x768>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e2       	ldi	r20, 0x20	; 32
     ffa:	51 e4       	ldi	r21, 0x41	; 65
     ffc:	6e 81       	ldd	r22, Y+6	; 0x06
     ffe:	7f 81       	ldd	r23, Y+7	; 0x07
    1000:	88 85       	ldd	r24, Y+8	; 0x08
    1002:	99 85       	ldd	r25, Y+9	; 0x09
    1004:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	8e 01       	movw	r16, r28
    100e:	0c 58       	subi	r16, 0x8C	; 140
    1010:	1f 4f       	sbci	r17, 0xFF	; 255
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	f8 01       	movw	r30, r16
    1020:	91 83       	std	Z+1, r25	; 0x01
    1022:	80 83       	st	Z, r24
    1024:	24 c0       	rjmp	.+72     	; 0x106e <main+0x756>
    1026:	ce 01       	movw	r24, r28
    1028:	8a 58       	subi	r24, 0x8A	; 138
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	29 e1       	ldi	r18, 0x19	; 25
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	fc 01       	movw	r30, r24
    1032:	31 83       	std	Z+1, r19	; 0x01
    1034:	20 83       	st	Z, r18
    1036:	ce 01       	movw	r24, r28
    1038:	8a 58       	subi	r24, 0x8A	; 138
    103a:	9f 4f       	sbci	r25, 0xFF	; 255
    103c:	fc 01       	movw	r30, r24
    103e:	80 81       	ld	r24, Z
    1040:	91 81       	ldd	r25, Z+1	; 0x01
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <main+0x72a>
    1046:	9e 01       	movw	r18, r28
    1048:	2a 58       	subi	r18, 0x8A	; 138
    104a:	3f 4f       	sbci	r19, 0xFF	; 255
    104c:	f9 01       	movw	r30, r18
    104e:	91 83       	std	Z+1, r25	; 0x01
    1050:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1052:	ce 01       	movw	r24, r28
    1054:	8c 58       	subi	r24, 0x8C	; 140
    1056:	9f 4f       	sbci	r25, 0xFF	; 255
    1058:	9e 01       	movw	r18, r28
    105a:	2c 58       	subi	r18, 0x8C	; 140
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
    105e:	f9 01       	movw	r30, r18
    1060:	20 81       	ld	r18, Z
    1062:	31 81       	ldd	r19, Z+1	; 0x01
    1064:	21 50       	subi	r18, 0x01	; 1
    1066:	31 09       	sbc	r19, r1
    1068:	fc 01       	movw	r30, r24
    106a:	31 83       	std	Z+1, r19	; 0x01
    106c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106e:	ce 01       	movw	r24, r28
    1070:	8c 58       	subi	r24, 0x8C	; 140
    1072:	9f 4f       	sbci	r25, 0xFF	; 255
    1074:	fc 01       	movw	r30, r24
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	89 2b       	or	r24, r25
    107c:	a1 f6       	brne	.-88     	; 0x1026 <main+0x70e>
    107e:	2c c0       	rjmp	.+88     	; 0x10d8 <main+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1080:	8e 01       	movw	r16, r28
    1082:	0c 58       	subi	r16, 0x8C	; 140
    1084:	1f 4f       	sbci	r17, 0xFF	; 255
    1086:	ce 01       	movw	r24, r28
    1088:	80 59       	subi	r24, 0x90	; 144
    108a:	9f 4f       	sbci	r25, 0xFF	; 255
    108c:	fc 01       	movw	r30, r24
    108e:	60 81       	ld	r22, Z
    1090:	71 81       	ldd	r23, Z+1	; 0x01
    1092:	82 81       	ldd	r24, Z+2	; 0x02
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	f8 01       	movw	r30, r16
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	80 83       	st	Z, r24
    10a4:	ce 01       	movw	r24, r28
    10a6:	88 58       	subi	r24, 0x88	; 136
    10a8:	9f 4f       	sbci	r25, 0xFF	; 255
    10aa:	9e 01       	movw	r18, r28
    10ac:	2c 58       	subi	r18, 0x8C	; 140
    10ae:	3f 4f       	sbci	r19, 0xFF	; 255
    10b0:	f9 01       	movw	r30, r18
    10b2:	20 81       	ld	r18, Z
    10b4:	31 81       	ldd	r19, Z+1	; 0x01
    10b6:	fc 01       	movw	r30, r24
    10b8:	31 83       	std	Z+1, r19	; 0x01
    10ba:	20 83       	st	Z, r18
    10bc:	ce 01       	movw	r24, r28
    10be:	88 58       	subi	r24, 0x88	; 136
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	fc 01       	movw	r30, r24
    10c4:	80 81       	ld	r24, Z
    10c6:	91 81       	ldd	r25, Z+1	; 0x01
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <main+0x7b0>
    10cc:	9e 01       	movw	r18, r28
    10ce:	28 58       	subi	r18, 0x88	; 136
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	f9 01       	movw	r30, r18
    10d4:	91 83       	std	Z+1, r25	; 0x01
    10d6:	80 83       	st	Z, r24
			_delay_ms(50);
		}
		if(key == 3)
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <main+0x7c8>
    10de:	7f c1       	rjmp	.+766    	; 0x13de <main+0xac6>
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	a8 e4       	ldi	r26, 0x48	; 72
    10e6:	b2 e4       	ldi	r27, 0x42	; 66
    10e8:	8a 8f       	std	Y+26, r24	; 0x1a
    10ea:	9b 8f       	std	Y+27, r25	; 0x1b
    10ec:	ac 8f       	std	Y+28, r26	; 0x1c
    10ee:	bd 8f       	std	Y+29, r27	; 0x1d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10f0:	8e 01       	movw	r16, r28
    10f2:	02 57       	subi	r16, 0x72	; 114
    10f4:	1f 4f       	sbci	r17, 0xFF	; 255
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	4a e7       	ldi	r20, 0x7A	; 122
    10fc:	53 e4       	ldi	r21, 0x43	; 67
    10fe:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1100:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1102:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1104:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1106:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	f8 01       	movw	r30, r16
    1110:	80 83       	st	Z, r24
    1112:	91 83       	std	Z+1, r25	; 0x01
    1114:	a2 83       	std	Z+2, r26	; 0x02
    1116:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1118:	ce 01       	movw	r24, r28
    111a:	82 57       	subi	r24, 0x72	; 114
    111c:	9f 4f       	sbci	r25, 0xFF	; 255
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e8       	ldi	r20, 0x80	; 128
    1124:	5f e3       	ldi	r21, 0x3F	; 63
    1126:	fc 01       	movw	r30, r24
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    1134:	88 23       	and	r24, r24
    1136:	4c f4       	brge	.+18     	; 0x114a <main+0x832>
		__ticks = 1;
    1138:	ce 01       	movw	r24, r28
    113a:	8e 56       	subi	r24, 0x6E	; 110
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	21 e0       	ldi	r18, 0x01	; 1
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	fc 01       	movw	r30, r24
    1144:	31 83       	std	Z+1, r19	; 0x01
    1146:	20 83       	st	Z, r18
    1148:	69 c0       	rjmp	.+210    	; 0x121c <main+0x904>
	else if (__tmp > 65535)
    114a:	ce 01       	movw	r24, r28
    114c:	82 57       	subi	r24, 0x72	; 114
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	3f ef       	ldi	r19, 0xFF	; 255
    1154:	4f e7       	ldi	r20, 0x7F	; 127
    1156:	57 e4       	ldi	r21, 0x47	; 71
    1158:	fc 01       	movw	r30, r24
    115a:	60 81       	ld	r22, Z
    115c:	71 81       	ldd	r23, Z+1	; 0x01
    115e:	82 81       	ldd	r24, Z+2	; 0x02
    1160:	93 81       	ldd	r25, Z+3	; 0x03
    1162:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
    1166:	18 16       	cp	r1, r24
    1168:	0c f0       	brlt	.+2      	; 0x116c <main+0x854>
    116a:	46 c0       	rjmp	.+140    	; 0x11f8 <main+0x8e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e2       	ldi	r20, 0x20	; 32
    1172:	51 e4       	ldi	r21, 0x41	; 65
    1174:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1176:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1178:	8c 8d       	ldd	r24, Y+28	; 0x1c
    117a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    117c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	8e 01       	movw	r16, r28
    1186:	0e 56       	subi	r16, 0x6E	; 110
    1188:	1f 4f       	sbci	r17, 0xFF	; 255
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	f8 01       	movw	r30, r16
    1198:	91 83       	std	Z+1, r25	; 0x01
    119a:	80 83       	st	Z, r24
    119c:	24 c0       	rjmp	.+72     	; 0x11e6 <main+0x8ce>
    119e:	ce 01       	movw	r24, r28
    11a0:	8c 56       	subi	r24, 0x6C	; 108
    11a2:	9f 4f       	sbci	r25, 0xFF	; 255
    11a4:	29 e1       	ldi	r18, 0x19	; 25
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	fc 01       	movw	r30, r24
    11aa:	31 83       	std	Z+1, r19	; 0x01
    11ac:	20 83       	st	Z, r18
    11ae:	ce 01       	movw	r24, r28
    11b0:	8c 56       	subi	r24, 0x6C	; 108
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	fc 01       	movw	r30, r24
    11b6:	80 81       	ld	r24, Z
    11b8:	91 81       	ldd	r25, Z+1	; 0x01
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <main+0x8a2>
    11be:	9e 01       	movw	r18, r28
    11c0:	2c 56       	subi	r18, 0x6C	; 108
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	f9 01       	movw	r30, r18
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ca:	ce 01       	movw	r24, r28
    11cc:	8e 56       	subi	r24, 0x6E	; 110
    11ce:	9f 4f       	sbci	r25, 0xFF	; 255
    11d0:	9e 01       	movw	r18, r28
    11d2:	2e 56       	subi	r18, 0x6E	; 110
    11d4:	3f 4f       	sbci	r19, 0xFF	; 255
    11d6:	f9 01       	movw	r30, r18
    11d8:	20 81       	ld	r18, Z
    11da:	31 81       	ldd	r19, Z+1	; 0x01
    11dc:	21 50       	subi	r18, 0x01	; 1
    11de:	31 09       	sbc	r19, r1
    11e0:	fc 01       	movw	r30, r24
    11e2:	31 83       	std	Z+1, r19	; 0x01
    11e4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e6:	ce 01       	movw	r24, r28
    11e8:	8e 56       	subi	r24, 0x6E	; 110
    11ea:	9f 4f       	sbci	r25, 0xFF	; 255
    11ec:	fc 01       	movw	r30, r24
    11ee:	80 81       	ld	r24, Z
    11f0:	91 81       	ldd	r25, Z+1	; 0x01
    11f2:	89 2b       	or	r24, r25
    11f4:	a1 f6       	brne	.-88     	; 0x119e <main+0x886>
    11f6:	2c c0       	rjmp	.+88     	; 0x1250 <main+0x938>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f8:	8e 01       	movw	r16, r28
    11fa:	0e 56       	subi	r16, 0x6E	; 110
    11fc:	1f 4f       	sbci	r17, 0xFF	; 255
    11fe:	ce 01       	movw	r24, r28
    1200:	82 57       	subi	r24, 0x72	; 114
    1202:	9f 4f       	sbci	r25, 0xFF	; 255
    1204:	fc 01       	movw	r30, r24
    1206:	60 81       	ld	r22, Z
    1208:	71 81       	ldd	r23, Z+1	; 0x01
    120a:	82 81       	ldd	r24, Z+2	; 0x02
    120c:	93 81       	ldd	r25, Z+3	; 0x03
    120e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	f8 01       	movw	r30, r16
    1218:	91 83       	std	Z+1, r25	; 0x01
    121a:	80 83       	st	Z, r24
    121c:	ce 01       	movw	r24, r28
    121e:	8a 56       	subi	r24, 0x6A	; 106
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	9e 01       	movw	r18, r28
    1224:	2e 56       	subi	r18, 0x6E	; 110
    1226:	3f 4f       	sbci	r19, 0xFF	; 255
    1228:	f9 01       	movw	r30, r18
    122a:	20 81       	ld	r18, Z
    122c:	31 81       	ldd	r19, Z+1	; 0x01
    122e:	fc 01       	movw	r30, r24
    1230:	31 83       	std	Z+1, r19	; 0x01
    1232:	20 83       	st	Z, r18
    1234:	ce 01       	movw	r24, r28
    1236:	8a 56       	subi	r24, 0x6A	; 106
    1238:	9f 4f       	sbci	r25, 0xFF	; 255
    123a:	fc 01       	movw	r30, r24
    123c:	80 81       	ld	r24, Z
    123e:	91 81       	ldd	r25, Z+1	; 0x01
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	f1 f7       	brne	.-4      	; 0x1240 <main+0x928>
    1244:	9e 01       	movw	r18, r28
    1246:	2a 56       	subi	r18, 0x6A	; 106
    1248:	3f 4f       	sbci	r19, 0xFF	; 255
    124a:	f9 01       	movw	r30, r18
    124c:	91 83       	std	Z+1, r25	; 0x01
    124e:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(ONE);
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(TWO);
    1256:	82 e0       	ldi	r24, 0x02	; 2
    1258:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(THREE);
    125c:	83 e0       	ldi	r24, 0x03	; 3
    125e:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(FOUR);
    1262:	84 e0       	ldi	r24, 0x04	; 4
    1264:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_displayNo(THREE);
    1268:	83 e0       	ldi	r24, 0x03	; 3
    126a:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	a8 e4       	ldi	r26, 0x48	; 72
    1274:	b2 e4       	ldi	r27, 0x42	; 66
    1276:	8e 87       	std	Y+14, r24	; 0x0e
    1278:	9f 87       	std	Y+15, r25	; 0x0f
    127a:	a8 8b       	std	Y+16, r26	; 0x10
    127c:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    127e:	8e 01       	movw	r16, r28
    1280:	0c 57       	subi	r16, 0x7C	; 124
    1282:	1f 4f       	sbci	r17, 0xFF	; 255
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4a e7       	ldi	r20, 0x7A	; 122
    128a:	53 e4       	ldi	r21, 0x43	; 67
    128c:	6e 85       	ldd	r22, Y+14	; 0x0e
    128e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1290:	88 89       	ldd	r24, Y+16	; 0x10
    1292:	99 89       	ldd	r25, Y+17	; 0x11
    1294:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	f8 01       	movw	r30, r16
    129e:	80 83       	st	Z, r24
    12a0:	91 83       	std	Z+1, r25	; 0x01
    12a2:	a2 83       	std	Z+2, r26	; 0x02
    12a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12a6:	ce 01       	movw	r24, r28
    12a8:	8c 57       	subi	r24, 0x7C	; 124
    12aa:	9f 4f       	sbci	r25, 0xFF	; 255
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e8       	ldi	r20, 0x80	; 128
    12b2:	5f e3       	ldi	r21, 0x3F	; 63
    12b4:	fc 01       	movw	r30, r24
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	93 81       	ldd	r25, Z+3	; 0x03
    12be:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    12c2:	88 23       	and	r24, r24
    12c4:	4c f4       	brge	.+18     	; 0x12d8 <main+0x9c0>
		__ticks = 1;
    12c6:	ce 01       	movw	r24, r28
    12c8:	88 57       	subi	r24, 0x78	; 120
    12ca:	9f 4f       	sbci	r25, 0xFF	; 255
    12cc:	21 e0       	ldi	r18, 0x01	; 1
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	fc 01       	movw	r30, r24
    12d2:	31 83       	std	Z+1, r19	; 0x01
    12d4:	20 83       	st	Z, r18
    12d6:	69 c0       	rjmp	.+210    	; 0x13aa <main+0xa92>
	else if (__tmp > 65535)
    12d8:	ce 01       	movw	r24, r28
    12da:	8c 57       	subi	r24, 0x7C	; 124
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	3f ef       	ldi	r19, 0xFF	; 255
    12e2:	4f e7       	ldi	r20, 0x7F	; 127
    12e4:	57 e4       	ldi	r21, 0x47	; 71
    12e6:	fc 01       	movw	r30, r24
    12e8:	60 81       	ld	r22, Z
    12ea:	71 81       	ldd	r23, Z+1	; 0x01
    12ec:	82 81       	ldd	r24, Z+2	; 0x02
    12ee:	93 81       	ldd	r25, Z+3	; 0x03
    12f0:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
    12f4:	18 16       	cp	r1, r24
    12f6:	0c f0       	brlt	.+2      	; 0x12fa <main+0x9e2>
    12f8:	46 c0       	rjmp	.+140    	; 0x1386 <main+0xa6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e2       	ldi	r20, 0x20	; 32
    1300:	51 e4       	ldi	r21, 0x41	; 65
    1302:	6e 85       	ldd	r22, Y+14	; 0x0e
    1304:	7f 85       	ldd	r23, Y+15	; 0x0f
    1306:	88 89       	ldd	r24, Y+16	; 0x10
    1308:	99 89       	ldd	r25, Y+17	; 0x11
    130a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	8e 01       	movw	r16, r28
    1314:	08 57       	subi	r16, 0x78	; 120
    1316:	1f 4f       	sbci	r17, 0xFF	; 255
    1318:	bc 01       	movw	r22, r24
    131a:	cd 01       	movw	r24, r26
    131c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	f8 01       	movw	r30, r16
    1326:	91 83       	std	Z+1, r25	; 0x01
    1328:	80 83       	st	Z, r24
    132a:	24 c0       	rjmp	.+72     	; 0x1374 <main+0xa5c>
    132c:	ce 01       	movw	r24, r28
    132e:	86 57       	subi	r24, 0x76	; 118
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	29 e1       	ldi	r18, 0x19	; 25
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	fc 01       	movw	r30, r24
    1338:	31 83       	std	Z+1, r19	; 0x01
    133a:	20 83       	st	Z, r18
    133c:	ce 01       	movw	r24, r28
    133e:	86 57       	subi	r24, 0x76	; 118
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	fc 01       	movw	r30, r24
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <main+0xa30>
    134c:	9e 01       	movw	r18, r28
    134e:	26 57       	subi	r18, 0x76	; 118
    1350:	3f 4f       	sbci	r19, 0xFF	; 255
    1352:	f9 01       	movw	r30, r18
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1358:	ce 01       	movw	r24, r28
    135a:	88 57       	subi	r24, 0x78	; 120
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	9e 01       	movw	r18, r28
    1360:	28 57       	subi	r18, 0x78	; 120
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	f9 01       	movw	r30, r18
    1366:	20 81       	ld	r18, Z
    1368:	31 81       	ldd	r19, Z+1	; 0x01
    136a:	21 50       	subi	r18, 0x01	; 1
    136c:	31 09       	sbc	r19, r1
    136e:	fc 01       	movw	r30, r24
    1370:	31 83       	std	Z+1, r19	; 0x01
    1372:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1374:	ce 01       	movw	r24, r28
    1376:	88 57       	subi	r24, 0x78	; 120
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	fc 01       	movw	r30, r24
    137c:	80 81       	ld	r24, Z
    137e:	91 81       	ldd	r25, Z+1	; 0x01
    1380:	89 2b       	or	r24, r25
    1382:	a1 f6       	brne	.-88     	; 0x132c <main+0xa14>
    1384:	2c c0       	rjmp	.+88     	; 0x13de <main+0xac6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1386:	8e 01       	movw	r16, r28
    1388:	08 57       	subi	r16, 0x78	; 120
    138a:	1f 4f       	sbci	r17, 0xFF	; 255
    138c:	ce 01       	movw	r24, r28
    138e:	8c 57       	subi	r24, 0x7C	; 124
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	fc 01       	movw	r30, r24
    1394:	60 81       	ld	r22, Z
    1396:	71 81       	ldd	r23, Z+1	; 0x01
    1398:	82 81       	ldd	r24, Z+2	; 0x02
    139a:	93 81       	ldd	r25, Z+3	; 0x03
    139c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	f8 01       	movw	r30, r16
    13a6:	91 83       	std	Z+1, r25	; 0x01
    13a8:	80 83       	st	Z, r24
    13aa:	ce 01       	movw	r24, r28
    13ac:	84 57       	subi	r24, 0x74	; 116
    13ae:	9f 4f       	sbci	r25, 0xFF	; 255
    13b0:	9e 01       	movw	r18, r28
    13b2:	28 57       	subi	r18, 0x78	; 120
    13b4:	3f 4f       	sbci	r19, 0xFF	; 255
    13b6:	f9 01       	movw	r30, r18
    13b8:	20 81       	ld	r18, Z
    13ba:	31 81       	ldd	r19, Z+1	; 0x01
    13bc:	fc 01       	movw	r30, r24
    13be:	31 83       	std	Z+1, r19	; 0x01
    13c0:	20 83       	st	Z, r18
    13c2:	ce 01       	movw	r24, r28
    13c4:	84 57       	subi	r24, 0x74	; 116
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	fc 01       	movw	r30, r24
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <main+0xab6>
    13d2:	9e 01       	movw	r18, r28
    13d4:	24 57       	subi	r18, 0x74	; 116
    13d6:	3f 4f       	sbci	r19, 0xFF	; 255
    13d8:	f9 01       	movw	r30, r18
    13da:	91 83       	std	Z+1, r25	; 0x01
    13dc:	80 83       	st	Z, r24
			_delay_ms(50);
		}
		if(key == 4)
    13de:	8d 81       	ldd	r24, Y+5	; 0x05
    13e0:	84 30       	cpi	r24, 0x04	; 4
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <main+0xace>
    13e4:	7f c1       	rjmp	.+766    	; 0x16e4 <main+0xdcc>
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	a8 e4       	ldi	r26, 0x48	; 72
    13ec:	b2 e4       	ldi	r27, 0x42	; 66
    13ee:	8a a3       	std	Y+34, r24	; 0x22
    13f0:	9b a3       	std	Y+35, r25	; 0x23
    13f2:	ac a3       	std	Y+36, r26	; 0x24
    13f4:	bd a3       	std	Y+37, r27	; 0x25

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13f6:	8e 01       	movw	r16, r28
    13f8:	0e 55       	subi	r16, 0x5E	; 94
    13fa:	1f 4f       	sbci	r17, 0xFF	; 255
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a e7       	ldi	r20, 0x7A	; 122
    1402:	53 e4       	ldi	r21, 0x43	; 67
    1404:	6a a1       	ldd	r22, Y+34	; 0x22
    1406:	7b a1       	ldd	r23, Y+35	; 0x23
    1408:	8c a1       	ldd	r24, Y+36	; 0x24
    140a:	9d a1       	ldd	r25, Y+37	; 0x25
    140c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	f8 01       	movw	r30, r16
    1416:	80 83       	st	Z, r24
    1418:	91 83       	std	Z+1, r25	; 0x01
    141a:	a2 83       	std	Z+2, r26	; 0x02
    141c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    141e:	ce 01       	movw	r24, r28
    1420:	8e 55       	subi	r24, 0x5E	; 94
    1422:	9f 4f       	sbci	r25, 0xFF	; 255
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e8       	ldi	r20, 0x80	; 128
    142a:	5f e3       	ldi	r21, 0x3F	; 63
    142c:	fc 01       	movw	r30, r24
    142e:	60 81       	ld	r22, Z
    1430:	71 81       	ldd	r23, Z+1	; 0x01
    1432:	82 81       	ldd	r24, Z+2	; 0x02
    1434:	93 81       	ldd	r25, Z+3	; 0x03
    1436:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    143a:	88 23       	and	r24, r24
    143c:	4c f4       	brge	.+18     	; 0x1450 <main+0xb38>
		__ticks = 1;
    143e:	ce 01       	movw	r24, r28
    1440:	8a 55       	subi	r24, 0x5A	; 90
    1442:	9f 4f       	sbci	r25, 0xFF	; 255
    1444:	21 e0       	ldi	r18, 0x01	; 1
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	fc 01       	movw	r30, r24
    144a:	31 83       	std	Z+1, r19	; 0x01
    144c:	20 83       	st	Z, r18
    144e:	69 c0       	rjmp	.+210    	; 0x1522 <main+0xc0a>
	else if (__tmp > 65535)
    1450:	ce 01       	movw	r24, r28
    1452:	8e 55       	subi	r24, 0x5E	; 94
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	3f ef       	ldi	r19, 0xFF	; 255
    145a:	4f e7       	ldi	r20, 0x7F	; 127
    145c:	57 e4       	ldi	r21, 0x47	; 71
    145e:	fc 01       	movw	r30, r24
    1460:	60 81       	ld	r22, Z
    1462:	71 81       	ldd	r23, Z+1	; 0x01
    1464:	82 81       	ldd	r24, Z+2	; 0x02
    1466:	93 81       	ldd	r25, Z+3	; 0x03
    1468:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
    146c:	18 16       	cp	r1, r24
    146e:	0c f0       	brlt	.+2      	; 0x1472 <main+0xb5a>
    1470:	46 c0       	rjmp	.+140    	; 0x14fe <main+0xbe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e2       	ldi	r20, 0x20	; 32
    1478:	51 e4       	ldi	r21, 0x41	; 65
    147a:	6a a1       	ldd	r22, Y+34	; 0x22
    147c:	7b a1       	ldd	r23, Y+35	; 0x23
    147e:	8c a1       	ldd	r24, Y+36	; 0x24
    1480:	9d a1       	ldd	r25, Y+37	; 0x25
    1482:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8e 01       	movw	r16, r28
    148c:	0a 55       	subi	r16, 0x5A	; 90
    148e:	1f 4f       	sbci	r17, 0xFF	; 255
    1490:	bc 01       	movw	r22, r24
    1492:	cd 01       	movw	r24, r26
    1494:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	f8 01       	movw	r30, r16
    149e:	91 83       	std	Z+1, r25	; 0x01
    14a0:	80 83       	st	Z, r24
    14a2:	24 c0       	rjmp	.+72     	; 0x14ec <main+0xbd4>
    14a4:	ce 01       	movw	r24, r28
    14a6:	88 55       	subi	r24, 0x58	; 88
    14a8:	9f 4f       	sbci	r25, 0xFF	; 255
    14aa:	29 e1       	ldi	r18, 0x19	; 25
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	fc 01       	movw	r30, r24
    14b0:	31 83       	std	Z+1, r19	; 0x01
    14b2:	20 83       	st	Z, r18
    14b4:	ce 01       	movw	r24, r28
    14b6:	88 55       	subi	r24, 0x58	; 88
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ba:	fc 01       	movw	r30, r24
    14bc:	80 81       	ld	r24, Z
    14be:	91 81       	ldd	r25, Z+1	; 0x01
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <main+0xba8>
    14c4:	9e 01       	movw	r18, r28
    14c6:	28 55       	subi	r18, 0x58	; 88
    14c8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ca:	f9 01       	movw	r30, r18
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d0:	ce 01       	movw	r24, r28
    14d2:	8a 55       	subi	r24, 0x5A	; 90
    14d4:	9f 4f       	sbci	r25, 0xFF	; 255
    14d6:	9e 01       	movw	r18, r28
    14d8:	2a 55       	subi	r18, 0x5A	; 90
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
    14dc:	f9 01       	movw	r30, r18
    14de:	20 81       	ld	r18, Z
    14e0:	31 81       	ldd	r19, Z+1	; 0x01
    14e2:	21 50       	subi	r18, 0x01	; 1
    14e4:	31 09       	sbc	r19, r1
    14e6:	fc 01       	movw	r30, r24
    14e8:	31 83       	std	Z+1, r19	; 0x01
    14ea:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ec:	ce 01       	movw	r24, r28
    14ee:	8a 55       	subi	r24, 0x5A	; 90
    14f0:	9f 4f       	sbci	r25, 0xFF	; 255
    14f2:	fc 01       	movw	r30, r24
    14f4:	80 81       	ld	r24, Z
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	89 2b       	or	r24, r25
    14fa:	a1 f6       	brne	.-88     	; 0x14a4 <main+0xb8c>
    14fc:	2c c0       	rjmp	.+88     	; 0x1556 <main+0xc3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fe:	8e 01       	movw	r16, r28
    1500:	0a 55       	subi	r16, 0x5A	; 90
    1502:	1f 4f       	sbci	r17, 0xFF	; 255
    1504:	ce 01       	movw	r24, r28
    1506:	8e 55       	subi	r24, 0x5E	; 94
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	fc 01       	movw	r30, r24
    150c:	60 81       	ld	r22, Z
    150e:	71 81       	ldd	r23, Z+1	; 0x01
    1510:	82 81       	ldd	r24, Z+2	; 0x02
    1512:	93 81       	ldd	r25, Z+3	; 0x03
    1514:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	f8 01       	movw	r30, r16
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	80 83       	st	Z, r24
    1522:	ce 01       	movw	r24, r28
    1524:	86 55       	subi	r24, 0x56	; 86
    1526:	9f 4f       	sbci	r25, 0xFF	; 255
    1528:	9e 01       	movw	r18, r28
    152a:	2a 55       	subi	r18, 0x5A	; 90
    152c:	3f 4f       	sbci	r19, 0xFF	; 255
    152e:	f9 01       	movw	r30, r18
    1530:	20 81       	ld	r18, Z
    1532:	31 81       	ldd	r19, Z+1	; 0x01
    1534:	fc 01       	movw	r30, r24
    1536:	31 83       	std	Z+1, r19	; 0x01
    1538:	20 83       	st	Z, r18
    153a:	ce 01       	movw	r24, r28
    153c:	86 55       	subi	r24, 0x56	; 86
    153e:	9f 4f       	sbci	r25, 0xFF	; 255
    1540:	fc 01       	movw	r30, r24
    1542:	80 81       	ld	r24, Z
    1544:	91 81       	ldd	r25, Z+1	; 0x01
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	f1 f7       	brne	.-4      	; 0x1546 <main+0xc2e>
    154a:	9e 01       	movw	r18, r28
    154c:	26 55       	subi	r18, 0x56	; 86
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	f9 01       	movw	r30, r18
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	80 83       	st	Z, r24
		{
		_delay_ms(50);
		BCDSevegments_enable(ONE);
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(TWO);
    155c:	82 e0       	ldi	r24, 0x02	; 2
    155e:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(THREE);
    1562:	83 e0       	ldi	r24, 0x03	; 3
    1564:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_enable(FOUR);
    1568:	84 e0       	ldi	r24, 0x04	; 4
    156a:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
		BCDSevegments_displayNo(FOUR);
    156e:	84 e0       	ldi	r24, 0x04	; 4
    1570:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a8 e4       	ldi	r26, 0x48	; 72
    157a:	b2 e4       	ldi	r27, 0x42	; 66
    157c:	8e 8b       	std	Y+22, r24	; 0x16
    157e:	9f 8b       	std	Y+23, r25	; 0x17
    1580:	a8 8f       	std	Y+24, r26	; 0x18
    1582:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1584:	8e 01       	movw	r16, r28
    1586:	08 56       	subi	r16, 0x68	; 104
    1588:	1f 4f       	sbci	r17, 0xFF	; 255
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	4a e7       	ldi	r20, 0x7A	; 122
    1590:	53 e4       	ldi	r21, 0x43	; 67
    1592:	6e 89       	ldd	r22, Y+22	; 0x16
    1594:	7f 89       	ldd	r23, Y+23	; 0x17
    1596:	88 8d       	ldd	r24, Y+24	; 0x18
    1598:	99 8d       	ldd	r25, Y+25	; 0x19
    159a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	f8 01       	movw	r30, r16
    15a4:	80 83       	st	Z, r24
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	a2 83       	std	Z+2, r26	; 0x02
    15aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15ac:	ce 01       	movw	r24, r28
    15ae:	88 56       	subi	r24, 0x68	; 104
    15b0:	9f 4f       	sbci	r25, 0xFF	; 255
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	fc 01       	movw	r30, r24
    15bc:	60 81       	ld	r22, Z
    15be:	71 81       	ldd	r23, Z+1	; 0x01
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    15c8:	88 23       	and	r24, r24
    15ca:	4c f4       	brge	.+18     	; 0x15de <main+0xcc6>
		__ticks = 1;
    15cc:	ce 01       	movw	r24, r28
    15ce:	84 56       	subi	r24, 0x64	; 100
    15d0:	9f 4f       	sbci	r25, 0xFF	; 255
    15d2:	21 e0       	ldi	r18, 0x01	; 1
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	fc 01       	movw	r30, r24
    15d8:	31 83       	std	Z+1, r19	; 0x01
    15da:	20 83       	st	Z, r18
    15dc:	69 c0       	rjmp	.+210    	; 0x16b0 <main+0xd98>
	else if (__tmp > 65535)
    15de:	ce 01       	movw	r24, r28
    15e0:	88 56       	subi	r24, 0x68	; 104
    15e2:	9f 4f       	sbci	r25, 0xFF	; 255
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	3f ef       	ldi	r19, 0xFF	; 255
    15e8:	4f e7       	ldi	r20, 0x7F	; 127
    15ea:	57 e4       	ldi	r21, 0x47	; 71
    15ec:	fc 01       	movw	r30, r24
    15ee:	60 81       	ld	r22, Z
    15f0:	71 81       	ldd	r23, Z+1	; 0x01
    15f2:	82 81       	ldd	r24, Z+2	; 0x02
    15f4:	93 81       	ldd	r25, Z+3	; 0x03
    15f6:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
    15fa:	18 16       	cp	r1, r24
    15fc:	0c f0       	brlt	.+2      	; 0x1600 <main+0xce8>
    15fe:	46 c0       	rjmp	.+140    	; 0x168c <main+0xd74>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e2       	ldi	r20, 0x20	; 32
    1606:	51 e4       	ldi	r21, 0x41	; 65
    1608:	6e 89       	ldd	r22, Y+22	; 0x16
    160a:	7f 89       	ldd	r23, Y+23	; 0x17
    160c:	88 8d       	ldd	r24, Y+24	; 0x18
    160e:	99 8d       	ldd	r25, Y+25	; 0x19
    1610:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	8e 01       	movw	r16, r28
    161a:	04 56       	subi	r16, 0x64	; 100
    161c:	1f 4f       	sbci	r17, 0xFF	; 255
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	f8 01       	movw	r30, r16
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	80 83       	st	Z, r24
    1630:	24 c0       	rjmp	.+72     	; 0x167a <main+0xd62>
    1632:	ce 01       	movw	r24, r28
    1634:	82 56       	subi	r24, 0x62	; 98
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	29 e1       	ldi	r18, 0x19	; 25
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	fc 01       	movw	r30, r24
    163e:	31 83       	std	Z+1, r19	; 0x01
    1640:	20 83       	st	Z, r18
    1642:	ce 01       	movw	r24, r28
    1644:	82 56       	subi	r24, 0x62	; 98
    1646:	9f 4f       	sbci	r25, 0xFF	; 255
    1648:	fc 01       	movw	r30, r24
    164a:	80 81       	ld	r24, Z
    164c:	91 81       	ldd	r25, Z+1	; 0x01
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <main+0xd36>
    1652:	9e 01       	movw	r18, r28
    1654:	22 56       	subi	r18, 0x62	; 98
    1656:	3f 4f       	sbci	r19, 0xFF	; 255
    1658:	f9 01       	movw	r30, r18
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165e:	ce 01       	movw	r24, r28
    1660:	84 56       	subi	r24, 0x64	; 100
    1662:	9f 4f       	sbci	r25, 0xFF	; 255
    1664:	9e 01       	movw	r18, r28
    1666:	24 56       	subi	r18, 0x64	; 100
    1668:	3f 4f       	sbci	r19, 0xFF	; 255
    166a:	f9 01       	movw	r30, r18
    166c:	20 81       	ld	r18, Z
    166e:	31 81       	ldd	r19, Z+1	; 0x01
    1670:	21 50       	subi	r18, 0x01	; 1
    1672:	31 09       	sbc	r19, r1
    1674:	fc 01       	movw	r30, r24
    1676:	31 83       	std	Z+1, r19	; 0x01
    1678:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167a:	ce 01       	movw	r24, r28
    167c:	84 56       	subi	r24, 0x64	; 100
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	fc 01       	movw	r30, r24
    1682:	80 81       	ld	r24, Z
    1684:	91 81       	ldd	r25, Z+1	; 0x01
    1686:	89 2b       	or	r24, r25
    1688:	a1 f6       	brne	.-88     	; 0x1632 <main+0xd1a>
    168a:	2c c0       	rjmp	.+88     	; 0x16e4 <main+0xdcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168c:	8e 01       	movw	r16, r28
    168e:	04 56       	subi	r16, 0x64	; 100
    1690:	1f 4f       	sbci	r17, 0xFF	; 255
    1692:	ce 01       	movw	r24, r28
    1694:	88 56       	subi	r24, 0x68	; 104
    1696:	9f 4f       	sbci	r25, 0xFF	; 255
    1698:	fc 01       	movw	r30, r24
    169a:	60 81       	ld	r22, Z
    169c:	71 81       	ldd	r23, Z+1	; 0x01
    169e:	82 81       	ldd	r24, Z+2	; 0x02
    16a0:	93 81       	ldd	r25, Z+3	; 0x03
    16a2:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	f8 01       	movw	r30, r16
    16ac:	91 83       	std	Z+1, r25	; 0x01
    16ae:	80 83       	st	Z, r24
    16b0:	ce 01       	movw	r24, r28
    16b2:	80 56       	subi	r24, 0x60	; 96
    16b4:	9f 4f       	sbci	r25, 0xFF	; 255
    16b6:	9e 01       	movw	r18, r28
    16b8:	24 56       	subi	r18, 0x64	; 100
    16ba:	3f 4f       	sbci	r19, 0xFF	; 255
    16bc:	f9 01       	movw	r30, r18
    16be:	20 81       	ld	r18, Z
    16c0:	31 81       	ldd	r19, Z+1	; 0x01
    16c2:	fc 01       	movw	r30, r24
    16c4:	31 83       	std	Z+1, r19	; 0x01
    16c6:	20 83       	st	Z, r18
    16c8:	ce 01       	movw	r24, r28
    16ca:	80 56       	subi	r24, 0x60	; 96
    16cc:	9f 4f       	sbci	r25, 0xFF	; 255
    16ce:	fc 01       	movw	r30, r24
    16d0:	80 81       	ld	r24, Z
    16d2:	91 81       	ldd	r25, Z+1	; 0x01
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <main+0xdbc>
    16d8:	9e 01       	movw	r18, r28
    16da:	20 56       	subi	r18, 0x60	; 96
    16dc:	3f 4f       	sbci	r19, 0xFF	; 255
    16de:	f9 01       	movw	r30, r18
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	80 83       	st	Z, r24
		_delay_ms(50);
		}
		if(key == 5)
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	85 30       	cpi	r24, 0x05	; 5
    16e8:	09 f0       	breq	.+2      	; 0x16ec <main+0xdd4>
    16ea:	7f c1       	rjmp	.+766    	; 0x19ea <main+0x10d2>
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	a8 e4       	ldi	r26, 0x48	; 72
    16f2:	b2 e4       	ldi	r27, 0x42	; 66
    16f4:	8a a7       	std	Y+42, r24	; 0x2a
    16f6:	9b a7       	std	Y+43, r25	; 0x2b
    16f8:	ac a7       	std	Y+44, r26	; 0x2c
    16fa:	bd a7       	std	Y+45, r27	; 0x2d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    16fc:	8e 01       	movw	r16, r28
    16fe:	0a 54       	subi	r16, 0x4A	; 74
    1700:	1f 4f       	sbci	r17, 0xFF	; 255
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	4a e7       	ldi	r20, 0x7A	; 122
    1708:	53 e4       	ldi	r21, 0x43	; 67
    170a:	6a a5       	ldd	r22, Y+42	; 0x2a
    170c:	7b a5       	ldd	r23, Y+43	; 0x2b
    170e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1710:	9d a5       	ldd	r25, Y+45	; 0x2d
    1712:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	f8 01       	movw	r30, r16
    171c:	80 83       	st	Z, r24
    171e:	91 83       	std	Z+1, r25	; 0x01
    1720:	a2 83       	std	Z+2, r26	; 0x02
    1722:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1724:	ce 01       	movw	r24, r28
    1726:	8a 54       	subi	r24, 0x4A	; 74
    1728:	9f 4f       	sbci	r25, 0xFF	; 255
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e8       	ldi	r20, 0x80	; 128
    1730:	5f e3       	ldi	r21, 0x3F	; 63
    1732:	fc 01       	movw	r30, r24
    1734:	60 81       	ld	r22, Z
    1736:	71 81       	ldd	r23, Z+1	; 0x01
    1738:	82 81       	ldd	r24, Z+2	; 0x02
    173a:	93 81       	ldd	r25, Z+3	; 0x03
    173c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    1740:	88 23       	and	r24, r24
    1742:	4c f4       	brge	.+18     	; 0x1756 <main+0xe3e>
		__ticks = 1;
    1744:	ce 01       	movw	r24, r28
    1746:	86 54       	subi	r24, 0x46	; 70
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	21 e0       	ldi	r18, 0x01	; 1
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	fc 01       	movw	r30, r24
    1750:	31 83       	std	Z+1, r19	; 0x01
    1752:	20 83       	st	Z, r18
    1754:	69 c0       	rjmp	.+210    	; 0x1828 <main+0xf10>
	else if (__tmp > 65535)
    1756:	ce 01       	movw	r24, r28
    1758:	8a 54       	subi	r24, 0x4A	; 74
    175a:	9f 4f       	sbci	r25, 0xFF	; 255
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	57 e4       	ldi	r21, 0x47	; 71
    1764:	fc 01       	movw	r30, r24
    1766:	60 81       	ld	r22, Z
    1768:	71 81       	ldd	r23, Z+1	; 0x01
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	93 81       	ldd	r25, Z+3	; 0x03
    176e:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
    1772:	18 16       	cp	r1, r24
    1774:	0c f0       	brlt	.+2      	; 0x1778 <main+0xe60>
    1776:	46 c0       	rjmp	.+140    	; 0x1804 <main+0xeec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e2       	ldi	r20, 0x20	; 32
    177e:	51 e4       	ldi	r21, 0x41	; 65
    1780:	6a a5       	ldd	r22, Y+42	; 0x2a
    1782:	7b a5       	ldd	r23, Y+43	; 0x2b
    1784:	8c a5       	ldd	r24, Y+44	; 0x2c
    1786:	9d a5       	ldd	r25, Y+45	; 0x2d
    1788:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	8e 01       	movw	r16, r28
    1792:	06 54       	subi	r16, 0x46	; 70
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	f8 01       	movw	r30, r16
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	80 83       	st	Z, r24
    17a8:	24 c0       	rjmp	.+72     	; 0x17f2 <main+0xeda>
    17aa:	ce 01       	movw	r24, r28
    17ac:	84 54       	subi	r24, 0x44	; 68
    17ae:	9f 4f       	sbci	r25, 0xFF	; 255
    17b0:	29 e1       	ldi	r18, 0x19	; 25
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	fc 01       	movw	r30, r24
    17b6:	31 83       	std	Z+1, r19	; 0x01
    17b8:	20 83       	st	Z, r18
    17ba:	ce 01       	movw	r24, r28
    17bc:	84 54       	subi	r24, 0x44	; 68
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
    17c0:	fc 01       	movw	r30, r24
    17c2:	80 81       	ld	r24, Z
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <main+0xeae>
    17ca:	9e 01       	movw	r18, r28
    17cc:	24 54       	subi	r18, 0x44	; 68
    17ce:	3f 4f       	sbci	r19, 0xFF	; 255
    17d0:	f9 01       	movw	r30, r18
    17d2:	91 83       	std	Z+1, r25	; 0x01
    17d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d6:	ce 01       	movw	r24, r28
    17d8:	86 54       	subi	r24, 0x46	; 70
    17da:	9f 4f       	sbci	r25, 0xFF	; 255
    17dc:	9e 01       	movw	r18, r28
    17de:	26 54       	subi	r18, 0x46	; 70
    17e0:	3f 4f       	sbci	r19, 0xFF	; 255
    17e2:	f9 01       	movw	r30, r18
    17e4:	20 81       	ld	r18, Z
    17e6:	31 81       	ldd	r19, Z+1	; 0x01
    17e8:	21 50       	subi	r18, 0x01	; 1
    17ea:	31 09       	sbc	r19, r1
    17ec:	fc 01       	movw	r30, r24
    17ee:	31 83       	std	Z+1, r19	; 0x01
    17f0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f2:	ce 01       	movw	r24, r28
    17f4:	86 54       	subi	r24, 0x46	; 70
    17f6:	9f 4f       	sbci	r25, 0xFF	; 255
    17f8:	fc 01       	movw	r30, r24
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	89 2b       	or	r24, r25
    1800:	a1 f6       	brne	.-88     	; 0x17aa <main+0xe92>
    1802:	2c c0       	rjmp	.+88     	; 0x185c <main+0xf44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1804:	8e 01       	movw	r16, r28
    1806:	06 54       	subi	r16, 0x46	; 70
    1808:	1f 4f       	sbci	r17, 0xFF	; 255
    180a:	ce 01       	movw	r24, r28
    180c:	8a 54       	subi	r24, 0x4A	; 74
    180e:	9f 4f       	sbci	r25, 0xFF	; 255
    1810:	fc 01       	movw	r30, r24
    1812:	60 81       	ld	r22, Z
    1814:	71 81       	ldd	r23, Z+1	; 0x01
    1816:	82 81       	ldd	r24, Z+2	; 0x02
    1818:	93 81       	ldd	r25, Z+3	; 0x03
    181a:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	f8 01       	movw	r30, r16
    1824:	91 83       	std	Z+1, r25	; 0x01
    1826:	80 83       	st	Z, r24
    1828:	ce 01       	movw	r24, r28
    182a:	82 54       	subi	r24, 0x42	; 66
    182c:	9f 4f       	sbci	r25, 0xFF	; 255
    182e:	9e 01       	movw	r18, r28
    1830:	26 54       	subi	r18, 0x46	; 70
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	f9 01       	movw	r30, r18
    1836:	20 81       	ld	r18, Z
    1838:	31 81       	ldd	r19, Z+1	; 0x01
    183a:	fc 01       	movw	r30, r24
    183c:	31 83       	std	Z+1, r19	; 0x01
    183e:	20 83       	st	Z, r18
    1840:	ce 01       	movw	r24, r28
    1842:	82 54       	subi	r24, 0x42	; 66
    1844:	9f 4f       	sbci	r25, 0xFF	; 255
    1846:	fc 01       	movw	r30, r24
    1848:	80 81       	ld	r24, Z
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <main+0xf34>
    1850:	9e 01       	movw	r18, r28
    1852:	22 54       	subi	r18, 0x42	; 66
    1854:	3f 4f       	sbci	r19, 0xFF	; 255
    1856:	f9 01       	movw	r30, r18
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	80 83       	st	Z, r24
		{
			_delay_ms(50);
			BCDSevegments_enable(ONE);
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(TWO);
    1862:	82 e0       	ldi	r24, 0x02	; 2
    1864:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(THREE);
    1868:	83 e0       	ldi	r24, 0x03	; 3
    186a:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_enable(FOUR);
    186e:	84 e0       	ldi	r24, 0x04	; 4
    1870:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
			BCDSevegments_displayNo(FIVE);
    1874:	85 e0       	ldi	r24, 0x05	; 5
    1876:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a8 e4       	ldi	r26, 0x48	; 72
    1880:	b2 e4       	ldi	r27, 0x42	; 66
    1882:	8e 8f       	std	Y+30, r24	; 0x1e
    1884:	9f 8f       	std	Y+31, r25	; 0x1f
    1886:	a8 a3       	std	Y+32, r26	; 0x20
    1888:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    188a:	8e 01       	movw	r16, r28
    188c:	04 55       	subi	r16, 0x54	; 84
    188e:	1f 4f       	sbci	r17, 0xFF	; 255
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	4a e7       	ldi	r20, 0x7A	; 122
    1896:	53 e4       	ldi	r21, 0x43	; 67
    1898:	6e 8d       	ldd	r22, Y+30	; 0x1e
    189a:	7f 8d       	ldd	r23, Y+31	; 0x1f
    189c:	88 a1       	ldd	r24, Y+32	; 0x20
    189e:	99 a1       	ldd	r25, Y+33	; 0x21
    18a0:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	f8 01       	movw	r30, r16
    18aa:	80 83       	st	Z, r24
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	a2 83       	std	Z+2, r26	; 0x02
    18b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18b2:	ce 01       	movw	r24, r28
    18b4:	84 55       	subi	r24, 0x54	; 84
    18b6:	9f 4f       	sbci	r25, 0xFF	; 255
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e8       	ldi	r20, 0x80	; 128
    18be:	5f e3       	ldi	r21, 0x3F	; 63
    18c0:	fc 01       	movw	r30, r24
    18c2:	60 81       	ld	r22, Z
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	4c f4       	brge	.+18     	; 0x18e4 <main+0xfcc>
		__ticks = 1;
    18d2:	ce 01       	movw	r24, r28
    18d4:	80 55       	subi	r24, 0x50	; 80
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	21 e0       	ldi	r18, 0x01	; 1
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	fc 01       	movw	r30, r24
    18de:	31 83       	std	Z+1, r19	; 0x01
    18e0:	20 83       	st	Z, r18
    18e2:	69 c0       	rjmp	.+210    	; 0x19b6 <main+0x109e>
	else if (__tmp > 65535)
    18e4:	ce 01       	movw	r24, r28
    18e6:	84 55       	subi	r24, 0x54	; 84
    18e8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	3f ef       	ldi	r19, 0xFF	; 255
    18ee:	4f e7       	ldi	r20, 0x7F	; 127
    18f0:	57 e4       	ldi	r21, 0x47	; 71
    18f2:	fc 01       	movw	r30, r24
    18f4:	60 81       	ld	r22, Z
    18f6:	71 81       	ldd	r23, Z+1	; 0x01
    18f8:	82 81       	ldd	r24, Z+2	; 0x02
    18fa:	93 81       	ldd	r25, Z+3	; 0x03
    18fc:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
    1900:	18 16       	cp	r1, r24
    1902:	0c f0       	brlt	.+2      	; 0x1906 <main+0xfee>
    1904:	46 c0       	rjmp	.+140    	; 0x1992 <main+0x107a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1910:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1912:	88 a1       	ldd	r24, Y+32	; 0x20
    1914:	99 a1       	ldd	r25, Y+33	; 0x21
    1916:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	8e 01       	movw	r16, r28
    1920:	00 55       	subi	r16, 0x50	; 80
    1922:	1f 4f       	sbci	r17, 0xFF	; 255
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	f8 01       	movw	r30, r16
    1932:	91 83       	std	Z+1, r25	; 0x01
    1934:	80 83       	st	Z, r24
    1936:	24 c0       	rjmp	.+72     	; 0x1980 <main+0x1068>
    1938:	ce 01       	movw	r24, r28
    193a:	8e 54       	subi	r24, 0x4E	; 78
    193c:	9f 4f       	sbci	r25, 0xFF	; 255
    193e:	29 e1       	ldi	r18, 0x19	; 25
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	fc 01       	movw	r30, r24
    1944:	31 83       	std	Z+1, r19	; 0x01
    1946:	20 83       	st	Z, r18
    1948:	ce 01       	movw	r24, r28
    194a:	8e 54       	subi	r24, 0x4E	; 78
    194c:	9f 4f       	sbci	r25, 0xFF	; 255
    194e:	fc 01       	movw	r30, r24
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <main+0x103c>
    1958:	9e 01       	movw	r18, r28
    195a:	2e 54       	subi	r18, 0x4E	; 78
    195c:	3f 4f       	sbci	r19, 0xFF	; 255
    195e:	f9 01       	movw	r30, r18
    1960:	91 83       	std	Z+1, r25	; 0x01
    1962:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1964:	ce 01       	movw	r24, r28
    1966:	80 55       	subi	r24, 0x50	; 80
    1968:	9f 4f       	sbci	r25, 0xFF	; 255
    196a:	9e 01       	movw	r18, r28
    196c:	20 55       	subi	r18, 0x50	; 80
    196e:	3f 4f       	sbci	r19, 0xFF	; 255
    1970:	f9 01       	movw	r30, r18
    1972:	20 81       	ld	r18, Z
    1974:	31 81       	ldd	r19, Z+1	; 0x01
    1976:	21 50       	subi	r18, 0x01	; 1
    1978:	31 09       	sbc	r19, r1
    197a:	fc 01       	movw	r30, r24
    197c:	31 83       	std	Z+1, r19	; 0x01
    197e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1980:	ce 01       	movw	r24, r28
    1982:	80 55       	subi	r24, 0x50	; 80
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	fc 01       	movw	r30, r24
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	89 2b       	or	r24, r25
    198e:	a1 f6       	brne	.-88     	; 0x1938 <main+0x1020>
    1990:	2c c0       	rjmp	.+88     	; 0x19ea <main+0x10d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1992:	8e 01       	movw	r16, r28
    1994:	00 55       	subi	r16, 0x50	; 80
    1996:	1f 4f       	sbci	r17, 0xFF	; 255
    1998:	ce 01       	movw	r24, r28
    199a:	84 55       	subi	r24, 0x54	; 84
    199c:	9f 4f       	sbci	r25, 0xFF	; 255
    199e:	fc 01       	movw	r30, r24
    19a0:	60 81       	ld	r22, Z
    19a2:	71 81       	ldd	r23, Z+1	; 0x01
    19a4:	82 81       	ldd	r24, Z+2	; 0x02
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	f8 01       	movw	r30, r16
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	80 83       	st	Z, r24
    19b6:	ce 01       	movw	r24, r28
    19b8:	8c 54       	subi	r24, 0x4C	; 76
    19ba:	9f 4f       	sbci	r25, 0xFF	; 255
    19bc:	9e 01       	movw	r18, r28
    19be:	20 55       	subi	r18, 0x50	; 80
    19c0:	3f 4f       	sbci	r19, 0xFF	; 255
    19c2:	f9 01       	movw	r30, r18
    19c4:	20 81       	ld	r18, Z
    19c6:	31 81       	ldd	r19, Z+1	; 0x01
    19c8:	fc 01       	movw	r30, r24
    19ca:	31 83       	std	Z+1, r19	; 0x01
    19cc:	20 83       	st	Z, r18
    19ce:	ce 01       	movw	r24, r28
    19d0:	8c 54       	subi	r24, 0x4C	; 76
    19d2:	9f 4f       	sbci	r25, 0xFF	; 255
    19d4:	fc 01       	movw	r30, r24
    19d6:	80 81       	ld	r24, Z
    19d8:	91 81       	ldd	r25, Z+1	; 0x01
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <main+0x10c2>
    19de:	9e 01       	movw	r18, r28
    19e0:	2c 54       	subi	r18, 0x4C	; 76
    19e2:	3f 4f       	sbci	r19, 0xFF	; 255
    19e4:	f9 01       	movw	r30, r18
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	80 83       	st	Z, r24
			_delay_ms(50);
		}
			if(key == 6)
    19ea:	8d 81       	ldd	r24, Y+5	; 0x05
    19ec:	86 30       	cpi	r24, 0x06	; 6
    19ee:	09 f0       	breq	.+2      	; 0x19f2 <main+0x10da>
    19f0:	7f c1       	rjmp	.+766    	; 0x1cf0 <main+0x13d8>
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	a8 e4       	ldi	r26, 0x48	; 72
    19f8:	b2 e4       	ldi	r27, 0x42	; 66
    19fa:	8a ab       	std	Y+50, r24	; 0x32
    19fc:	9b ab       	std	Y+51, r25	; 0x33
    19fe:	ac ab       	std	Y+52, r26	; 0x34
    1a00:	bd ab       	std	Y+53, r27	; 0x35

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a02:	8e 01       	movw	r16, r28
    1a04:	06 53       	subi	r16, 0x36	; 54
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	4a e7       	ldi	r20, 0x7A	; 122
    1a0e:	53 e4       	ldi	r21, 0x43	; 67
    1a10:	6a a9       	ldd	r22, Y+50	; 0x32
    1a12:	7b a9       	ldd	r23, Y+51	; 0x33
    1a14:	8c a9       	ldd	r24, Y+52	; 0x34
    1a16:	9d a9       	ldd	r25, Y+53	; 0x35
    1a18:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	f8 01       	movw	r30, r16
    1a22:	80 83       	st	Z, r24
    1a24:	91 83       	std	Z+1, r25	; 0x01
    1a26:	a2 83       	std	Z+2, r26	; 0x02
    1a28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	86 53       	subi	r24, 0x36	; 54
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	fc 01       	movw	r30, r24
    1a3a:	60 81       	ld	r22, Z
    1a3c:	71 81       	ldd	r23, Z+1	; 0x01
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	93 81       	ldd	r25, Z+3	; 0x03
    1a42:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    1a46:	88 23       	and	r24, r24
    1a48:	4c f4       	brge	.+18     	; 0x1a5c <main+0x1144>
		__ticks = 1;
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	82 53       	subi	r24, 0x32	; 50
    1a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a50:	21 e0       	ldi	r18, 0x01	; 1
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	fc 01       	movw	r30, r24
    1a56:	31 83       	std	Z+1, r19	; 0x01
    1a58:	20 83       	st	Z, r18
    1a5a:	69 c0       	rjmp	.+210    	; 0x1b2e <main+0x1216>
	else if (__tmp > 65535)
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	86 53       	subi	r24, 0x36	; 54
    1a60:	9f 4f       	sbci	r25, 0xFF	; 255
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	57 e4       	ldi	r21, 0x47	; 71
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	60 81       	ld	r22, Z
    1a6e:	71 81       	ldd	r23, Z+1	; 0x01
    1a70:	82 81       	ldd	r24, Z+2	; 0x02
    1a72:	93 81       	ldd	r25, Z+3	; 0x03
    1a74:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
    1a78:	18 16       	cp	r1, r24
    1a7a:	0c f0       	brlt	.+2      	; 0x1a7e <main+0x1166>
    1a7c:	46 c0       	rjmp	.+140    	; 0x1b0a <main+0x11f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e2       	ldi	r20, 0x20	; 32
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	6a a9       	ldd	r22, Y+50	; 0x32
    1a88:	7b a9       	ldd	r23, Y+51	; 0x33
    1a8a:	8c a9       	ldd	r24, Y+52	; 0x34
    1a8c:	9d a9       	ldd	r25, Y+53	; 0x35
    1a8e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8e 01       	movw	r16, r28
    1a98:	02 53       	subi	r16, 0x32	; 50
    1a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9c:	bc 01       	movw	r22, r24
    1a9e:	cd 01       	movw	r24, r26
    1aa0:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	f8 01       	movw	r30, r16
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	80 83       	st	Z, r24
    1aae:	24 c0       	rjmp	.+72     	; 0x1af8 <main+0x11e0>
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	80 53       	subi	r24, 0x30	; 48
    1ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab6:	29 e1       	ldi	r18, 0x19	; 25
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	fc 01       	movw	r30, r24
    1abc:	31 83       	std	Z+1, r19	; 0x01
    1abe:	20 83       	st	Z, r18
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	80 53       	subi	r24, 0x30	; 48
    1ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <main+0x11b4>
    1ad0:	9e 01       	movw	r18, r28
    1ad2:	20 53       	subi	r18, 0x30	; 48
    1ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad6:	f9 01       	movw	r30, r18
    1ad8:	91 83       	std	Z+1, r25	; 0x01
    1ada:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1adc:	ce 01       	movw	r24, r28
    1ade:	82 53       	subi	r24, 0x32	; 50
    1ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae2:	9e 01       	movw	r18, r28
    1ae4:	22 53       	subi	r18, 0x32	; 50
    1ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae8:	f9 01       	movw	r30, r18
    1aea:	20 81       	ld	r18, Z
    1aec:	31 81       	ldd	r19, Z+1	; 0x01
    1aee:	21 50       	subi	r18, 0x01	; 1
    1af0:	31 09       	sbc	r19, r1
    1af2:	fc 01       	movw	r30, r24
    1af4:	31 83       	std	Z+1, r19	; 0x01
    1af6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af8:	ce 01       	movw	r24, r28
    1afa:	82 53       	subi	r24, 0x32	; 50
    1afc:	9f 4f       	sbci	r25, 0xFF	; 255
    1afe:	fc 01       	movw	r30, r24
    1b00:	80 81       	ld	r24, Z
    1b02:	91 81       	ldd	r25, Z+1	; 0x01
    1b04:	89 2b       	or	r24, r25
    1b06:	a1 f6       	brne	.-88     	; 0x1ab0 <main+0x1198>
    1b08:	2c c0       	rjmp	.+88     	; 0x1b62 <main+0x124a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0a:	8e 01       	movw	r16, r28
    1b0c:	02 53       	subi	r16, 0x32	; 50
    1b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b10:	ce 01       	movw	r24, r28
    1b12:	86 53       	subi	r24, 0x36	; 54
    1b14:	9f 4f       	sbci	r25, 0xFF	; 255
    1b16:	fc 01       	movw	r30, r24
    1b18:	60 81       	ld	r22, Z
    1b1a:	71 81       	ldd	r23, Z+1	; 0x01
    1b1c:	82 81       	ldd	r24, Z+2	; 0x02
    1b1e:	93 81       	ldd	r25, Z+3	; 0x03
    1b20:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	f8 01       	movw	r30, r16
    1b2a:	91 83       	std	Z+1, r25	; 0x01
    1b2c:	80 83       	st	Z, r24
    1b2e:	ce 01       	movw	r24, r28
    1b30:	8e 52       	subi	r24, 0x2E	; 46
    1b32:	9f 4f       	sbci	r25, 0xFF	; 255
    1b34:	9e 01       	movw	r18, r28
    1b36:	22 53       	subi	r18, 0x32	; 50
    1b38:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3a:	f9 01       	movw	r30, r18
    1b3c:	20 81       	ld	r18, Z
    1b3e:	31 81       	ldd	r19, Z+1	; 0x01
    1b40:	fc 01       	movw	r30, r24
    1b42:	31 83       	std	Z+1, r19	; 0x01
    1b44:	20 83       	st	Z, r18
    1b46:	ce 01       	movw	r24, r28
    1b48:	8e 52       	subi	r24, 0x2E	; 46
    1b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	80 81       	ld	r24, Z
    1b50:	91 81       	ldd	r25, Z+1	; 0x01
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <main+0x123a>
    1b56:	9e 01       	movw	r18, r28
    1b58:	2e 52       	subi	r18, 0x2E	; 46
    1b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5c:	f9 01       	movw	r30, r18
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    1b68:	82 e0       	ldi	r24, 0x02	; 2
    1b6a:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    1b74:	84 e0       	ldi	r24, 0x04	; 4
    1b76:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(SIX);
    1b7a:	86 e0       	ldi	r24, 0x06	; 6
    1b7c:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	a8 e4       	ldi	r26, 0x48	; 72
    1b86:	b2 e4       	ldi	r27, 0x42	; 66
    1b88:	8e a3       	std	Y+38, r24	; 0x26
    1b8a:	9f a3       	std	Y+39, r25	; 0x27
    1b8c:	a8 a7       	std	Y+40, r26	; 0x28
    1b8e:	b9 a7       	std	Y+41, r27	; 0x29

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b90:	8e 01       	movw	r16, r28
    1b92:	00 54       	subi	r16, 0x40	; 64
    1b94:	1f 4f       	sbci	r17, 0xFF	; 255
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a e7       	ldi	r20, 0x7A	; 122
    1b9c:	53 e4       	ldi	r21, 0x43	; 67
    1b9e:	6e a1       	ldd	r22, Y+38	; 0x26
    1ba0:	7f a1       	ldd	r23, Y+39	; 0x27
    1ba2:	88 a5       	ldd	r24, Y+40	; 0x28
    1ba4:	99 a5       	ldd	r25, Y+41	; 0x29
    1ba6:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	f8 01       	movw	r30, r16
    1bb0:	80 83       	st	Z, r24
    1bb2:	91 83       	std	Z+1, r25	; 0x01
    1bb4:	a2 83       	std	Z+2, r26	; 0x02
    1bb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bb8:	ce 01       	movw	r24, r28
    1bba:	80 54       	subi	r24, 0x40	; 64
    1bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e8       	ldi	r20, 0x80	; 128
    1bc4:	5f e3       	ldi	r21, 0x3F	; 63
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	60 81       	ld	r22, Z
    1bca:	71 81       	ldd	r23, Z+1	; 0x01
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	4c f4       	brge	.+18     	; 0x1bea <main+0x12d2>
		__ticks = 1;
    1bd8:	ce 01       	movw	r24, r28
    1bda:	8c 53       	subi	r24, 0x3C	; 60
    1bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bde:	21 e0       	ldi	r18, 0x01	; 1
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	fc 01       	movw	r30, r24
    1be4:	31 83       	std	Z+1, r19	; 0x01
    1be6:	20 83       	st	Z, r18
    1be8:	69 c0       	rjmp	.+210    	; 0x1cbc <main+0x13a4>
	else if (__tmp > 65535)
    1bea:	ce 01       	movw	r24, r28
    1bec:	80 54       	subi	r24, 0x40	; 64
    1bee:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	3f ef       	ldi	r19, 0xFF	; 255
    1bf4:	4f e7       	ldi	r20, 0x7F	; 127
    1bf6:	57 e4       	ldi	r21, 0x47	; 71
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
    1c06:	18 16       	cp	r1, r24
    1c08:	0c f0       	brlt	.+2      	; 0x1c0c <main+0x12f4>
    1c0a:	46 c0       	rjmp	.+140    	; 0x1c98 <main+0x1380>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e2       	ldi	r20, 0x20	; 32
    1c12:	51 e4       	ldi	r21, 0x41	; 65
    1c14:	6e a1       	ldd	r22, Y+38	; 0x26
    1c16:	7f a1       	ldd	r23, Y+39	; 0x27
    1c18:	88 a5       	ldd	r24, Y+40	; 0x28
    1c1a:	99 a5       	ldd	r25, Y+41	; 0x29
    1c1c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	8e 01       	movw	r16, r28
    1c26:	0c 53       	subi	r16, 0x3C	; 60
    1c28:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	f8 01       	movw	r30, r16
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
    1c3c:	24 c0       	rjmp	.+72     	; 0x1c86 <main+0x136e>
    1c3e:	ce 01       	movw	r24, r28
    1c40:	8a 53       	subi	r24, 0x3A	; 58
    1c42:	9f 4f       	sbci	r25, 0xFF	; 255
    1c44:	29 e1       	ldi	r18, 0x19	; 25
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	fc 01       	movw	r30, r24
    1c4a:	31 83       	std	Z+1, r19	; 0x01
    1c4c:	20 83       	st	Z, r18
    1c4e:	ce 01       	movw	r24, r28
    1c50:	8a 53       	subi	r24, 0x3A	; 58
    1c52:	9f 4f       	sbci	r25, 0xFF	; 255
    1c54:	fc 01       	movw	r30, r24
    1c56:	80 81       	ld	r24, Z
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <main+0x1342>
    1c5e:	9e 01       	movw	r18, r28
    1c60:	2a 53       	subi	r18, 0x3A	; 58
    1c62:	3f 4f       	sbci	r19, 0xFF	; 255
    1c64:	f9 01       	movw	r30, r18
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	8c 53       	subi	r24, 0x3C	; 60
    1c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c70:	9e 01       	movw	r18, r28
    1c72:	2c 53       	subi	r18, 0x3C	; 60
    1c74:	3f 4f       	sbci	r19, 0xFF	; 255
    1c76:	f9 01       	movw	r30, r18
    1c78:	20 81       	ld	r18, Z
    1c7a:	31 81       	ldd	r19, Z+1	; 0x01
    1c7c:	21 50       	subi	r18, 0x01	; 1
    1c7e:	31 09       	sbc	r19, r1
    1c80:	fc 01       	movw	r30, r24
    1c82:	31 83       	std	Z+1, r19	; 0x01
    1c84:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c86:	ce 01       	movw	r24, r28
    1c88:	8c 53       	subi	r24, 0x3C	; 60
    1c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	80 81       	ld	r24, Z
    1c90:	91 81       	ldd	r25, Z+1	; 0x01
    1c92:	89 2b       	or	r24, r25
    1c94:	a1 f6       	brne	.-88     	; 0x1c3e <main+0x1326>
    1c96:	2c c0       	rjmp	.+88     	; 0x1cf0 <main+0x13d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c98:	8e 01       	movw	r16, r28
    1c9a:	0c 53       	subi	r16, 0x3C	; 60
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	80 54       	subi	r24, 0x40	; 64
    1ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	60 81       	ld	r22, Z
    1ca8:	71 81       	ldd	r23, Z+1	; 0x01
    1caa:	82 81       	ldd	r24, Z+2	; 0x02
    1cac:	93 81       	ldd	r25, Z+3	; 0x03
    1cae:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	80 83       	st	Z, r24
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	88 53       	subi	r24, 0x38	; 56
    1cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc2:	9e 01       	movw	r18, r28
    1cc4:	2c 53       	subi	r18, 0x3C	; 60
    1cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc8:	f9 01       	movw	r30, r18
    1cca:	20 81       	ld	r18, Z
    1ccc:	31 81       	ldd	r19, Z+1	; 0x01
    1cce:	fc 01       	movw	r30, r24
    1cd0:	31 83       	std	Z+1, r19	; 0x01
    1cd2:	20 83       	st	Z, r18
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	88 53       	subi	r24, 0x38	; 56
    1cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cda:	fc 01       	movw	r30, r24
    1cdc:	80 81       	ld	r24, Z
    1cde:	91 81       	ldd	r25, Z+1	; 0x01
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <main+0x13c8>
    1ce4:	9e 01       	movw	r18, r28
    1ce6:	28 53       	subi	r18, 0x38	; 56
    1ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cea:	f9 01       	movw	r30, r18
    1cec:	91 83       	std	Z+1, r25	; 0x01
    1cee:	80 83       	st	Z, r24
				_delay_ms(50);
			}
			if(key == 7)
    1cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf2:	87 30       	cpi	r24, 0x07	; 7
    1cf4:	09 f0       	breq	.+2      	; 0x1cf8 <main+0x13e0>
    1cf6:	7f c1       	rjmp	.+766    	; 0x1ff6 <main+0x16de>
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	a8 e4       	ldi	r26, 0x48	; 72
    1cfe:	b2 e4       	ldi	r27, 0x42	; 66
    1d00:	8a af       	std	Y+58, r24	; 0x3a
    1d02:	9b af       	std	Y+59, r25	; 0x3b
    1d04:	ac af       	std	Y+60, r26	; 0x3c
    1d06:	bd af       	std	Y+61, r27	; 0x3d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d08:	8e 01       	movw	r16, r28
    1d0a:	02 52       	subi	r16, 0x22	; 34
    1d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	4a e7       	ldi	r20, 0x7A	; 122
    1d14:	53 e4       	ldi	r21, 0x43	; 67
    1d16:	6a ad       	ldd	r22, Y+58	; 0x3a
    1d18:	7b ad       	ldd	r23, Y+59	; 0x3b
    1d1a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d1c:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d1e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	f8 01       	movw	r30, r16
    1d28:	80 83       	st	Z, r24
    1d2a:	91 83       	std	Z+1, r25	; 0x01
    1d2c:	a2 83       	std	Z+2, r26	; 0x02
    1d2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d30:	ce 01       	movw	r24, r28
    1d32:	82 52       	subi	r24, 0x22	; 34
    1d34:	9f 4f       	sbci	r25, 0xFF	; 255
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	fc 01       	movw	r30, r24
    1d40:	60 81       	ld	r22, Z
    1d42:	71 81       	ldd	r23, Z+1	; 0x01
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    1d4c:	88 23       	and	r24, r24
    1d4e:	4c f4       	brge	.+18     	; 0x1d62 <main+0x144a>
		__ticks = 1;
    1d50:	ce 01       	movw	r24, r28
    1d52:	8e 51       	subi	r24, 0x1E	; 30
    1d54:	9f 4f       	sbci	r25, 0xFF	; 255
    1d56:	21 e0       	ldi	r18, 0x01	; 1
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	31 83       	std	Z+1, r19	; 0x01
    1d5e:	20 83       	st	Z, r18
    1d60:	69 c0       	rjmp	.+210    	; 0x1e34 <main+0x151c>
	else if (__tmp > 65535)
    1d62:	ce 01       	movw	r24, r28
    1d64:	82 52       	subi	r24, 0x22	; 34
    1d66:	9f 4f       	sbci	r25, 0xFF	; 255
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	3f ef       	ldi	r19, 0xFF	; 255
    1d6c:	4f e7       	ldi	r20, 0x7F	; 127
    1d6e:	57 e4       	ldi	r21, 0x47	; 71
    1d70:	fc 01       	movw	r30, r24
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
    1d7e:	18 16       	cp	r1, r24
    1d80:	0c f0       	brlt	.+2      	; 0x1d84 <main+0x146c>
    1d82:	46 c0       	rjmp	.+140    	; 0x1e10 <main+0x14f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e2       	ldi	r20, 0x20	; 32
    1d8a:	51 e4       	ldi	r21, 0x41	; 65
    1d8c:	6a ad       	ldd	r22, Y+58	; 0x3a
    1d8e:	7b ad       	ldd	r23, Y+59	; 0x3b
    1d90:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d92:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d94:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	8e 01       	movw	r16, r28
    1d9e:	0e 51       	subi	r16, 0x1E	; 30
    1da0:	1f 4f       	sbci	r17, 0xFF	; 255
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	f8 01       	movw	r30, r16
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
    1db4:	24 c0       	rjmp	.+72     	; 0x1dfe <main+0x14e6>
    1db6:	ce 01       	movw	r24, r28
    1db8:	8c 51       	subi	r24, 0x1C	; 28
    1dba:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbc:	29 e1       	ldi	r18, 0x19	; 25
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	31 83       	std	Z+1, r19	; 0x01
    1dc4:	20 83       	st	Z, r18
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	8c 51       	subi	r24, 0x1C	; 28
    1dca:	9f 4f       	sbci	r25, 0xFF	; 255
    1dcc:	fc 01       	movw	r30, r24
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	f1 f7       	brne	.-4      	; 0x1dd2 <main+0x14ba>
    1dd6:	9e 01       	movw	r18, r28
    1dd8:	2c 51       	subi	r18, 0x1C	; 28
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	f9 01       	movw	r30, r18
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de2:	ce 01       	movw	r24, r28
    1de4:	8e 51       	subi	r24, 0x1E	; 30
    1de6:	9f 4f       	sbci	r25, 0xFF	; 255
    1de8:	9e 01       	movw	r18, r28
    1dea:	2e 51       	subi	r18, 0x1E	; 30
    1dec:	3f 4f       	sbci	r19, 0xFF	; 255
    1dee:	f9 01       	movw	r30, r18
    1df0:	20 81       	ld	r18, Z
    1df2:	31 81       	ldd	r19, Z+1	; 0x01
    1df4:	21 50       	subi	r18, 0x01	; 1
    1df6:	31 09       	sbc	r19, r1
    1df8:	fc 01       	movw	r30, r24
    1dfa:	31 83       	std	Z+1, r19	; 0x01
    1dfc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfe:	ce 01       	movw	r24, r28
    1e00:	8e 51       	subi	r24, 0x1E	; 30
    1e02:	9f 4f       	sbci	r25, 0xFF	; 255
    1e04:	fc 01       	movw	r30, r24
    1e06:	80 81       	ld	r24, Z
    1e08:	91 81       	ldd	r25, Z+1	; 0x01
    1e0a:	89 2b       	or	r24, r25
    1e0c:	a1 f6       	brne	.-88     	; 0x1db6 <main+0x149e>
    1e0e:	2c c0       	rjmp	.+88     	; 0x1e68 <main+0x1550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e10:	8e 01       	movw	r16, r28
    1e12:	0e 51       	subi	r16, 0x1E	; 30
    1e14:	1f 4f       	sbci	r17, 0xFF	; 255
    1e16:	ce 01       	movw	r24, r28
    1e18:	82 52       	subi	r24, 0x22	; 34
    1e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	60 81       	ld	r22, Z
    1e20:	71 81       	ldd	r23, Z+1	; 0x01
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	f8 01       	movw	r30, r16
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	80 83       	st	Z, r24
    1e34:	ce 01       	movw	r24, r28
    1e36:	8a 51       	subi	r24, 0x1A	; 26
    1e38:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3a:	9e 01       	movw	r18, r28
    1e3c:	2e 51       	subi	r18, 0x1E	; 30
    1e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e40:	f9 01       	movw	r30, r18
    1e42:	20 81       	ld	r18, Z
    1e44:	31 81       	ldd	r19, Z+1	; 0x01
    1e46:	fc 01       	movw	r30, r24
    1e48:	31 83       	std	Z+1, r19	; 0x01
    1e4a:	20 83       	st	Z, r18
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	8a 51       	subi	r24, 0x1A	; 26
    1e50:	9f 4f       	sbci	r25, 0xFF	; 255
    1e52:	fc 01       	movw	r30, r24
    1e54:	80 81       	ld	r24, Z
    1e56:	91 81       	ldd	r25, Z+1	; 0x01
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <main+0x1540>
    1e5c:	9e 01       	movw	r18, r28
    1e5e:	2a 51       	subi	r18, 0x1A	; 26
    1e60:	3f 4f       	sbci	r19, 0xFF	; 255
    1e62:	f9 01       	movw	r30, r18
    1e64:	91 83       	std	Z+1, r25	; 0x01
    1e66:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
    1e70:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    1e74:	83 e0       	ldi	r24, 0x03	; 3
    1e76:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    1e7a:	84 e0       	ldi	r24, 0x04	; 4
    1e7c:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(SEVEN);
    1e80:	87 e0       	ldi	r24, 0x07	; 7
    1e82:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	a8 e4       	ldi	r26, 0x48	; 72
    1e8c:	b2 e4       	ldi	r27, 0x42	; 66
    1e8e:	8e a7       	std	Y+46, r24	; 0x2e
    1e90:	9f a7       	std	Y+47, r25	; 0x2f
    1e92:	a8 ab       	std	Y+48, r26	; 0x30
    1e94:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e96:	8e 01       	movw	r16, r28
    1e98:	0c 52       	subi	r16, 0x2C	; 44
    1e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4a e7       	ldi	r20, 0x7A	; 122
    1ea2:	53 e4       	ldi	r21, 0x43	; 67
    1ea4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ea6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ea8:	88 a9       	ldd	r24, Y+48	; 0x30
    1eaa:	99 a9       	ldd	r25, Y+49	; 0x31
    1eac:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	80 83       	st	Z, r24
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	a2 83       	std	Z+2, r26	; 0x02
    1ebc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	8c 52       	subi	r24, 0x2C	; 44
    1ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e8       	ldi	r20, 0x80	; 128
    1eca:	5f e3       	ldi	r21, 0x3F	; 63
    1ecc:	fc 01       	movw	r30, r24
    1ece:	60 81       	ld	r22, Z
    1ed0:	71 81       	ldd	r23, Z+1	; 0x01
    1ed2:	82 81       	ldd	r24, Z+2	; 0x02
    1ed4:	93 81       	ldd	r25, Z+3	; 0x03
    1ed6:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    1eda:	88 23       	and	r24, r24
    1edc:	4c f4       	brge	.+18     	; 0x1ef0 <main+0x15d8>
		__ticks = 1;
    1ede:	ce 01       	movw	r24, r28
    1ee0:	88 52       	subi	r24, 0x28	; 40
    1ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee4:	21 e0       	ldi	r18, 0x01	; 1
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	fc 01       	movw	r30, r24
    1eea:	31 83       	std	Z+1, r19	; 0x01
    1eec:	20 83       	st	Z, r18
    1eee:	69 c0       	rjmp	.+210    	; 0x1fc2 <main+0x16aa>
	else if (__tmp > 65535)
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	8c 52       	subi	r24, 0x2C	; 44
    1ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	3f ef       	ldi	r19, 0xFF	; 255
    1efa:	4f e7       	ldi	r20, 0x7F	; 127
    1efc:	57 e4       	ldi	r21, 0x47	; 71
    1efe:	fc 01       	movw	r30, r24
    1f00:	60 81       	ld	r22, Z
    1f02:	71 81       	ldd	r23, Z+1	; 0x01
    1f04:	82 81       	ldd	r24, Z+2	; 0x02
    1f06:	93 81       	ldd	r25, Z+3	; 0x03
    1f08:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
    1f0c:	18 16       	cp	r1, r24
    1f0e:	0c f0       	brlt	.+2      	; 0x1f12 <main+0x15fa>
    1f10:	46 c0       	rjmp	.+140    	; 0x1f9e <main+0x1686>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e2       	ldi	r20, 0x20	; 32
    1f18:	51 e4       	ldi	r21, 0x41	; 65
    1f1a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f1c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f1e:	88 a9       	ldd	r24, Y+48	; 0x30
    1f20:	99 a9       	ldd	r25, Y+49	; 0x31
    1f22:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	8e 01       	movw	r16, r28
    1f2c:	08 52       	subi	r16, 0x28	; 40
    1f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	f8 01       	movw	r30, r16
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	80 83       	st	Z, r24
    1f42:	24 c0       	rjmp	.+72     	; 0x1f8c <main+0x1674>
    1f44:	ce 01       	movw	r24, r28
    1f46:	86 52       	subi	r24, 0x26	; 38
    1f48:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4a:	29 e1       	ldi	r18, 0x19	; 25
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	fc 01       	movw	r30, r24
    1f50:	31 83       	std	Z+1, r19	; 0x01
    1f52:	20 83       	st	Z, r18
    1f54:	ce 01       	movw	r24, r28
    1f56:	86 52       	subi	r24, 0x26	; 38
    1f58:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <main+0x1648>
    1f64:	9e 01       	movw	r18, r28
    1f66:	26 52       	subi	r18, 0x26	; 38
    1f68:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6a:	f9 01       	movw	r30, r18
    1f6c:	91 83       	std	Z+1, r25	; 0x01
    1f6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f70:	ce 01       	movw	r24, r28
    1f72:	88 52       	subi	r24, 0x28	; 40
    1f74:	9f 4f       	sbci	r25, 0xFF	; 255
    1f76:	9e 01       	movw	r18, r28
    1f78:	28 52       	subi	r18, 0x28	; 40
    1f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7c:	f9 01       	movw	r30, r18
    1f7e:	20 81       	ld	r18, Z
    1f80:	31 81       	ldd	r19, Z+1	; 0x01
    1f82:	21 50       	subi	r18, 0x01	; 1
    1f84:	31 09       	sbc	r19, r1
    1f86:	fc 01       	movw	r30, r24
    1f88:	31 83       	std	Z+1, r19	; 0x01
    1f8a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	88 52       	subi	r24, 0x28	; 40
    1f90:	9f 4f       	sbci	r25, 0xFF	; 255
    1f92:	fc 01       	movw	r30, r24
    1f94:	80 81       	ld	r24, Z
    1f96:	91 81       	ldd	r25, Z+1	; 0x01
    1f98:	89 2b       	or	r24, r25
    1f9a:	a1 f6       	brne	.-88     	; 0x1f44 <main+0x162c>
    1f9c:	2c c0       	rjmp	.+88     	; 0x1ff6 <main+0x16de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9e:	8e 01       	movw	r16, r28
    1fa0:	08 52       	subi	r16, 0x28	; 40
    1fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	8c 52       	subi	r24, 0x2C	; 44
    1fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1faa:	fc 01       	movw	r30, r24
    1fac:	60 81       	ld	r22, Z
    1fae:	71 81       	ldd	r23, Z+1	; 0x01
    1fb0:	82 81       	ldd	r24, Z+2	; 0x02
    1fb2:	93 81       	ldd	r25, Z+3	; 0x03
    1fb4:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	80 83       	st	Z, r24
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	84 52       	subi	r24, 0x24	; 36
    1fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc8:	9e 01       	movw	r18, r28
    1fca:	28 52       	subi	r18, 0x28	; 40
    1fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fce:	f9 01       	movw	r30, r18
    1fd0:	20 81       	ld	r18, Z
    1fd2:	31 81       	ldd	r19, Z+1	; 0x01
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	31 83       	std	Z+1, r19	; 0x01
    1fd8:	20 83       	st	Z, r18
    1fda:	ce 01       	movw	r24, r28
    1fdc:	84 52       	subi	r24, 0x24	; 36
    1fde:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	80 81       	ld	r24, Z
    1fe4:	91 81       	ldd	r25, Z+1	; 0x01
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <main+0x16ce>
    1fea:	9e 01       	movw	r18, r28
    1fec:	24 52       	subi	r18, 0x24	; 36
    1fee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff0:	f9 01       	movw	r30, r18
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	80 83       	st	Z, r24
				_delay_ms(50);
			}
			if(key == 8)
    1ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff8:	88 30       	cpi	r24, 0x08	; 8
    1ffa:	09 f0       	breq	.+2      	; 0x1ffe <main+0x16e6>
    1ffc:	8b c1       	rjmp	.+790    	; 0x2314 <main+0x19fc>
    1ffe:	9e 01       	movw	r18, r28
    2000:	2e 5b       	subi	r18, 0xBE	; 190
    2002:	3f 4f       	sbci	r19, 0xFF	; 255
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a8 e4       	ldi	r26, 0x48	; 72
    200a:	b2 e4       	ldi	r27, 0x42	; 66
    200c:	f9 01       	movw	r30, r18
    200e:	80 83       	st	Z, r24
    2010:	91 83       	std	Z+1, r25	; 0x01
    2012:	a2 83       	std	Z+2, r26	; 0x02
    2014:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2016:	8e 01       	movw	r16, r28
    2018:	0e 50       	subi	r16, 0x0E	; 14
    201a:	1f 4f       	sbci	r17, 0xFF	; 255
    201c:	ce 01       	movw	r24, r28
    201e:	8e 5b       	subi	r24, 0xBE	; 190
    2020:	9f 4f       	sbci	r25, 0xFF	; 255
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	4a e7       	ldi	r20, 0x7A	; 122
    2028:	53 e4       	ldi	r21, 0x43	; 67
    202a:	fc 01       	movw	r30, r24
    202c:	60 81       	ld	r22, Z
    202e:	71 81       	ldd	r23, Z+1	; 0x01
    2030:	82 81       	ldd	r24, Z+2	; 0x02
    2032:	93 81       	ldd	r25, Z+3	; 0x03
    2034:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	f8 01       	movw	r30, r16
    203e:	80 83       	st	Z, r24
    2040:	91 83       	std	Z+1, r25	; 0x01
    2042:	a2 83       	std	Z+2, r26	; 0x02
    2044:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2046:	ce 01       	movw	r24, r28
    2048:	8e 50       	subi	r24, 0x0E	; 14
    204a:	9f 4f       	sbci	r25, 0xFF	; 255
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e8       	ldi	r20, 0x80	; 128
    2052:	5f e3       	ldi	r21, 0x3F	; 63
    2054:	fc 01       	movw	r30, r24
    2056:	60 81       	ld	r22, Z
    2058:	71 81       	ldd	r23, Z+1	; 0x01
    205a:	82 81       	ldd	r24, Z+2	; 0x02
    205c:	93 81       	ldd	r25, Z+3	; 0x03
    205e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    2062:	88 23       	and	r24, r24
    2064:	4c f4       	brge	.+18     	; 0x2078 <main+0x1760>
		__ticks = 1;
    2066:	ce 01       	movw	r24, r28
    2068:	8a 50       	subi	r24, 0x0A	; 10
    206a:	9f 4f       	sbci	r25, 0xFF	; 255
    206c:	21 e0       	ldi	r18, 0x01	; 1
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	fc 01       	movw	r30, r24
    2072:	31 83       	std	Z+1, r19	; 0x01
    2074:	20 83       	st	Z, r18
    2076:	6d c0       	rjmp	.+218    	; 0x2152 <main+0x183a>
	else if (__tmp > 65535)
    2078:	ce 01       	movw	r24, r28
    207a:	8e 50       	subi	r24, 0x0E	; 14
    207c:	9f 4f       	sbci	r25, 0xFF	; 255
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	fc 01       	movw	r30, r24
    2088:	60 81       	ld	r22, Z
    208a:	71 81       	ldd	r23, Z+1	; 0x01
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
    2094:	18 16       	cp	r1, r24
    2096:	0c f0       	brlt	.+2      	; 0x209a <main+0x1782>
    2098:	4a c0       	rjmp	.+148    	; 0x212e <main+0x1816>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209a:	ce 01       	movw	r24, r28
    209c:	8e 5b       	subi	r24, 0xBE	; 190
    209e:	9f 4f       	sbci	r25, 0xFF	; 255
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e2       	ldi	r20, 0x20	; 32
    20a6:	51 e4       	ldi	r21, 0x41	; 65
    20a8:	fc 01       	movw	r30, r24
    20aa:	60 81       	ld	r22, Z
    20ac:	71 81       	ldd	r23, Z+1	; 0x01
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	93 81       	ldd	r25, Z+3	; 0x03
    20b2:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	8e 01       	movw	r16, r28
    20bc:	0a 50       	subi	r16, 0x0A	; 10
    20be:	1f 4f       	sbci	r17, 0xFF	; 255
    20c0:	bc 01       	movw	r22, r24
    20c2:	cd 01       	movw	r24, r26
    20c4:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	f8 01       	movw	r30, r16
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	80 83       	st	Z, r24
    20d2:	24 c0       	rjmp	.+72     	; 0x211c <main+0x1804>
    20d4:	ce 01       	movw	r24, r28
    20d6:	88 50       	subi	r24, 0x08	; 8
    20d8:	9f 4f       	sbci	r25, 0xFF	; 255
    20da:	29 e1       	ldi	r18, 0x19	; 25
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	fc 01       	movw	r30, r24
    20e0:	31 83       	std	Z+1, r19	; 0x01
    20e2:	20 83       	st	Z, r18
    20e4:	ce 01       	movw	r24, r28
    20e6:	88 50       	subi	r24, 0x08	; 8
    20e8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ea:	fc 01       	movw	r30, r24
    20ec:	80 81       	ld	r24, Z
    20ee:	91 81       	ldd	r25, Z+1	; 0x01
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	f1 f7       	brne	.-4      	; 0x20f0 <main+0x17d8>
    20f4:	9e 01       	movw	r18, r28
    20f6:	28 50       	subi	r18, 0x08	; 8
    20f8:	3f 4f       	sbci	r19, 0xFF	; 255
    20fa:	f9 01       	movw	r30, r18
    20fc:	91 83       	std	Z+1, r25	; 0x01
    20fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	ce 01       	movw	r24, r28
    2102:	8a 50       	subi	r24, 0x0A	; 10
    2104:	9f 4f       	sbci	r25, 0xFF	; 255
    2106:	9e 01       	movw	r18, r28
    2108:	2a 50       	subi	r18, 0x0A	; 10
    210a:	3f 4f       	sbci	r19, 0xFF	; 255
    210c:	f9 01       	movw	r30, r18
    210e:	20 81       	ld	r18, Z
    2110:	31 81       	ldd	r19, Z+1	; 0x01
    2112:	21 50       	subi	r18, 0x01	; 1
    2114:	31 09       	sbc	r19, r1
    2116:	fc 01       	movw	r30, r24
    2118:	31 83       	std	Z+1, r19	; 0x01
    211a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211c:	ce 01       	movw	r24, r28
    211e:	8a 50       	subi	r24, 0x0A	; 10
    2120:	9f 4f       	sbci	r25, 0xFF	; 255
    2122:	fc 01       	movw	r30, r24
    2124:	80 81       	ld	r24, Z
    2126:	91 81       	ldd	r25, Z+1	; 0x01
    2128:	89 2b       	or	r24, r25
    212a:	a1 f6       	brne	.-88     	; 0x20d4 <main+0x17bc>
    212c:	2c c0       	rjmp	.+88     	; 0x2186 <main+0x186e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212e:	8e 01       	movw	r16, r28
    2130:	0a 50       	subi	r16, 0x0A	; 10
    2132:	1f 4f       	sbci	r17, 0xFF	; 255
    2134:	ce 01       	movw	r24, r28
    2136:	8e 50       	subi	r24, 0x0E	; 14
    2138:	9f 4f       	sbci	r25, 0xFF	; 255
    213a:	fc 01       	movw	r30, r24
    213c:	60 81       	ld	r22, Z
    213e:	71 81       	ldd	r23, Z+1	; 0x01
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	f8 01       	movw	r30, r16
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	80 83       	st	Z, r24
    2152:	ce 01       	movw	r24, r28
    2154:	86 50       	subi	r24, 0x06	; 6
    2156:	9f 4f       	sbci	r25, 0xFF	; 255
    2158:	9e 01       	movw	r18, r28
    215a:	2a 50       	subi	r18, 0x0A	; 10
    215c:	3f 4f       	sbci	r19, 0xFF	; 255
    215e:	f9 01       	movw	r30, r18
    2160:	20 81       	ld	r18, Z
    2162:	31 81       	ldd	r19, Z+1	; 0x01
    2164:	fc 01       	movw	r30, r24
    2166:	31 83       	std	Z+1, r19	; 0x01
    2168:	20 83       	st	Z, r18
    216a:	ce 01       	movw	r24, r28
    216c:	86 50       	subi	r24, 0x06	; 6
    216e:	9f 4f       	sbci	r25, 0xFF	; 255
    2170:	fc 01       	movw	r30, r24
    2172:	80 81       	ld	r24, Z
    2174:	91 81       	ldd	r25, Z+1	; 0x01
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <main+0x185e>
    217a:	9e 01       	movw	r18, r28
    217c:	26 50       	subi	r18, 0x06	; 6
    217e:	3f 4f       	sbci	r19, 0xFF	; 255
    2180:	f9 01       	movw	r30, r18
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    218c:	82 e0       	ldi	r24, 0x02	; 2
    218e:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    2198:	84 e0       	ldi	r24, 0x04	; 4
    219a:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(EIGHT);
    219e:	88 e0       	ldi	r24, 0x08	; 8
    21a0:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	a8 e4       	ldi	r26, 0x48	; 72
    21aa:	b2 e4       	ldi	r27, 0x42	; 66
    21ac:	8e ab       	std	Y+54, r24	; 0x36
    21ae:	9f ab       	std	Y+55, r25	; 0x37
    21b0:	a8 af       	std	Y+56, r26	; 0x38
    21b2:	b9 af       	std	Y+57, r27	; 0x39

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    21b4:	8e 01       	movw	r16, r28
    21b6:	08 51       	subi	r16, 0x18	; 24
    21b8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a e7       	ldi	r20, 0x7A	; 122
    21c0:	53 e4       	ldi	r21, 0x43	; 67
    21c2:	6e a9       	ldd	r22, Y+54	; 0x36
    21c4:	7f a9       	ldd	r23, Y+55	; 0x37
    21c6:	88 ad       	ldd	r24, Y+56	; 0x38
    21c8:	99 ad       	ldd	r25, Y+57	; 0x39
    21ca:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	f8 01       	movw	r30, r16
    21d4:	80 83       	st	Z, r24
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	a2 83       	std	Z+2, r26	; 0x02
    21da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21dc:	ce 01       	movw	r24, r28
    21de:	88 51       	subi	r24, 0x18	; 24
    21e0:	9f 4f       	sbci	r25, 0xFF	; 255
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e8       	ldi	r20, 0x80	; 128
    21e8:	5f e3       	ldi	r21, 0x3F	; 63
    21ea:	fc 01       	movw	r30, r24
    21ec:	60 81       	ld	r22, Z
    21ee:	71 81       	ldd	r23, Z+1	; 0x01
    21f0:	82 81       	ldd	r24, Z+2	; 0x02
    21f2:	93 81       	ldd	r25, Z+3	; 0x03
    21f4:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    21f8:	88 23       	and	r24, r24
    21fa:	4c f4       	brge	.+18     	; 0x220e <main+0x18f6>
		__ticks = 1;
    21fc:	ce 01       	movw	r24, r28
    21fe:	84 51       	subi	r24, 0x14	; 20
    2200:	9f 4f       	sbci	r25, 0xFF	; 255
    2202:	21 e0       	ldi	r18, 0x01	; 1
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	fc 01       	movw	r30, r24
    2208:	31 83       	std	Z+1, r19	; 0x01
    220a:	20 83       	st	Z, r18
    220c:	69 c0       	rjmp	.+210    	; 0x22e0 <main+0x19c8>
	else if (__tmp > 65535)
    220e:	ce 01       	movw	r24, r28
    2210:	88 51       	subi	r24, 0x18	; 24
    2212:	9f 4f       	sbci	r25, 0xFF	; 255
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	3f ef       	ldi	r19, 0xFF	; 255
    2218:	4f e7       	ldi	r20, 0x7F	; 127
    221a:	57 e4       	ldi	r21, 0x47	; 71
    221c:	fc 01       	movw	r30, r24
    221e:	60 81       	ld	r22, Z
    2220:	71 81       	ldd	r23, Z+1	; 0x01
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
    222a:	18 16       	cp	r1, r24
    222c:	0c f0       	brlt	.+2      	; 0x2230 <main+0x1918>
    222e:	46 c0       	rjmp	.+140    	; 0x22bc <main+0x19a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e2       	ldi	r20, 0x20	; 32
    2236:	51 e4       	ldi	r21, 0x41	; 65
    2238:	6e a9       	ldd	r22, Y+54	; 0x36
    223a:	7f a9       	ldd	r23, Y+55	; 0x37
    223c:	88 ad       	ldd	r24, Y+56	; 0x38
    223e:	99 ad       	ldd	r25, Y+57	; 0x39
    2240:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	8e 01       	movw	r16, r28
    224a:	04 51       	subi	r16, 0x14	; 20
    224c:	1f 4f       	sbci	r17, 0xFF	; 255
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	f8 01       	movw	r30, r16
    225c:	91 83       	std	Z+1, r25	; 0x01
    225e:	80 83       	st	Z, r24
    2260:	24 c0       	rjmp	.+72     	; 0x22aa <main+0x1992>
    2262:	ce 01       	movw	r24, r28
    2264:	82 51       	subi	r24, 0x12	; 18
    2266:	9f 4f       	sbci	r25, 0xFF	; 255
    2268:	29 e1       	ldi	r18, 0x19	; 25
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	fc 01       	movw	r30, r24
    226e:	31 83       	std	Z+1, r19	; 0x01
    2270:	20 83       	st	Z, r18
    2272:	ce 01       	movw	r24, r28
    2274:	82 51       	subi	r24, 0x12	; 18
    2276:	9f 4f       	sbci	r25, 0xFF	; 255
    2278:	fc 01       	movw	r30, r24
    227a:	80 81       	ld	r24, Z
    227c:	91 81       	ldd	r25, Z+1	; 0x01
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <main+0x1966>
    2282:	9e 01       	movw	r18, r28
    2284:	22 51       	subi	r18, 0x12	; 18
    2286:	3f 4f       	sbci	r19, 0xFF	; 255
    2288:	f9 01       	movw	r30, r18
    228a:	91 83       	std	Z+1, r25	; 0x01
    228c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228e:	ce 01       	movw	r24, r28
    2290:	84 51       	subi	r24, 0x14	; 20
    2292:	9f 4f       	sbci	r25, 0xFF	; 255
    2294:	9e 01       	movw	r18, r28
    2296:	24 51       	subi	r18, 0x14	; 20
    2298:	3f 4f       	sbci	r19, 0xFF	; 255
    229a:	f9 01       	movw	r30, r18
    229c:	20 81       	ld	r18, Z
    229e:	31 81       	ldd	r19, Z+1	; 0x01
    22a0:	21 50       	subi	r18, 0x01	; 1
    22a2:	31 09       	sbc	r19, r1
    22a4:	fc 01       	movw	r30, r24
    22a6:	31 83       	std	Z+1, r19	; 0x01
    22a8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22aa:	ce 01       	movw	r24, r28
    22ac:	84 51       	subi	r24, 0x14	; 20
    22ae:	9f 4f       	sbci	r25, 0xFF	; 255
    22b0:	fc 01       	movw	r30, r24
    22b2:	80 81       	ld	r24, Z
    22b4:	91 81       	ldd	r25, Z+1	; 0x01
    22b6:	89 2b       	or	r24, r25
    22b8:	a1 f6       	brne	.-88     	; 0x2262 <main+0x194a>
    22ba:	2c c0       	rjmp	.+88     	; 0x2314 <main+0x19fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22bc:	8e 01       	movw	r16, r28
    22be:	04 51       	subi	r16, 0x14	; 20
    22c0:	1f 4f       	sbci	r17, 0xFF	; 255
    22c2:	ce 01       	movw	r24, r28
    22c4:	88 51       	subi	r24, 0x18	; 24
    22c6:	9f 4f       	sbci	r25, 0xFF	; 255
    22c8:	fc 01       	movw	r30, r24
    22ca:	60 81       	ld	r22, Z
    22cc:	71 81       	ldd	r23, Z+1	; 0x01
    22ce:	82 81       	ldd	r24, Z+2	; 0x02
    22d0:	93 81       	ldd	r25, Z+3	; 0x03
    22d2:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	f8 01       	movw	r30, r16
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	80 83       	st	Z, r24
    22e0:	ce 01       	movw	r24, r28
    22e2:	80 51       	subi	r24, 0x10	; 16
    22e4:	9f 4f       	sbci	r25, 0xFF	; 255
    22e6:	9e 01       	movw	r18, r28
    22e8:	24 51       	subi	r18, 0x14	; 20
    22ea:	3f 4f       	sbci	r19, 0xFF	; 255
    22ec:	f9 01       	movw	r30, r18
    22ee:	20 81       	ld	r18, Z
    22f0:	31 81       	ldd	r19, Z+1	; 0x01
    22f2:	fc 01       	movw	r30, r24
    22f4:	31 83       	std	Z+1, r19	; 0x01
    22f6:	20 83       	st	Z, r18
    22f8:	ce 01       	movw	r24, r28
    22fa:	80 51       	subi	r24, 0x10	; 16
    22fc:	9f 4f       	sbci	r25, 0xFF	; 255
    22fe:	fc 01       	movw	r30, r24
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <main+0x19ec>
    2308:	9e 01       	movw	r18, r28
    230a:	20 51       	subi	r18, 0x10	; 16
    230c:	3f 4f       	sbci	r19, 0xFF	; 255
    230e:	f9 01       	movw	r30, r18
    2310:	91 83       	std	Z+1, r25	; 0x01
    2312:	80 83       	st	Z, r24
				_delay_ms(50);
			}
			if(key == 9)
    2314:	8d 81       	ldd	r24, Y+5	; 0x05
    2316:	89 30       	cpi	r24, 0x09	; 9
    2318:	09 f0       	breq	.+2      	; 0x231c <main+0x1a04>
    231a:	8e c1       	rjmp	.+796    	; 0x2638 <main+0x1d20>
    231c:	9e 01       	movw	r18, r28
    231e:	26 5b       	subi	r18, 0xB6	; 182
    2320:	3f 4f       	sbci	r19, 0xFF	; 255
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	a8 e4       	ldi	r26, 0x48	; 72
    2328:	b2 e4       	ldi	r27, 0x42	; 66
    232a:	f9 01       	movw	r30, r18
    232c:	80 83       	st	Z, r24
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	a2 83       	std	Z+2, r26	; 0x02
    2332:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2334:	8e 01       	movw	r16, r28
    2336:	0a 5f       	subi	r16, 0xFA	; 250
    2338:	1e 4f       	sbci	r17, 0xFE	; 254
    233a:	ce 01       	movw	r24, r28
    233c:	86 5b       	subi	r24, 0xB6	; 182
    233e:	9f 4f       	sbci	r25, 0xFF	; 255
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	4a e7       	ldi	r20, 0x7A	; 122
    2346:	53 e4       	ldi	r21, 0x43	; 67
    2348:	fc 01       	movw	r30, r24
    234a:	60 81       	ld	r22, Z
    234c:	71 81       	ldd	r23, Z+1	; 0x01
    234e:	82 81       	ldd	r24, Z+2	; 0x02
    2350:	93 81       	ldd	r25, Z+3	; 0x03
    2352:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	f8 01       	movw	r30, r16
    235c:	80 83       	st	Z, r24
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	a2 83       	std	Z+2, r26	; 0x02
    2362:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2364:	ce 01       	movw	r24, r28
    2366:	8a 5f       	subi	r24, 0xFA	; 250
    2368:	9e 4f       	sbci	r25, 0xFE	; 254
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e8       	ldi	r20, 0x80	; 128
    2370:	5f e3       	ldi	r21, 0x3F	; 63
    2372:	fc 01       	movw	r30, r24
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    2380:	88 23       	and	r24, r24
    2382:	4c f4       	brge	.+18     	; 0x2396 <main+0x1a7e>
		__ticks = 1;
    2384:	ce 01       	movw	r24, r28
    2386:	86 5f       	subi	r24, 0xF6	; 246
    2388:	9e 4f       	sbci	r25, 0xFE	; 254
    238a:	21 e0       	ldi	r18, 0x01	; 1
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	fc 01       	movw	r30, r24
    2390:	31 83       	std	Z+1, r19	; 0x01
    2392:	20 83       	st	Z, r18
    2394:	6d c0       	rjmp	.+218    	; 0x2470 <main+0x1b58>
	else if (__tmp > 65535)
    2396:	ce 01       	movw	r24, r28
    2398:	8a 5f       	subi	r24, 0xFA	; 250
    239a:	9e 4f       	sbci	r25, 0xFE	; 254
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	3f ef       	ldi	r19, 0xFF	; 255
    23a0:	4f e7       	ldi	r20, 0x7F	; 127
    23a2:	57 e4       	ldi	r21, 0x47	; 71
    23a4:	fc 01       	movw	r30, r24
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
    23b2:	18 16       	cp	r1, r24
    23b4:	0c f0       	brlt	.+2      	; 0x23b8 <main+0x1aa0>
    23b6:	4a c0       	rjmp	.+148    	; 0x244c <main+0x1b34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	ce 01       	movw	r24, r28
    23ba:	86 5b       	subi	r24, 0xB6	; 182
    23bc:	9f 4f       	sbci	r25, 0xFF	; 255
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	51 e4       	ldi	r21, 0x41	; 65
    23c6:	fc 01       	movw	r30, r24
    23c8:	60 81       	ld	r22, Z
    23ca:	71 81       	ldd	r23, Z+1	; 0x01
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	93 81       	ldd	r25, Z+3	; 0x03
    23d0:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	8e 01       	movw	r16, r28
    23da:	06 5f       	subi	r16, 0xF6	; 246
    23dc:	1e 4f       	sbci	r17, 0xFE	; 254
    23de:	bc 01       	movw	r22, r24
    23e0:	cd 01       	movw	r24, r26
    23e2:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	f8 01       	movw	r30, r16
    23ec:	91 83       	std	Z+1, r25	; 0x01
    23ee:	80 83       	st	Z, r24
    23f0:	24 c0       	rjmp	.+72     	; 0x243a <main+0x1b22>
    23f2:	ce 01       	movw	r24, r28
    23f4:	84 5f       	subi	r24, 0xF4	; 244
    23f6:	9e 4f       	sbci	r25, 0xFE	; 254
    23f8:	29 e1       	ldi	r18, 0x19	; 25
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	fc 01       	movw	r30, r24
    23fe:	31 83       	std	Z+1, r19	; 0x01
    2400:	20 83       	st	Z, r18
    2402:	ce 01       	movw	r24, r28
    2404:	84 5f       	subi	r24, 0xF4	; 244
    2406:	9e 4f       	sbci	r25, 0xFE	; 254
    2408:	fc 01       	movw	r30, r24
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <main+0x1af6>
    2412:	9e 01       	movw	r18, r28
    2414:	24 5f       	subi	r18, 0xF4	; 244
    2416:	3e 4f       	sbci	r19, 0xFE	; 254
    2418:	f9 01       	movw	r30, r18
    241a:	91 83       	std	Z+1, r25	; 0x01
    241c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241e:	ce 01       	movw	r24, r28
    2420:	86 5f       	subi	r24, 0xF6	; 246
    2422:	9e 4f       	sbci	r25, 0xFE	; 254
    2424:	9e 01       	movw	r18, r28
    2426:	26 5f       	subi	r18, 0xF6	; 246
    2428:	3e 4f       	sbci	r19, 0xFE	; 254
    242a:	f9 01       	movw	r30, r18
    242c:	20 81       	ld	r18, Z
    242e:	31 81       	ldd	r19, Z+1	; 0x01
    2430:	21 50       	subi	r18, 0x01	; 1
    2432:	31 09       	sbc	r19, r1
    2434:	fc 01       	movw	r30, r24
    2436:	31 83       	std	Z+1, r19	; 0x01
    2438:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243a:	ce 01       	movw	r24, r28
    243c:	86 5f       	subi	r24, 0xF6	; 246
    243e:	9e 4f       	sbci	r25, 0xFE	; 254
    2440:	fc 01       	movw	r30, r24
    2442:	80 81       	ld	r24, Z
    2444:	91 81       	ldd	r25, Z+1	; 0x01
    2446:	89 2b       	or	r24, r25
    2448:	a1 f6       	brne	.-88     	; 0x23f2 <main+0x1ada>
    244a:	2c c0       	rjmp	.+88     	; 0x24a4 <main+0x1b8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244c:	8e 01       	movw	r16, r28
    244e:	06 5f       	subi	r16, 0xF6	; 246
    2450:	1e 4f       	sbci	r17, 0xFE	; 254
    2452:	ce 01       	movw	r24, r28
    2454:	8a 5f       	subi	r24, 0xFA	; 250
    2456:	9e 4f       	sbci	r25, 0xFE	; 254
    2458:	fc 01       	movw	r30, r24
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	f8 01       	movw	r30, r16
    246c:	91 83       	std	Z+1, r25	; 0x01
    246e:	80 83       	st	Z, r24
    2470:	ce 01       	movw	r24, r28
    2472:	82 5f       	subi	r24, 0xF2	; 242
    2474:	9e 4f       	sbci	r25, 0xFE	; 254
    2476:	9e 01       	movw	r18, r28
    2478:	26 5f       	subi	r18, 0xF6	; 246
    247a:	3e 4f       	sbci	r19, 0xFE	; 254
    247c:	f9 01       	movw	r30, r18
    247e:	20 81       	ld	r18, Z
    2480:	31 81       	ldd	r19, Z+1	; 0x01
    2482:	fc 01       	movw	r30, r24
    2484:	31 83       	std	Z+1, r19	; 0x01
    2486:	20 83       	st	Z, r18
    2488:	ce 01       	movw	r24, r28
    248a:	82 5f       	subi	r24, 0xF2	; 242
    248c:	9e 4f       	sbci	r25, 0xFE	; 254
    248e:	fc 01       	movw	r30, r24
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <main+0x1b7c>
    2498:	9e 01       	movw	r18, r28
    249a:	22 5f       	subi	r18, 0xF2	; 242
    249c:	3e 4f       	sbci	r19, 0xFE	; 254
    249e:	f9 01       	movw	r30, r18
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
			{
				_delay_ms(50);
				BCDSevegments_enable(ONE);
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(TWO);
    24aa:	82 e0       	ldi	r24, 0x02	; 2
    24ac:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(THREE);
    24b0:	83 e0       	ldi	r24, 0x03	; 3
    24b2:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_enable(FOUR);
    24b6:	84 e0       	ldi	r24, 0x04	; 4
    24b8:	0e 94 6e 00 	call	0xdc	; 0xdc <BCDSevegments_enable>
				BCDSevegments_displayNo(NINE);
    24bc:	89 e0       	ldi	r24, 0x09	; 9
    24be:	0e 94 95 00 	call	0x12a	; 0x12a <BCDSevegments_displayNo>
    24c2:	9e 01       	movw	r18, r28
    24c4:	22 5c       	subi	r18, 0xC2	; 194
    24c6:	3f 4f       	sbci	r19, 0xFF	; 255
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a8 e4       	ldi	r26, 0x48	; 72
    24ce:	b2 e4       	ldi	r27, 0x42	; 66
    24d0:	f9 01       	movw	r30, r18
    24d2:	80 83       	st	Z, r24
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	a2 83       	std	Z+2, r26	; 0x02
    24d8:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    24da:	8e 01       	movw	r16, r28
    24dc:	04 50       	subi	r16, 0x04	; 4
    24de:	1f 4f       	sbci	r17, 0xFF	; 255
    24e0:	ce 01       	movw	r24, r28
    24e2:	ce 96       	adiw	r24, 0x3e	; 62
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	4a e7       	ldi	r20, 0x7A	; 122
    24ea:	53 e4       	ldi	r21, 0x43	; 67
    24ec:	fc 01       	movw	r30, r24
    24ee:	60 81       	ld	r22, Z
    24f0:	71 81       	ldd	r23, Z+1	; 0x01
    24f2:	82 81       	ldd	r24, Z+2	; 0x02
    24f4:	93 81       	ldd	r25, Z+3	; 0x03
    24f6:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	f8 01       	movw	r30, r16
    2500:	80 83       	st	Z, r24
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	a2 83       	std	Z+2, r26	; 0x02
    2506:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2508:	ce 01       	movw	r24, r28
    250a:	84 50       	subi	r24, 0x04	; 4
    250c:	9f 4f       	sbci	r25, 0xFF	; 255
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e8       	ldi	r20, 0x80	; 128
    2514:	5f e3       	ldi	r21, 0x3F	; 63
    2516:	fc 01       	movw	r30, r24
    2518:	60 81       	ld	r22, Z
    251a:	71 81       	ldd	r23, Z+1	; 0x01
    251c:	82 81       	ldd	r24, Z+2	; 0x02
    251e:	93 81       	ldd	r25, Z+3	; 0x03
    2520:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    2524:	88 23       	and	r24, r24
    2526:	44 f4       	brge	.+16     	; 0x2538 <main+0x1c20>
		__ticks = 1;
    2528:	ce 01       	movw	r24, r28
    252a:	93 95       	inc	r25
    252c:	21 e0       	ldi	r18, 0x01	; 1
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	fc 01       	movw	r30, r24
    2532:	31 83       	std	Z+1, r19	; 0x01
    2534:	20 83       	st	Z, r18
    2536:	67 c0       	rjmp	.+206    	; 0x2606 <main+0x1cee>
	else if (__tmp > 65535)
    2538:	ce 01       	movw	r24, r28
    253a:	84 50       	subi	r24, 0x04	; 4
    253c:	9f 4f       	sbci	r25, 0xFF	; 255
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	3f ef       	ldi	r19, 0xFF	; 255
    2542:	4f e7       	ldi	r20, 0x7F	; 127
    2544:	57 e4       	ldi	r21, 0x47	; 71
    2546:	fc 01       	movw	r30, r24
    2548:	60 81       	ld	r22, Z
    254a:	71 81       	ldd	r23, Z+1	; 0x01
    254c:	82 81       	ldd	r24, Z+2	; 0x02
    254e:	93 81       	ldd	r25, Z+3	; 0x03
    2550:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
    2554:	18 16       	cp	r1, r24
    2556:	0c f0       	brlt	.+2      	; 0x255a <main+0x1c42>
    2558:	45 c0       	rjmp	.+138    	; 0x25e4 <main+0x1ccc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255a:	ce 01       	movw	r24, r28
    255c:	ce 96       	adiw	r24, 0x3e	; 62
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e2       	ldi	r20, 0x20	; 32
    2564:	51 e4       	ldi	r21, 0x41	; 65
    2566:	fc 01       	movw	r30, r24
    2568:	60 81       	ld	r22, Z
    256a:	71 81       	ldd	r23, Z+1	; 0x01
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	93 81       	ldd	r25, Z+3	; 0x03
    2570:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	8e 01       	movw	r16, r28
    257a:	13 95       	inc	r17
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	f8 01       	movw	r30, r16
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	80 83       	st	Z, r24
    258e:	22 c0       	rjmp	.+68     	; 0x25d4 <main+0x1cbc>
    2590:	ce 01       	movw	r24, r28
    2592:	8e 5f       	subi	r24, 0xFE	; 254
    2594:	9e 4f       	sbci	r25, 0xFE	; 254
    2596:	29 e1       	ldi	r18, 0x19	; 25
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	fc 01       	movw	r30, r24
    259c:	31 83       	std	Z+1, r19	; 0x01
    259e:	20 83       	st	Z, r18
    25a0:	ce 01       	movw	r24, r28
    25a2:	8e 5f       	subi	r24, 0xFE	; 254
    25a4:	9e 4f       	sbci	r25, 0xFE	; 254
    25a6:	fc 01       	movw	r30, r24
    25a8:	80 81       	ld	r24, Z
    25aa:	91 81       	ldd	r25, Z+1	; 0x01
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <main+0x1c94>
    25b0:	9e 01       	movw	r18, r28
    25b2:	2e 5f       	subi	r18, 0xFE	; 254
    25b4:	3e 4f       	sbci	r19, 0xFE	; 254
    25b6:	f9 01       	movw	r30, r18
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25bc:	ce 01       	movw	r24, r28
    25be:	93 95       	inc	r25
    25c0:	9e 01       	movw	r18, r28
    25c2:	33 95       	inc	r19
    25c4:	f9 01       	movw	r30, r18
    25c6:	20 81       	ld	r18, Z
    25c8:	31 81       	ldd	r19, Z+1	; 0x01
    25ca:	21 50       	subi	r18, 0x01	; 1
    25cc:	31 09       	sbc	r19, r1
    25ce:	fc 01       	movw	r30, r24
    25d0:	31 83       	std	Z+1, r19	; 0x01
    25d2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d4:	ce 01       	movw	r24, r28
    25d6:	93 95       	inc	r25
    25d8:	fc 01       	movw	r30, r24
    25da:	80 81       	ld	r24, Z
    25dc:	91 81       	ldd	r25, Z+1	; 0x01
    25de:	89 2b       	or	r24, r25
    25e0:	b9 f6       	brne	.-82     	; 0x2590 <main+0x1c78>
    25e2:	2a c0       	rjmp	.+84     	; 0x2638 <main+0x1d20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e4:	8e 01       	movw	r16, r28
    25e6:	13 95       	inc	r17
    25e8:	ce 01       	movw	r24, r28
    25ea:	84 50       	subi	r24, 0x04	; 4
    25ec:	9f 4f       	sbci	r25, 0xFF	; 255
    25ee:	fc 01       	movw	r30, r24
    25f0:	60 81       	ld	r22, Z
    25f2:	71 81       	ldd	r23, Z+1	; 0x01
    25f4:	82 81       	ldd	r24, Z+2	; 0x02
    25f6:	93 81       	ldd	r25, Z+3	; 0x03
    25f8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	f8 01       	movw	r30, r16
    2602:	91 83       	std	Z+1, r25	; 0x01
    2604:	80 83       	st	Z, r24
    2606:	ce 01       	movw	r24, r28
    2608:	8c 5f       	subi	r24, 0xFC	; 252
    260a:	9e 4f       	sbci	r25, 0xFE	; 254
    260c:	9e 01       	movw	r18, r28
    260e:	33 95       	inc	r19
    2610:	f9 01       	movw	r30, r18
    2612:	20 81       	ld	r18, Z
    2614:	31 81       	ldd	r19, Z+1	; 0x01
    2616:	fc 01       	movw	r30, r24
    2618:	31 83       	std	Z+1, r19	; 0x01
    261a:	20 83       	st	Z, r18
    261c:	ce 01       	movw	r24, r28
    261e:	8c 5f       	subi	r24, 0xFC	; 252
    2620:	9e 4f       	sbci	r25, 0xFE	; 254
    2622:	fc 01       	movw	r30, r24
    2624:	80 81       	ld	r24, Z
    2626:	91 81       	ldd	r25, Z+1	; 0x01
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <main+0x1d10>
    262c:	9e 01       	movw	r18, r28
    262e:	2c 5f       	subi	r18, 0xFC	; 252
    2630:	3e 4f       	sbci	r19, 0xFE	; 254
    2632:	f9 01       	movw	r30, r18
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	80 83       	st	Z, r24
    2638:	9e 01       	movw	r18, r28
    263a:	2a 5b       	subi	r18, 0xBA	; 186
    263c:	3f 4f       	sbci	r19, 0xFF	; 255
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	aa e7       	ldi	r26, 0x7A	; 122
    2644:	b4 e4       	ldi	r27, 0x44	; 68
    2646:	f9 01       	movw	r30, r18
    2648:	80 83       	st	Z, r24
    264a:	91 83       	std	Z+1, r25	; 0x01
    264c:	a2 83       	std	Z+2, r26	; 0x02
    264e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2650:	8e 01       	movw	r16, r28
    2652:	00 5f       	subi	r16, 0xF0	; 240
    2654:	1e 4f       	sbci	r17, 0xFE	; 254
    2656:	ce 01       	movw	r24, r28
    2658:	8a 5b       	subi	r24, 0xBA	; 186
    265a:	9f 4f       	sbci	r25, 0xFF	; 255
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	4a e7       	ldi	r20, 0x7A	; 122
    2662:	53 e4       	ldi	r21, 0x43	; 67
    2664:	fc 01       	movw	r30, r24
    2666:	60 81       	ld	r22, Z
    2668:	71 81       	ldd	r23, Z+1	; 0x01
    266a:	82 81       	ldd	r24, Z+2	; 0x02
    266c:	93 81       	ldd	r25, Z+3	; 0x03
    266e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	f8 01       	movw	r30, r16
    2678:	80 83       	st	Z, r24
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	a2 83       	std	Z+2, r26	; 0x02
    267e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2680:	ce 01       	movw	r24, r28
    2682:	80 5f       	subi	r24, 0xF0	; 240
    2684:	9e 4f       	sbci	r25, 0xFE	; 254
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e8       	ldi	r20, 0x80	; 128
    268c:	5f e3       	ldi	r21, 0x3F	; 63
    268e:	fc 01       	movw	r30, r24
    2690:	60 81       	ld	r22, Z
    2692:	71 81       	ldd	r23, Z+1	; 0x01
    2694:	82 81       	ldd	r24, Z+2	; 0x02
    2696:	93 81       	ldd	r25, Z+3	; 0x03
    2698:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__cmpsf2>
    269c:	88 23       	and	r24, r24
    269e:	4c f4       	brge	.+18     	; 0x26b2 <main+0x1d9a>
		__ticks = 1;
    26a0:	ce 01       	movw	r24, r28
    26a2:	8c 5e       	subi	r24, 0xEC	; 236
    26a4:	9e 4f       	sbci	r25, 0xFE	; 254
    26a6:	21 e0       	ldi	r18, 0x01	; 1
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	fc 01       	movw	r30, r24
    26ac:	31 83       	std	Z+1, r19	; 0x01
    26ae:	20 83       	st	Z, r18
    26b0:	6d c0       	rjmp	.+218    	; 0x278c <main+0x1e74>
	else if (__tmp > 65535)
    26b2:	ce 01       	movw	r24, r28
    26b4:	80 5f       	subi	r24, 0xF0	; 240
    26b6:	9e 4f       	sbci	r25, 0xFE	; 254
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	3f ef       	ldi	r19, 0xFF	; 255
    26bc:	4f e7       	ldi	r20, 0x7F	; 127
    26be:	57 e4       	ldi	r21, 0x47	; 71
    26c0:	fc 01       	movw	r30, r24
    26c2:	60 81       	ld	r22, Z
    26c4:	71 81       	ldd	r23, Z+1	; 0x01
    26c6:	82 81       	ldd	r24, Z+2	; 0x02
    26c8:	93 81       	ldd	r25, Z+3	; 0x03
    26ca:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__gesf2>
    26ce:	18 16       	cp	r1, r24
    26d0:	0c f0       	brlt	.+2      	; 0x26d4 <main+0x1dbc>
    26d2:	4a c0       	rjmp	.+148    	; 0x2768 <main+0x1e50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d4:	ce 01       	movw	r24, r28
    26d6:	8a 5b       	subi	r24, 0xBA	; 186
    26d8:	9f 4f       	sbci	r25, 0xFF	; 255
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e2       	ldi	r20, 0x20	; 32
    26e0:	51 e4       	ldi	r21, 0x41	; 65
    26e2:	fc 01       	movw	r30, r24
    26e4:	60 81       	ld	r22, Z
    26e6:	71 81       	ldd	r23, Z+1	; 0x01
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	8e 01       	movw	r16, r28
    26f6:	0c 5e       	subi	r16, 0xEC	; 236
    26f8:	1e 4f       	sbci	r17, 0xFE	; 254
    26fa:	bc 01       	movw	r22, r24
    26fc:	cd 01       	movw	r24, r26
    26fe:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	f8 01       	movw	r30, r16
    2708:	91 83       	std	Z+1, r25	; 0x01
    270a:	80 83       	st	Z, r24
    270c:	24 c0       	rjmp	.+72     	; 0x2756 <main+0x1e3e>
    270e:	ce 01       	movw	r24, r28
    2710:	8a 5e       	subi	r24, 0xEA	; 234
    2712:	9e 4f       	sbci	r25, 0xFE	; 254
    2714:	29 e1       	ldi	r18, 0x19	; 25
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	fc 01       	movw	r30, r24
    271a:	31 83       	std	Z+1, r19	; 0x01
    271c:	20 83       	st	Z, r18
    271e:	ce 01       	movw	r24, r28
    2720:	8a 5e       	subi	r24, 0xEA	; 234
    2722:	9e 4f       	sbci	r25, 0xFE	; 254
    2724:	fc 01       	movw	r30, r24
    2726:	80 81       	ld	r24, Z
    2728:	91 81       	ldd	r25, Z+1	; 0x01
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <main+0x1e12>
    272e:	9e 01       	movw	r18, r28
    2730:	2a 5e       	subi	r18, 0xEA	; 234
    2732:	3e 4f       	sbci	r19, 0xFE	; 254
    2734:	f9 01       	movw	r30, r18
    2736:	91 83       	std	Z+1, r25	; 0x01
    2738:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273a:	ce 01       	movw	r24, r28
    273c:	8c 5e       	subi	r24, 0xEC	; 236
    273e:	9e 4f       	sbci	r25, 0xFE	; 254
    2740:	9e 01       	movw	r18, r28
    2742:	2c 5e       	subi	r18, 0xEC	; 236
    2744:	3e 4f       	sbci	r19, 0xFE	; 254
    2746:	f9 01       	movw	r30, r18
    2748:	20 81       	ld	r18, Z
    274a:	31 81       	ldd	r19, Z+1	; 0x01
    274c:	21 50       	subi	r18, 0x01	; 1
    274e:	31 09       	sbc	r19, r1
    2750:	fc 01       	movw	r30, r24
    2752:	31 83       	std	Z+1, r19	; 0x01
    2754:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2756:	ce 01       	movw	r24, r28
    2758:	8c 5e       	subi	r24, 0xEC	; 236
    275a:	9e 4f       	sbci	r25, 0xFE	; 254
    275c:	fc 01       	movw	r30, r24
    275e:	80 81       	ld	r24, Z
    2760:	91 81       	ldd	r25, Z+1	; 0x01
    2762:	89 2b       	or	r24, r25
    2764:	a1 f6       	brne	.-88     	; 0x270e <main+0x1df6>
    2766:	2c c0       	rjmp	.+88     	; 0x27c0 <main+0x1ea8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2768:	8e 01       	movw	r16, r28
    276a:	0c 5e       	subi	r16, 0xEC	; 236
    276c:	1e 4f       	sbci	r17, 0xFE	; 254
    276e:	ce 01       	movw	r24, r28
    2770:	80 5f       	subi	r24, 0xF0	; 240
    2772:	9e 4f       	sbci	r25, 0xFE	; 254
    2774:	fc 01       	movw	r30, r24
    2776:	60 81       	ld	r22, Z
    2778:	71 81       	ldd	r23, Z+1	; 0x01
    277a:	82 81       	ldd	r24, Z+2	; 0x02
    277c:	93 81       	ldd	r25, Z+3	; 0x03
    277e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	f8 01       	movw	r30, r16
    2788:	91 83       	std	Z+1, r25	; 0x01
    278a:	80 83       	st	Z, r24
    278c:	ce 01       	movw	r24, r28
    278e:	88 5e       	subi	r24, 0xE8	; 232
    2790:	9e 4f       	sbci	r25, 0xFE	; 254
    2792:	9e 01       	movw	r18, r28
    2794:	2c 5e       	subi	r18, 0xEC	; 236
    2796:	3e 4f       	sbci	r19, 0xFE	; 254
    2798:	f9 01       	movw	r30, r18
    279a:	20 81       	ld	r18, Z
    279c:	31 81       	ldd	r19, Z+1	; 0x01
    279e:	fc 01       	movw	r30, r24
    27a0:	31 83       	std	Z+1, r19	; 0x01
    27a2:	20 83       	st	Z, r18
    27a4:	ce 01       	movw	r24, r28
    27a6:	88 5e       	subi	r24, 0xE8	; 232
    27a8:	9e 4f       	sbci	r25, 0xFE	; 254
    27aa:	fc 01       	movw	r30, r24
    27ac:	80 81       	ld	r24, Z
    27ae:	91 81       	ldd	r25, Z+1	; 0x01
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <main+0x1e98>
    27b4:	9e 01       	movw	r18, r28
    27b6:	28 5e       	subi	r18, 0xE8	; 232
    27b8:	3e 4f       	sbci	r19, 0xFE	; 254
    27ba:	f9 01       	movw	r30, r18
    27bc:	91 83       	std	Z+1, r25	; 0x01
    27be:	80 83       	st	Z, r24
				_delay_ms(50);
			}
		_delay_ms(1000);
    }
    27c0:	0c 94 63 05 	jmp	0xac6	; 0xac6 <main+0x1ae>

000027c4 <__cmpsf2>:
    27c4:	0e 94 16 14 	call	0x282c	; 0x282c <__fp_cmp>
    27c8:	08 f4       	brcc	.+2      	; 0x27cc <__cmpsf2+0x8>
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	08 95       	ret

000027ce <__fixunssfsi>:
    27ce:	0e 94 42 14 	call	0x2884	; 0x2884 <__fp_splitA>
    27d2:	88 f0       	brcs	.+34     	; 0x27f6 <__fixunssfsi+0x28>
    27d4:	9f 57       	subi	r25, 0x7F	; 127
    27d6:	98 f0       	brcs	.+38     	; 0x27fe <__fixunssfsi+0x30>
    27d8:	b9 2f       	mov	r27, r25
    27da:	99 27       	eor	r25, r25
    27dc:	b7 51       	subi	r27, 0x17	; 23
    27de:	b0 f0       	brcs	.+44     	; 0x280c <__fixunssfsi+0x3e>
    27e0:	e1 f0       	breq	.+56     	; 0x281a <__fixunssfsi+0x4c>
    27e2:	66 0f       	add	r22, r22
    27e4:	77 1f       	adc	r23, r23
    27e6:	88 1f       	adc	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	1a f0       	brmi	.+6      	; 0x27f2 <__fixunssfsi+0x24>
    27ec:	ba 95       	dec	r27
    27ee:	c9 f7       	brne	.-14     	; 0x27e2 <__fixunssfsi+0x14>
    27f0:	14 c0       	rjmp	.+40     	; 0x281a <__fixunssfsi+0x4c>
    27f2:	b1 30       	cpi	r27, 0x01	; 1
    27f4:	91 f0       	breq	.+36     	; 0x281a <__fixunssfsi+0x4c>
    27f6:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__fp_zero>
    27fa:	b1 e0       	ldi	r27, 0x01	; 1
    27fc:	08 95       	ret
    27fe:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__fp_zero>
    2802:	67 2f       	mov	r22, r23
    2804:	78 2f       	mov	r23, r24
    2806:	88 27       	eor	r24, r24
    2808:	b8 5f       	subi	r27, 0xF8	; 248
    280a:	39 f0       	breq	.+14     	; 0x281a <__fixunssfsi+0x4c>
    280c:	b9 3f       	cpi	r27, 0xF9	; 249
    280e:	cc f3       	brlt	.-14     	; 0x2802 <__fixunssfsi+0x34>
    2810:	86 95       	lsr	r24
    2812:	77 95       	ror	r23
    2814:	67 95       	ror	r22
    2816:	b3 95       	inc	r27
    2818:	d9 f7       	brne	.-10     	; 0x2810 <__fixunssfsi+0x42>
    281a:	3e f4       	brtc	.+14     	; 0x282a <__fixunssfsi+0x5c>
    281c:	90 95       	com	r25
    281e:	80 95       	com	r24
    2820:	70 95       	com	r23
    2822:	61 95       	neg	r22
    2824:	7f 4f       	sbci	r23, 0xFF	; 255
    2826:	8f 4f       	sbci	r24, 0xFF	; 255
    2828:	9f 4f       	sbci	r25, 0xFF	; 255
    282a:	08 95       	ret

0000282c <__fp_cmp>:
    282c:	99 0f       	add	r25, r25
    282e:	00 08       	sbc	r0, r0
    2830:	55 0f       	add	r21, r21
    2832:	aa 0b       	sbc	r26, r26
    2834:	e0 e8       	ldi	r30, 0x80	; 128
    2836:	fe ef       	ldi	r31, 0xFE	; 254
    2838:	16 16       	cp	r1, r22
    283a:	17 06       	cpc	r1, r23
    283c:	e8 07       	cpc	r30, r24
    283e:	f9 07       	cpc	r31, r25
    2840:	c0 f0       	brcs	.+48     	; 0x2872 <__fp_cmp+0x46>
    2842:	12 16       	cp	r1, r18
    2844:	13 06       	cpc	r1, r19
    2846:	e4 07       	cpc	r30, r20
    2848:	f5 07       	cpc	r31, r21
    284a:	98 f0       	brcs	.+38     	; 0x2872 <__fp_cmp+0x46>
    284c:	62 1b       	sub	r22, r18
    284e:	73 0b       	sbc	r23, r19
    2850:	84 0b       	sbc	r24, r20
    2852:	95 0b       	sbc	r25, r21
    2854:	39 f4       	brne	.+14     	; 0x2864 <__fp_cmp+0x38>
    2856:	0a 26       	eor	r0, r26
    2858:	61 f0       	breq	.+24     	; 0x2872 <__fp_cmp+0x46>
    285a:	23 2b       	or	r18, r19
    285c:	24 2b       	or	r18, r20
    285e:	25 2b       	or	r18, r21
    2860:	21 f4       	brne	.+8      	; 0x286a <__fp_cmp+0x3e>
    2862:	08 95       	ret
    2864:	0a 26       	eor	r0, r26
    2866:	09 f4       	brne	.+2      	; 0x286a <__fp_cmp+0x3e>
    2868:	a1 40       	sbci	r26, 0x01	; 1
    286a:	a6 95       	lsr	r26
    286c:	8f ef       	ldi	r24, 0xFF	; 255
    286e:	81 1d       	adc	r24, r1
    2870:	81 1d       	adc	r24, r1
    2872:	08 95       	ret

00002874 <__fp_split3>:
    2874:	57 fd       	sbrc	r21, 7
    2876:	90 58       	subi	r25, 0x80	; 128
    2878:	44 0f       	add	r20, r20
    287a:	55 1f       	adc	r21, r21
    287c:	59 f0       	breq	.+22     	; 0x2894 <__fp_splitA+0x10>
    287e:	5f 3f       	cpi	r21, 0xFF	; 255
    2880:	71 f0       	breq	.+28     	; 0x289e <__fp_splitA+0x1a>
    2882:	47 95       	ror	r20

00002884 <__fp_splitA>:
    2884:	88 0f       	add	r24, r24
    2886:	97 fb       	bst	r25, 7
    2888:	99 1f       	adc	r25, r25
    288a:	61 f0       	breq	.+24     	; 0x28a4 <__fp_splitA+0x20>
    288c:	9f 3f       	cpi	r25, 0xFF	; 255
    288e:	79 f0       	breq	.+30     	; 0x28ae <__fp_splitA+0x2a>
    2890:	87 95       	ror	r24
    2892:	08 95       	ret
    2894:	12 16       	cp	r1, r18
    2896:	13 06       	cpc	r1, r19
    2898:	14 06       	cpc	r1, r20
    289a:	55 1f       	adc	r21, r21
    289c:	f2 cf       	rjmp	.-28     	; 0x2882 <__fp_split3+0xe>
    289e:	46 95       	lsr	r20
    28a0:	f1 df       	rcall	.-30     	; 0x2884 <__fp_splitA>
    28a2:	08 c0       	rjmp	.+16     	; 0x28b4 <__fp_splitA+0x30>
    28a4:	16 16       	cp	r1, r22
    28a6:	17 06       	cpc	r1, r23
    28a8:	18 06       	cpc	r1, r24
    28aa:	99 1f       	adc	r25, r25
    28ac:	f1 cf       	rjmp	.-30     	; 0x2890 <__fp_splitA+0xc>
    28ae:	86 95       	lsr	r24
    28b0:	71 05       	cpc	r23, r1
    28b2:	61 05       	cpc	r22, r1
    28b4:	08 94       	sec
    28b6:	08 95       	ret

000028b8 <__fp_zero>:
    28b8:	e8 94       	clt

000028ba <__fp_szero>:
    28ba:	bb 27       	eor	r27, r27
    28bc:	66 27       	eor	r22, r22
    28be:	77 27       	eor	r23, r23
    28c0:	cb 01       	movw	r24, r22
    28c2:	97 f9       	bld	r25, 7
    28c4:	08 95       	ret

000028c6 <__gesf2>:
    28c6:	0e 94 16 14 	call	0x282c	; 0x282c <__fp_cmp>
    28ca:	08 f4       	brcc	.+2      	; 0x28ce <__gesf2+0x8>
    28cc:	8f ef       	ldi	r24, 0xFF	; 255
    28ce:	08 95       	ret

000028d0 <__mulsf3>:
    28d0:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <__mulsf3x>
    28d4:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__fp_round>
    28d8:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fp_pscA>
    28dc:	38 f0       	brcs	.+14     	; 0x28ec <__mulsf3+0x1c>
    28de:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__fp_pscB>
    28e2:	20 f0       	brcs	.+8      	; 0x28ec <__mulsf3+0x1c>
    28e4:	95 23       	and	r25, r21
    28e6:	11 f0       	breq	.+4      	; 0x28ec <__mulsf3+0x1c>
    28e8:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__fp_inf>
    28ec:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__fp_nan>
    28f0:	11 24       	eor	r1, r1
    28f2:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__fp_szero>

000028f6 <__mulsf3x>:
    28f6:	0e 94 3a 14 	call	0x2874	; 0x2874 <__fp_split3>
    28fa:	70 f3       	brcs	.-36     	; 0x28d8 <__mulsf3+0x8>

000028fc <__mulsf3_pse>:
    28fc:	95 9f       	mul	r25, r21
    28fe:	c1 f3       	breq	.-16     	; 0x28f0 <__mulsf3+0x20>
    2900:	95 0f       	add	r25, r21
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	55 1f       	adc	r21, r21
    2906:	62 9f       	mul	r22, r18
    2908:	f0 01       	movw	r30, r0
    290a:	72 9f       	mul	r23, r18
    290c:	bb 27       	eor	r27, r27
    290e:	f0 0d       	add	r31, r0
    2910:	b1 1d       	adc	r27, r1
    2912:	63 9f       	mul	r22, r19
    2914:	aa 27       	eor	r26, r26
    2916:	f0 0d       	add	r31, r0
    2918:	b1 1d       	adc	r27, r1
    291a:	aa 1f       	adc	r26, r26
    291c:	64 9f       	mul	r22, r20
    291e:	66 27       	eor	r22, r22
    2920:	b0 0d       	add	r27, r0
    2922:	a1 1d       	adc	r26, r1
    2924:	66 1f       	adc	r22, r22
    2926:	82 9f       	mul	r24, r18
    2928:	22 27       	eor	r18, r18
    292a:	b0 0d       	add	r27, r0
    292c:	a1 1d       	adc	r26, r1
    292e:	62 1f       	adc	r22, r18
    2930:	73 9f       	mul	r23, r19
    2932:	b0 0d       	add	r27, r0
    2934:	a1 1d       	adc	r26, r1
    2936:	62 1f       	adc	r22, r18
    2938:	83 9f       	mul	r24, r19
    293a:	a0 0d       	add	r26, r0
    293c:	61 1d       	adc	r22, r1
    293e:	22 1f       	adc	r18, r18
    2940:	74 9f       	mul	r23, r20
    2942:	33 27       	eor	r19, r19
    2944:	a0 0d       	add	r26, r0
    2946:	61 1d       	adc	r22, r1
    2948:	23 1f       	adc	r18, r19
    294a:	84 9f       	mul	r24, r20
    294c:	60 0d       	add	r22, r0
    294e:	21 1d       	adc	r18, r1
    2950:	82 2f       	mov	r24, r18
    2952:	76 2f       	mov	r23, r22
    2954:	6a 2f       	mov	r22, r26
    2956:	11 24       	eor	r1, r1
    2958:	9f 57       	subi	r25, 0x7F	; 127
    295a:	50 40       	sbci	r21, 0x00	; 0
    295c:	9a f0       	brmi	.+38     	; 0x2984 <__mulsf3_pse+0x88>
    295e:	f1 f0       	breq	.+60     	; 0x299c <__mulsf3_pse+0xa0>
    2960:	88 23       	and	r24, r24
    2962:	4a f0       	brmi	.+18     	; 0x2976 <__mulsf3_pse+0x7a>
    2964:	ee 0f       	add	r30, r30
    2966:	ff 1f       	adc	r31, r31
    2968:	bb 1f       	adc	r27, r27
    296a:	66 1f       	adc	r22, r22
    296c:	77 1f       	adc	r23, r23
    296e:	88 1f       	adc	r24, r24
    2970:	91 50       	subi	r25, 0x01	; 1
    2972:	50 40       	sbci	r21, 0x00	; 0
    2974:	a9 f7       	brne	.-22     	; 0x2960 <__mulsf3_pse+0x64>
    2976:	9e 3f       	cpi	r25, 0xFE	; 254
    2978:	51 05       	cpc	r21, r1
    297a:	80 f0       	brcs	.+32     	; 0x299c <__mulsf3_pse+0xa0>
    297c:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__fp_inf>
    2980:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__fp_szero>
    2984:	5f 3f       	cpi	r21, 0xFF	; 255
    2986:	e4 f3       	brlt	.-8      	; 0x2980 <__mulsf3_pse+0x84>
    2988:	98 3e       	cpi	r25, 0xE8	; 232
    298a:	d4 f3       	brlt	.-12     	; 0x2980 <__mulsf3_pse+0x84>
    298c:	86 95       	lsr	r24
    298e:	77 95       	ror	r23
    2990:	67 95       	ror	r22
    2992:	b7 95       	ror	r27
    2994:	f7 95       	ror	r31
    2996:	e7 95       	ror	r30
    2998:	9f 5f       	subi	r25, 0xFF	; 255
    299a:	c1 f7       	brne	.-16     	; 0x298c <__mulsf3_pse+0x90>
    299c:	fe 2b       	or	r31, r30
    299e:	88 0f       	add	r24, r24
    29a0:	91 1d       	adc	r25, r1
    29a2:	96 95       	lsr	r25
    29a4:	87 95       	ror	r24
    29a6:	97 f9       	bld	r25, 7
    29a8:	08 95       	ret

000029aa <__fp_inf>:
    29aa:	97 f9       	bld	r25, 7
    29ac:	9f 67       	ori	r25, 0x7F	; 127
    29ae:	80 e8       	ldi	r24, 0x80	; 128
    29b0:	70 e0       	ldi	r23, 0x00	; 0
    29b2:	60 e0       	ldi	r22, 0x00	; 0
    29b4:	08 95       	ret

000029b6 <__fp_nan>:
    29b6:	9f ef       	ldi	r25, 0xFF	; 255
    29b8:	80 ec       	ldi	r24, 0xC0	; 192
    29ba:	08 95       	ret

000029bc <__fp_pscA>:
    29bc:	00 24       	eor	r0, r0
    29be:	0a 94       	dec	r0
    29c0:	16 16       	cp	r1, r22
    29c2:	17 06       	cpc	r1, r23
    29c4:	18 06       	cpc	r1, r24
    29c6:	09 06       	cpc	r0, r25
    29c8:	08 95       	ret

000029ca <__fp_pscB>:
    29ca:	00 24       	eor	r0, r0
    29cc:	0a 94       	dec	r0
    29ce:	12 16       	cp	r1, r18
    29d0:	13 06       	cpc	r1, r19
    29d2:	14 06       	cpc	r1, r20
    29d4:	05 06       	cpc	r0, r21
    29d6:	08 95       	ret

000029d8 <__fp_round>:
    29d8:	09 2e       	mov	r0, r25
    29da:	03 94       	inc	r0
    29dc:	00 0c       	add	r0, r0
    29de:	11 f4       	brne	.+4      	; 0x29e4 <__fp_round+0xc>
    29e0:	88 23       	and	r24, r24
    29e2:	52 f0       	brmi	.+20     	; 0x29f8 <__fp_round+0x20>
    29e4:	bb 0f       	add	r27, r27
    29e6:	40 f4       	brcc	.+16     	; 0x29f8 <__fp_round+0x20>
    29e8:	bf 2b       	or	r27, r31
    29ea:	11 f4       	brne	.+4      	; 0x29f0 <__fp_round+0x18>
    29ec:	60 ff       	sbrs	r22, 0
    29ee:	04 c0       	rjmp	.+8      	; 0x29f8 <__fp_round+0x20>
    29f0:	6f 5f       	subi	r22, 0xFF	; 255
    29f2:	7f 4f       	sbci	r23, 0xFF	; 255
    29f4:	8f 4f       	sbci	r24, 0xFF	; 255
    29f6:	9f 4f       	sbci	r25, 0xFF	; 255
    29f8:	08 95       	ret

000029fa <_exit>:
    29fa:	f8 94       	cli

000029fc <__stop_program>:
    29fc:	ff cf       	rjmp	.-2      	; 0x29fc <__stop_program>
