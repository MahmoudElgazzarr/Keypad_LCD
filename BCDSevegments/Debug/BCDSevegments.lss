
BCDSevegments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000636  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c1  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000624  00000000  00000000  00000eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005df  00000000  00000000  00001511  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00001af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025a  00000000  00000000  00001ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002253  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 82 02 	call	0x504	; 0x504 <main>
  74:	0c 94 df 02 	jmp	0x5be	; 0x5be <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <timer_init>:
/*Global Setting To Set Timer For 1 MSec on 16 MHZ Crystal*/
volatile uint16 counter = 0 ;
volatile uint8 Sec;

void timer_init(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<IBIT);
  84:	8f e5       	ldi	r24, 0x5F	; 95
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	2f e5       	ldi	r18, 0x5F	; 95
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	f9 01       	movw	r30, r18
  8e:	20 81       	ld	r18, Z
  90:	20 68       	ori	r18, 0x80	; 128
  92:	fc 01       	movw	r30, r24
  94:	20 83       	st	Z, r18
	TIMSK |=(1<<OCIE0);
  96:	89 e5       	ldi	r24, 0x59	; 89
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	29 e5       	ldi	r18, 0x59	; 89
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	f9 01       	movw	r30, r18
  a0:	20 81       	ld	r18, Z
  a2:	22 60       	ori	r18, 0x02	; 2
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
	TCNT0 = 0 ;
  a8:	82 e5       	ldi	r24, 0x52	; 82
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	fc 01       	movw	r30, r24
  ae:	10 82       	st	Z, r1
	OCR0 = 249 ;
  b0:	8c e5       	ldi	r24, 0x5C	; 92
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	29 ef       	ldi	r18, 0xF9	; 249
  b6:	fc 01       	movw	r30, r24
  b8:	20 83       	st	Z, r18
	/*Prescaler 64*/
	TCCR0 |= (1<<CS00)|(1<<CS01)|(1<<WGM01);
  ba:	83 e5       	ldi	r24, 0x53	; 83
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	23 e5       	ldi	r18, 0x53	; 83
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	20 81       	ld	r18, Z
  c6:	2b 60       	ori	r18, 0x0B	; 11
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
}
  cc:	00 00       	nop
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
	counter++ ;
  ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if (counter == 1000)
 100:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 104:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 108:	88 3e       	cpi	r24, 0xE8	; 232
 10a:	93 40       	sbci	r25, 0x03	; 3
 10c:	49 f4       	brne	.+18     	; 0x120 <__vector_10+0x4c>
	{
		Sec++ ;
 10e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Sec>
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Sec>
		counter = 0 ;
 118:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 11c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
	if(Sec == 253)
 120:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Sec>
 124:	8d 3f       	cpi	r24, 0xFD	; 253
 126:	11 f4       	brne	.+4      	; 0x12c <__vector_10+0x58>
	{
		Sec = 0;
 128:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Sec>
	}
 12c:	00 00       	nop
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <DIO_WritePin>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "BitwiseOperation.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	00 d0       	rcall	.+0      	; 0x14a <DIO_WritePin+0x6>
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNum >= 0 && PinNum < 8 )
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	88 30       	cpi	r24, 0x08	; 8
 156:	78 f5       	brcc	.+94     	; 0x1b6 <DIO_WritePin+0x72>
	{
			if(PinValue == 1)
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	a1 f4       	brne	.+40     	; 0x186 <DIO_WritePin+0x42>
			{
				Set_Bit( PORTA , PinNum);
 15e:	8b e3       	ldi	r24, 0x3B	; 59
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	2b e3       	ldi	r18, 0x3B	; 59
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	f9 01       	movw	r30, r18
 168:	20 81       	ld	r18, Z
 16a:	62 2f       	mov	r22, r18
 16c:	29 81       	ldd	r18, Y+1	; 0x01
 16e:	42 2f       	mov	r20, r18
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_WritePin+0x38>
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	4a 95       	dec	r20
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_WritePin+0x34>
 180:	26 2b       	or	r18, r22
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	88 23       	and	r24, r24
 18a:	a9 f4       	brne	.+42     	; 0x1b6 <DIO_WritePin+0x72>
			{
				Clear_Bit( PORTA , PinNum);
 18c:	8b e3       	ldi	r24, 0x3B	; 59
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	2b e3       	ldi	r18, 0x3B	; 59
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	f9 01       	movw	r30, r18
 196:	20 81       	ld	r18, Z
 198:	62 2f       	mov	r22, r18
 19a:	29 81       	ldd	r18, Y+1	; 0x01
 19c:	42 2f       	mov	r20, r18
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_WritePin+0x66>
 1a6:	22 0f       	add	r18, r18
 1a8:	33 1f       	adc	r19, r19
 1aa:	4a 95       	dec	r20
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_WritePin+0x62>
 1ae:	20 95       	com	r18
 1b0:	26 23       	and	r18, r22
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
			}
	}
	if(PinNum > 7 && PinNum < 16)
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	88 30       	cpi	r24, 0x08	; 8
 1ba:	c0 f1       	brcs	.+112    	; 0x22c <DIO_WritePin+0xe8>
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	80 31       	cpi	r24, 0x10	; 16
 1c0:	a8 f5       	brcc	.+106    	; 0x22c <DIO_WritePin+0xe8>
	{
		if(PinValue == 1)
 1c2:	8a 81       	ldd	r24, Y+2	; 0x02
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	b9 f4       	brne	.+46     	; 0x1f6 <DIO_WritePin+0xb2>
		{
			Set_Bit( PORTB , (PinNum-8));
 1c8:	88 e3       	ldi	r24, 0x38	; 56
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	28 e3       	ldi	r18, 0x38	; 56
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	f9 01       	movw	r30, r18
 1d2:	20 81       	ld	r18, Z
 1d4:	62 2f       	mov	r22, r18
 1d6:	29 81       	ldd	r18, Y+1	; 0x01
 1d8:	22 2f       	mov	r18, r18
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	a9 01       	movw	r20, r18
 1de:	48 50       	subi	r20, 0x08	; 8
 1e0:	51 09       	sbc	r21, r1
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_WritePin+0xa8>
 1e8:	22 0f       	add	r18, r18
 1ea:	33 1f       	adc	r19, r19
 1ec:	4a 95       	dec	r20
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_WritePin+0xa4>
 1f0:	26 2b       	or	r18, r22
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
 1f6:	8a 81       	ldd	r24, Y+2	; 0x02
 1f8:	88 23       	and	r24, r24
 1fa:	c1 f4       	brne	.+48     	; 0x22c <DIO_WritePin+0xe8>
		{
			Clear_Bit( PORTB , (PinNum-8));
 1fc:	88 e3       	ldi	r24, 0x38	; 56
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	28 e3       	ldi	r18, 0x38	; 56
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	f9 01       	movw	r30, r18
 206:	20 81       	ld	r18, Z
 208:	62 2f       	mov	r22, r18
 20a:	29 81       	ldd	r18, Y+1	; 0x01
 20c:	22 2f       	mov	r18, r18
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	a9 01       	movw	r20, r18
 212:	48 50       	subi	r20, 0x08	; 8
 214:	51 09       	sbc	r21, r1
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_WritePin+0xdc>
 21c:	22 0f       	add	r18, r18
 21e:	33 1f       	adc	r19, r19
 220:	4a 95       	dec	r20
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_WritePin+0xd8>
 224:	20 95       	com	r18
 226:	26 23       	and	r18, r22
 228:	fc 01       	movw	r30, r24
 22a:	20 83       	st	Z, r18
		}
	}
	if(PinNum > 15 && PinNum < 24)
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	80 31       	cpi	r24, 0x10	; 16
 230:	c0 f1       	brcs	.+112    	; 0x2a2 <DIO_WritePin+0x15e>
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	88 31       	cpi	r24, 0x18	; 24
 236:	a8 f5       	brcc	.+106    	; 0x2a2 <DIO_WritePin+0x15e>
	{
		if(PinValue == 1)
 238:	8a 81       	ldd	r24, Y+2	; 0x02
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	b9 f4       	brne	.+46     	; 0x26c <DIO_WritePin+0x128>
		{
			Set_Bit( PORTC , (PinNum-16));
 23e:	85 e3       	ldi	r24, 0x35	; 53
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	25 e3       	ldi	r18, 0x35	; 53
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	f9 01       	movw	r30, r18
 248:	20 81       	ld	r18, Z
 24a:	62 2f       	mov	r22, r18
 24c:	29 81       	ldd	r18, Y+1	; 0x01
 24e:	22 2f       	mov	r18, r18
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	a9 01       	movw	r20, r18
 254:	40 51       	subi	r20, 0x10	; 16
 256:	51 09       	sbc	r21, r1
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_WritePin+0x11e>
 25e:	22 0f       	add	r18, r18
 260:	33 1f       	adc	r19, r19
 262:	4a 95       	dec	r20
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_WritePin+0x11a>
 266:	26 2b       	or	r18, r22
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	88 23       	and	r24, r24
 270:	c1 f4       	brne	.+48     	; 0x2a2 <DIO_WritePin+0x15e>
		{
			Clear_Bit( PORTC , (PinNum-16));
 272:	85 e3       	ldi	r24, 0x35	; 53
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	25 e3       	ldi	r18, 0x35	; 53
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	f9 01       	movw	r30, r18
 27c:	20 81       	ld	r18, Z
 27e:	62 2f       	mov	r22, r18
 280:	29 81       	ldd	r18, Y+1	; 0x01
 282:	22 2f       	mov	r18, r18
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	a9 01       	movw	r20, r18
 288:	40 51       	subi	r20, 0x10	; 16
 28a:	51 09       	sbc	r21, r1
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_WritePin+0x152>
 292:	22 0f       	add	r18, r18
 294:	33 1f       	adc	r19, r19
 296:	4a 95       	dec	r20
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_WritePin+0x14e>
 29a:	20 95       	com	r18
 29c:	26 23       	and	r18, r22
 29e:	fc 01       	movw	r30, r24
 2a0:	20 83       	st	Z, r18
		}
	}
	
	if(PinNum > 24 && PinNum < 32)
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	89 31       	cpi	r24, 0x19	; 25
 2a6:	c0 f1       	brcs	.+112    	; 0x318 <DIO_WritePin+0x1d4>
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	80 32       	cpi	r24, 0x20	; 32
 2ac:	a8 f5       	brcc	.+106    	; 0x318 <DIO_WritePin+0x1d4>
	{
			if(PinValue == 1)
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	b9 f4       	brne	.+46     	; 0x2e2 <DIO_WritePin+0x19e>
			{
				Set_Bit( PORTD , (PinNum-24));
 2b4:	82 e3       	ldi	r24, 0x32	; 50
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	22 e3       	ldi	r18, 0x32	; 50
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	f9 01       	movw	r30, r18
 2be:	20 81       	ld	r18, Z
 2c0:	62 2f       	mov	r22, r18
 2c2:	29 81       	ldd	r18, Y+1	; 0x01
 2c4:	22 2f       	mov	r18, r18
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	a9 01       	movw	r20, r18
 2ca:	48 51       	subi	r20, 0x18	; 24
 2cc:	51 09       	sbc	r21, r1
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_WritePin+0x194>
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	4a 95       	dec	r20
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_WritePin+0x190>
 2dc:	26 2b       	or	r18, r22
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	88 23       	and	r24, r24
 2e6:	c1 f4       	brne	.+48     	; 0x318 <DIO_WritePin+0x1d4>
			{
				Clear_Bit( PORTD , (PinNum-24));
 2e8:	82 e3       	ldi	r24, 0x32	; 50
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	22 e3       	ldi	r18, 0x32	; 50
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	f9 01       	movw	r30, r18
 2f2:	20 81       	ld	r18, Z
 2f4:	62 2f       	mov	r22, r18
 2f6:	29 81       	ldd	r18, Y+1	; 0x01
 2f8:	22 2f       	mov	r18, r18
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	a9 01       	movw	r20, r18
 2fe:	48 51       	subi	r20, 0x18	; 24
 300:	51 09       	sbc	r21, r1
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_WritePin+0x1c8>
 308:	22 0f       	add	r18, r18
 30a:	33 1f       	adc	r19, r19
 30c:	4a 95       	dec	r20
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_WritePin+0x1c4>
 310:	20 95       	com	r18
 312:	26 23       	and	r18, r22
 314:	fc 01       	movw	r30, r24
 316:	20 83       	st	Z, r18
			}
	}
}
 318:	00 00       	nop
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <DIO_SetPinDirection>:
/*
pindirection = 1 output
pindirection = 0 input
*/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	00 d0       	rcall	.+0      	; 0x32a <DIO_SetPinDirection+0x6>
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	89 83       	std	Y+1, r24	; 0x01
 330:	6a 83       	std	Y+2, r22	; 0x02
		if(PinNum >= 0 && PinNum < 8 )
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	88 30       	cpi	r24, 0x08	; 8
 336:	78 f5       	brcc	.+94     	; 0x396 <DIO_SetPinDirection+0x72>
		{
			if(PinDirection== 1)
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	a1 f4       	brne	.+40     	; 0x366 <DIO_SetPinDirection+0x42>
			{
				Set_Bit( DDRA , PinNum);
 33e:	8a e3       	ldi	r24, 0x3A	; 58
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	2a e3       	ldi	r18, 0x3A	; 58
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	f9 01       	movw	r30, r18
 348:	20 81       	ld	r18, Z
 34a:	62 2f       	mov	r22, r18
 34c:	29 81       	ldd	r18, Y+1	; 0x01
 34e:	42 2f       	mov	r20, r18
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_SetPinDirection+0x38>
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	4a 95       	dec	r20
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_SetPinDirection+0x34>
 360:	26 2b       	or	r18, r22
 362:	fc 01       	movw	r30, r24
 364:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	88 23       	and	r24, r24
 36a:	a9 f4       	brne	.+42     	; 0x396 <DIO_SetPinDirection+0x72>
			{
				Clear_Bit( DDRA , PinNum);
 36c:	8a e3       	ldi	r24, 0x3A	; 58
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	2a e3       	ldi	r18, 0x3A	; 58
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	f9 01       	movw	r30, r18
 376:	20 81       	ld	r18, Z
 378:	62 2f       	mov	r22, r18
 37a:	29 81       	ldd	r18, Y+1	; 0x01
 37c:	42 2f       	mov	r20, r18
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_SetPinDirection+0x66>
 386:	22 0f       	add	r18, r18
 388:	33 1f       	adc	r19, r19
 38a:	4a 95       	dec	r20
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_SetPinDirection+0x62>
 38e:	20 95       	com	r18
 390:	26 23       	and	r18, r22
 392:	fc 01       	movw	r30, r24
 394:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 7 && PinNum < 16)
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	88 30       	cpi	r24, 0x08	; 8
 39a:	c0 f1       	brcs	.+112    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 39c:	89 81       	ldd	r24, Y+1	; 0x01
 39e:	80 31       	cpi	r24, 0x10	; 16
 3a0:	a8 f5       	brcc	.+106    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		{
			if(PinDirection== 1)
 3a2:	8a 81       	ldd	r24, Y+2	; 0x02
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	b9 f4       	brne	.+46     	; 0x3d6 <DIO_SetPinDirection+0xb2>
			{
				Set_Bit( DDRB , (PinNum-8));
 3a8:	87 e3       	ldi	r24, 0x37	; 55
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	27 e3       	ldi	r18, 0x37	; 55
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	f9 01       	movw	r30, r18
 3b2:	20 81       	ld	r18, Z
 3b4:	62 2f       	mov	r22, r18
 3b6:	29 81       	ldd	r18, Y+1	; 0x01
 3b8:	22 2f       	mov	r18, r18
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	a9 01       	movw	r20, r18
 3be:	48 50       	subi	r20, 0x08	; 8
 3c0:	51 09       	sbc	r21, r1
 3c2:	21 e0       	ldi	r18, 0x01	; 1
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_SetPinDirection+0xa8>
 3c8:	22 0f       	add	r18, r18
 3ca:	33 1f       	adc	r19, r19
 3cc:	4a 95       	dec	r20
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_SetPinDirection+0xa4>
 3d0:	26 2b       	or	r18, r22
 3d2:	fc 01       	movw	r30, r24
 3d4:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 3d6:	8a 81       	ldd	r24, Y+2	; 0x02
 3d8:	88 23       	and	r24, r24
 3da:	c1 f4       	brne	.+48     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			{
				Clear_Bit( DDRB , (PinNum-8));
 3dc:	87 e3       	ldi	r24, 0x37	; 55
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	27 e3       	ldi	r18, 0x37	; 55
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	f9 01       	movw	r30, r18
 3e6:	20 81       	ld	r18, Z
 3e8:	62 2f       	mov	r22, r18
 3ea:	29 81       	ldd	r18, Y+1	; 0x01
 3ec:	22 2f       	mov	r18, r18
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	a9 01       	movw	r20, r18
 3f2:	48 50       	subi	r20, 0x08	; 8
 3f4:	51 09       	sbc	r21, r1
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fc:	22 0f       	add	r18, r18
 3fe:	33 1f       	adc	r19, r19
 400:	4a 95       	dec	r20
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_SetPinDirection+0xd8>
 404:	20 95       	com	r18
 406:	26 23       	and	r18, r22
 408:	fc 01       	movw	r30, r24
 40a:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 15 && PinNum < 24)
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	80 31       	cpi	r24, 0x10	; 16
 410:	c0 f1       	brcs	.+112    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	88 31       	cpi	r24, 0x18	; 24
 416:	a8 f5       	brcc	.+106    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
		{
			if(PinDirection== 1)
 418:	8a 81       	ldd	r24, Y+2	; 0x02
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	b9 f4       	brne	.+46     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			{
				Set_Bit( DDRC , (PinNum-16));
 41e:	84 e3       	ldi	r24, 0x34	; 52
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	24 e3       	ldi	r18, 0x34	; 52
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	f9 01       	movw	r30, r18
 428:	20 81       	ld	r18, Z
 42a:	62 2f       	mov	r22, r18
 42c:	29 81       	ldd	r18, Y+1	; 0x01
 42e:	22 2f       	mov	r18, r18
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	a9 01       	movw	r20, r18
 434:	40 51       	subi	r20, 0x10	; 16
 436:	51 09       	sbc	r21, r1
 438:	21 e0       	ldi	r18, 0x01	; 1
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43e:	22 0f       	add	r18, r18
 440:	33 1f       	adc	r19, r19
 442:	4a 95       	dec	r20
 444:	e2 f7       	brpl	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 446:	26 2b       	or	r18, r22
 448:	fc 01       	movw	r30, r24
 44a:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 44c:	8a 81       	ldd	r24, Y+2	; 0x02
 44e:	88 23       	and	r24, r24
 450:	c1 f4       	brne	.+48     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			{
				Clear_Bit( DDRC , (PinNum-16));
 452:	84 e3       	ldi	r24, 0x34	; 52
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	24 e3       	ldi	r18, 0x34	; 52
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	f9 01       	movw	r30, r18
 45c:	20 81       	ld	r18, Z
 45e:	62 2f       	mov	r22, r18
 460:	29 81       	ldd	r18, Y+1	; 0x01
 462:	22 2f       	mov	r18, r18
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	a9 01       	movw	r20, r18
 468:	40 51       	subi	r20, 0x10	; 16
 46a:	51 09       	sbc	r21, r1
 46c:	21 e0       	ldi	r18, 0x01	; 1
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 472:	22 0f       	add	r18, r18
 474:	33 1f       	adc	r19, r19
 476:	4a 95       	dec	r20
 478:	e2 f7       	brpl	.-8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 47a:	20 95       	com	r18
 47c:	26 23       	and	r18, r22
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
			}
		}
		
		if(PinNum > 24 && PinNum < 32)
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	89 31       	cpi	r24, 0x19	; 25
 486:	c0 f1       	brcs	.+112    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	80 32       	cpi	r24, 0x20	; 32
 48c:	a8 f5       	brcc	.+106    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		{
			if(PinDirection== 1)
 48e:	8a 81       	ldd	r24, Y+2	; 0x02
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	b9 f4       	brne	.+46     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			{
				Set_Bit( DDRD , (PinNum-24));
 494:	81 e3       	ldi	r24, 0x31	; 49
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	21 e3       	ldi	r18, 0x31	; 49
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	f9 01       	movw	r30, r18
 49e:	20 81       	ld	r18, Z
 4a0:	62 2f       	mov	r22, r18
 4a2:	29 81       	ldd	r18, Y+1	; 0x01
 4a4:	22 2f       	mov	r18, r18
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	a9 01       	movw	r20, r18
 4aa:	48 51       	subi	r20, 0x18	; 24
 4ac:	51 09       	sbc	r21, r1
 4ae:	21 e0       	ldi	r18, 0x01	; 1
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b4:	22 0f       	add	r18, r18
 4b6:	33 1f       	adc	r19, r19
 4b8:	4a 95       	dec	r20
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4bc:	26 2b       	or	r18, r22
 4be:	fc 01       	movw	r30, r24
 4c0:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 4c2:	8a 81       	ldd	r24, Y+2	; 0x02
 4c4:	88 23       	and	r24, r24
 4c6:	c1 f4       	brne	.+48     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			{
				Clear_Bit( DDRD , (PinNum-24));
 4c8:	81 e3       	ldi	r24, 0x31	; 49
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	21 e3       	ldi	r18, 0x31	; 49
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	f9 01       	movw	r30, r18
 4d2:	20 81       	ld	r18, Z
 4d4:	62 2f       	mov	r22, r18
 4d6:	29 81       	ldd	r18, Y+1	; 0x01
 4d8:	22 2f       	mov	r18, r18
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	a9 01       	movw	r20, r18
 4de:	48 51       	subi	r20, 0x18	; 24
 4e0:	51 09       	sbc	r21, r1
 4e2:	21 e0       	ldi	r18, 0x01	; 1
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4e8:	22 0f       	add	r18, r18
 4ea:	33 1f       	adc	r19, r19
 4ec:	4a 95       	dec	r20
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4f0:	20 95       	com	r18
 4f2:	26 23       	and	r18, r22
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18
			}
		}
}
 4f8:	00 00       	nop
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <main>:
#define STOP 1
#define GET_READY 2


int main(void)
{
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	cd b7       	in	r28, 0x3d	; 61
 50a:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PIN13,OUTPUT);
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	8d e0       	ldi	r24, 0x0D	; 13
 510:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN14,OUTPUT);
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	8e e0       	ldi	r24, 0x0E	; 14
 518:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN15,OUTPUT);
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	8f e0       	ldi	r24, 0x0F	; 15
 520:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
	/*Set Pins To LOW*/
	DIO_WritePin(PIN13,LOW);
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	8d e0       	ldi	r24, 0x0D	; 13
 528:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_WritePin>
	DIO_WritePin(PIN14,LOW);
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	8e e0       	ldi	r24, 0x0E	; 14
 530:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_WritePin>
	DIO_WritePin(PIN15,LOW);
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	8f e0       	ldi	r24, 0x0F	; 15
 538:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_WritePin>
	timer_init();
 53c:	0e 94 3e 00 	call	0x7c	; 0x7c <timer_init>
	while (1)
	{
		switch (Sec%3)
 540:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <Sec>
 544:	8b ea       	ldi	r24, 0xAB	; 171
 546:	28 9f       	mul	r18, r24
 548:	81 2d       	mov	r24, r1
 54a:	11 24       	eor	r1, r1
 54c:	98 2f       	mov	r25, r24
 54e:	96 95       	lsr	r25
 550:	89 2f       	mov	r24, r25
 552:	88 0f       	add	r24, r24
 554:	89 0f       	add	r24, r25
 556:	92 2f       	mov	r25, r18
 558:	98 1b       	sub	r25, r24
 55a:	89 2f       	mov	r24, r25
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	81 30       	cpi	r24, 0x01	; 1
 560:	91 05       	cpc	r25, r1
 562:	91 f0       	breq	.+36     	; 0x588 <main+0x84>
 564:	82 30       	cpi	r24, 0x02	; 2
 566:	91 05       	cpc	r25, r1
 568:	e1 f0       	breq	.+56     	; 0x5a2 <main+0x9e>
 56a:	89 2b       	or	r24, r25
 56c:	39 f5       	brne	.+78     	; 0x5bc <main+0xb8>
		{
			case GO :
			   DIO_WritePin(PIN13,HIGH);
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	8d e0       	ldi	r24, 0x0D	; 13
 572:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_WritePin>
			   DIO_WritePin(PIN15,LOW);
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	8f e0       	ldi	r24, 0x0F	; 15
 57a:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_WritePin>
			   DIO_WritePin(PIN14,LOW);
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	8e e0       	ldi	r24, 0x0E	; 14
 582:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_WritePin>
			   break;
 586:	1a c0       	rjmp	.+52     	; 0x5bc <main+0xb8>
			case STOP :
			   DIO_WritePin(PIN13,LOW);
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	8d e0       	ldi	r24, 0x0D	; 13
 58c:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_WritePin>
			   DIO_WritePin(PIN15,HIGH);
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	8f e0       	ldi	r24, 0x0F	; 15
 594:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_WritePin>
			   DIO_WritePin(PIN14,LOW);
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	8e e0       	ldi	r24, 0x0E	; 14
 59c:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_WritePin>
			   break;
 5a0:	0d c0       	rjmp	.+26     	; 0x5bc <main+0xb8>
			case GET_READY :
			   DIO_WritePin(PIN13,LOW);
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	8d e0       	ldi	r24, 0x0D	; 13
 5a6:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_WritePin>
			   DIO_WritePin(PIN15,LOW);
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	8f e0       	ldi	r24, 0x0F	; 15
 5ae:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_WritePin>
			   DIO_WritePin(PIN14,HIGH);
 5b2:	61 e0       	ldi	r22, 0x01	; 1
 5b4:	8e e0       	ldi	r24, 0x0E	; 14
 5b6:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_WritePin>
			   break;
 5ba:	00 00       	nop
			
		}
		
	}
 5bc:	c1 cf       	rjmp	.-126    	; 0x540 <main+0x3c>

000005be <_exit>:
 5be:	f8 94       	cli

000005c0 <__stop_program>:
 5c0:	ff cf       	rjmp	.-2      	; 0x5c0 <__stop_program>
